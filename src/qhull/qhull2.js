(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":3,"./asn1/base":5,"./asn1/constants":9,"./asn1/decoders":11,"./asn1/encoders":14,"bn.js":16}],3:[function(require,module,exports){
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./decoders":11,"./encoders":14,"inherits":134}],4:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base/reporter":7,"inherits":134,"safer-buffer":164}],5:[function(require,module,exports){
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":4,"./node":6,"./reporter":7}],6:[function(require,module,exports){
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/buffer":4,"../base/reporter":7,"minimalistic-assert":138}],7:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":134}],8:[function(require,module,exports){
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],9:[function(require,module,exports){
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":8}],10:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../base/buffer":4,"../base/node":6,"../constants/der":8,"bn.js":16,"inherits":134}],11:[function(require,module,exports){
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":10,"./pem":12}],12:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":10,"inherits":134,"safer-buffer":164}],13:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../base/node":6,"../constants/der":8,"inherits":134,"safer-buffer":164}],14:[function(require,module,exports){
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":13,"inherits":134}],16:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],17:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],18:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this._strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    var z = 0;
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      var b;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        b = c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }

      r |= b;
      z |= b;
    }

    assert(!(z & 0xf0), 'Invalid character in ' + str);
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],19:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":20}],20:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],21:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":163}],22:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":21,"./ghash":26,"./incr32":27,"buffer-xor":64,"cipher-base":66,"inherits":134,"safe-buffer":163}],23:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":24,"./encrypter":25,"./modes/list.json":35}],24:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":103,"inherits":134,"safe-buffer":163}],25:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":103,"inherits":134,"safe-buffer":163}],26:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":163}],27:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],28:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":64}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":64,"safe-buffer":163}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":163}],31:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":163}],32:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":27,"buffer-xor":64,"safe-buffer":163}],33:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],34:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":28,"./cfb":29,"./cfb1":30,"./cfb8":31,"./ctr":32,"./ecb":33,"./list.json":35,"./ofb":36}],35:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],36:[function(require,module,exports){
(function (Buffer){(function (){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":65,"buffer-xor":64}],37:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":21,"cipher-base":66,"inherits":134,"safe-buffer":163}],38:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":23,"browserify-aes/modes":34,"browserify-des":39,"browserify-des/modes":40,"evp_bytestokey":103}],39:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":66,"des.js":74,"inherits":134,"safe-buffer":163}],40:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],41:[function(require,module,exports){
(function (Buffer){(function (){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":42,"buffer":65,"randombytes":160}],42:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],43:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":44}],44:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],45:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],46:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var stream = require('readable-stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":44,"./sign":47,"./verify":48,"create-hash":69,"inherits":134,"readable-stream":63,"safe-buffer":163}],47:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":45,"bn.js":18,"browserify-rsa":41,"create-hmac":71,"elliptic":85,"parse-asn1":144,"safe-buffer":163}],48:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":45,"bn.js":18,"elliptic":85,"parse-asn1":144,"safe-buffer":163}],49:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],50:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":52,"./_stream_writable":54,"_process":152,"inherits":134}],51:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":53,"inherits":134}],52:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":49,"./_stream_duplex":50,"./internal/streams/async_iterator":55,"./internal/streams/buffer_list":56,"./internal/streams/destroy":57,"./internal/streams/from":59,"./internal/streams/state":61,"./internal/streams/stream":62,"_process":152,"buffer":65,"events":102,"inherits":134,"string_decoder/":188,"util":20}],53:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":49,"./_stream_duplex":50,"inherits":134}],54:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":49,"./_stream_duplex":50,"./internal/streams/destroy":57,"./internal/streams/state":61,"./internal/streams/stream":62,"_process":152,"buffer":65,"inherits":134,"util-deprecate":189}],55:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":58,"_process":152}],56:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":65,"util":20}],57:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":152}],58:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":49}],59:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],60:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":49,"./end-of-stream":58}],61:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":49}],62:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":102}],63:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":50,"./lib/_stream_passthrough.js":51,"./lib/_stream_readable.js":52,"./lib/_stream_transform.js":53,"./lib/_stream_writable.js":54,"./lib/internal/streams/end-of-stream.js":58,"./lib/internal/streams/pipeline.js":60}],64:[function(require,module,exports){
(function (Buffer){(function (){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":65}],65:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":17,"buffer":65,"ieee754":133}],66:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":134,"safe-buffer":163,"stream":173,"string_decoder":188}],67:[function(require,module,exports){
(function (Buffer){(function (){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":68,"buffer":65,"elliptic":85}],68:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],69:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":66,"inherits":134,"md5.js":135,"ripemd160":162,"sha.js":166}],70:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":135}],71:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":72,"cipher-base":66,"create-hash/md5":70,"inherits":134,"ripemd160":162,"safe-buffer":163,"sha.js":166}],72:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":66,"inherits":134,"safe-buffer":163}],73:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":38,"browserify-sign":46,"browserify-sign/algos":43,"create-ecdh":67,"create-hash":69,"create-hmac":71,"diffie-hellman":80,"pbkdf2":146,"public-encrypt":153,"randombytes":160,"randomfill":161}],74:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":75,"./des/cipher":76,"./des/des":77,"./des/ede":78,"./des/utils":79}],75:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":134,"minimalistic-assert":138}],76:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":138}],77:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":76,"./utils":79,"inherits":134,"minimalistic-assert":138}],78:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":76,"./des":77,"inherits":134,"minimalistic-assert":138}],79:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],80:[function(require,module,exports){
(function (Buffer){(function (){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/dh":81,"./lib/generatePrime":82,"./lib/primes.json":83,"buffer":65}],81:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./generatePrime":82,"bn.js":84,"buffer":65,"miller-rabin":136,"randombytes":160}],82:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":84,"miller-rabin":136,"randombytes":160}],83:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],84:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],85:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":101,"./elliptic/curve":88,"./elliptic/curves":91,"./elliptic/ec":92,"./elliptic/eddsa":95,"./elliptic/utils":99,"brorand":19}],86:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":99,"bn.js":100}],87:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],88:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":86,"./edwards":87,"./mont":89,"./short":90}],89:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],90:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],91:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"./curve":88,"./precomputed/secp256k1":98,"./utils":99,"hash.js":120}],92:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":91,"../utils":99,"./key":93,"./signature":94,"bn.js":100,"brorand":19,"hmac-drbg":132}],93:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":99,"bn.js":100}],94:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":99,"bn.js":100}],95:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":91,"../utils":99,"./key":96,"./signature":97,"hash.js":120}],96:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":99}],97:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":99,"bn.js":100}],98:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],99:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":100,"minimalistic-assert":138,"minimalistic-crypto-utils":139}],100:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],101:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.5.3",
  "_id": "elliptic@6.5.3",
  "_inBundle": false,
  "_integrity": "sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==",
  "_location": "/browserify/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.5.3",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.5.3",
    "saveSpec": null,
    "fetchSpec": "^6.5.3"
  },
  "_requiredBy": [
    "/browserify/browserify-sign",
    "/browserify/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz",
  "_shasum": "cb59eb2efdaf73a0bd78ccd7015a62ad6e0f93d6",
  "_spec": "elliptic@^6.5.3",
  "_where": "C:\\Users\\erici\\AppData\\Roaming\\npm\\node_modules\\browserify\\node_modules\\browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.3"
}

},{}],102:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}

},{}],103:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":135,"safe-buffer":163}],104:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":134,"readable-stream":119,"safe-buffer":163}],105:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],106:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_readable":108,"./_stream_writable":110,"_process":152,"dup":50,"inherits":134}],107:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_stream_transform":109,"dup":51,"inherits":134}],108:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"./internal/streams/async_iterator":111,"./internal/streams/buffer_list":112,"./internal/streams/destroy":113,"./internal/streams/from":115,"./internal/streams/state":117,"./internal/streams/stream":118,"_process":152,"buffer":65,"dup":52,"events":102,"inherits":134,"string_decoder/":188,"util":20}],109:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"dup":53,"inherits":134}],110:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"./internal/streams/destroy":113,"./internal/streams/state":117,"./internal/streams/stream":118,"_process":152,"buffer":65,"dup":54,"inherits":134,"util-deprecate":189}],111:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./end-of-stream":114,"_process":152,"dup":55}],112:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"buffer":65,"dup":56,"util":20}],113:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"_process":152,"dup":57}],114:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../../errors":105,"dup":58}],115:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],116:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":105,"./end-of-stream":114,"dup":60}],117:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../../errors":105,"dup":61}],118:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"events":102}],119:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":106,"./lib/_stream_passthrough.js":107,"./lib/_stream_readable.js":108,"./lib/_stream_transform.js":109,"./lib/_stream_writable.js":110,"./lib/internal/streams/end-of-stream.js":114,"./lib/internal/streams/pipeline.js":116,"dup":63}],120:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":121,"./hash/hmac":122,"./hash/ripemd":123,"./hash/sha":124,"./hash/utils":131}],121:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":131,"minimalistic-assert":138}],122:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":131,"minimalistic-assert":138}],123:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":121,"./utils":131}],124:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":125,"./sha/224":126,"./sha/256":127,"./sha/384":128,"./sha/512":129}],125:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":121,"../utils":131,"./common":130}],126:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":131,"./256":127}],127:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":121,"../utils":131,"./common":130,"minimalistic-assert":138}],128:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":131,"./512":129}],129:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":121,"../utils":131,"minimalistic-assert":138}],130:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":131}],131:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":134,"minimalistic-assert":138}],132:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":120,"minimalistic-assert":138,"minimalistic-crypto-utils":139}],133:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],134:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],135:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":104,"inherits":134,"safe-buffer":163}],136:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":137,"brorand":19}],137:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],138:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],139:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],140:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],141:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":142,"asn1.js":2}],142:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":2}],143:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":23,"evp_bytestokey":103,"safe-buffer":163}],144:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":140,"./asn1":141,"./fixProc":143,"browserify-aes":23,"pbkdf2":146,"safe-buffer":163}],145:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":152}],146:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":147,"./lib/sync":150}],147:[function(require,module,exports){
(function (process,global){(function (){
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var toBuffer = require('./to-buffer')

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":148,"./precondition":149,"./sync":150,"./to-buffer":151,"_process":152,"safe-buffer":163}],148:[function(require,module,exports){
(function (process){(function (){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else if (process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

}).call(this)}).call(this,require('_process'))
},{"_process":152}],149:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],150:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var toBuffer = require('./to-buffer')

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":148,"./precondition":149,"./to-buffer":151,"create-hash/md5":70,"ripemd160":162,"safe-buffer":163,"sha.js":166}],151:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}

},{"safe-buffer":163}],152:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],153:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":156,"./publicEncrypt":157}],154:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":69,"safe-buffer":163}],155:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],156:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":154,"./withPublic":158,"./xor":159,"bn.js":155,"browserify-rsa":41,"create-hash":69,"parse-asn1":144,"safe-buffer":163}],157:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":154,"./withPublic":158,"./xor":159,"bn.js":155,"browserify-rsa":41,"create-hash":69,"parse-asn1":144,"randombytes":160,"safe-buffer":163}],158:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":155,"safe-buffer":163}],159:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],160:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":152,"safe-buffer":163}],161:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":152,"randombytes":160,"safe-buffer":163}],162:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":65,"hash-base":104,"inherits":134}],163:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":65}],164:[function(require,module,exports){
(function (process){(function (){
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

}).call(this)}).call(this,require('_process'))
},{"_process":152,"buffer":65}],165:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":163}],166:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":167,"./sha1":168,"./sha224":169,"./sha256":170,"./sha384":171,"./sha512":172}],167:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":165,"inherits":134,"safe-buffer":163}],168:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":165,"inherits":134,"safe-buffer":163}],169:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":165,"./sha256":170,"inherits":134,"safe-buffer":163}],170:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":165,"inherits":134,"safe-buffer":163}],171:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":165,"./sha512":172,"inherits":134,"safe-buffer":163}],172:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":165,"inherits":134,"safe-buffer":163}],173:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":102,"inherits":134,"readable-stream/lib/_stream_duplex.js":175,"readable-stream/lib/_stream_passthrough.js":176,"readable-stream/lib/_stream_readable.js":177,"readable-stream/lib/_stream_transform.js":178,"readable-stream/lib/_stream_writable.js":179,"readable-stream/lib/internal/streams/end-of-stream.js":183,"readable-stream/lib/internal/streams/pipeline.js":185}],174:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],175:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_readable":177,"./_stream_writable":179,"_process":152,"dup":50,"inherits":134}],176:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_stream_transform":178,"dup":51,"inherits":134}],177:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":174,"./_stream_duplex":175,"./internal/streams/async_iterator":180,"./internal/streams/buffer_list":181,"./internal/streams/destroy":182,"./internal/streams/from":184,"./internal/streams/state":186,"./internal/streams/stream":187,"_process":152,"buffer":65,"dup":52,"events":102,"inherits":134,"string_decoder/":188,"util":20}],178:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":174,"./_stream_duplex":175,"dup":53,"inherits":134}],179:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"../errors":174,"./_stream_duplex":175,"./internal/streams/destroy":182,"./internal/streams/state":186,"./internal/streams/stream":187,"_process":152,"buffer":65,"dup":54,"inherits":134,"util-deprecate":189}],180:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./end-of-stream":183,"_process":152,"dup":55}],181:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"buffer":65,"dup":56,"util":20}],182:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"_process":152,"dup":57}],183:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../../errors":174,"dup":58}],184:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],185:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":174,"./end-of-stream":183,"dup":60}],186:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../../errors":174,"dup":61}],187:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"events":102}],188:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":163}],189:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],190:[function(require,module,exports){
/**
 * Bit twiddling hacks for JavaScript.
 *
 * Author: Mikola Lysenko
 *
 * Ported from Stanford bit twiddling hack library:
 *    http://graphics.stanford.edu/~seander/bithacks.html
 */

"use strict"; "use restrict";

//Number of bits in an integer
var INT_BITS = 32;

//Constants
exports.INT_BITS  = INT_BITS;
exports.INT_MAX   =  0x7fffffff;
exports.INT_MIN   = -1<<(INT_BITS-1);

//Returns -1, 0, +1 depending on sign of x
exports.sign = function(v) {
  return (v > 0) - (v < 0);
}

//Computes absolute value of integer
exports.abs = function(v) {
  var mask = v >> (INT_BITS-1);
  return (v ^ mask) - mask;
}

//Computes minimum of integers x and y
exports.min = function(x, y) {
  return y ^ ((x ^ y) & -(x < y));
}

//Computes maximum of integers x and y
exports.max = function(x, y) {
  return x ^ ((x ^ y) & -(x < y));
}

//Checks if a number is a power of two
exports.isPow2 = function(v) {
  return !(v & (v-1)) && (!!v);
}

//Computes log base 2 of v
exports.log2 = function(v) {
  var r, shift;
  r =     (v > 0xFFFF) << 4; v >>>= r;
  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
  return r | (v >> 1);
}

//Computes log base 10 of v
exports.log10 = function(v) {
  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
}

//Counts number of bits
exports.popCount = function(v) {
  v = v - ((v >>> 1) & 0x55555555);
  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
}

//Counts number of trailing zeros
function countTrailingZeros(v) {
  var c = 32;
  v &= -v;
  if (v) c--;
  if (v & 0x0000FFFF) c -= 16;
  if (v & 0x00FF00FF) c -= 8;
  if (v & 0x0F0F0F0F) c -= 4;
  if (v & 0x33333333) c -= 2;
  if (v & 0x55555555) c -= 1;
  return c;
}
exports.countTrailingZeros = countTrailingZeros;

//Rounds to next power of 2
exports.nextPow2 = function(v) {
  v += v === 0;
  --v;
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v + 1;
}

//Rounds down to previous power of 2
exports.prevPow2 = function(v) {
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v - (v>>>1);
}

//Computes parity of word
exports.parity = function(v) {
  v ^= v >>> 16;
  v ^= v >>> 8;
  v ^= v >>> 4;
  v &= 0xf;
  return (0x6996 >>> v) & 1;
}

var REVERSE_TABLE = new Array(256);

(function(tab) {
  for(var i=0; i<256; ++i) {
    var v = i, r = i, s = 7;
    for (v >>>= 1; v; v >>>= 1) {
      r <<= 1;
      r |= v & 1;
      --s;
    }
    tab[i] = (r << s) & 0xff;
  }
})(REVERSE_TABLE);

//Reverse bits in a 32 bit word
exports.reverse = function(v) {
  return  (REVERSE_TABLE[ v         & 0xff] << 24) |
          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
           REVERSE_TABLE[(v >>> 24) & 0xff];
}

//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
exports.interleave2 = function(x, y) {
  x &= 0xFFFF;
  x = (x | (x << 8)) & 0x00FF00FF;
  x = (x | (x << 4)) & 0x0F0F0F0F;
  x = (x | (x << 2)) & 0x33333333;
  x = (x | (x << 1)) & 0x55555555;

  y &= 0xFFFF;
  y = (y | (y << 8)) & 0x00FF00FF;
  y = (y | (y << 4)) & 0x0F0F0F0F;
  y = (y | (y << 2)) & 0x33333333;
  y = (y | (y << 1)) & 0x55555555;

  return x | (y << 1);
}

//Extracts the nth interleaved component
exports.deinterleave2 = function(v, n) {
  v = (v >>> n) & 0x55555555;
  v = (v | (v >>> 1))  & 0x33333333;
  v = (v | (v >>> 2))  & 0x0F0F0F0F;
  v = (v | (v >>> 4))  & 0x00FF00FF;
  v = (v | (v >>> 16)) & 0x000FFFF;
  return (v << 16) >> 16;
}


//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
exports.interleave3 = function(x, y, z) {
  x &= 0x3FF;
  x  = (x | (x<<16)) & 4278190335;
  x  = (x | (x<<8))  & 251719695;
  x  = (x | (x<<4))  & 3272356035;
  x  = (x | (x<<2))  & 1227133513;

  y &= 0x3FF;
  y  = (y | (y<<16)) & 4278190335;
  y  = (y | (y<<8))  & 251719695;
  y  = (y | (y<<4))  & 3272356035;
  y  = (y | (y<<2))  & 1227133513;
  x |= (y << 1);
  
  z &= 0x3FF;
  z  = (z | (z<<16)) & 4278190335;
  z  = (z | (z<<8))  & 251719695;
  z  = (z | (z<<4))  & 3272356035;
  z  = (z | (z<<2))  & 1227133513;
  
  return x | (z << 2);
}

//Extracts nth interleaved component of a 3-tuple
exports.deinterleave3 = function(v, n) {
  v = (v >>> n)       & 1227133513;
  v = (v | (v>>>2))   & 3272356035;
  v = (v | (v>>>4))   & 251719695;
  v = (v | (v>>>8))   & 4278190335;
  v = (v | (v>>>16))  & 0x3FF;
  return (v<<22)>>22;
}

//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
exports.nextCombination = function(v) {
  var t = v | (v - 1);
  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
}


},{}],191:[function(require,module,exports){
(function (process,Buffer,__dirname){(function (){


// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg, wasmMemory) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}


  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(global, env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.time;
 var fimport$1 = env.clock;
 var fimport$2 = env.getTempRet0;
 var fimport$3 = env.invoke_viiii;
 var fimport$4 = env.emscripten_longjmp;
 var fimport$5 = env.setTempRet0;
 var fimport$6 = env.invoke_viii;
 var fimport$7 = env.invoke_vi;
 var fimport$8 = env.invoke_ii;
 var fimport$9 = env.invoke_v;
 var fimport$10 = env.invoke_vii;
 var fimport$11 = env.exit;
 var fimport$12 = env.fd_close;
 var fimport$13 = env.fd_read;
 var fimport$14 = env.fd_write;
 var fimport$15 = env.__localtime_r;
 var fimport$16 = env.emscripten_resize_heap;
 var fimport$17 = env.emscripten_memcpy_big;
 var fimport$18 = env.fd_seek;
 var global$0 = 5340480;
 var global$1 = 97600;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0, $25_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) >= (HEAP32[(0 + 86944 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 86944 | 0) >> 2] = (HEAP32[(0 + 86944 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[(0 + 87700 | 0) >> 2] = $505(HEAP32[(0 + 87700 | 0) >> 2] | 0 | 0, (HEAP32[(0 + 86944 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  }
  $25_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $27_1 = HEAP32[(0 + 87700 | 0) >> 2] | 0;
  $29_1 = HEAP32[(0 + 87696 | 0) >> 2] | 0;
  HEAP32[(0 + 87696 | 0) >> 2] = $29_1 + 1 | 0;
  HEAP32[($27_1 + ($29_1 << 2 | 0) | 0) >> 2] = $25_1;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $2($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $30_1 = 0, $40_1 = 0, $56_1 = 0, $59_1 = 0, $86_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  $64(HEAP32[(0 + 85876 | 0) >> 2] | 0 | 0, HEAP32[(0 + 85880 | 0) >> 2] | 0 | 0, HEAP32[(0 + 85872 | 0) >> 2] | 0 | 0, $7_1 | 0, $7_1 | 0);
  HEAP32[(0 + 90192 | 0) >> 2] = 1;
  $68(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, $7_1 | 0);
  $139();
  HEAP32[(0 + 87696 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$1 : while (1) {
   $30_1 = 0;
   label$2 : {
    if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $30_1 = (HEAP32[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($30_1 & 1 | 0)) {
     break label$3
    }
    $40_1 = 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $40_1;
    label$4 : {
     if (!((HEAP32[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($40_1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$5 : {
      label$6 : while (1) {
       $56_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($6_1 + 8 | 0) >> 2] = $56_1 + 4 | 0;
       $59_1 = HEAP32[$56_1 >> 2] | 0;
       HEAP32[($6_1 + 12 | 0) >> 2] = $59_1;
       if (!(($59_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $1((((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) >> 3 | 0 | 0) / (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
       continue label$6;
      };
     }
    }
    $1(-1 | 0);
    HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  $62(1 | 0);
  $159($6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0);
  HEAP32[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $86_1 = HEAP32[(0 + 87700 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $86_1 | 0;
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[(0 + 87700 | 0) >> 2] = $502(16384 | 0) | 0;
  HEAP32[(0 + 86944 | 0) >> 2] = 4096;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $4($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $11_1 = 0, $102_1 = 0, $105_1 = 0, $108_1 = 0, $111_1 = 0, $132_1 = 0, $311_1 = 0.0, $147_1 = 0, $152_1 = 0, $154_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  $11_1 = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + -2 | 0;
  label$1 : {
   label$2 : {
    switch ($11_1 | 0) {
    case 0:
     HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3];
     break label$1;
    case 1:
     HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 3];
     break label$1;
    case 2:
     HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 24 | 0) >> 3];
     break label$1;
    case 3:
     HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 32 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 32 | 0) >> 3];
     break label$1;
    case 4:
     HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 32 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 32 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 3];
     break label$1;
    case 5:
     HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 32 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 32 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 3];
     break label$1;
    case 6:
     HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 32 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 32 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 56 | 0) >> 3];
     break label$1;
    default:
     break label$2;
    };
   }
   HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 3];
   HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
   label$10 : {
    label$11 : while (1) {
     $102_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = $102_1 + -1 | 0;
     if (!$102_1) {
      break label$10
     }
     $105_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAP32[($5_1 + 44 | 0) >> 2] = $105_1 + 8 | 0;
     $311_1 = +HEAPF64[$105_1 >> 3];
     $108_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
     HEAP32[($5_1 + 48 | 0) >> 2] = $108_1 + 8 | 0;
     $111_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     HEAPF64[$111_1 >> 3] = +HEAPF64[$111_1 >> 3] + $311_1 * +HEAPF64[$108_1 >> 3];
     continue label$11;
    };
   }
  }
  HEAP32[(0 + 91016 | 0) >> 2] = (HEAP32[(0 + 91016 | 0) >> 2] | 0) + 1 | 0;
  label$12 : {
   label$13 : {
    if (HEAP32[(0 + 88140 | 0) >> 2] | 0) {
     break label$13
    }
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$13
    }
    break label$12;
   }
   label$14 : {
    if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
     break label$14
    }
    HEAPF64[($5_1 + 32 | 0) >> 3] = +($355() | 0 | 0);
    $132_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    HEAPF64[$132_1 >> 3] = +HEAPF64[$132_1 >> 3] + (2.0 * +HEAPF64[($5_1 + 32 | 0) >> 3] / 2147483646.0 - 1.0) * +HEAPF64[(0 + 88144 | 0) >> 3] * +HEAPF64[(0 + 89448 | 0) >> 3];
   }
   label$15 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$15
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8001 | 0, 1024 | 0, 0 | 0);
    $147_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAPF64[$5_1 >> 3] = +HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3];
    $396($147_1 | 0, 8002 | 0, 1039 | 0, $5_1 | 0);
    $152_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $154_1 = $267(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $154_1;
    $396($152_1 | 0, 8003 | 0, 1047 | 0, $5_1 + 16 | 0 | 0);
   }
  }
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $5($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $13_1 = 0, $19_1 = 0, $179_1 = 0, $186_1 = 0, $200_1 = 0, $203_1 = 0, $232_1 = 0, $382_1 = 0, $65_1 = 0, $67_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $80_1 = 0, $81_1 = 0, $88_1 = 0, $96_1 = 0, $98_1 = 0, $168_1 = 0, $170_1 = 0, $396_1 = 0.0, $387_1 = 0;
  $10_1 = global$0 - 192 | 0;
  global$0 = $10_1;
  $13_1 = 0;
  HEAP32[($10_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 172 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 168 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 164 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 160 | 0) >> 2] = $7_1;
  HEAPF64[($10_1 + 152 | 0) >> 3] = -8988465674311578540726371.0e283;
  HEAP32[($10_1 + 136 | 0) >> 2] = $13_1;
  HEAP32[($10_1 + 132 | 0) >> 2] = $13_1;
  HEAP32[($10_1 + 128 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
  $19_1 = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = $19_1;
  HEAP32[($10_1 + 124 | 0) >> 2] = $19_1;
  HEAP32[($10_1 + 120 | 0) >> 2] = $13_1;
  HEAP32[($10_1 + 116 | 0) >> 2] = 1;
  HEAP32[(0 + 91248 | 0) >> 2] = (HEAP32[(0 + 91248 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0) {
     break label$2
    }
    if (!(HEAP32[(0 + 88232 | 0) >> 2] | 0)) {
     break label$1
    }
    if (!((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    if (!((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) == ($267(HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   label$3 : {
    if (!((HEAP32[(0 + 88232 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[(0 + 88232 | 0) >> 2] | 0;
   }
   $65_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $67_1 = $267(HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0) | 0;
   $69_1 = HEAP32[((HEAP32[($10_1 + 184 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $70_1 = HEAP32[($10_1 + 176 | 0) >> 2] | 0;
   $71_1 = HEAP32[($10_1 + 180 | 0) >> 2] | 0;
   HEAPF64[($10_1 + 48 | 0) >> 3] = +HEAPF64[(0 + 87728 | 0) >> 3];
   HEAP32[($10_1 + 44 | 0) >> 2] = $71_1;
   HEAP32[($10_1 + 40 | 0) >> 2] = $70_1;
   HEAP32[($10_1 + 36 | 0) >> 2] = $69_1;
   HEAP32[($10_1 + 32 | 0) >> 2] = $67_1;
   $396($65_1 | 0, 8004 | 0, 1064 | 0, $10_1 + 32 | 0 | 0);
   $80_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $81_1 = HEAP32[($10_1 + 116 | 0) >> 2] | 0;
   HEAP32[($10_1 + 68 | 0) >> 2] = HEAP32[($10_1 + 172 | 0) >> 2] | 0;
   HEAP32[($10_1 + 64 | 0) >> 2] = $81_1;
   $396($80_1 | 0, 8005 | 0, 1147 | 0, $10_1 + 64 | 0 | 0);
   $88_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($10_1 + 80 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   $396($88_1 | 0, 8006 | 0, 1178 | 0, $10_1 + 80 | 0 | 0);
   $96_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $98_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
   HEAPF64[($10_1 + 104 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
   HEAP32[($10_1 + 96 | 0) >> 2] = $98_1;
   $396($96_1 | 0, 8007 | 0, 1201 | 0, $10_1 + 96 | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[(HEAP32[($10_1 + 164 | 0) >> 2] | 0) >> 2] = 1;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (((HEAP32[((HEAP32[($10_1 + 184 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
      break label$7
     }
     HEAP32[(HEAP32[($10_1 + 160 | 0) >> 2] | 0) >> 2] = 1;
     $4(HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 168 | 0) >> 2] | 0 | 0);
     label$8 : {
      if (HEAP32[($10_1 + 180 | 0) >> 2] | 0) {
       break label$8
      }
      if (!(+HEAPF64[(HEAP32[($10_1 + 168 | 0) >> 2] | 0) >> 3] >= +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      label$9 : {
       if (!(((HEAP32[((HEAP32[($10_1 + 184 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
        break label$9
       }
       if (HEAP32[($10_1 + 172 | 0) >> 2] | 0) {
        break label$8
       }
      }
      HEAP32[($10_1 + 136 | 0) >> 2] = HEAP32[($10_1 + 184 | 0) >> 2] | 0;
      break label$5;
     }
     HEAPF64[($10_1 + 152 | 0) >> 3] = +HEAPF64[(HEAP32[($10_1 + 168 | 0) >> 2] | 0) >> 3];
     label$10 : {
      if (((HEAP32[((HEAP32[($10_1 + 184 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0) {
       break label$10
      }
      HEAP32[($10_1 + 136 | 0) >> 2] = HEAP32[($10_1 + 184 | 0) >> 2] | 0;
     }
     break label$6;
    }
    HEAP32[(HEAP32[($10_1 + 160 | 0) >> 2] | 0) >> 2] = 0;
   }
   HEAP32[((HEAP32[($10_1 + 184 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($10_1 + 124 | 0) >> 2] | 0;
   HEAP32[($10_1 + 148 | 0) >> 2] = HEAP32[($10_1 + 184 | 0) >> 2] | 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($10_1 + 148 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     label$13 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
       break label$13
      }
      $168_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $170_1 = HEAP32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $396_1 = +HEAPF64[($10_1 + 152 | 0) >> 3];
      label$14 : {
       label$15 : {
        if (!((HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$15
        }
        $179_1 = HEAP32[((HEAP32[($10_1 + 136 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$14;
       }
       $179_1 = -1;
      }
      HEAP32[($10_1 + 16 | 0) >> 2] = $179_1;
      HEAPF64[($10_1 + 8 | 0) >> 3] = $396_1;
      HEAP32[$10_1 >> 2] = $170_1;
      $396($168_1 | 0, 4001 | 0, 1237 | 0, $10_1 | 0);
     }
     $186_1 = 0;
     HEAP32[($10_1 + 132 | 0) >> 2] = HEAP32[($10_1 + 148 | 0) >> 2] | 0;
     HEAP32[($10_1 + 144 | 0) >> 2] = $186_1;
     label$16 : {
      if (!((HEAP32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($186_1 | 0) & 1 | 0)) {
       break label$16
      }
      HEAP32[($10_1 + 140 | 0) >> 2] = (HEAP32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      label$17 : {
       label$18 : while (1) {
        $200_1 = HEAP32[($10_1 + 140 | 0) >> 2] | 0;
        HEAP32[($10_1 + 140 | 0) >> 2] = $200_1 + 4 | 0;
        $203_1 = HEAP32[$200_1 >> 2] | 0;
        HEAP32[($10_1 + 144 | 0) >> 2] = $203_1;
        if (!(($203_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$17
        }
        label$19 : {
         if (((HEAP32[((HEAP32[($10_1 + 144 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
          break label$19
         }
         if (!(HEAP32[($10_1 + 176 | 0) >> 2] | 0)) {
          break label$19
         }
         continue label$18;
        }
        label$20 : {
         if (!((HEAP32[((HEAP32[($10_1 + 144 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$20
         }
         continue label$18;
        }
        HEAP32[((HEAP32[($10_1 + 144 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($10_1 + 124 | 0) >> 2] | 0;
        label$21 : {
         if (((HEAP32[((HEAP32[($10_1 + 144 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
          break label$21
         }
         $232_1 = HEAP32[($10_1 + 160 | 0) >> 2] | 0;
         HEAP32[$232_1 >> 2] = (HEAP32[$232_1 >> 2] | 0) + 1 | 0;
         $4(HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 168 | 0) >> 2] | 0 | 0);
         label$22 : {
          if (!(+HEAPF64[(HEAP32[($10_1 + 168 | 0) >> 2] | 0) >> 3] > +HEAPF64[($10_1 + 152 | 0) >> 3] & 1 | 0)) {
           break label$22
          }
          label$23 : {
           if (HEAP32[($10_1 + 180 | 0) >> 2] | 0) {
            break label$23
           }
           if (!(+HEAPF64[(HEAP32[($10_1 + 168 | 0) >> 2] | 0) >> 3] >= +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
            break label$23
           }
           label$24 : {
            if (!(((HEAP32[((HEAP32[($10_1 + 144 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
             break label$24
            }
            if (HEAP32[($10_1 + 172 | 0) >> 2] | 0) {
             break label$23
            }
           }
           HEAP32[($10_1 + 136 | 0) >> 2] = HEAP32[($10_1 + 144 | 0) >> 2] | 0;
           break label$5;
          }
          label$25 : {
           if (((HEAP32[((HEAP32[($10_1 + 144 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0) {
            break label$25
           }
           HEAP32[($10_1 + 136 | 0) >> 2] = HEAP32[($10_1 + 144 | 0) >> 2] | 0;
           HEAPF64[($10_1 + 152 | 0) >> 3] = +HEAPF64[(HEAP32[($10_1 + 168 | 0) >> 2] | 0) >> 3];
           break label$17;
          }
          label$26 : {
           if ((HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
            break label$26
           }
           HEAPF64[($10_1 + 152 | 0) >> 3] = +HEAPF64[(HEAP32[($10_1 + 168 | 0) >> 2] | 0) >> 3];
           break label$17;
          }
         }
        }
        continue label$18;
       };
      }
     }
     HEAP32[($10_1 + 148 | 0) >> 2] = HEAP32[($10_1 + 144 | 0) >> 2] | 0;
     continue label$12;
    };
   }
   label$27 : {
    if (!(HEAP32[($10_1 + 176 | 0) >> 2] | 0)) {
     break label$27
    }
    label$28 : {
     label$29 : {
      if ((HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$29
      }
      HEAPF64[($10_1 + 152 | 0) >> 3] = -8988465674311578540726371.0e283;
      HEAP32[($10_1 + 136 | 0) >> 2] = $6(HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, $10_1 + 152 | 0 | 0, HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0, $10_1 + 120 | 0 | 0) | 0;
      HEAP32[($10_1 + 116 | 0) >> 2] = 0;
      break label$28;
     }
     label$30 : {
      if (HEAP32[(0 + 90188 | 0) >> 2] | 0) {
       break label$30
      }
      if (!(+HEAPF64[($10_1 + 152 | 0) >> 3] < -+HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
       break label$30
      }
      label$31 : {
       label$32 : {
        if (!($57() | 0)) {
         break label$32
        }
        HEAP32[(0 + 91352 | 0) >> 2] = (HEAP32[(0 + 91352 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($10_1 + 136 | 0) >> 2] = $6(HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0, $10_1 + 152 | 0 | 0, HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0, $10_1 + 120 | 0 | 0) | 0;
        HEAP32[($10_1 + 116 | 0) >> 2] = 0;
        HEAP32[(0 + 90184 | 0) >> 2] = 1;
        break label$31;
       }
       HEAP32[(0 + 90188 | 0) >> 2] = 1;
      }
     }
    }
   }
   label$33 : {
    if ((HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$33
    }
    HEAP32[($10_1 + 136 | 0) >> 2] = $292(HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0, $10_1 + 152 | 0 | 0, HEAP32[($10_1 + 160 | 0) >> 2] | 0 | 0) | 0;
   }
   label$34 : {
    if (!(HEAP32[($10_1 + 116 | 0) >> 2] | 0)) {
     break label$34
    }
    HEAP32[($10_1 + 136 | 0) >> 2] = $7(0 | 0, HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 172 | 0) >> 2] | 0 | 0, $10_1 + 152 | 0 | 0, $10_1 + 120 | 0 | 0) | 0;
   }
   HEAPF64[(HEAP32[($10_1 + 168 | 0) >> 2] | 0) >> 3] = +HEAPF64[($10_1 + 152 | 0) >> 3];
   label$35 : {
    if (!((HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$35
    }
    if (!(+HEAPF64[($10_1 + 152 | 0) >> 3] < +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
     break label$35
    }
    HEAP32[(HEAP32[($10_1 + 164 | 0) >> 2] | 0) >> 2] = 0;
   }
  }
  HEAP32[(0 + 91264 | 0) >> 2] = (HEAP32[(0 + 91264 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($10_1 + 160 | 0) >> 2] | 0) >> 2] | 0) | 0;
  label$36 : {
   if (!((HEAP32[(0 + 91256 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($10_1 + 160 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$36
   }
   HEAP32[(0 + 91256 | 0) >> 2] = HEAP32[(HEAP32[($10_1 + 160 | 0) >> 2] | 0) >> 2] | 0;
  }
  $382_1 = HEAP32[($10_1 + 160 | 0) >> 2] | 0;
  HEAP32[$382_1 >> 2] = (HEAP32[$382_1 >> 2] | 0) + (HEAP32[($10_1 + 120 | 0) >> 2] | 0) | 0;
  HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[($10_1 + 128 | 0) >> 2] | 0;
  $387_1 = HEAP32[($10_1 + 136 | 0) >> 2] | 0;
  global$0 = $10_1 + 192 | 0;
  return $387_1 | 0;
 }
 
 function $6($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $61_1 = 0, $16_1 = 0, $40_1 = 0, $50_1 = 0, $60_1 = 0, $363_1 = 0.0, $193_1 = 0, $222_1 = 0, $272_1 = 0, $275_1 = 0, $333_1 = 0, $42_1 = 0, $357_1 = 0.0, $137_1 = 0, $139_1 = 0, $141_1 = 0, $142_1 = 0, $150_1 = 0, $152_1 = 0, $153_1 = 0, $161_1 = 0, $264_1 = 0, $324_1 = 0, $380_1 = 0.0, $338_1 = 0, $340_1 = 0, $352_1 = 0;
  $8_1 = global$0 - 176 | 0;
  global$0 = $8_1;
  $9_1 = 0;
  HEAP32[($8_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 168 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 164 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 160 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 156 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 152 | 0) >> 2] = $5_1;
  HEAPF64[($8_1 + 144 | 0) >> 3] = -8988465674311578540726371.0e283;
  HEAP32[($8_1 + 140 | 0) >> 2] = $9_1;
  HEAP32[($8_1 + 132 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
  $16_1 = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = $16_1;
  HEAP32[($8_1 + 124 | 0) >> 2] = $16_1;
  HEAPF64[($8_1 + 112 | 0) >> 3] = +($9_1 | 0);
  HEAP32[($8_1 + 104 | 0) >> 2] = 1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 168 | 0) >> 2] | 0 | 0) != ($9_1 | 0) & 1 | 0)) {
     break label$2
    }
    if ((HEAP32[((HEAP32[($8_1 + 168 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$1
    }
   }
   label$3 : {
    label$4 : {
     if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
      break label$4
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6001 | 0, 1533 | 0, 0 | 0);
     $40_1 = 0;
     $382(7 | 0, $40_1 | 0, $40_1 | 0);
     break label$3;
    }
    $42_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($8_1 + 96 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
    $396($42_1 | 0, 6002 | 0, 1645 | 0, $8_1 + 96 | 0 | 0);
    $50_1 = 0;
    $382(5 | 0, $50_1 | 0, $50_1 | 0);
   }
  }
  HEAP32[(0 + 91320 | 0) >> 2] = (HEAP32[(0 + 91320 | 0) >> 2] | 0) + 1 | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     if (HEAP32[(0 + 87748 | 0) >> 2] | 0) {
      break label$7
     }
     if (!(HEAP32[($8_1 + 160 | 0) >> 2] | 0)) {
      break label$6
     }
    }
    HEAP32[($8_1 + 108 | 0) >> 2] = 0;
    break label$5;
   }
   $60_1 = 2;
   $61_1 = 1;
   HEAP32[($8_1 + 108 | 0) >> 2] = $61_1;
   $357_1 = +(((HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0 ? $60_1 : $61_1) | 0);
   label$8 : {
    label$9 : {
     if (!(+((HEAP32[(0 + 87884 | 0) >> 2] | 0 ? $60_1 : $61_1) | 0) * +HEAPF64[(0 + 87728 | 0) >> 3] < +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
      break label$9
     }
     $363_1 = +HEAPF64[(0 + 90152 | 0) >> 3];
     break label$8;
    }
    $363_1 = +((HEAP32[(0 + 87884 | 0) >> 2] | 0 ? 2 : 1) | 0) * +HEAPF64[(0 + 87728 | 0) >> 3];
   }
   HEAPF64[($8_1 + 112 | 0) >> 3] = $357_1 * $363_1;
  }
  label$10 : {
   if (!((HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$10
   }
   HEAP32[(HEAP32[($8_1 + 156 | 0) >> 2] | 0) >> 2] = 1;
  }
  HEAP32[(HEAP32[($8_1 + 152 | 0) >> 2] | 0) >> 2] = 0;
  label$11 : {
   label$12 : {
    if ((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0) {
     break label$12
    }
    if (!(HEAP32[(0 + 88232 | 0) >> 2] | 0)) {
     break label$11
    }
    if (!((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$11
    }
    if (!((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) == ($267(HEAP32[($8_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$11
    }
   }
   label$13 : {
    if (!((HEAP32[(0 + 88232 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[(0 + 88232 | 0) >> 2] | 0;
   }
   $137_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $139_1 = $267(HEAP32[($8_1 + 172 | 0) >> 2] | 0 | 0) | 0;
   $141_1 = HEAP32[((HEAP32[($8_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $142_1 = HEAP32[($8_1 + 108 | 0) >> 2] | 0;
   HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 112 | 0) >> 3];
   HEAP32[($8_1 + 40 | 0) >> 2] = $142_1;
   HEAP32[($8_1 + 36 | 0) >> 2] = $141_1;
   HEAP32[($8_1 + 32 | 0) >> 2] = $139_1;
   $396($137_1 | 0, 8008 | 0, 1713 | 0, $8_1 + 32 | 0 | 0);
   $150_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $152_1 = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   $153_1 = HEAP32[($8_1 + 124 | 0) >> 2] | 0;
   HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
   HEAP32[($8_1 + 68 | 0) >> 2] = $153_1;
   HEAP32[($8_1 + 64 | 0) >> 2] = $152_1;
   $396($150_1 | 0, 8009 | 0, 1776 | 0, $8_1 + 64 | 0 | 0);
   $161_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($8_1 + 80 | 0) >> 2] = HEAP32[(0 + 92256 | 0) >> 2] | 0;
   $396($161_1 | 0, 8010 | 0, 1832 | 0, $8_1 + 80 | 0 | 0);
  }
  HEAP32[($8_1 + 128 | 0) >> 2] = 0;
  HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 168 | 0) >> 2] | 0;
  label$14 : {
   label$15 : {
    label$16 : while (1) {
     if (!((HEAP32[($8_1 + 128 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
      break label$15
     }
     label$17 : {
      if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$17
      }
      HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 136 | 0) >> 2] | 0;
      label$18 : while (1) {
       $193_1 = 0;
       label$19 : {
        if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$19
        }
        $193_1 = (HEAP32[((HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
       }
       label$20 : {
        if (!($193_1 & 1 | 0)) {
         break label$20
        }
        label$21 : {
         if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$21
         }
         if (!(HEAP32[($8_1 + 128 | 0) >> 2] | 0)) {
          break label$21
         }
         break label$20;
        }
        HEAP32[((HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($8_1 + 124 | 0) >> 2] | 0;
        label$22 : {
         if (((HEAP32[((HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
          break label$22
         }
         $4(HEAP32[($8_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0);
         $222_1 = HEAP32[($8_1 + 152 | 0) >> 2] | 0;
         HEAP32[$222_1 >> 2] = (HEAP32[$222_1 >> 2] | 0) + 1 | 0;
         label$23 : {
          if (!(+HEAPF64[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 3] > +HEAPF64[($8_1 + 144 | 0) >> 3] & 1 | 0)) {
           break label$23
          }
          label$24 : {
           label$25 : {
            if (!(((HEAP32[((HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
             break label$25
            }
            if (!(+HEAPF64[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 3] >= +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
             break label$24
            }
           }
           HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 136 | 0) >> 2] | 0;
           label$26 : {
            if (!(HEAP32[($8_1 + 108 | 0) >> 2] | 0)) {
             break label$26
            }
            if (!(+HEAPF64[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 3] >= +HEAPF64[($8_1 + 112 | 0) >> 3] & 1 | 0)) {
             break label$26
            }
            break label$14;
           }
           HEAPF64[($8_1 + 144 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 3];
          }
         }
        }
        HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
        continue label$18;
       }
       break label$18;
      };
     }
     HEAP32[($8_1 + 128 | 0) >> 2] = (HEAP32[($8_1 + 128 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
     continue label$16;
    };
   }
   label$27 : {
    label$28 : {
     if (HEAP32[($8_1 + 104 | 0) >> 2] | 0) {
      break label$28
     }
     if ((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$27
     }
    }
    $264_1 = HEAP32[($8_1 + 172 | 0) >> 2] | 0;
    label$29 : {
     label$30 : {
      if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$30
      }
      $272_1 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
      break label$29;
     }
     $272_1 = HEAP32[($8_1 + 168 | 0) >> 2] | 0;
    }
    $275_1 = 0;
    HEAP32[($8_1 + 140 | 0) >> 2] = $7($275_1 | 0, $264_1 | 0, $272_1 | 0, $275_1 | 0, $8_1 + 144 | 0 | 0, HEAP32[($8_1 + 152 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAPF64[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 3] = +HEAPF64[($8_1 + 144 | 0) >> 3];
   label$31 : {
    if (!((HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$31
    }
    if (!(+HEAPF64[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 3] < +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
     break label$31
    }
    HEAP32[(HEAP32[($8_1 + 156 | 0) >> 2] | 0) >> 2] = 0;
   }
  }
  HEAP32[(0 + 91336 | 0) >> 2] = (HEAP32[(0 + 91336 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($8_1 + 152 | 0) >> 2] | 0) >> 2] | 0) | 0;
  label$32 : {
   if (!((HEAP32[(0 + 91328 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($8_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$32
   }
   HEAP32[(0 + 91328 | 0) >> 2] = HEAP32[(HEAP32[($8_1 + 152 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$33 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$33
   }
   $324_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   label$34 : {
    label$35 : {
     if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$35
     }
     $333_1 = HEAP32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$34;
    }
    $333_1 = -1;
   }
   $380_1 = +HEAPF64[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 3];
   $338_1 = $267(HEAP32[($8_1 + 172 | 0) >> 2] | 0 | 0) | 0;
   $340_1 = HEAP32[((HEAP32[($8_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($8_1 + 24 | 0) >> 2] = HEAP32[($8_1 + 160 | 0) >> 2] | 0;
   HEAP32[($8_1 + 20 | 0) >> 2] = $340_1;
   HEAP32[($8_1 + 16 | 0) >> 2] = $338_1;
   HEAPF64[($8_1 + 8 | 0) >> 3] = $380_1;
   HEAP32[$8_1 >> 2] = $333_1;
   $396($324_1 | 0, 4004 | 0, 1849 | 0, $8_1 | 0);
  }
  HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
  $352_1 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
  global$0 = $8_1 + 176 | 0;
  return $352_1 | 0;
 }
 
 function $7($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $73_1 = 0, $16_1 = 0, $385_1 = 0.0, $117_1 = 0, $139_1 = 0, $152_1 = 0, $155_1 = 0, $182_1 = 0, $239_1 = 0, $276_1 = 0, $350_1 = 0, $377_1 = 0.0, $381_1 = 0.0, $105_1 = 0, $107_1 = 0, $398_1 = 0.0, $120_1 = 0, $121_1 = 0, $399_1 = 0.0, $122_1 = 0, $338_1 = 0, $340_1 = 0, $341_1 = 0, $422_1 = 0.0, $354_1 = 0, $355_1 = 0, $370_1 = 0;
  $8_1 = global$0 - 208 | 0;
  global$0 = $8_1;
  $9_1 = 0;
  HEAP32[($8_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 188 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 184 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 180 | 0) >> 2] = HEAP32[($8_1 + 196 | 0) >> 2] | 0;
  HEAP32[($8_1 + 152 | 0) >> 2] = $9_1;
  HEAP32[($8_1 + 148 | 0) >> 2] = HEAP32[(HEAP32[($8_1 + 184 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($8_1 + 140 | 0) >> 2] = $9_1;
  HEAP32[($8_1 + 136 | 0) >> 2] = $9_1;
  $16_1 = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = $16_1;
  HEAP32[($8_1 + 132 | 0) >> 2] = $16_1;
  HEAP32[($8_1 + 128 | 0) >> 2] = $9_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($8_1 + 204 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[(0 + 91288 | 0) >> 2] = (HEAP32[(0 + 91288 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
      break label$4
     }
     if (!(((HEAP32[((HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
      break label$3
     }
    }
    if (!(+HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3] > +HEAPF64[((HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3];
   }
  }
  $377_1 = +(((HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0 ? 2 : 1) | 0);
  $381_1 = +HEAPF64[(0 + 90152 | 0) >> 3] + 2.0 * +HEAPF64[(0 + 89440 | 0) >> 3];
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[(0 + 87912 | 0) >> 3] < +HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
     break label$6
    }
    $385_1 = +HEAPF64[(0 + 87864 | 0) >> 3];
    break label$5;
   }
   $385_1 = +HEAPF64[(0 + 87912 | 0) >> 3];
  }
  HEAPF64[($8_1 + 112 | 0) >> 3] = $377_1 * ($381_1 + $385_1);
  HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3] - +HEAPF64[($8_1 + 112 | 0) >> 3];
  label$7 : {
   if (!(HEAP32[($8_1 + 204 | 0) >> 2] | 0)) {
    break label$7
   }
   label$8 : {
    if (!(+HEAPF64[($8_1 + 120 | 0) >> 3] > -+HEAPF64[($8_1 + 112 | 0) >> 3] & 1 | 0)) {
     break label$8
    }
    HEAPF64[($8_1 + 120 | 0) >> 3] = -+HEAPF64[($8_1 + 112 | 0) >> 3];
   }
  }
  HEAP32[($8_1 + 144 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
  HEAP32[($8_1 + 156 | 0) >> 2] = HEAP32[($8_1 + 196 | 0) >> 2] | 0;
  label$9 : while (1) {
   HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
   $73_1 = 0;
   label$10 : {
    if (!(HEAP32[($8_1 + 204 | 0) >> 2] | 0)) {
     break label$10
    }
    $73_1 = 0;
    if (!(((HEAP32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0 | 0) > (10 | 0) & 1 | 0)) {
     break label$10
    }
    $73_1 = ($337(HEAP32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0 | 0) > (100 | 0);
   }
   HEAP32[($8_1 + 108 | 0) >> 2] = $73_1 & 1 | 0;
   label$11 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$11
    }
    $105_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $107_1 = HEAP32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $398_1 = +HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3];
    label$12 : {
     label$13 : {
      if (!((HEAP32[($8_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$13
      }
      $117_1 = HEAP32[((HEAP32[($8_1 + 180 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$12;
     }
     $117_1 = -1;
    }
    $120_1 = HEAP32[($8_1 + 204 | 0) >> 2] | 0;
    $121_1 = HEAP32[($8_1 + 192 | 0) >> 2] | 0;
    $399_1 = +HEAPF64[($8_1 + 120 | 0) >> 3];
    $122_1 = HEAP32[($8_1 + 108 | 0) >> 2] | 0;
    HEAPF64[($8_1 + 96 | 0) >> 3] = +HEAPF64[($8_1 + 112 | 0) >> 3];
    HEAP32[($8_1 + 88 | 0) >> 2] = $122_1;
    HEAPF64[($8_1 + 80 | 0) >> 3] = $399_1;
    HEAP32[($8_1 + 72 | 0) >> 2] = $121_1;
    HEAP32[($8_1 + 68 | 0) >> 2] = $120_1;
    HEAP32[($8_1 + 64 | 0) >> 2] = $117_1;
    HEAPF64[($8_1 + 56 | 0) >> 3] = $398_1;
    HEAP32[($8_1 + 48 | 0) >> 2] = $107_1;
    $396($105_1 | 0, 4002 | 0, 1288 | 0, $8_1 + 48 | 0 | 0);
   }
   $139_1 = 0;
   HEAP32[($8_1 + 164 | 0) >> 2] = $139_1;
   label$14 : {
    if (!((HEAP32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($139_1 | 0) & 1 | 0)) {
     break label$14
    }
    HEAP32[($8_1 + 160 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$15 : {
     label$16 : while (1) {
      $152_1 = HEAP32[($8_1 + 160 | 0) >> 2] | 0;
      HEAP32[($8_1 + 160 | 0) >> 2] = $152_1 + 4 | 0;
      $155_1 = HEAP32[$152_1 >> 2] | 0;
      HEAP32[($8_1 + 164 | 0) >> 2] = $155_1;
      if (!(($155_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$15
      }
      label$17 : {
       if (!((HEAP32[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$17
       }
       continue label$16;
      }
      HEAP32[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
      label$18 : {
       if (((HEAP32[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
        break label$18
       }
       $4(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0, $8_1 + 168 | 0 | 0);
       $182_1 = HEAP32[($8_1 + 184 | 0) >> 2] | 0;
       HEAP32[$182_1 >> 2] = (HEAP32[$182_1 >> 2] | 0) + 1 | 0;
       label$19 : {
        label$20 : {
         if (!(+HEAPF64[($8_1 + 168 | 0) >> 3] > +HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
          break label$20
         }
         label$21 : {
          label$22 : {
           if (!(((HEAP32[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
            break label$22
           }
           if (HEAP32[($8_1 + 204 | 0) >> 2] | 0) {
            break label$22
           }
           if (HEAP32[($8_1 + 192 | 0) >> 2] | 0) {
            break label$21
           }
           if (!(+HEAPF64[($8_1 + 168 | 0) >> 3] >= +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
            break label$21
           }
          }
          label$23 : {
           if (HEAP32[($8_1 + 204 | 0) >> 2] | 0) {
            break label$23
           }
           HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[($8_1 + 168 | 0) >> 3] - +HEAPF64[($8_1 + 112 | 0) >> 3];
           label$24 : {
            if (!(+HEAPF64[($8_1 + 168 | 0) >> 3] > +HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3] + +HEAPF64[($8_1 + 112 | 0) >> 3] & 1 | 0)) {
             break label$24
            }
            HEAP32[(0 + 91312 | 0) >> 2] = (HEAP32[(0 + 91312 | 0) >> 2] | 0) + 1 | 0;
            HEAP32[($8_1 + 144 | 0) >> 2] = 0;
           }
          }
          HEAP32[($8_1 + 180 | 0) >> 2] = HEAP32[($8_1 + 164 | 0) >> 2] | 0;
          HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3] = +HEAPF64[($8_1 + 168 | 0) >> 3];
          HEAP32[($8_1 + 128 | 0) >> 2] = 1;
         }
         break label$19;
        }
        label$25 : {
         label$26 : {
          if (!(HEAP32[($8_1 + 108 | 0) >> 2] | 0)) {
           break label$26
          }
          label$27 : {
           if (!(+HEAPF64[($8_1 + 168 | 0) >> 3] < 5.0 * +HEAPF64[($8_1 + 120 | 0) >> 3] & 1 | 0)) {
            break label$27
           }
           continue label$16;
          }
          break label$25;
         }
         label$28 : {
          if (!(+HEAPF64[($8_1 + 168 | 0) >> 3] < +HEAPF64[($8_1 + 120 | 0) >> 3] & 1 | 0)) {
           break label$28
          }
          continue label$16;
         }
        }
       }
       label$29 : {
        if (!(HEAP32[($8_1 + 204 | 0) >> 2] | 0)) {
         break label$29
        }
        if (!(+HEAPF64[($8_1 + 168 | 0) >> 3] > +HEAPF64[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
         break label$29
        }
        HEAPF64[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($8_1 + 168 | 0) >> 3];
       }
      }
      label$30 : {
       if (!((HEAP32[($8_1 + 152 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$30
       }
       HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
       $239_1 = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
       HEAP32[($8_1 + 144 | 0) >> 2] = $239_1 + 1 | 0;
       label$31 : {
        label$32 : {
         if ($239_1) {
          break label$32
         }
         HEAP32[((HEAP32[(0 + 90332 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($8_1 + 152 | 0) >> 2] | 0;
         HEAP32[(((HEAP32[(0 + 90332 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(0 + 90332 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 2;
         HEAP32[((HEAP32[(0 + 90332 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
         break label$31;
        }
        $325(87704 + 2628 | 0 | 0, HEAP32[($8_1 + 152 | 0) >> 2] | 0 | 0);
       }
      }
      HEAP32[($8_1 + 152 | 0) >> 2] = HEAP32[($8_1 + 164 | 0) >> 2] | 0;
      continue label$16;
     };
    }
   }
   HEAP32[($8_1 + 156 | 0) >> 2] = HEAP32[($8_1 + 152 | 0) >> 2] | 0;
   label$33 : {
    label$34 : {
     label$35 : {
      if (!((HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$35
      }
      HEAP32[($8_1 + 152 | 0) >> 2] = 0;
      break label$34;
     }
     label$36 : {
      if (HEAP32[($8_1 + 144 | 0) >> 2] | 0) {
       break label$36
      }
      break label$33;
     }
     $276_1 = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($8_1 + 144 | 0) >> 2] = $276_1;
     label$37 : {
      label$38 : {
       if ($276_1) {
        break label$38
       }
       HEAP32[($8_1 + 156 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90332 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP32[(((HEAP32[(0 + 90332 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(0 + 90332 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
       HEAP32[((HEAP32[(0 + 90332 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
       break label$37;
      }
      HEAP32[($8_1 + 156 | 0) >> 2] = $333(HEAP32[(0 + 90332 | 0) >> 2] | 0 | 0) | 0;
     }
    }
    continue label$9;
   }
   break label$9;
  };
  label$39 : {
   if (HEAP32[($8_1 + 204 | 0) >> 2] | 0) {
    break label$39
   }
   HEAP32[(0 + 91304 | 0) >> 2] = (HEAP32[(0 + 91304 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($8_1 + 184 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($8_1 + 148 | 0) >> 2] | 0) | 0) | 0;
   label$40 : {
    if (!((HEAP32[(0 + 91296 | 0) >> 2] | 0 | 0) < ((HEAP32[(HEAP32[($8_1 + 184 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($8_1 + 148 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$40
    }
    HEAP32[(0 + 91296 | 0) >> 2] = (HEAP32[(HEAP32[($8_1 + 184 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($8_1 + 148 | 0) >> 2] | 0) | 0;
   }
   label$41 : {
    if (!(HEAP32[($8_1 + 128 | 0) >> 2] | 0)) {
     break label$41
    }
    HEAP32[(0 + 91712 | 0) >> 2] = (HEAP32[(0 + 91712 | 0) >> 2] | 0) + 1 | 0;
   }
  }
  label$42 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$42
   }
   $338_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $340_1 = $267(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0) | 0;
   $341_1 = HEAP32[($8_1 + 128 | 0) >> 2] | 0;
   label$43 : {
    label$44 : {
     if (!((HEAP32[($8_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$44
     }
     $350_1 = HEAP32[((HEAP32[($8_1 + 180 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$43;
    }
    $350_1 = -1;
   }
   $422_1 = +HEAPF64[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 3];
   $354_1 = HEAP32[($8_1 + 136 | 0) >> 2] | 0;
   $355_1 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[(HEAP32[($8_1 + 184 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($8_1 + 148 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 28 | 0) >> 2] = $355_1;
   HEAP32[($8_1 + 24 | 0) >> 2] = $354_1;
   HEAPF64[($8_1 + 16 | 0) >> 3] = $422_1;
   HEAP32[($8_1 + 8 | 0) >> 2] = $350_1;
   HEAP32[($8_1 + 4 | 0) >> 2] = $341_1;
   HEAP32[$8_1 >> 2] = $340_1;
   $396($338_1 | 0, 4003 | 0, 1420 | 0, $8_1 | 0);
  }
  $370_1 = HEAP32[($8_1 + 180 | 0) >> 2] | 0;
  global$0 = $8_1 + 208 | 0;
  return $370_1 | 0;
 }
 
 function $8($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $80_1 = 0, $18_1 = 0, $22_1 = 0, $52_1 = 0, $55_1 = 0, $58_1 = 0, $162_1 = 0.0, $93_1 = 0, $150_1 = 0.0, $152_1 = 0.0, $166_1 = 0.0, $172_1 = 0.0, $175_1 = 0.0, $136_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = -1;
  HEAP32[($8_1 + 44 | 0) >> 2] = ((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) + -8 | 0;
  $150_1 = HEAP32[($8_1 + 64 | 0) >> 2] | 0 ? -1.0 : 1.0;
  $18_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
  HEAP32[($8_1 + 44 | 0) >> 2] = $18_1 + -8 | 0;
  HEAPF64[$18_1 >> 3] = $150_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $22_1 = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
    HEAP32[($8_1 + 52 | 0) >> 2] = $22_1 + -1 | 0;
    if (!$22_1) {
     break label$1
    }
    HEAPF64[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 3] = +(0 | 0);
    HEAP32[($8_1 + 36 | 0) >> 2] = ((HEAP32[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) + 8 | 0;
    HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 8 | 0;
    HEAP32[($8_1 + 48 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $52_1 = HEAP32[($8_1 + 36 | 0) >> 2] | 0;
      HEAP32[($8_1 + 36 | 0) >> 2] = $52_1 + 8 | 0;
      $152_1 = +HEAPF64[$52_1 >> 3];
      $55_1 = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
      HEAP32[($8_1 + 32 | 0) >> 2] = $55_1 + 8 | 0;
      $58_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
      HEAPF64[$58_1 >> 3] = +HEAPF64[$58_1 >> 3] - $152_1 * +HEAPF64[$55_1 >> 3];
      HEAP32[($8_1 + 48 | 0) >> 2] = (HEAP32[($8_1 + 48 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$5 : {
     label$6 : {
      if (!(+HEAPF64[($8_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$6
      }
      $162_1 = -+HEAPF64[($8_1 + 24 | 0) >> 3];
      break label$5;
     }
     $162_1 = +HEAPF64[($8_1 + 24 | 0) >> 3];
    }
    label$7 : {
     label$8 : {
      if (!($162_1 > +HEAPF64[(0 + 89512 | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      $166_1 = +HEAPF64[($8_1 + 24 | 0) >> 3];
      $80_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
      HEAP32[($8_1 + 44 | 0) >> 2] = $80_1 + -8 | 0;
      HEAPF64[$80_1 >> 3] = +HEAPF64[$80_1 >> 3] / $166_1;
      break label$7;
     }
     HEAP32[($8_1 + 20 | 0) >> 2] = 0;
     $172_1 = +$29(+(+HEAPF64[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 3]), +(+HEAPF64[($8_1 + 24 | 0) >> 3]), +(+HEAPF64[(0 + 89504 | 0) >> 3]), $8_1 + 20 | 0 | 0);
     HEAPF64[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 3] = $172_1;
     label$9 : {
      label$10 : {
       if (!(HEAP32[($8_1 + 20 | 0) >> 2] | 0)) {
        break label$10
       }
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
       $175_1 = HEAP32[($8_1 + 64 | 0) >> 2] | 0 ? -1.0 : 1.0;
       $93_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $93_1 + -8 | 0;
       HEAPF64[$93_1 >> 3] = $175_1;
       HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 16 | 0;
       label$11 : {
        label$12 : while (1) {
         if (!((HEAP32[($8_1 + 40 | 0) >> 2] | 0) >>> 0 < ((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >>> 0 & 1 | 0)) {
          break label$11
         }
         HEAPF64[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 3] = +(0 | 0);
         HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 8 | 0;
         continue label$12;
        };
       }
       break label$9;
      }
      HEAP32[($8_1 + 44 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + -8 | 0;
     }
    }
    continue label$2;
   };
  }
  label$13 : {
   if (!((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
    break label$13
   }
   HEAP32[(HEAP32[($8_1 + 56 | 0) >> 2] | 0) >> 2] = 1;
   label$14 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$14
    }
    $136_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[$8_1 >> 2] = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
    $396($136_1 | 0, 4005 | 0, 1924 | 0, $8_1 | 0);
   }
   HEAP32[(0 + 90640 | 0) >> 2] = (HEAP32[(0 + 90640 | 0) >> 2] | 0) + 1 | 0;
   $151(1968 | 0);
  }
  global$0 = $8_1 + 80 | 0;
  return;
 }
 
 function $9($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $231_1 = 0, $266_1 = 0.0, $273_1 = 0.0, $275_1 = 0.0, $133_1 = 0, $193_1 = 0, $217_1 = 0, $225_1 = 0, $228_1 = 0, $164_1 = 0, $165_1 = 0, $282_1 = 0.0, $288_1 = 0.0, $290_1 = 0.0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  HEAP32[($7_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 112 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 108 | 0) >> 2] = $4_1;
  HEAPF64[($7_1 + 64 | 0) >> 3] = +($8_1 | 0);
  HEAP32[($7_1 + 36 | 0) >> 2] = $8_1;
  HEAP32[(HEAP32[($7_1 + 108 | 0) >> 2] | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $8_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$4
      }
      $266_1 = -+HEAPF64[((HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      break label$3;
     }
     $266_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    }
    HEAPF64[($7_1 + 64 | 0) >> 3] = $266_1;
    HEAP32[($7_1 + 40 | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
    HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      label$7 : {
       label$8 : {
        if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
         break label$8
        }
        $273_1 = -+HEAPF64[((HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        break label$7;
       }
       $273_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      }
      $275_1 = $273_1;
      HEAPF64[($7_1 + 56 | 0) >> 3] = $275_1;
      label$9 : {
       if (!($275_1 > +HEAPF64[($7_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$9
       }
       HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3];
       HEAP32[($7_1 + 40 | 0) >> 2] = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
      }
      HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    label$10 : {
     if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP32[($7_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
     $133_1 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
     HEAP32[$133_1 >> 2] = (HEAP32[$133_1 >> 2] | 0) ^ 1 | 0;
     HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) ^ 1 | 0;
    }
    label$11 : {
     label$12 : {
      if (!(+HEAPF64[($7_1 + 64 | 0) >> 3] <= +HEAPF64[((HEAP32[(0 + 89528 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$12
      }
      HEAP32[(HEAP32[($7_1 + 108 | 0) >> 2] | 0) >> 2] = 1;
      label$13 : {
       if (!(+HEAPF64[($7_1 + 64 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
        break label$13
       }
       label$14 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$14
        }
        $164_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $165_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
        $282_1 = +HEAPF64[($7_1 + 64 | 0) >> 3];
        HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
        HEAPF64[($7_1 + 8 | 0) >> 3] = $282_1;
        HEAP32[$7_1 >> 2] = $165_1;
        $396($164_1 | 0, 8011 | 0, 2003 | 0, $7_1 | 0);
        $36(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2056 | 0, HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0);
       }
       HEAP32[(0 + 91360 | 0) >> 2] = (HEAP32[(0 + 91360 | 0) >> 2] | 0) + 1 | 0;
       $151(2064 | 0);
       break label$11;
      }
     }
     HEAP32[($7_1 + 92 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0;
     $193_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
     HEAP32[($7_1 + 92 | 0) >> 2] = $193_1 + 8 | 0;
     HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[$193_1 >> 3];
     HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAP32[($7_1 + 104 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAP32[($7_1 + 100 | 0) >> 2] = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
       $217_1 = HEAP32[($7_1 + 104 | 0) >> 2] | 0;
       HEAP32[($7_1 + 104 | 0) >> 2] = $217_1 + 8 | 0;
       HEAPF64[($7_1 + 80 | 0) >> 3] = +HEAPF64[$217_1 >> 3] / +HEAPF64[($7_1 + 72 | 0) >> 3];
       HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 116 | 0) >> 2] | 0) - ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0) | 0;
       label$17 : {
        label$18 : while (1) {
         $225_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
         HEAP32[($7_1 + 48 | 0) >> 2] = $225_1 + -1 | 0;
         if (!$225_1) {
          break label$17
         }
         $288_1 = +HEAPF64[($7_1 + 80 | 0) >> 3];
         $228_1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
         HEAP32[($7_1 + 100 | 0) >> 2] = $228_1 + 8 | 0;
         $290_1 = $288_1 * +HEAPF64[$228_1 >> 3];
         $231_1 = HEAP32[($7_1 + 104 | 0) >> 2] | 0;
         HEAP32[($7_1 + 104 | 0) >> 2] = $231_1 + 8 | 0;
         HEAPF64[$231_1 >> 3] = +HEAPF64[$231_1 >> 3] - $290_1;
         continue label$18;
        };
       }
       HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
    }
    HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$19 : {
   if (!(+HEAPF64[(0 + 91648 | 0) >> 3] > +HEAPF64[($7_1 + 64 | 0) >> 3] & 1 | 0)) {
    break label$19
   }
   HEAPF64[(0 + 91648 | 0) >> 3] = +HEAPF64[($7_1 + 64 | 0) >> 3];
  }
  label$20 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$20
   }
   $36(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2100 | 0, HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0);
  }
  global$0 = $7_1 + 128 | 0;
  return;
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $11_1 = 0, $14_1 = 0, $36_1 = 0.0, $30_1 = 0, $54_1 = 0.0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 32 | 0) >> 3] = +(0 | 0);
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $8_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $8_1 + -1 | 0;
    if (!$8_1) {
     break label$1
    }
    $11_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = $11_1 + 8 | 0;
    $36_1 = +HEAPF64[$11_1 >> 3];
    $14_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
    HEAP32[($4_1 + 40 | 0) >> 2] = $14_1 + 8 | 0;
    HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3] + $36_1 * +HEAPF64[$14_1 >> 3];
    continue label$2;
   };
  }
  label$3 : {
   if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAPF64[($4_1 + 24 | 0) >> 3] = +($355() | 0 | 0);
   HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3] + (2.0 * +HEAPF64[($4_1 + 24 | 0) >> 3] / 2147483646.0 - 1.0) * +HEAPF64[(0 + 88144 | 0) >> 3];
  }
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$4
   }
   $30_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAPF64[$4_1 >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3];
   $396($30_1 | 0, 4006 | 0, 2121 | 0, $4_1 | 0);
  }
  $54_1 = +HEAPF64[($4_1 + 32 | 0) >> 3];
  global$0 = $4_1 + 48 | 0;
  return +$54_1;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $32_1 = 0, $19_1 = 0, $49_1 = 0, $52_1 = 0, $64_1 = 0, $66_1 = 0, $14_1 = 0, $70_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $337(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $396($14_1 | 0, 6003 | 0, 2141 | 0, $3_1 | 0);
   $19_1 = 0;
   $382(5 | 0, $19_1 | 0, $19_1 | 0);
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = $156(HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $32_1 = 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[(HEAP32[($3_1 + 16 | 0) >> 2] | 0) >> 3] = +($32_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = $32_1;
    label$4 : {
     if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != ($32_1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0;
     label$5 : {
      label$6 : while (1) {
       $49_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       HEAP32[($3_1 + 8 | 0) >> 2] = $49_1 + 4 | 0;
       $52_1 = HEAP32[$49_1 >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $52_1;
       if (!(($52_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $64_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       HEAPF64[$64_1 >> 3] = +HEAPF64[$64_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       continue label$6;
      };
     }
    }
    $66_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    HEAPF64[$66_1 >> 3] = +HEAPF64[$66_1 >> 3] / +(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  $70_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $70_1 | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $32_1 = 0, $34_1 = 0, $37_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $11(HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90696 | 0) >> 2] = (HEAP32[(0 + 90696 | 0) >> 2] | 0) + 1 | 0;
  $4(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, $3_1 + 32 | 0 | 0);
  HEAP32[($3_1 + 28 | 0) >> 2] = $13(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3_1 + 32 | 0) >> 3])) | 0;
  $158(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $32_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $34_1 = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $37_1 = $337(HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
   HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 32 | 0) >> 3];
   HEAP32[($3_1 + 4 | 0) >> 2] = $37_1;
   HEAP32[$3_1 >> 2] = $34_1;
   $396($32_1 | 0, 4007 | 0, 2205 | 0, $3_1 | 0);
  }
  $40_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return $40_1 | 0;
 }
 
 function $13($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $15_1 = 0, $18_1 = 0, $21_1 = 0, $24_1 = 0, $30_1 = 0.0, $31_1 = 0.0, $34_1 = 0.0, $27_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[(0 + 89988 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $156(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $15_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $15_1 + -1 | 0;
    if (!$15_1) {
     break label$1
    }
    $18_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $18_1 + 8 | 0;
    $30_1 = +HEAPF64[$18_1 >> 3];
    $31_1 = +HEAPF64[($5_1 + 32 | 0) >> 3];
    $21_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $21_1 + 8 | 0;
    $34_1 = $30_1 - $31_1 * +HEAPF64[$21_1 >> 3];
    $24_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $24_1 + 8 | 0;
    HEAPF64[$24_1 >> 3] = $34_1;
    continue label$2;
   };
  }
  $27_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $27_1 | 0;
 }
 
 function $14($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $59_1 = 0, $7_1 = 0, $20_1 = 0, $23_1 = 0, $29_1 = 0, $33_1 = 0, $46_1 = 0, $49_1 = 0, $55_1 = 0, $111_1 = 0.0, $72_1 = 0, $75_1 = 0, $126_1 = 0.0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $20_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $20_1 + 4 | 0;
     $23_1 = HEAP32[$20_1 >> 2] | 0;
     HEAP32[($6_1 + 36 | 0) >> 2] = $23_1;
     if (!(($23_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $29_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
     HEAP8[($29_1 + 24 | 0) >> 0] = (HEAPU8[($29_1 + 24 | 0) >> 0] | 0) & -2 | 0;
     continue label$3;
    };
   }
  }
  $33_1 = 0;
  HEAP32[($6_1 + 36 | 0) >> 2] = $33_1;
  label$4 : {
   if (!((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($33_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     $46_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $46_1 + 4 | 0;
     $49_1 = HEAP32[$46_1 >> 2] | 0;
     HEAP32[($6_1 + 36 | 0) >> 2] = $49_1;
     if (!(($49_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $55_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
     HEAP8[($55_1 + 24 | 0) >> 0] = HEAPU8[($55_1 + 24 | 0) >> 0] | 0 | 1 | 0;
     continue label$6;
    };
   }
  }
  $59_1 = 0;
  $111_1 = +($59_1 | 0);
  HEAPF64[($6_1 + 8 | 0) >> 3] = $111_1;
  HEAPF64[($6_1 + 16 | 0) >> 3] = $111_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $59_1;
  label$7 : {
   if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($59_1 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$8 : {
    label$9 : while (1) {
     $72_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $72_1 + 4 | 0;
     $75_1 = HEAP32[$72_1 >> 2] | 0;
     HEAP32[($6_1 + 36 | 0) >> 2] = $75_1;
     if (!(($75_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     label$10 : {
      if (((HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0) {
       break label$10
      }
      HEAP32[(0 + 90656 | 0) >> 2] = (HEAP32[(0 + 90656 | 0) >> 2] | 0) + 1 | 0;
      $4(HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, $6_1 + 24 | 0 | 0);
      label$11 : {
       label$12 : {
        if (!(+HEAPF64[($6_1 + 24 | 0) >> 3] < +HEAPF64[($6_1 + 8 | 0) >> 3] & 1 | 0)) {
         break label$12
        }
        HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3];
        break label$11;
       }
       label$13 : {
        if (!(+HEAPF64[($6_1 + 24 | 0) >> 3] > +HEAPF64[($6_1 + 16 | 0) >> 3] & 1 | 0)) {
         break label$13
        }
        HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3];
       }
      }
     }
     continue label$9;
    };
   }
  }
  HEAPF64[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3];
  HEAPF64[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3];
  HEAPF64[($6_1 + 8 | 0) >> 3] = -+HEAPF64[($6_1 + 8 | 0) >> 3];
  label$14 : {
   label$15 : {
    if (!(+HEAPF64[($6_1 + 16 | 0) >> 3] > +HEAPF64[($6_1 + 8 | 0) >> 3] & 1 | 0)) {
     break label$15
    }
    HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3];
    break label$14;
   }
   HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3];
  }
  $126_1 = +HEAPF64[($6_1 + 56 | 0) >> 3];
  global$0 = $6_1 + 64 | 0;
  return +$126_1;
 }
 
 function $15($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $16(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $6_1 | 0, $6_1 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $16($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $155_1 = 0, $78_1 = 0, $112_1 = 0, $113_1 = 0, $127_1 = 0, $135_1 = 0, $136_1 = 0, $144_1 = 0, $145_1 = 0, $152_1 = 0, $165_1 = 0, $168_1 = 0, $174_1 = 0, $194_1 = 0, $310_1 = 0.0, $319_1 = 0.0, $211_1 = 0, $336_1 = 0.0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  HEAPF64[($7_1 + 40 | 0) >> 3] = +(0 | 0);
  HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 8 | 0;
  HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 16 | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 24 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($7_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3]);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($7_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 3]);
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[($7_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 3]);
      break label$5;
     }
     label$7 : {
      if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
       break label$7
      }
      HEAPF64[($7_1 + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 3];
      HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 72 | 0) >> 2] | 0) - 4 | 0;
      HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 32 | 0;
      label$8 : {
       label$9 : while (1) {
        $78_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
        HEAP32[($7_1 + 56 | 0) >> 2] = $78_1 + -1 | 0;
        if (!$78_1) {
         break label$8
        }
        HEAPF64[($7_1 + 40 | 0) >> 3] = +HEAPF64[($7_1 + 40 | 0) >> 3] + +HEAPF64[(HEAP32[($7_1 + 52 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($7_1 + 52 | 0) >> 2] | 0) >> 3];
        HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 8 | 0;
        continue label$9;
       };
      }
      HEAPF64[($7_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[($7_1 + 40 | 0) >> 3]);
     }
    }
   }
  }
  label$10 : {
   if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$10
   }
   label$11 : {
    label$12 : {
     if (!(+HEAPF64[($7_1 + 40 | 0) >> 3] < +HEAPF64[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
      break label$12
     }
     HEAP32[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 2] = 1;
     break label$11;
    }
    HEAP32[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 2] = 0;
   }
  }
  label$13 : {
   if (!(+HEAPF64[(0 + 91648 | 0) >> 3] > +HEAPF64[($7_1 + 40 | 0) >> 3] & 1 | 0)) {
    break label$13
   }
   HEAPF64[(0 + 91648 | 0) >> 3] = +HEAPF64[($7_1 + 40 | 0) >> 3];
  }
  label$14 : {
   label$15 : {
    if (!(+HEAPF64[($7_1 + 40 | 0) >> 3] > +HEAPF64[(0 + 89496 | 0) >> 3] & 1 | 0)) {
     break label$15
    }
    label$16 : {
     if (HEAP32[($7_1 + 68 | 0) >> 2] | 0) {
      break label$16
     }
     HEAPF64[($7_1 + 40 | 0) >> 3] = -+HEAPF64[($7_1 + 40 | 0) >> 3];
    }
    $112_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    HEAPF64[$112_1 >> 3] = +HEAPF64[$112_1 >> 3] / +HEAPF64[($7_1 + 40 | 0) >> 3];
    $113_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    HEAPF64[$113_1 >> 3] = +HEAPF64[$113_1 >> 3] / +HEAPF64[($7_1 + 40 | 0) >> 3];
    label$17 : {
     label$18 : {
      if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$18
      }
      break label$17;
     }
     label$19 : {
      label$20 : {
       if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$20
       }
       $127_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
       HEAPF64[$127_1 >> 3] = +HEAPF64[$127_1 >> 3] / +HEAPF64[($7_1 + 40 | 0) >> 3];
       break label$19;
      }
      label$21 : {
       label$22 : {
        if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$22
        }
        $135_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
        HEAPF64[$135_1 >> 3] = +HEAPF64[$135_1 >> 3] / +HEAPF64[($7_1 + 40 | 0) >> 3];
        $136_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
        HEAPF64[$136_1 >> 3] = +HEAPF64[$136_1 >> 3] / +HEAPF64[($7_1 + 40 | 0) >> 3];
        break label$21;
       }
       label$23 : {
        if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
         break label$23
        }
        $144_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
        HEAPF64[$144_1 >> 3] = +HEAPF64[$144_1 >> 3] / +HEAPF64[($7_1 + 40 | 0) >> 3];
        $145_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
        HEAPF64[$145_1 >> 3] = +HEAPF64[$145_1 >> 3] / +HEAPF64[($7_1 + 40 | 0) >> 3];
        HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 72 | 0) >> 2] | 0) - 4 | 0;
        HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 32 | 0;
        label$24 : {
         label$25 : while (1) {
          $152_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
          HEAP32[($7_1 + 56 | 0) >> 2] = $152_1 + -1 | 0;
          if (!$152_1) {
           break label$24
          }
          $310_1 = +HEAPF64[($7_1 + 40 | 0) >> 3];
          $155_1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
          HEAP32[($7_1 + 52 | 0) >> 2] = $155_1 + 8 | 0;
          HEAPF64[$155_1 >> 3] = +HEAPF64[$155_1 >> 3] / $310_1;
          continue label$25;
         };
        }
       }
      }
     }
    }
    break label$14;
   }
   label$26 : {
    label$27 : {
     if (!(+HEAPF64[($7_1 + 40 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$27
     }
     HEAPF64[($7_1 + 32 | 0) >> 3] = Math_sqrt(1.0 / +(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0));
     HEAP32[($7_1 + 56 | 0) >> 2] = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
     HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
     label$28 : {
      label$29 : while (1) {
       $165_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
       HEAP32[($7_1 + 56 | 0) >> 2] = $165_1 + -1 | 0;
       if (!$165_1) {
        break label$28
       }
       $319_1 = +HEAPF64[($7_1 + 32 | 0) >> 3];
       $168_1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
       HEAP32[($7_1 + 52 | 0) >> 2] = $168_1 + 8 | 0;
       HEAPF64[$168_1 >> 3] = $319_1;
       continue label$29;
      };
     }
     break label$26;
    }
    label$30 : {
     if (HEAP32[($7_1 + 68 | 0) >> 2] | 0) {
      break label$30
     }
     HEAPF64[($7_1 + 40 | 0) >> 3] = -+HEAPF64[($7_1 + 40 | 0) >> 3];
    }
    HEAP32[($7_1 + 56 | 0) >> 2] = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
    HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    label$31 : {
     label$32 : while (1) {
      $174_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
      HEAP32[($7_1 + 56 | 0) >> 2] = $174_1 + -1 | 0;
      if (!$174_1) {
       break label$31
      }
      HEAPF64[($7_1 + 32 | 0) >> 3] = +$29(+(+HEAPF64[(HEAP32[($7_1 + 52 | 0) >> 2] | 0) >> 3]), +(+HEAPF64[($7_1 + 40 | 0) >> 3]), +(+HEAPF64[(0 + 89488 | 0) >> 3]), $7_1 + 16 | 0 | 0);
      label$33 : {
       label$34 : {
        if (HEAP32[($7_1 + 16 | 0) >> 2] | 0) {
         break label$34
        }
        HEAPF64[(HEAP32[($7_1 + 52 | 0) >> 2] | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3];
        break label$33;
       }
       HEAP32[($7_1 + 48 | 0) >> 2] = $46(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) | 0;
       HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 3] * +HEAPF64[($7_1 + 40 | 0) >> 3] >= +(0 | 0) & 1 | 0 ? 1.0 : -1.0;
       HEAP32[($7_1 + 56 | 0) >> 2] = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
       HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
       label$35 : {
        label$36 : while (1) {
         $194_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
         HEAP32[($7_1 + 56 | 0) >> 2] = $194_1 + -1 | 0;
         if (!$194_1) {
          break label$35
         }
         HEAPF64[(HEAP32[($7_1 + 52 | 0) >> 2] | 0) >> 3] = +(0 | 0);
         HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 8 | 0;
         continue label$36;
        };
       }
       HEAPF64[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3];
       HEAP32[(0 + 91680 | 0) >> 2] = (HEAP32[(0 + 91680 | 0) >> 2] | 0) + 1 | 0;
       label$37 : {
        if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
         break label$37
        }
        $211_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $336_1 = +HEAPF64[($7_1 + 40 | 0) >> 3];
        HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
        HEAPF64[$7_1 >> 3] = $336_1;
        $396($211_1 | 0, 1 | 0, 2254 | 0, $7_1 | 0);
       }
       break label$14;
      }
      HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 8 | 0;
      continue label$32;
     };
    }
   }
  }
  global$0 = $7_1 + 80 | 0;
  return;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $190_1 = 0, $273_1 = 0, $364_1 = 0, $459_1 = 0, $82_1 = 0, $97_1 = 0, $100_1 = 0, $109_1 = 0, $119_1 = 0, $122_1 = 0, $127_1 = 0, $130_1 = 0, $143_1 = 0, $146_1 = 0, $156_1 = 0, $205_1 = 0, $208_1 = 0, $225_1 = 0, $236_1 = 0, $239_1 = 0, $242_1 = 0, $245_1 = 0, $263_1 = 0, $268_1 = 0, $308_1 = 0, $329_1 = 0, $348_1 = 0, $381_1 = 0, $384_1 = 0, $398_1 = 0, $556 = 0.0, $24_1 = 0, $39_1 = 0, $47_1 = 0, $57_1 = 0, $106_1 = 0, $108_1 = 0, $532 = 0.0, $153_1 = 0, $155_1 = 0, $222_1 = 0, $224_1 = 0, $533 = 0.0, $535 = 0.0, $538 = 0.0, $301_1 = 0, $442_1 = 0, $445_1 = 0, $447_1 = 0, $573 = 0.0, $449_1 = 0, $473_1 = 0, $475_1 = 0, $491_1 = 0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 172 | 0) >> 2] = HEAP32[(0 + 89988 | 0) >> 2] | 0;
  HEAP32[($3_1 + 160 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 132 | 0) >> 2] = $4_1;
  HEAP32[(0 + 92224 | 0) >> 2] = (HEAP32[(0 + 92224 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if ((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0) {
    break label$1
   }
   $24_1 = $156(HEAP32[($3_1 + 172 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 2] = $24_1;
  }
  label$2 : {
   if (!((HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($3_1 + 160 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
   HEAP32[(0 + 87832 | 0) >> 2] = 5;
   $39_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($39_1 | 0, 8012 | 0, 2301 | 0, $3_1 + 96 | 0 | 0);
   $47_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($3_1 + 112 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   $396($47_1 | 0, 8013 | 0, 2339 | 0, $3_1 + 112 | 0 | 0);
   label$3 : {
    if (!(HEAP32[(0 + 92256 | 0) >> 2] | 0)) {
     break label$3
    }
    $57_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($3_1 + 80 | 0) >> 2] = HEAP32[(0 + 92256 | 0) >> 2] | 0;
    $396($57_1 | 0, 8014 | 0, 2375 | 0, $3_1 + 80 | 0 | 0);
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8015 | 0, 2397 | 0, 0 | 0);
   $155(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (4 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($3_1 + 164 | 0) >> 2] = 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
      break label$6
     }
     $82_1 = 0;
     HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
     HEAP32[($3_1 + 180 | 0) >> 2] = $82_1;
     label$7 : {
      if (!((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($82_1 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($3_1 + 176 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
      label$8 : {
       label$9 : while (1) {
        $97_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
        HEAP32[($3_1 + 176 | 0) >> 2] = $97_1 + 4 | 0;
        $100_1 = HEAP32[$97_1 >> 2] | 0;
        HEAP32[($3_1 + 180 | 0) >> 2] = $100_1;
        if (!(($100_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$8
        }
        $106_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
        $108_1 = HEAP32[(0 + 90300 | 0) >> 2] | 0;
        $109_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
        HEAP32[($3_1 + 164 | 0) >> 2] = $109_1 + 1 | 0;
        HEAP32[($108_1 + ($109_1 << 2 | 0) | 0) >> 2] = $106_1;
        HEAP32[($3_1 + 144 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        HEAP32[($3_1 + 168 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
        label$10 : {
         label$11 : while (1) {
          $119_1 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
          HEAP32[($3_1 + 168 | 0) >> 2] = $119_1 + -1 | 0;
          if (!$119_1) {
           break label$10
          }
          $122_1 = HEAP32[($3_1 + 144 | 0) >> 2] | 0;
          HEAP32[($3_1 + 144 | 0) >> 2] = $122_1 + 8 | 0;
          $532 = +HEAPF64[$122_1 >> 3] * +$357(+(+HEAPF64[(0 + 88152 | 0) >> 3]), +(+HEAPF64[(0 + 88160 | 0) >> 3]));
          $127_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
          HEAP32[($3_1 + 140 | 0) >> 2] = $127_1 + 8 | 0;
          HEAPF64[$127_1 >> 3] = $532;
          continue label$11;
         };
        }
        continue label$9;
       };
      }
     }
     break label$5;
    }
    $130_1 = 0;
    HEAP32[($3_1 + 180 | 0) >> 2] = $130_1;
    label$12 : {
     if (!((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($130_1 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($3_1 + 176 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$13 : {
      label$14 : while (1) {
       $143_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
       HEAP32[($3_1 + 176 | 0) >> 2] = $143_1 + 4 | 0;
       $146_1 = HEAP32[$143_1 >> 2] | 0;
       HEAP32[($3_1 + 180 | 0) >> 2] = $146_1;
       if (!(($146_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       $153_1 = HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       $155_1 = HEAP32[(0 + 90300 | 0) >> 2] | 0;
       $156_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
       HEAP32[($3_1 + 164 | 0) >> 2] = $156_1 + 1 | 0;
       HEAP32[($155_1 + ($156_1 << 2 | 0) | 0) >> 2] = $153_1;
       continue label$14;
      };
     }
    }
   }
   $18(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0, ((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0 | 0, HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 16 | 0 | 0, $3_1 + 132 | 0 | 0);
  }
  label$15 : {
   label$16 : {
    if ((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0) {
     break label$16
    }
    if (!(HEAP32[($3_1 + 132 | 0) >> 2] | 0)) {
     break label$15
    }
   }
   $190_1 = 0;
   HEAP32[($3_1 + 164 | 0) >> 2] = $190_1;
   HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
   HEAP32[($3_1 + 180 | 0) >> 2] = $190_1;
   label$17 : {
    if (!((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($190_1 | 0) & 1 | 0)) {
     break label$17
    }
    HEAP32[($3_1 + 176 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$18 : {
     label$19 : while (1) {
      $205_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
      HEAP32[($3_1 + 176 | 0) >> 2] = $205_1 + 4 | 0;
      $208_1 = HEAP32[$205_1 >> 2] | 0;
      HEAP32[($3_1 + 180 | 0) >> 2] = $208_1;
      if (!(($208_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$18
      }
      label$20 : {
       if (!((HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       $222_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
       $224_1 = HEAP32[(0 + 90300 | 0) >> 2] | 0;
       $225_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
       HEAP32[($3_1 + 164 | 0) >> 2] = $225_1 + 1 | 0;
       HEAP32[($224_1 + ($225_1 << 2 | 0) | 0) >> 2] = $222_1;
       HEAP32[($3_1 + 144 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       HEAP32[($3_1 + 184 | 0) >> 2] = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
       HEAP32[($3_1 + 168 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
       label$21 : {
        label$22 : while (1) {
         $236_1 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
         HEAP32[($3_1 + 168 | 0) >> 2] = $236_1 + -1 | 0;
         if (!$236_1) {
          break label$21
         }
         $239_1 = HEAP32[($3_1 + 144 | 0) >> 2] | 0;
         HEAP32[($3_1 + 144 | 0) >> 2] = $239_1 + 8 | 0;
         $533 = +HEAPF64[$239_1 >> 3];
         $242_1 = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
         HEAP32[($3_1 + 184 | 0) >> 2] = $242_1 + 8 | 0;
         $535 = $533 - +HEAPF64[$242_1 >> 3];
         $245_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
         HEAP32[($3_1 + 140 | 0) >> 2] = $245_1 + 8 | 0;
         HEAPF64[$245_1 >> 3] = $535;
         continue label$22;
        };
       }
      }
      continue label$19;
     };
    }
   }
   HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
   label$23 : {
    if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
     break label$23
    }
    HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
    HEAP32[($3_1 + 164 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
    label$24 : {
     label$25 : while (1) {
      $263_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
      HEAP32[($3_1 + 164 | 0) >> 2] = $263_1 + -1 | 0;
      if (!$263_1) {
       break label$24
      }
      HEAP32[($3_1 + 168 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      label$26 : {
       label$27 : while (1) {
        $268_1 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
        HEAP32[($3_1 + 168 | 0) >> 2] = $268_1 + -1 | 0;
        if (!$268_1) {
         break label$26
        }
        $538 = +$357(+(+HEAPF64[(0 + 88152 | 0) >> 3]), +(+HEAPF64[(0 + 88160 | 0) >> 3]));
        $273_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
        HEAP32[($3_1 + 140 | 0) >> 2] = $273_1 + 8 | 0;
        HEAPF64[$273_1 >> 3] = +HEAPF64[$273_1 >> 3] * $538;
        continue label$27;
       };
      }
      continue label$25;
     };
    }
   }
   $19(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0, ((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0 | 0, HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 16 | 0 | 0, $3_1 + 132 | 0 | 0);
   label$28 : {
    if (!(HEAP32[($3_1 + 132 | 0) >> 2] | 0)) {
     break label$28
    }
    label$29 : {
     if (!($49(HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0) | 0)) {
      break label$29
     }
     label$30 : {
      if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
       break label$30
      }
      $301_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
      $396($301_1 | 0, 2 | 0, 2420 | 0, $3_1 + 64 | 0 | 0);
     }
    }
   }
  }
  $308_1 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
  HEAP32[($308_1 + 80 | 0) >> 2] = (HEAP32[($308_1 + 80 | 0) >> 2] | 0) & -131073 | 0;
  label$31 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$31
   }
   label$32 : {
    label$33 : {
     if (!(HEAP32[(0 + 88268 | 0) >> 2] | 0)) {
      break label$33
     }
     label$34 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] >= +HEAPF64[(0 + 89416 | 0) >> 3] * 2.0 & 1 | 0)) {
       break label$34
      }
      $329_1 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
      HEAP32[($329_1 + 80 | 0) >> 2] = (HEAP32[($329_1 + 80 | 0) >> 2] | 0) & -131073 | 0 | 131072 | 0;
     }
     break label$32;
    }
    label$35 : {
     if (!(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] > -+HEAPF64[(0 + 89416 | 0) >> 3] * 2.0 & 1 | 0)) {
      break label$35
     }
     $348_1 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
     HEAP32[($348_1 + 80 | 0) >> 2] = (HEAP32[($348_1 + 80 | 0) >> 2] | 0) & -131073 | 0 | 131072 | 0;
    }
   }
  }
  label$36 : {
   label$37 : {
    if (HEAP32[(0 + 88120 | 0) >> 2] | 0) {
     break label$37
    }
    if (HEAP32[(0 + 87832 | 0) >> 2] | 0) {
     break label$37
    }
    if (HEAP32[(0 + 88232 | 0) >> 2] | 0) {
     break label$37
    }
    if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 1797693134862315708145274.0e284 & 1 | 0)) {
     break label$36
    }
   }
   $364_1 = 0;
   HEAP32[(0 + 90328 | 0) >> 2] = HEAP32[(0 + 88140 | 0) >> 2] | 0;
   HEAP32[(0 + 88140 | 0) >> 2] = $364_1;
   HEAP32[($3_1 + 180 | 0) >> 2] = $364_1;
   label$38 : {
    if (!((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($364_1 | 0) & 1 | 0)) {
     break label$38
    }
    HEAP32[($3_1 + 176 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$39 : {
     label$40 : while (1) {
      $381_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
      HEAP32[($3_1 + 176 | 0) >> 2] = $381_1 + 4 | 0;
      $384_1 = HEAP32[$381_1 >> 2] | 0;
      HEAP32[($3_1 + 180 | 0) >> 2] = $384_1;
      if (!(($384_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$39
      }
      label$41 : {
       if (!((HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$41
       }
       $398_1 = 0;
       HEAP32[($3_1 + 128 | 0) >> 2] = $398_1;
       HEAP32[(0 + 91024 | 0) >> 2] = (HEAP32[(0 + 91024 | 0) >> 2] | 0) + 1 | 0;
       $4(HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0, $3_1 + 152 | 0 | 0);
       label$42 : {
        label$43 : {
         if (!(+HEAPF64[($3_1 + 152 | 0) >> 3] < +($398_1 | 0) & 1 | 0)) {
          break label$43
         }
         $556 = -+HEAPF64[($3_1 + 152 | 0) >> 3];
         break label$42;
        }
        $556 = +HEAPF64[($3_1 + 152 | 0) >> 3];
       }
       HEAPF64[($3_1 + 152 | 0) >> 3] = $556;
       HEAP32[(0 + 91736 | 0) >> 2] = (HEAP32[(0 + 91736 | 0) >> 2] | 0) + 1 | 0;
       HEAPF64[(0 + 91744 | 0) >> 3] = +HEAPF64[(0 + 91744 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3];
       label$44 : {
        label$45 : {
         if (!(+HEAPF64[($3_1 + 152 | 0) >> 3] > +HEAPF64[(0 + 91752 | 0) >> 3] & 1 | 0)) {
          break label$45
         }
         HEAPF64[(0 + 91752 | 0) >> 3] = +HEAPF64[($3_1 + 152 | 0) >> 3];
         label$46 : {
          if (!(+HEAPF64[($3_1 + 152 | 0) >> 3] > +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
           break label$46
          }
          HEAPF64[(0 + 90152 | 0) >> 3] = +HEAPF64[($3_1 + 152 | 0) >> 3];
          label$47 : {
           if (!(+HEAPF64[($3_1 + 152 | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0)) {
            break label$47
           }
           HEAP32[($3_1 + 128 | 0) >> 2] = 1;
          }
         }
         break label$44;
        }
        label$48 : {
         if (!(-+HEAPF64[($3_1 + 152 | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0)) {
          break label$48
         }
         HEAP32[($3_1 + 128 | 0) >> 2] = 1;
        }
       }
       label$49 : {
        if (!(HEAP32[($3_1 + 128 | 0) >> 2] | 0)) {
         break label$49
        }
        $442_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $445_1 = $267(HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
        $447_1 = HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $573 = +HEAPF64[($3_1 + 152 | 0) >> 3];
        $449_1 = HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $449_1;
        HEAPF64[($3_1 + 8 | 0) >> 3] = $573;
        HEAP32[($3_1 + 4 | 0) >> 2] = $447_1;
        HEAP32[$3_1 >> 2] = $445_1;
        $396($442_1 | 0, 3060 | 0, 2518 | 0, $3_1 | 0);
        $459_1 = 0;
        $383(2618 | 0, HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0, $459_1 | 0, $459_1 | 0, $459_1 | 0);
       }
      }
      continue label$40;
     };
    }
   }
   HEAP32[(0 + 88140 | 0) >> 2] = HEAP32[(0 + 90328 | 0) >> 2] | 0;
  }
  label$50 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$50
   }
   $473_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $475_1 = HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAPF64[($3_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 16 | 0) >> 3];
   HEAP32[($3_1 + 48 | 0) >> 2] = $475_1;
   $396($473_1 | 0, 8017 | 0, 2626 | 0, $3_1 + 48 | 0 | 0);
   HEAP32[($3_1 + 168 | 0) >> 2] = 0;
   label$51 : {
    label$52 : while (1) {
     if (!((HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$51
     }
     $491_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAPF64[($3_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $396($491_1 | 0, 8018 | 0, 2670 | 0, $3_1 + 32 | 0 | 0);
     HEAP32[($3_1 + 168 | 0) >> 2] = (HEAP32[($3_1 + 168 | 0) >> 2] | 0) + 1 | 0;
     continue label$52;
    };
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8019 | 0, 2677 | 0, 0 | 0);
  }
  $250(HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0) | 0;
  label$53 : {
   if (!((HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$53
   }
   HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
   $93(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 192 | 0;
  return;
 }
 
 function $18($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $17_1 = 0, $44_1 = 0, $108_1 = 0, $146_1 = 0, $405_1 = 0, $448_1 = 0;
  $9_1 = global$0 - 64 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$2
    }
    $17_1 = 0;
    HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3];
    HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3];
    $16(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0, $17_1 | 0, $17_1 | 0);
    HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] = -(+HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3]);
    HEAP32[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 2] = $17_1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$4
     }
     $44_1 = 0;
     HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] = (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]);
     HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] = (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]);
     HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 3] = (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]);
     $16(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0, $44_1 | 0, $44_1 | 0);
     HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] = -(+HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 3]);
     HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
     HEAP32[($9_1 + 12 | 0) >> 2] = HEAP32[($9_1 + 60 | 0) >> 2] | 0;
     label$5 : {
      label$6 : while (1) {
       $108_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
       HEAP32[($9_1 + 12 | 0) >> 2] = $108_1 + -1 | 0;
       if (!$108_1) {
        break label$5
       }
       HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       label$7 : {
        if (!((HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAPF64[($9_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] + (+HEAPF64[(HEAP32[($9_1 + 8 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 3]);
        label$8 : {
         label$9 : {
          if (+HEAPF64[($9_1 + 16 | 0) >> 3] > +HEAPF64[($9_1 + 24 | 0) >> 3] & 1 | 0) {
           break label$9
          }
          if (!(+HEAPF64[($9_1 + 16 | 0) >> 3] < -+HEAPF64[($9_1 + 24 | 0) >> 3] & 1 | 0)) {
           break label$8
          }
         }
         HEAP32[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 2] = 1;
         break label$5;
        }
       }
       continue label$6;
      };
     }
     break label$3;
    }
    label$10 : {
     if (!((HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
      break label$10
     }
     $146_1 = 0;
     HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] = -((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3])) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3])) + (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3])));
     HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] = (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3])) - (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3])) + (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]));
     HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 3] = -((+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3])) - (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3])) + (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 24 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3])));
     HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 24 | 0) >> 3] = (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3])) - (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3])) + (+HEAPF64[(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) >> 3]) * ((+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) - (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3]) * (+HEAPF64[((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3]));
     $16(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0, $146_1 | 0, $146_1 | 0);
     HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] = -(+HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 24 | 0) >> 3]);
     HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
     HEAP32[($9_1 + 12 | 0) >> 2] = HEAP32[($9_1 + 60 | 0) >> 2] | 0;
     label$11 : {
      label$12 : while (1) {
       $405_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
       HEAP32[($9_1 + 12 | 0) >> 2] = $405_1 + -1 | 0;
       if (!$405_1) {
        break label$11
       }
       HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       label$13 : {
        if (!((HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$13
        }
        HEAPF64[($9_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] + (+HEAPF64[(HEAP32[($9_1 + 8 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 24 | 0) >> 3]);
        label$14 : {
         label$15 : {
          if (+HEAPF64[($9_1 + 16 | 0) >> 3] > +HEAPF64[($9_1 + 24 | 0) >> 3] & 1 | 0) {
           break label$15
          }
          if (!(+HEAPF64[($9_1 + 16 | 0) >> 3] < -+HEAPF64[($9_1 + 24 | 0) >> 3] & 1 | 0)) {
           break label$14
          }
         }
         HEAP32[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 2] = 1;
         break label$11;
        }
       }
       continue label$12;
      };
     }
    }
   }
  }
  label$16 : {
   if (!(HEAP32[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 2] | 0)) {
    break label$16
   }
   HEAP32[(0 + 91664 | 0) >> 2] = (HEAP32[(0 + 91664 | 0) >> 2] | 0) + 1 | 0;
   label$17 : {
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$17
    }
    $448_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[$9_1 >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
    $396($448_1 | 0, 3 | 0, 2679 | 0, $9_1 | 0);
   }
  }
  global$0 = $9_1 + 64 | 0;
  return;
 }
 
 function $19($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $24_1 = 0, $99_1 = 0, $104_1 = 0, $107_1 = 0, $114_1 = 0, $117_1 = 0, $120_1 = 0, $123_1 = 0, $54_1 = 0, $88_1 = 0, $128_1 = 0.0, $132_1 = 0.0;
  $9_1 = global$0 - 80 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = HEAP32[($9_1 + 64 | 0) >> 2] | 0;
  HEAP32[($9_1 + 32 | 0) >> 2] = 0;
  $9(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 76 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, $9_1 + 36 | 0 | 0, HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0);
  HEAP32[($9_1 + 40 | 0) >> 2] = (HEAP32[($9_1 + 76 | 0) >> 2] | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    $24_1 = HEAP32[($9_1 + 40 | 0) >> 2] | 0;
    HEAP32[($9_1 + 40 | 0) >> 2] = $24_1 + -1 | 0;
    if (!$24_1) {
     break label$1
    }
    label$3 : {
     if (!(+HEAPF64[((HEAP32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($9_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) ^ 1 | 0;
    }
    continue label$2;
   };
  }
  label$4 : {
   label$5 : {
    if (!(HEAP32[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 2] | 0)) {
     break label$5
    }
    HEAP32[(0 + 91680 | 0) >> 2] = (HEAP32[(0 + 91680 | 0) >> 2] | 0) + 1 | 0;
    label$6 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$6
     }
     $54_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[$9_1 >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     $396($54_1 | 0, 4 | 0, 2766 | 0, $9_1 | 0);
    }
    $8(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 76 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, $9_1 + 32 | 0 | 0);
    break label$4;
   }
   $8(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 76 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, $9_1 + 32 | 0 | 0);
   label$7 : {
    if (!(HEAP32[($9_1 + 32 | 0) >> 2] | 0)) {
     break label$7
    }
    HEAP32[(0 + 91680 | 0) >> 2] = (HEAP32[(0 + 91680 | 0) >> 2] | 0) + 1 | 0;
    label$8 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$8
     }
     $88_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($9_1 + 16 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     $396($88_1 | 0, 5 | 0, 2847 | 0, $9_1 + 16 | 0 | 0);
    }
   }
  }
  label$9 : {
   if (!(HEAP32[($9_1 + 32 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 2] = 1;
  }
  $99_1 = 0;
  $16(HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, 1 | 0, $99_1 | 0, $99_1 | 0);
  HEAP32[($9_1 + 48 | 0) >> 2] = HEAP32[($9_1 + 68 | 0) >> 2] | 0;
  HEAP32[($9_1 + 44 | 0) >> 2] = HEAP32[($9_1 + 60 | 0) >> 2] | 0;
  $104_1 = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
  HEAP32[($9_1 + 48 | 0) >> 2] = $104_1 + 8 | 0;
  $128_1 = +HEAPF64[$104_1 >> 3];
  $107_1 = HEAP32[($9_1 + 44 | 0) >> 2] | 0;
  HEAP32[($9_1 + 44 | 0) >> 2] = $107_1 + 8 | 0;
  HEAPF64[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 3] = -($128_1 * +HEAPF64[$107_1 >> 3]);
  HEAP32[($9_1 + 40 | 0) >> 2] = (HEAP32[($9_1 + 76 | 0) >> 2] | 0) - 1 | 0;
  label$10 : {
   label$11 : while (1) {
    $114_1 = HEAP32[($9_1 + 40 | 0) >> 2] | 0;
    HEAP32[($9_1 + 40 | 0) >> 2] = $114_1 + -1 | 0;
    if (!$114_1) {
     break label$10
    }
    $117_1 = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
    HEAP32[($9_1 + 48 | 0) >> 2] = $117_1 + 8 | 0;
    $132_1 = +HEAPF64[$117_1 >> 3];
    $120_1 = HEAP32[($9_1 + 44 | 0) >> 2] | 0;
    HEAP32[($9_1 + 44 | 0) >> 2] = $120_1 + 8 | 0;
    $123_1 = HEAP32[($9_1 + 56 | 0) >> 2] | 0;
    HEAPF64[$123_1 >> 3] = +HEAPF64[$123_1 >> 3] - $132_1 * +HEAPF64[$120_1 >> 3];
    continue label$11;
   };
  }
  global$0 = $9_1 + 80 | 0;
  return;
 }
 
 function $20($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $25_1 = 0, $20_1 = 0, $29_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 24 | 0) >> 2] | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0;
  $13_1 = $395(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $13_1;
  label$1 : {
   if (($13_1 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   $20_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   $396($20_1 | 0, 6004 | 0, 2938 | 0, $5_1 | 0);
   $25_1 = 0;
   $382(4 | 0, $25_1 | 0, $25_1 | 0);
  }
  $512(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $29_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $29_1 | 0;
 }
 
 function $21($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[(HEAP32[$6_1 >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
   HEAPF64[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 3] = -(+HEAPF64[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 3]);
   HEAPF64[((HEAP32[$6_1 >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 3];
  }
  return;
 }
 
 function $22($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $21_1 = 0, $130_1 = 0.0, $169_1 = 0.0, $102_1 = 0, $181_1 = 0.0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $7_1 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = +($7_1 | 0);
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = $7_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break label$2
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6005 | 0, 2990 | 0, 0 | 0);
    $21_1 = 0;
    $382(5 | 0, $21_1 | 0, $21_1 | 0);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[(HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3];
     label$5 : {
      label$6 : {
       if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$6
       }
       $130_1 = -+HEAPF64[($5_1 + 8 | 0) >> 3];
       break label$5;
      }
      $130_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
     }
     label$7 : {
      if (!($130_1 < 10.0 * +HEAPF64[((HEAP32[(0 + 89528 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
       break label$7
      }
      HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = 1;
     }
     break label$3;
    }
    label$8 : {
     label$9 : {
      if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 3] * (+HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3]) - +HEAPF64[(HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] * (+HEAPF64[((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 3]) + +HEAPF64[(HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] * (+HEAPF64[((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]);
      label$10 : {
       label$11 : {
        if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
         break label$11
        }
        $169_1 = -+HEAPF64[($5_1 + 8 | 0) >> 3];
        break label$10;
       }
       $169_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
      }
      label$12 : {
       if (!($169_1 < 10.0 * +HEAPF64[((HEAP32[(0 + 89528 | 0) >> 2] | 0) + 16 | 0) >> 3] & 1 | 0)) {
        break label$12
       }
       HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = 1;
      }
      break label$8;
     }
     $9(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $5_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAPF64[($5_1 + 8 | 0) >> 3] = 1.0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$13 : {
      label$14 : while (1) {
       $102_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = $102_1 + -1 | 0;
       if (!$102_1) {
        break label$13
       }
       HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       continue label$14;
      };
     }
     label$15 : {
      if (!(HEAP32[$5_1 >> 2] | 0)) {
       break label$15
      }
      HEAPF64[($5_1 + 8 | 0) >> 3] = -+HEAPF64[($5_1 + 8 | 0) >> 3];
     }
    }
   }
  }
  $181_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
  global$0 = $5_1 + 32 | 0;
  return +$181_1;
 }
 
 function $23($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $119_1 = 0.0, $148_1 = 0.0, $114_1 = 0, $166_1 = 0.0, $168_1 = 0.0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  $119_1 = +(0 | 0);
  HEAP32[($5_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 100 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $119_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $119_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 88196 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAPF64[($5_1 + 80 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
    break label$1;
   }
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      label$6 : {
       if (!(HEAP32[(0 + 88192 | 0) >> 2] | 0)) {
        break label$6
       }
       if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == ((HEAP32[($5_1 + 100 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[($5_1 + 24 | 0) >> 3];
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
         break label$8
        }
        if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == ((HEAP32[($5_1 + 100 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAPF64[($5_1 + 88 | 0) >> 3] = 2.0 * +HEAPF64[($5_1 + 40 | 0) >> 3] * +HEAPF64[($5_1 + 40 | 0) >> 3];
        break label$7;
       }
       HEAPF64[($5_1 + 64 | 0) >> 3] = -1797693134862315708145274.0e284;
       HEAPF64[($5_1 + 56 | 0) >> 3] = 1797693134862315708145274.0e284;
       HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
       HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
       label$9 : {
        label$10 : while (1) {
         if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 48 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$9
         }
         label$11 : {
          if (!(+HEAPF64[($5_1 + 64 | 0) >> 3] < +HEAPF64[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
           break label$11
          }
          HEAPF64[($5_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         }
         label$12 : {
          if (!(+HEAPF64[($5_1 + 56 | 0) >> 3] > +HEAPF64[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
           break label$12
          }
          HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         }
         HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
         continue label$10;
        };
       }
       label$13 : {
        if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] < +HEAPF64[($5_1 + 64 | 0) >> 3] - +HEAPF64[($5_1 + 56 | 0) >> 3] & 1 | 0)) {
         break label$13
        }
        HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 64 | 0) >> 3] - +HEAPF64[($5_1 + 56 | 0) >> 3];
       }
       label$14 : {
        label$15 : {
         if (!(+HEAPF64[($5_1 + 64 | 0) >> 3] < -+HEAPF64[($5_1 + 56 | 0) >> 3] & 1 | 0)) {
          break label$15
         }
         $148_1 = -+HEAPF64[($5_1 + 56 | 0) >> 3];
         break label$14;
        }
        $148_1 = +HEAPF64[($5_1 + 64 | 0) >> 3];
       }
       HEAPF64[($5_1 + 88 | 0) >> 3] = $148_1;
      }
     }
     HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[($5_1 + 32 | 0) >> 3] + +HEAPF64[($5_1 + 88 | 0) >> 3];
     label$16 : {
      if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] < +HEAPF64[($5_1 + 88 | 0) >> 3] & 1 | 0)) {
       break label$16
      }
      HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[($5_1 + 88 | 0) >> 3];
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAPF64[($5_1 + 80 | 0) >> 3] = +$24(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 40 | 0) >> 3]), +(+HEAPF64[($5_1 + 32 | 0) >> 3]));
  }
  HEAPF64[($5_1 + 72 | 0) >> 3] = +HEAPF64[($5_1 + 80 | 0) >> 3] * 3.0e4;
  label$17 : {
   if (!(+HEAPF64[($5_1 + 72 | 0) >> 3] < 6.661338147750939e-12 & 1 | 0)) {
    break label$17
   }
   HEAPF64[($5_1 + 72 | 0) >> 3] = 6.661338147750939e-12;
  }
  label$18 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$18
   }
   $114_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $166_1 = +HEAPF64[($5_1 + 72 | 0) >> 3];
   HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 24 | 0) >> 3];
   HEAPF64[$5_1 >> 3] = $166_1;
   $396($114_1 | 0, 2001 | 0, 3066 | 0, $5_1 | 0);
  }
  $168_1 = +HEAPF64[($5_1 + 72 | 0) >> 3];
  global$0 = $5_1 + 112 | 0;
  return +$168_1;
 }
 
 function $24($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $23_1 = 0, $69_1 = 0.0, $38_1 = 0, $71_1 = 0.0, $72_1 = 0.0, $73_1 = 0.0, $75_1 = 0.0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 92 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 80 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 72 | 0) >> 3] = $2_1;
  HEAPF64[($5_1 + 64 | 0) >> 3] = Math_sqrt(+(HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0)) * +HEAPF64[($5_1 + 80 | 0) >> 3];
  label$1 : {
   if (!(+HEAPF64[($5_1 + 64 | 0) >> 3] > +HEAPF64[($5_1 + 72 | 0) >> 3] & 1 | 0)) {
    break label$1
   }
   HEAPF64[($5_1 + 64 | 0) >> 3] = +HEAPF64[($5_1 + 72 | 0) >> 3];
  }
  HEAPF64[($5_1 + 56 | 0) >> 3] = 2.220446049250313e-16 * (+(HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) * +HEAPF64[($5_1 + 64 | 0) >> 3] * 1.01 + +HEAPF64[($5_1 + 80 | 0) >> 3]);
  label$2 : {
   if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
    break label$2
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[(0 + 88144 | 0) >> 3] * +HEAPF64[($5_1 + 80 | 0) >> 3];
   HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[($5_1 + 56 | 0) >> 3] + +HEAPF64[($5_1 + 48 | 0) >> 3];
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$3
    }
    $23_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $69_1 = +HEAPF64[($5_1 + 48 | 0) >> 3];
    HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[(0 + 88144 | 0) >> 3];
    HEAPF64[($5_1 + 32 | 0) >> 3] = $69_1;
    $396($23_1 | 0, 4092 | 0, 3844 | 0, $5_1 + 32 | 0 | 0);
   }
  }
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$4
   }
   $38_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $71_1 = +HEAPF64[($5_1 + 56 | 0) >> 3];
   $72_1 = +HEAPF64[($5_1 + 80 | 0) >> 3];
   $73_1 = +HEAPF64[($5_1 + 72 | 0) >> 3];
   HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 64 | 0) >> 3];
   HEAPF64[($5_1 + 16 | 0) >> 3] = $73_1;
   HEAPF64[($5_1 + 8 | 0) >> 3] = $72_1;
   HEAPF64[$5_1 >> 3] = $71_1;
   $396($38_1 | 0, 4008 | 0, 3919 | 0, $5_1 | 0);
  }
  $75_1 = +HEAPF64[($5_1 + 56 | 0) >> 3];
  global$0 = $5_1 + 96 | 0;
  return +$75_1;
 }
 
 function $25() {
  var $2_1 = 0, $50_1 = 0.0, $27_1 = 0, $57_1 = 0.0, $58_1 = 0.0, $59_1 = 0.0, $60_1 = 0.0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[(0 + 90152 | 0) >> 3] < +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    $50_1 = +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
    break label$1;
   }
   $50_1 = +HEAPF64[(0 + 90152 | 0) >> 3];
  }
  HEAPF64[($2_1 + 40 | 0) >> 3] = $50_1;
  label$3 : {
   if (!(+HEAPF64[($2_1 + 40 | 0) >> 3] < +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
    break label$3
   }
   HEAPF64[($2_1 + 40 | 0) >> 3] = +HEAPF64[(0 + 87728 | 0) >> 3];
  }
  HEAPF64[(0 + 89464 | 0) >> 3] = +HEAPF64[($2_1 + 40 | 0) >> 3];
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$4
   }
   $27_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $57_1 = +HEAPF64[(0 + 89464 | 0) >> 3];
   $58_1 = +HEAPF64[(0 + 90152 | 0) >> 3];
   $59_1 = +HEAPF64[(0 + 89544 | 0) >> 3];
   $60_1 = +HEAPF64[(0 + 87728 | 0) >> 3];
   HEAPF64[($2_1 + 32 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
   HEAPF64[($2_1 + 24 | 0) >> 3] = $60_1;
   HEAPF64[($2_1 + 16 | 0) >> 3] = $59_1;
   HEAPF64[($2_1 + 8 | 0) >> 3] = $58_1;
   HEAPF64[$2_1 >> 3] = $57_1;
   $396($27_1 | 0, 3056 | 0, 3109 | 0, $2_1 | 0);
  }
  global$0 = $2_1 + 48 | 0;
  return;
 }
 
 function $26() {
  var $2_1 = 0, $331_1 = 0.0, $189_1 = 0, $47_1 = 0, $181_1 = 0, $395_1 = 0.0, $288_1 = 0, $445_1 = 0.0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $73(3222 | 0, 0 | 0, 87704 + 1776 | 0 | 0);
  label$1 : {
   if (HEAP32[(0 + 88196 | 0) >> 2] | 0) {
    break label$1
   }
   HEAPF64[(0 + 89440 | 0) >> 3] = +$24(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 89448 | 0) >> 3]), +(+HEAPF64[(0 + 89472 | 0) >> 3]));
   $73(3233 | 0, 0 | 0, 87704 + 1736 | 0 | 0);
  }
  HEAPF64[(0 + 89496 | 0) >> 3] = +HEAPF64[(0 + 89488 | 0) >> 3] * +HEAPF64[(0 + 89448 | 0) >> 3];
  HEAPF64[(0 + 89504 | 0) >> 3] = Math_sqrt(+HEAPF64[(0 + 89488 | 0) >> 3] * +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0));
  HEAPF64[(0 + 89512 | 0) >> 3] = +HEAPF64[(0 + 89504 | 0) >> 3] * +HEAPF64[(0 + 89448 | 0) >> 3];
  HEAPF64[(0 + 89416 | 0) >> 3] = 1.01 * +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) * 2.220446049250313e-16;
  label$2 : {
   if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
    break label$2
   }
   HEAPF64[(0 + 89416 | 0) >> 3] = +HEAPF64[(0 + 89416 | 0) >> 3] + +HEAPF64[(0 + 88144 | 0) >> 3];
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$3
    }
    $47_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAPF64[($2_1 + 32 | 0) >> 3] = +HEAPF64[(0 + 88144 | 0) >> 3];
    $396($47_1 | 0, 4096 | 0, 3248 | 0, $2_1 + 32 | 0 | 0);
   }
  }
  label$4 : {
   if (!(+HEAPF64[(0 + 87768 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$4
   }
   HEAPF64[(0 + 87768 | 0) >> 3] = +HEAPF64[(0 + 87768 | 0) >> 3] - +HEAPF64[(0 + 89416 | 0) >> 3];
   label$5 : {
    if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
     break label$5
    }
    $73(3307 | 0, 0 | 0, 87704 + 64 | 0 | 0);
   }
  }
  label$6 : {
   if (!(+HEAPF64[(0 + 87776 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$6
   }
   HEAPF64[(0 + 87776 | 0) >> 3] = +HEAPF64[(0 + 87776 | 0) >> 3] - +HEAPF64[(0 + 89416 | 0) >> 3];
   label$7 : {
    if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
     break label$7
    }
    $73(3334 | 0, 0 | 0, 87704 + 72 | 0 | 0);
   }
  }
  $331_1 = 2.0;
  HEAPF64[(0 + 87888 | 0) >> 3] = +HEAPF64[(0 + 87888 | 0) >> 3] + $331_1 * +HEAPF64[(0 + 89440 | 0) >> 3];
  HEAPF64[(0 + 87896 | 0) >> 3] = +HEAPF64[(0 + 87896 | 0) >> 3] + $331_1 * +HEAPF64[(0 + 89440 | 0) >> 3];
  label$8 : {
   if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
    break label$8
   }
   label$9 : {
    if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
     break label$9
    }
    if (!(HEAP32[(0 + 87948 | 0) >> 2] | 0)) {
     break label$8
    }
   }
   $73(3362 | 0, 0 | 0, 87704 + 184 | 0 | 0);
  }
  label$10 : {
   if (!(HEAP32[(0 + 88140 | 0) >> 2] | 0)) {
    break label$10
   }
   if (!(HEAP32[(0 + 87944 | 0) >> 2] | 0)) {
    break label$10
   }
   $73(3391 | 0, 0 | 0, 87704 + 192 | 0 | 0);
  }
  HEAPF64[($2_1 + 56 | 0) >> 3] = 1.0;
  label$11 : {
   if (!(+HEAPF64[($2_1 + 56 | 0) >> 3] > +HEAPF64[(0 + 87768 | 0) >> 3] & 1 | 0)) {
    break label$11
   }
   HEAPF64[($2_1 + 56 | 0) >> 3] = +HEAPF64[(0 + 87768 | 0) >> 3];
  }
  label$12 : {
   if (!(+HEAPF64[($2_1 + 56 | 0) >> 3] > +HEAPF64[(0 + 87776 | 0) >> 3] & 1 | 0)) {
    break label$12
   }
   HEAPF64[($2_1 + 56 | 0) >> 3] = +HEAPF64[(0 + 87776 | 0) >> 3];
  }
  HEAPF64[(0 + 89544 | 0) >> 3] = Math_sqrt(+(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0)) * +HEAPF64[(0 + 89480 | 0) >> 3] * Math_sqrt(1.0 - +HEAPF64[($2_1 + 56 | 0) >> 3] * +HEAPF64[($2_1 + 56 | 0) >> 3]) + +HEAPF64[(0 + 89440 | 0) >> 3];
  HEAPF64[($2_1 + 48 | 0) >> 3] = +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) * +HEAPF64[(0 + 87888 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
  label$13 : {
   if (!(+HEAPF64[(0 + 89544 | 0) >> 3] < +HEAPF64[($2_1 + 48 | 0) >> 3] & 1 | 0)) {
    break label$13
   }
   HEAPF64[(0 + 89544 | 0) >> 3] = +HEAPF64[($2_1 + 48 | 0) >> 3];
  }
  HEAPF64[($2_1 + 48 | 0) >> 3] = +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) * +HEAPF64[(0 + 87896 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
  label$14 : {
   if (!(+HEAPF64[(0 + 89544 | 0) >> 3] < +HEAPF64[($2_1 + 48 | 0) >> 3] & 1 | 0)) {
    break label$14
   }
   HEAPF64[(0 + 89544 | 0) >> 3] = +HEAPF64[($2_1 + 48 | 0) >> 3];
  }
  label$15 : {
   if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
    break label$15
   }
   $73(3421 | 0, 0 | 0, 87704 + 1840 | 0 | 0);
  }
  HEAPF64[(0 + 89536 | 0) >> 3] = +HEAPF64[(0 + 89544 | 0) >> 3] * 5.0;
  label$16 : {
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$16
   }
   label$17 : {
    if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
     break label$17
    }
    if (!(HEAP32[(0 + 87844 | 0) >> 2] | 0)) {
     break label$16
    }
   }
   HEAP32[(0 + 88312 | 0) >> 2] = 1;
   HEAPF64[($2_1 + 40 | 0) >> 3] = Math_sqrt(+(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0)) * +HEAPF64[(0 + 90136 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
   HEAPF64[($2_1 + 40 | 0) >> 3] = 2.0 * +HEAPF64[($2_1 + 40 | 0) >> 3];
   label$18 : {
    if (!(+HEAPF64[(0 + 89536 | 0) >> 3] < +HEAPF64[($2_1 + 40 | 0) >> 3] & 1 | 0)) {
     break label$18
    }
    HEAPF64[(0 + 89536 | 0) >> 3] = +HEAPF64[($2_1 + 40 | 0) >> 3];
   }
  }
  label$19 : {
   if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
    break label$19
   }
   $73(3432 | 0, 0 | 0, 87704 + 1832 | 0 | 0);
  }
  label$20 : {
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
    break label$20
   }
   $181_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $395_1 = +HEAPF64[(0 + 90136 | 0) >> 3];
   HEAPF64[($2_1 + 24 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
   HEAPF64[($2_1 + 16 | 0) >> 3] = $395_1;
   $396($181_1 | 0, 6006 | 0, 3445 | 0, $2_1 + 16 | 0 | 0);
   $189_1 = 0;
   $382(1 | 0, $189_1 | 0, $189_1 | 0);
  }
  label$21 : {
   if (!(+HEAPF64[(0 + 87912 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$21
   }
   label$22 : {
    label$23 : {
     if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
      break label$23
     }
     HEAPF64[(0 + 87912 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
     break label$22;
    }
    label$24 : {
     label$25 : {
      if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
       break label$25
      }
      HEAPF64[(0 + 87912 | 0) >> 3] = +HEAPF64[(0 + 87888 | 0) >> 3];
      break label$24;
     }
     HEAPF64[(0 + 87912 | 0) >> 3] = 3.0 * +HEAPF64[(0 + 87888 | 0) >> 3];
    }
   }
   label$26 : {
    if (!(HEAP32[(0 + 87724 | 0) >> 2] | 0)) {
     break label$26
    }
    if (!(+HEAPF64[(0 + 87912 | 0) >> 3] > +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
     break label$26
    }
    HEAPF64[(0 + 87912 | 0) >> 3] = +HEAPF64[(0 + 87728 | 0) >> 3];
   }
   $73(3544 | 0, 0 | 0, 87704 + 208 | 0 | 0);
  }
  label$27 : {
   if (!(+HEAPF64[(0 + 87864 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$27
   }
   HEAPF64[(0 + 87864 | 0) >> 3] = +HEAPF64[(0 + 87912 | 0) >> 3];
   $73(3561 | 0, 0 | 0, 87704 + 160 | 0 | 0);
  }
  label$28 : {
   if (HEAP32[(0 + 87724 | 0) >> 2] | 0) {
    break label$28
   }
   HEAPF64[(0 + 87728 | 0) >> 3] = 2.0 * +HEAPF64[(0 + 87912 | 0) >> 3];
   label$29 : {
    if (!(+HEAPF64[(0 + 87768 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$29
    }
    label$30 : {
     if (!(+HEAPF64[(0 + 87728 | 0) >> 3] < (1.0 - +HEAPF64[(0 + 87768 | 0) >> 3]) * +HEAPF64[(0 + 89448 | 0) >> 3] & 1 | 0)) {
      break label$30
     }
     HEAPF64[(0 + 87728 | 0) >> 3] = (1.0 - +HEAPF64[(0 + 87768 | 0) >> 3]) * +HEAPF64[(0 + 89448 | 0) >> 3];
    }
   }
   $73(3576 | 0, 0 | 0, 87704 + 24 | 0 | 0);
  }
  HEAPF64[(0 + 89560 | 0) >> 3] = +HEAPF64[(0 + 87728 | 0) >> 3];
  label$31 : {
   if (!(+HEAPF64[(0 + 89560 | 0) >> 3] < 6.0 * +HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
    break label$31
   }
   HEAPF64[(0 + 89560 | 0) >> 3] = 6.0 * +HEAPF64[(0 + 87864 | 0) >> 3];
  }
  label$32 : {
   if (!(+HEAPF64[(0 + 89560 | 0) >> 3] < 6.0 * +HEAPF64[(0 + 87912 | 0) >> 3] & 1 | 0)) {
    break label$32
   }
   HEAPF64[(0 + 89560 | 0) >> 3] = 6.0 * +HEAPF64[(0 + 87912 | 0) >> 3];
  }
  $73(3590 | 0, 0 | 0, 87704 + 1856 | 0 | 0);
  label$33 : {
   if (!(+HEAPF64[(0 + 87912 | 0) >> 3] > +HEAPF64[(0 + 87728 | 0) >> 3] + 6.661338147750939e-16 & 1 | 0)) {
    break label$33
   }
   if (HEAP32[(0 + 87748 | 0) >> 2] | 0) {
    break label$33
   }
   if (HEAP32[(0 + 87800 | 0) >> 2] | 0) {
    break label$33
   }
   $288_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $445_1 = +HEAPF64[(0 + 87912 | 0) >> 3];
   HEAPF64[($2_1 + 8 | 0) >> 3] = +HEAPF64[(0 + 87728 | 0) >> 3];
   HEAPF64[$2_1 >> 3] = $445_1;
   $396($288_1 | 0, 7001 | 0, 3602 | 0, $2_1 | 0);
  }
  HEAPF64[(0 + 90160 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
  HEAPF64[(0 + 90168 | 0) >> 3] = -+HEAPF64[(0 + 89440 | 0) >> 3];
  $25();
  global$0 = $2_1 + 64 | 0;
  return;
 }
 
 function $27($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $27_1 = 0, $30_1 = 0, $45_1 = 0, $54_1 = 0, $57_1 = 0, $60_1 = 0, $63_1 = 0, $82_1 = 0, $43_1 = 0, $44_1 = 0, $107_1 = 0.0, $109_1 = 0.0, $74_1 = 0, $75_1 = 0, $95_1 = 0, $111_1 = 0.0, $97_1 = 0, $98_1 = 0, $112_1 = 0.0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $7_1;
  HEAP32[(0 + 90976 | 0) >> 2] = (HEAP32[(0 + 90976 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[(0 + 90300 | 0) >> 2] | 0;
  HEAP32[($6_1 + 64 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 60 | 0) >> 2] = (HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $27_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
     HEAP32[($6_1 + 60 | 0) >> 2] = $27_1 + 4 | 0;
     $30_1 = HEAP32[$27_1 >> 2] | 0;
     HEAP32[($6_1 + 64 | 0) >> 2] = $30_1;
     if (!(($30_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      break label$2;
     }
     $43_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
     $44_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
     $45_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
     HEAP32[($6_1 + 48 | 0) >> 2] = $45_1 + 1 | 0;
     HEAP32[($44_1 + ($45_1 << 2 | 0) | 0) >> 2] = $43_1;
     HEAP32[($6_1 + 72 | 0) >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
     HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
     label$5 : {
      label$6 : while (1) {
       $54_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
       HEAP32[($6_1 + 52 | 0) >> 2] = $54_1 + -1 | 0;
       if (!$54_1) {
        break label$5
       }
       $57_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
       HEAP32[($6_1 + 72 | 0) >> 2] = $57_1 + 8 | 0;
       $107_1 = +HEAPF64[$57_1 >> 3];
       $60_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
       HEAP32[($6_1 + 76 | 0) >> 2] = $60_1 + 8 | 0;
       $109_1 = $107_1 - +HEAPF64[$60_1 >> 3];
       $63_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
       HEAP32[($6_1 + 68 | 0) >> 2] = $63_1 + 8 | 0;
       HEAPF64[$63_1 >> 3] = $109_1;
       continue label$6;
      };
     }
     continue label$3;
    };
   }
  }
  label$7 : {
   if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$7
   }
   $74_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $75_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
   HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
   HEAP32[($6_1 + 32 | 0) >> 2] = $75_1;
   $396($74_1 | 0, 6007 | 0, 3717 | 0, $6_1 + 32 | 0 | 0);
   $82_1 = 0;
   $382(5 | 0, $82_1 | 0, $82_1 | 0);
  }
  HEAPF64[($6_1 + 40 | 0) >> 3] = +$22(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0);
  label$8 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$8
   }
   $95_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $111_1 = +HEAPF64[($6_1 + 40 | 0) >> 3];
   $97_1 = $267(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) | 0;
   $98_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 80 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($6_1 + 12 | 0) >> 2] = $98_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $97_1;
   HEAPF64[$6_1 >> 3] = $111_1;
   $396($95_1 | 0, 2002 | 0, 3782 | 0, $6_1 | 0);
  }
  $112_1 = +HEAPF64[($6_1 + 40 | 0) >> 3];
  global$0 = $6_1 + 96 | 0;
  return +$112_1;
 }
 
 function $28($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $11_1 = 0, $14_1 = 0, $17_1 = 0, $21_1 = 0.0;
  $6_1 = global$0 - 48 | 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
  HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 3];
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $11_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $11_1 + -1 | 0;
    if (!$11_1) {
     break label$1
    }
    $14_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $14_1 + 8 | 0;
    $21_1 = +HEAPF64[$14_1 >> 3];
    $17_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    HEAP32[($6_1 + 28 | 0) >> 2] = $17_1 + 8 | 0;
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] + $21_1 * +HEAPF64[$17_1 >> 3];
    continue label$2;
   };
  }
  return +(+HEAPF64[($6_1 + 16 | 0) >> 3]);
 }
 
 function $29($0_1, $1_1, $2_1, $3_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $49_1 = 0.0, $56_1 = 0.0;
  $6_1 = global$0 - 64 | 0;
  HEAPF64[($6_1 + 48 | 0) >> 3] = $0_1;
  HEAPF64[($6_1 + 40 | 0) >> 3] = $1_1;
  HEAPF64[($6_1 + 32 | 0) >> 3] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] < +HEAPF64[($6_1 + 32 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] > -+HEAPF64[($6_1 + 32 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$4
      }
      $49_1 = -+HEAPF64[($6_1 + 48 | 0) >> 3];
      break label$3;
     }
     $49_1 = +HEAPF64[($6_1 + 48 | 0) >> 3];
    }
    HEAPF64[($6_1 + 8 | 0) >> 3] = $49_1;
    label$5 : {
     label$6 : {
      if (!(+HEAPF64[($6_1 + 40 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$6
      }
      $56_1 = -+HEAPF64[($6_1 + 40 | 0) >> 3];
      break label$5;
     }
     $56_1 = +HEAPF64[($6_1 + 40 | 0) >> 3];
    }
    HEAPF64[$6_1 >> 3] = $56_1;
    label$7 : {
     if (!(+HEAPF64[($6_1 + 8 | 0) >> 3] < +HEAPF64[$6_1 >> 3] & 1 | 0)) {
      break label$7
     }
     HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] = 0;
     HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 48 | 0) >> 3] / +HEAPF64[($6_1 + 40 | 0) >> 3];
     break label$1;
    }
    HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] = 1;
    HEAPF64[($6_1 + 56 | 0) >> 3] = +(0 | 0);
    break label$1;
   }
   HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 40 | 0) >> 3] / +HEAPF64[($6_1 + 48 | 0) >> 3];
   label$8 : {
    label$9 : {
     if (+HEAPF64[($6_1 + 16 | 0) >> 3] > +HEAPF64[($6_1 + 32 | 0) >> 3] & 1 | 0) {
      break label$9
     }
     if (!(+HEAPF64[($6_1 + 16 | 0) >> 3] < -+HEAPF64[($6_1 + 32 | 0) >> 3] & 1 | 0)) {
      break label$8
     }
    }
    HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] = 0;
    HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 48 | 0) >> 3] / +HEAPF64[($6_1 + 40 | 0) >> 3];
    break label$1;
   }
   HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] = 1;
   HEAPF64[($6_1 + 56 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($6_1 + 56 | 0) >> 3]);
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $44_1 = 0, $57_1 = 0, $60_1 = 0, $122_1 = 0.0, $113_1 = 0, $115_1 = 0, $128_1 = 0.0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAPF64[($3_1 + 24 | 0) >> 3] = +(0 | 0);
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 24 | 0) >> 3] = +$31(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, ((HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0 | 0, HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 16 | 0 | 0);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
     break label$3;
    }
    HEAP32[($3_1 + 36 | 0) >> 2] = $12(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   }
   $44_1 = 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = $44_1;
   label$5 : {
    if (!((HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($44_1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$6 : {
     label$7 : while (1) {
      $57_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = $57_1 + 4 | 0;
      $60_1 = HEAP32[$57_1 >> 2] | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = $60_1;
      if (!(($60_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      $122_1 = +$31(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($3_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0 | 0, HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 16 | 0 | 0);
      HEAPF64[($3_1 + 24 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3] + $122_1;
      continue label$7;
     };
    }
   }
   label$8 : {
    if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$8
    }
    $158(HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
   }
  }
  label$9 : {
   if (!(((HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
    break label$9
   }
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAPF64[($3_1 + 24 | 0) >> 3] = -+HEAPF64[($3_1 + 24 | 0) >> 3];
  }
  label$10 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$10
   }
   $113_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $115_1 = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3];
   HEAP32[$3_1 >> 2] = $115_1;
   $396($113_1 | 0, 4009 | 0, 3989 | 0, $3_1 | 0);
  }
  $128_1 = +HEAPF64[($3_1 + 24 | 0) >> 3];
  global$0 = $3_1 + 48 | 0;
  return +$128_1;
 }
 
 function $31($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $10_1 = 0, $25_1 = 0, $28_1 = 0, $44_1 = 0, $61_1 = 0, $64_1 = 0, $67_1 = 0, $70_1 = 0, $75_1 = 0, $78_1 = 0, $81_1 = 0, $98_1 = 0, $101_1 = 0, $104_1 = 0, $107_1 = 0, $110_1 = 0, $131_1 = 0, $167_1 = 0, $171_1 = 0, $190_1 = 0, $193_1 = 0, $196_1 = 0, $42_1 = 0, $43_1 = 0, $231_1 = 0.0, $233_1 = 0.0, $235_1 = 0.0, $244_1 = 0.0, $245_1 = 0.0, $248_1 = 0.0, $250_1 = 0.0, $123_1 = 0, $124_1 = 0, $254_1 = 0.0, $220_1 = 0, $261_1 = 0.0, $222_1 = 0, $223_1 = 0, $263_1 = 0.0;
  $9_1 = global$0 - 144 | 0;
  global$0 = $9_1;
  $10_1 = 0;
  HEAP32[($9_1 + 132 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 128 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 124 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 120 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 116 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 112 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 108 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 80 | 0) >> 2] = $10_1;
  HEAP32[($9_1 + 96 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
  HEAP32[($9_1 + 92 | 0) >> 2] = HEAP32[(0 + 90300 | 0) >> 2] | 0;
  HEAP32[($9_1 + 60 | 0) >> 2] = $10_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) != ($10_1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($9_1 + 56 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 4 | 0;
    label$3 : {
     label$4 : while (1) {
      $25_1 = HEAP32[($9_1 + 56 | 0) >> 2] | 0;
      HEAP32[($9_1 + 56 | 0) >> 2] = $25_1 + 4 | 0;
      $28_1 = HEAP32[$25_1 >> 2] | 0;
      HEAP32[($9_1 + 60 | 0) >> 2] = $28_1;
      if (!(($28_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       if (!((HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) == (HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       continue label$4;
      }
      $42_1 = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
      $43_1 = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
      $44_1 = HEAP32[($9_1 + 80 | 0) >> 2] | 0;
      HEAP32[($9_1 + 80 | 0) >> 2] = $44_1 + 1 | 0;
      HEAP32[($43_1 + ($44_1 << 2 | 0) | 0) >> 2] = $42_1;
      HEAP32[($9_1 + 104 | 0) >> 2] = HEAP32[($9_1 + 128 | 0) >> 2] | 0;
      HEAP32[($9_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      HEAP32[($9_1 + 88 | 0) >> 2] = HEAP32[($9_1 + 112 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        if (!((HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($9_1 + 84 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
        label$8 : {
         label$9 : while (1) {
          $61_1 = HEAP32[($9_1 + 84 | 0) >> 2] | 0;
          HEAP32[($9_1 + 84 | 0) >> 2] = $61_1 + -1 | 0;
          if (!$61_1) {
           break label$8
          }
          $64_1 = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
          HEAP32[($9_1 + 100 | 0) >> 2] = $64_1 + 8 | 0;
          $231_1 = +HEAPF64[$64_1 >> 3];
          $67_1 = HEAP32[($9_1 + 104 | 0) >> 2] | 0;
          HEAP32[($9_1 + 104 | 0) >> 2] = $67_1 + 8 | 0;
          $233_1 = $231_1 - +HEAPF64[$67_1 >> 3];
          $70_1 = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
          HEAP32[($9_1 + 96 | 0) >> 2] = $70_1 + 8 | 0;
          HEAPF64[$70_1 >> 3] = $233_1;
          continue label$9;
         };
        }
        break label$6;
       }
       HEAPF64[($9_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 108 | 0) >> 2] | 0) >> 3];
       HEAP32[($9_1 + 84 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
       label$10 : {
        label$11 : while (1) {
         $75_1 = HEAP32[($9_1 + 84 | 0) >> 2] | 0;
         HEAP32[($9_1 + 84 | 0) >> 2] = $75_1 + -1 | 0;
         if (!$75_1) {
          break label$10
         }
         $78_1 = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
         HEAP32[($9_1 + 100 | 0) >> 2] = $78_1 + 8 | 0;
         $235_1 = +HEAPF64[$78_1 >> 3];
         $81_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
         HEAP32[($9_1 + 88 | 0) >> 2] = $81_1 + 8 | 0;
         HEAPF64[($9_1 + 64 | 0) >> 3] = +HEAPF64[($9_1 + 64 | 0) >> 3] + $235_1 * +HEAPF64[$81_1 >> 3];
         continue label$11;
        };
       }
       label$12 : {
        if (!(+HEAPF64[($9_1 + 64 | 0) >> 3] < -+HEAPF64[(0 + 89560 | 0) >> 3] & 1 | 0)) {
         break label$12
        }
        HEAP32[(0 + 91768 | 0) >> 2] = (HEAP32[(0 + 91768 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[($9_1 + 136 | 0) >> 3] = +(0 | 0);
        break label$1;
       }
       HEAP32[($9_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       HEAP32[($9_1 + 88 | 0) >> 2] = HEAP32[($9_1 + 112 | 0) >> 2] | 0;
       HEAP32[($9_1 + 84 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
       label$13 : {
        label$14 : while (1) {
         $98_1 = HEAP32[($9_1 + 84 | 0) >> 2] | 0;
         HEAP32[($9_1 + 84 | 0) >> 2] = $98_1 + -1 | 0;
         if (!$98_1) {
          break label$13
         }
         $101_1 = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
         HEAP32[($9_1 + 100 | 0) >> 2] = $101_1 + 8 | 0;
         $244_1 = +HEAPF64[$101_1 >> 3];
         $245_1 = +HEAPF64[($9_1 + 64 | 0) >> 3];
         $104_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
         HEAP32[($9_1 + 88 | 0) >> 2] = $104_1 + 8 | 0;
         $248_1 = $244_1 - $245_1 * +HEAPF64[$104_1 >> 3];
         $107_1 = HEAP32[($9_1 + 104 | 0) >> 2] | 0;
         HEAP32[($9_1 + 104 | 0) >> 2] = $107_1 + 8 | 0;
         $250_1 = $248_1 - +HEAPF64[$107_1 >> 3];
         $110_1 = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
         HEAP32[($9_1 + 96 | 0) >> 2] = $110_1 + 8 | 0;
         HEAPF64[$110_1 >> 3] = $250_1;
         continue label$14;
        };
       }
      }
      continue label$4;
     };
    }
   }
   label$15 : {
    if (!((HEAP32[($9_1 + 80 | 0) >> 2] | 0 | 0) != ((HEAP32[($9_1 + 132 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$15
    }
    $123_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $124_1 = HEAP32[($9_1 + 80 | 0) >> 2] | 0;
    HEAP32[($9_1 + 36 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
    HEAP32[($9_1 + 32 | 0) >> 2] = $124_1;
    $396($123_1 | 0, 6008 | 0, 4019 | 0, $9_1 + 32 | 0 | 0);
    $131_1 = 0;
    $382(5 | 0, $131_1 | 0, $131_1 | 0);
   }
   HEAP32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
   label$16 : {
    label$17 : {
     if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
      break label$17
     }
     HEAP32[($9_1 + 80 | 0) >> 2] = 0;
     label$18 : {
      label$19 : while (1) {
       if (!((HEAP32[($9_1 + 80 | 0) >> 2] | 0 | 0) < ((HEAP32[($9_1 + 132 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$18
       }
       HEAPF64[((HEAP32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 132 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($9_1 + 80 | 0) >> 2] = (HEAP32[($9_1 + 80 | 0) >> 2] | 0) + 1 | 0;
       continue label$19;
      };
     }
     HEAP32[($9_1 + 84 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
     label$20 : {
      label$21 : while (1) {
       $167_1 = HEAP32[($9_1 + 84 | 0) >> 2] | 0;
       HEAP32[($9_1 + 84 | 0) >> 2] = $167_1 + -1 | 0;
       if (!$167_1) {
        break label$20
       }
       $171_1 = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
       HEAP32[($9_1 + 96 | 0) >> 2] = $171_1 + 8 | 0;
       HEAPF64[$171_1 >> 3] = +(0 | 0);
       continue label$21;
      };
     }
     HEAPF64[((HEAP32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 132 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 132 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = -1.0;
     break label$16;
    }
    HEAP32[($9_1 + 88 | 0) >> 2] = HEAP32[($9_1 + 112 | 0) >> 2] | 0;
    HEAP32[($9_1 + 84 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
    label$22 : {
     label$23 : while (1) {
      $190_1 = HEAP32[($9_1 + 84 | 0) >> 2] | 0;
      HEAP32[($9_1 + 84 | 0) >> 2] = $190_1 + -1 | 0;
      if (!$190_1) {
       break label$22
      }
      $193_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
      HEAP32[($9_1 + 88 | 0) >> 2] = $193_1 + 8 | 0;
      $254_1 = +HEAPF64[$193_1 >> 3];
      $196_1 = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
      HEAP32[($9_1 + 96 | 0) >> 2] = $196_1 + 8 | 0;
      HEAPF64[$196_1 >> 3] = $254_1;
      continue label$23;
     };
    }
   }
   HEAP32[(0 + 90968 | 0) >> 2] = (HEAP32[(0 + 90968 | 0) >> 2] | 0) + 1 | 0;
   HEAPF64[($9_1 + 72 | 0) >> 3] = +$22(HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 132 | 0) >> 2] | 0 | 0, $9_1 + 52 | 0 | 0);
   label$24 : {
    if (!(HEAP32[($9_1 + 116 | 0) >> 2] | 0)) {
     break label$24
    }
    HEAPF64[($9_1 + 72 | 0) >> 3] = -+HEAPF64[($9_1 + 72 | 0) >> 3];
   }
   HEAPF64[($9_1 + 72 | 0) >> 3] = +HEAPF64[($9_1 + 72 | 0) >> 3] * +HEAPF64[(0 + 88288 | 0) >> 3];
   label$25 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$25
    }
    $220_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $261_1 = +HEAPF64[($9_1 + 72 | 0) >> 3];
    $222_1 = $267(HEAP32[($9_1 + 128 | 0) >> 2] | 0 | 0) | 0;
    $223_1 = HEAP32[($9_1 + 116 | 0) >> 2] | 0;
    HEAP32[($9_1 + 16 | 0) >> 2] = HEAP32[($9_1 + 52 | 0) >> 2] | 0;
    HEAP32[($9_1 + 12 | 0) >> 2] = $223_1;
    HEAP32[($9_1 + 8 | 0) >> 2] = $222_1;
    HEAPF64[$9_1 >> 3] = $261_1;
    $396($220_1 | 0, 4010 | 0, 4089 | 0, $9_1 | 0);
   }
   HEAPF64[($9_1 + 136 | 0) >> 3] = +HEAPF64[($9_1 + 72 | 0) >> 3];
  }
  $263_1 = +HEAPF64[($9_1 + 136 | 0) >> 3];
  global$0 = $9_1 + 144 | 0;
  return +$263_1;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $18_1 = 0, $21_1 = 0, $41_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $347($337(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $18_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $18_1 + 4 | 0;
     $21_1 = HEAP32[$18_1 >> 2] | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = $21_1;
     if (!(($21_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $325($3_1 + 24 | 0 | 0, HEAP32[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
     continue label$3;
    };
   }
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $33((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $348($3_1 + 24 | 0 | 0);
  $41_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $33($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $42_1 = 0, $44_1 = 0, $66_1 = 0, $84_1 = 0, $87_1 = 0, $110_1 = 0, $125_1 = 0, $149_1 = 0, $167_1 = 0, $215_1 = 0, $218_1 = 0, $221_1 = 0, $224_1 = 0, $235_1 = 0, $238_1 = 0, $261_1 = 0, $316_1 = 0, $331_1 = 0, $334_1 = 0, $33_1 = 0, $369_1 = 0.0, $376_1 = 0.0, $383_1 = 0.0, $386_1 = 0.0, $387_1 = 0.0, $295_1 = 0, $392_1 = 0.0, $341_1 = 0, $343_1 = 0, $364_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $156(HEAP32[(0 + 89992 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 100 | 0) >> 2] = $337(HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) == ((HEAP32[($4_1 + 140 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 116 | 0) >> 2] = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) < ((HEAP32[($4_1 + 140 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $158(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89992 | 0) >> 2] | 0 | 0);
     $33_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     $396($33_1 | 0, 6025 | 0, 7617 | 0, $4_1 + 32 | 0 | 0);
     $42_1 = 0;
     $382(5 | 0, $42_1 | 0, $42_1 | 0);
     HEAP32[($4_1 + 116 | 0) >> 2] = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
     break label$3;
    }
    $44_1 = 0;
    HEAP32[($4_1 + 116 | 0) >> 2] = $347((HEAP32[($4_1 + 140 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
    $34(HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0, $44_1 | 0, $44_1 | 0, $4_1 + 116 | 0 | 0);
   }
  }
  HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 96 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
  HEAP32[($4_1 + 104 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $66_1 = 0;
    HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
    HEAP32[($4_1 + 132 | 0) >> 2] = $66_1;
    label$7 : {
     if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) != ($66_1 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($4_1 + 128 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 4 | 0;
     label$8 : {
      label$9 : while (1) {
       $84_1 = HEAP32[($4_1 + 128 | 0) >> 2] | 0;
       HEAP32[($4_1 + 128 | 0) >> 2] = $84_1 + 4 | 0;
       $87_1 = HEAP32[$84_1 >> 2] | 0;
       HEAP32[($4_1 + 132 | 0) >> 2] = $87_1;
       if (!(($87_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$8
       }
       label$10 : {
        if (!((HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$10
        }
        $369_1 = +HEAPF64[((HEAP32[($4_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        $110_1 = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
        HEAP32[($4_1 + 96 | 0) >> 2] = $110_1 + 8 | 0;
        HEAPF64[$110_1 >> 3] = $369_1;
       }
       continue label$9;
      };
     }
    }
    HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
  HEAP32[($4_1 + 112 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    $125_1 = 0;
    HEAPF64[($4_1 + 80 | 0) >> 3] = +($125_1 | 0);
    HEAP32[($4_1 + 104 | 0) >> 2] = $125_1;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[($4_1 + 92 | 0) >> 2] = (HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($4_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[($4_1 + 80 | 0) >> 3] = +HEAPF64[($4_1 + 80 | 0) >> 3] + +HEAPF64[(HEAP32[($4_1 + 92 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($4_1 + 92 | 0) >> 2] | 0) >> 3];
      HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    $376_1 = +HEAPF64[($4_1 + 80 | 0) >> 3];
    $149_1 = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
    HEAP32[($4_1 + 96 | 0) >> 2] = $149_1 + 8 | 0;
    HEAPF64[$149_1 >> 3] = $376_1;
    HEAP32[($4_1 + 112 | 0) >> 2] = (HEAP32[($4_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  HEAPF64[($4_1 + 64 | 0) >> 3] = +$22(HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0, $4_1 + 52 | 0 | 0);
  HEAPF64[($4_1 + 56 | 0) >> 3] = +$29(+(.5), +(+HEAPF64[($4_1 + 64 | 0) >> 3]), +(+HEAPF64[(0 + 89496 | 0) >> 3]), $4_1 + 48 | 0 | 0);
  label$15 : {
   label$16 : {
    if (!(HEAP32[($4_1 + 48 | 0) >> 2] | 0)) {
     break label$16
    }
    HEAP32[($4_1 + 104 | 0) >> 2] = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
    label$17 : {
     label$18 : while (1) {
      $167_1 = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
      HEAP32[($4_1 + 104 | 0) >> 2] = $167_1 + -1 | 0;
      if (!$167_1) {
       break label$17
      }
      HEAPF64[((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -10.101;
      continue label$18;
     };
    }
    label$19 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$19
     }
     $35(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7715 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0);
    }
    break label$15;
   }
   HEAP32[($4_1 + 112 | 0) >> 2] = 0;
   label$20 : {
    label$21 : while (1) {
     if (!((HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$20
     }
     HEAP32[($4_1 + 96 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
     HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
     HEAP32[($4_1 + 104 | 0) >> 2] = 0;
     label$22 : {
      label$23 : while (1) {
       if (!((HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$22
       }
       HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
       label$24 : {
        label$25 : {
         if (!((HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$25
         }
         HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
         label$26 : {
          label$27 : while (1) {
           $215_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
           HEAP32[($4_1 + 108 | 0) >> 2] = $215_1 + -1 | 0;
           if (!$215_1) {
            break label$26
           }
           $218_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
           HEAP32[($4_1 + 72 | 0) >> 2] = $218_1 + 8 | 0;
           $383_1 = +HEAPF64[$218_1 >> 3];
           $221_1 = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
           HEAP32[($4_1 + 96 | 0) >> 2] = $221_1 + 8 | 0;
           HEAPF64[$221_1 >> 3] = $383_1;
           continue label$27;
          };
         }
         break label$24;
        }
        $224_1 = 0;
        HEAP32[($4_1 + 132 | 0) >> 2] = $224_1;
        label$28 : {
         if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) != ($224_1 | 0) & 1 | 0)) {
          break label$28
         }
         HEAP32[($4_1 + 128 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 4 | 0;
         label$29 : {
          label$30 : while (1) {
           $235_1 = HEAP32[($4_1 + 128 | 0) >> 2] | 0;
           HEAP32[($4_1 + 128 | 0) >> 2] = $235_1 + 4 | 0;
           $238_1 = HEAP32[$235_1 >> 2] | 0;
           HEAP32[($4_1 + 132 | 0) >> 2] = $238_1;
           if (!(($238_1 | 0) != (0 | 0) & 1 | 0)) {
            break label$29
           }
           label$31 : {
            if (!((HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$31
            }
            $386_1 = +HEAPF64[((HEAP32[($4_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            $261_1 = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
            HEAP32[($4_1 + 96 | 0) >> 2] = $261_1 + 8 | 0;
            HEAPF64[$261_1 >> 3] = $386_1;
           }
           continue label$30;
          };
         }
        }
       }
       HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 1 | 0;
       continue label$23;
      };
     }
     $387_1 = +$22(HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0, $4_1 + 52 | 0 | 0);
     HEAPF64[((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $387_1 * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($4_1 + 112 | 0) >> 2] = (HEAP32[($4_1 + 112 | 0) >> 2] | 0) + 1 | 0;
     continue label$21;
    };
   }
   label$32 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$32
    }
    $295_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $392_1 = +HEAPF64[($4_1 + 64 | 0) >> 3];
    HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 56 | 0) >> 3];
    HEAPF64[($4_1 + 16 | 0) >> 3] = $392_1;
    $396($295_1 | 0, 3061 | 0, 7751 | 0, $4_1 + 16 | 0 | 0);
    $36(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7794 | 0, $4_1 + 120 | 0 | 0, 1 | 0, HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0);
    label$33 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
      break label$33
     }
     $316_1 = 0;
     $35(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7802 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 132 | 0) >> 2] = $316_1;
     label$34 : {
      if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) != ($316_1 | 0) & 1 | 0)) {
       break label$34
      }
      HEAP32[($4_1 + 128 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 4 | 0;
      label$35 : {
       label$36 : while (1) {
        $331_1 = HEAP32[($4_1 + 128 | 0) >> 2] | 0;
        HEAP32[($4_1 + 128 | 0) >> 2] = $331_1 + 4 | 0;
        $334_1 = HEAP32[$331_1 >> 2] | 0;
        HEAP32[($4_1 + 132 | 0) >> 2] = $334_1;
        if (!(($334_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$35
        }
        $341_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $343_1 = $267(HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) | 0;
        HEAPF64[($4_1 + 8 | 0) >> 3] = +$37(HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0);
        HEAP32[$4_1 >> 2] = $343_1;
        $396($341_1 | 0, 8034 | 0, 7809 | 0, $4_1 | 0);
        continue label$36;
       };
      }
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8035 | 0, 6262 | 0, 0 | 0);
    }
   }
  }
  label$37 : {
   if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$37
   }
   $348($4_1 + 116 | 0 | 0);
  }
  $364_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
  global$0 = $4_1 + 144 | 0;
  return $364_1 | 0;
 }
 
 function $34($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $183_1 = 0, $432_1 = 0.0, $19_1 = 0, $42_1 = 0, $53_1 = 0, $56_1 = 0, $162_1 = 0, $172_1 = 0, $194_1 = 0, $197_1 = 0, $461_1 = 0.0, $463_1 = 0.0, $230_1 = 0, $496_1 = 0.0, $498_1 = 0.0, $399_1 = 0, $152_1 = 0, $156_1 = 0, $164_1 = 0, $166_1 = 0, $263_1 = 0, $266_1 = 0, $480_1 = 0.0, $278_1 = 0, $281_1 = 0, $283_1 = 0, $482_1 = 0.0, $483_1 = 0.0, $296_1 = 0, $299_1 = 0, $301_1 = 0, $485_1 = 0.0, $486_1 = 0.0, $313_1 = 0, $316_1 = 0, $318_1 = 0, $488_1 = 0.0, $489_1 = 0.0, $411_1 = 0, $413_1 = 0, $416_1 = 0, $503_1 = 0.0, $506_1 = 0.0;
  $7_1 = global$0 - 320 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $432_1 = -1.0;
  HEAP32[($7_1 + 316 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 312 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 308 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 304 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 300 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 276 | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 268 | 0) >> 2] = $8_1;
  HEAPF64[($7_1 + 248 | 0) >> 3] = $432_1;
  HEAPF64[($7_1 + 240 | 0) >> 3] = $432_1;
  HEAPF64[($7_1 + 224 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[($7_1 + 216 | 0) >> 3] = -1797693134862315708145274.0e284;
  label$1 : {
   if (!(+HEAPF64[(0 + 89480 | 0) >> 3] <= +($8_1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6421 | 0, 5266 | 0, 0 | 0);
   $19_1 = 0;
   $382(5 | 0, $19_1 | 0, $19_1 | 0);
  }
  HEAP32[($7_1 + 256 | 0) >> 2] = $337(HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($7_1 + 248 | 0) >> 3] = +$400(+(+HEAPF64[(0 + 89480 | 0) >> 3]), +(+((HEAP32[($7_1 + 256 | 0) >> 2] | 0) - 1 | 0 | 0)));
    break label$2;
   }
   label$4 : {
    label$5 : {
     if (!(($337(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$5
     }
     $42_1 = 0;
     HEAP32[($7_1 + 296 | 0) >> 2] = $42_1;
     label$6 : {
      if (!((HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) != ($42_1 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($7_1 + 292 | 0) >> 2] = (HEAP32[($7_1 + 312 | 0) >> 2] | 0) + 4 | 0;
      label$7 : {
       label$8 : while (1) {
        $53_1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
        HEAP32[($7_1 + 292 | 0) >> 2] = $53_1 + 4 | 0;
        $56_1 = HEAP32[$53_1 >> 2] | 0;
        HEAP32[($7_1 + 296 | 0) >> 2] = $56_1;
        if (!(($56_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        label$9 : {
         if (!(+HEAPF64[($7_1 + 216 | 0) >> 3] < +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
          break label$9
         }
         HEAPF64[($7_1 + 216 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3];
         HEAP32[($7_1 + 276 | 0) >> 2] = HEAP32[($7_1 + 296 | 0) >> 2] | 0;
        }
        label$10 : {
         if (!(+HEAPF64[($7_1 + 224 | 0) >> 3] > +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
          break label$10
         }
         HEAPF64[($7_1 + 224 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3];
         HEAP32[($7_1 + 280 | 0) >> 2] = HEAP32[($7_1 + 296 | 0) >> 2] | 0;
        }
        continue label$8;
       };
      }
     }
     break label$4;
    }
    HEAP32[($7_1 + 296 | 0) >> 2] = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    HEAP32[($7_1 + 288 | 0) >> 2] = (HEAP32[($7_1 + 308 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[($7_1 + 304 | 0) >> 2] | 0) << 3 | 0) | 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($7_1 + 296 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 288 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$11
      }
      label$13 : {
       label$14 : {
        if (!((HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$14
        }
        break label$13;
       }
       label$15 : {
        if (!(+HEAPF64[($7_1 + 216 | 0) >> 3] < +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$15
        }
        HEAPF64[($7_1 + 216 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3];
        HEAP32[($7_1 + 276 | 0) >> 2] = HEAP32[($7_1 + 296 | 0) >> 2] | 0;
       }
       label$16 : {
        if (!(+HEAPF64[($7_1 + 224 | 0) >> 3] > +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$16
        }
        HEAPF64[($7_1 + 224 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 296 | 0) >> 2] | 0) >> 3];
        HEAP32[($7_1 + 280 | 0) >> 2] = HEAP32[($7_1 + 296 | 0) >> 2] | 0;
       }
      }
      HEAP32[($7_1 + 296 | 0) >> 2] = (HEAP32[($7_1 + 296 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
      continue label$12;
     };
    }
   }
   HEAPF64[($7_1 + 248 | 0) >> 3] = +HEAPF64[($7_1 + 216 | 0) >> 3] - +HEAPF64[($7_1 + 224 | 0) >> 3];
   $352(HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) | 0;
   label$17 : {
    if (!(($337(HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0) < (2 | 0) & 1 | 0)) {
     break label$17
    }
    $352(HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($7_1 + 256 | 0) >> 2] = $337(HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
   label$18 : {
    if (!((HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break label$18
    }
    $151(5375 | 0);
    label$19 : {
     label$20 : {
      if (!((HEAP32[(0 + 92224 | 0) >> 2] | 0 | 0) > ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
       break label$20
      }
      $152_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $156_1 = ($337(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) | 0) + (HEAP32[($7_1 + 304 | 0) >> 2] | 0) | 0;
      HEAPF64[($7_1 + 168 | 0) >> 3] = +HEAPF64[($7_1 + 224 | 0) >> 3];
      HEAP32[($7_1 + 160 | 0) >> 2] = $156_1;
      $396($152_1 | 0, 6012 | 0, 5403 | 0, $7_1 + 160 | 0 | 0);
      $162_1 = 0;
      $382(3 | 0, $162_1 | 0, $162_1 | 0);
      break label$19;
     }
     $164_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $166_1 = HEAP32[(0 + 88316 | 0) >> 2] | 0;
     HEAPF64[($7_1 + 184 | 0) >> 3] = +HEAPF64[($7_1 + 224 | 0) >> 3];
     HEAP32[($7_1 + 176 | 0) >> 2] = $166_1;
     $396($164_1 | 0, 6013 | 0, 5505 | 0, $7_1 + 176 | 0 | 0);
     $172_1 = 0;
     $382(1 | 0, $172_1 | 0, $172_1 | 0);
    }
   }
  }
  HEAP32[($7_1 + 260 | 0) >> 2] = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 316 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
     break label$21
    }
    $183_1 = 0;
    HEAPF64[($7_1 + 240 | 0) >> 3] = +HEAPF64[($7_1 + 248 | 0) >> 3];
    HEAP32[($7_1 + 284 | 0) >> 2] = $183_1;
    HEAPF64[($7_1 + 248 | 0) >> 3] = -1.0;
    HEAP32[($7_1 + 296 | 0) >> 2] = $183_1;
    label$23 : {
     if (!((HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) != ($183_1 | 0) & 1 | 0)) {
      break label$23
     }
     HEAP32[($7_1 + 292 | 0) >> 2] = (HEAP32[($7_1 + 312 | 0) >> 2] | 0) + 4 | 0;
     label$24 : {
      label$25 : while (1) {
       $194_1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
       HEAP32[($7_1 + 292 | 0) >> 2] = $194_1 + 4 | 0;
       $197_1 = HEAP32[$194_1 >> 2] | 0;
       HEAP32[($7_1 + 296 | 0) >> 2] = $197_1;
       if (!(($197_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$24
       }
       label$26 : {
        if ($342(HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) | 0) {
         break label$26
        }
        if (!((HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        HEAPF64[($7_1 + 232 | 0) >> 3] = +$27(HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0, $7_1 + 272 | 0 | 0);
        label$27 : {
         label$28 : {
          if (!(+HEAPF64[($7_1 + 232 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
           break label$28
          }
          $461_1 = -+HEAPF64[($7_1 + 232 | 0) >> 3];
          break label$27;
         }
         $461_1 = +HEAPF64[($7_1 + 232 | 0) >> 3];
        }
        $463_1 = $461_1;
        HEAPF64[($7_1 + 232 | 0) >> 3] = $463_1;
        label$29 : {
         if (!($463_1 > +HEAPF64[($7_1 + 248 | 0) >> 3] & 1 | 0)) {
          break label$29
         }
         HEAPF64[($7_1 + 248 | 0) >> 3] = +HEAPF64[($7_1 + 232 | 0) >> 3];
         HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 296 | 0) >> 2] | 0;
         HEAP32[($7_1 + 268 | 0) >> 2] = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
        }
       }
       continue label$25;
      };
     }
    }
    $230_1 = 0;
    HEAP32[($7_1 + 264 | 0) >> 2] = $230_1;
    HEAPF64[($7_1 + 200 | 0) >> 3] = 1.0;
    HEAPF64[($7_1 + 192 | 0) >> 3] = +HEAPF64[($7_1 + 240 | 0) >> 3] * +HEAPF64[(0 + 89480 | 0) >> 3];
    HEAPF64[($7_1 + 208 | 0) >> 3] = .01 * +HEAPF64[($7_1 + 192 | 0) >> 3];
    label$30 : {
     if (!(+HEAPF64[($7_1 + 248 | 0) >> 3] > +($230_1 | 0) & 1 | 0)) {
      break label$30
     }
     HEAPF64[($7_1 + 200 | 0) >> 3] = +HEAPF64[($7_1 + 248 | 0) >> 3] / +HEAPF64[($7_1 + 192 | 0) >> 3];
     label$31 : {
      if (!(+HEAPF64[($7_1 + 200 | 0) >> 3] < .001 & 1 | 0)) {
       break label$31
      }
      HEAP32[($7_1 + 264 | 0) >> 2] = 1;
     }
    }
    label$32 : {
     label$33 : {
      if (!((HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$33
      }
      if (HEAP32[($7_1 + 268 | 0) >> 2] | 0) {
       break label$33
      }
      if (!(HEAP32[($7_1 + 264 | 0) >> 2] | 0)) {
       break label$32
      }
     }
     HEAP32[(0 + 92216 | 0) >> 2] = (HEAP32[(0 + 92216 | 0) >> 2] | 0) + 1 | 0;
     label$34 : {
      label$35 : {
       if ((HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$35
       }
       label$36 : {
        if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
         break label$36
        }
        $263_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $266_1 = (HEAP32[($7_1 + 260 | 0) >> 2] | 0) + 1 | 0;
        $480_1 = +HEAPF64[($7_1 + 208 | 0) >> 3];
        HEAPF64[($7_1 + 144 | 0) >> 3] = +HEAPF64[($7_1 + 192 | 0) >> 3];
        HEAPF64[($7_1 + 136 | 0) >> 3] = $480_1;
        HEAP32[($7_1 + 128 | 0) >> 2] = $266_1;
        $396($263_1 | 0, 7 | 0, 5609 | 0, $7_1 + 128 | 0 | 0);
       }
       break label$34;
      }
      label$37 : {
       label$38 : {
        if (!(HEAP32[(0 + 87704 | 0) >> 2] | 0)) {
         break label$38
        }
        label$39 : {
         if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
          break label$39
         }
         $278_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $281_1 = (HEAP32[($7_1 + 260 | 0) >> 2] | 0) + 1 | 0;
         $283_1 = $267(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) | 0;
         $482_1 = +HEAPF64[($7_1 + 248 | 0) >> 3];
         $483_1 = +HEAPF64[($7_1 + 192 | 0) >> 3];
         HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[($7_1 + 200 | 0) >> 3];
         HEAPF64[($7_1 + 48 | 0) >> 3] = $483_1;
         HEAPF64[($7_1 + 40 | 0) >> 3] = $482_1;
         HEAP32[($7_1 + 36 | 0) >> 2] = $283_1;
         HEAP32[($7_1 + 32 | 0) >> 2] = $281_1;
         $396($278_1 | 0, 30 | 0, 5714 | 0, $7_1 + 32 | 0 | 0);
        }
        break label$37;
       }
       label$40 : {
        label$41 : {
         if (!(HEAP32[($7_1 + 264 | 0) >> 2] | 0)) {
          break label$41
         }
         label$42 : {
          if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
           break label$42
          }
          $296_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $299_1 = (HEAP32[($7_1 + 260 | 0) >> 2] | 0) + 1 | 0;
          $301_1 = $267(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) | 0;
          $485_1 = +HEAPF64[($7_1 + 248 | 0) >> 3];
          $486_1 = +HEAPF64[($7_1 + 208 | 0) >> 3];
          HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[($7_1 + 200 | 0) >> 3];
          HEAPF64[($7_1 + 80 | 0) >> 3] = $486_1;
          HEAPF64[($7_1 + 72 | 0) >> 3] = $485_1;
          HEAP32[($7_1 + 68 | 0) >> 2] = $301_1;
          HEAP32[($7_1 + 64 | 0) >> 2] = $299_1;
          $396($296_1 | 0, 17 | 0, 5840 | 0, $7_1 + 64 | 0 | 0);
         }
         break label$40;
        }
        label$43 : {
         if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
          break label$43
         }
         $313_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $316_1 = (HEAP32[($7_1 + 260 | 0) >> 2] | 0) + 1 | 0;
         $318_1 = $267(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) | 0;
         $488_1 = +HEAPF64[($7_1 + 248 | 0) >> 3];
         $489_1 = +HEAPF64[($7_1 + 208 | 0) >> 3];
         HEAPF64[($7_1 + 120 | 0) >> 3] = +HEAPF64[($7_1 + 192 | 0) >> 3];
         HEAPF64[($7_1 + 112 | 0) >> 3] = $489_1;
         HEAPF64[($7_1 + 104 | 0) >> 3] = $488_1;
         HEAP32[($7_1 + 100 | 0) >> 2] = $318_1;
         HEAP32[($7_1 + 96 | 0) >> 2] = $316_1;
         $396($313_1 | 0, 8 | 0, 5959 | 0, $7_1 + 96 | 0 | 0);
        }
       }
      }
     }
     HEAP32[($7_1 + 296 | 0) >> 2] = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
     HEAP32[($7_1 + 288 | 0) >> 2] = (HEAP32[($7_1 + 308 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[($7_1 + 304 | 0) >> 2] | 0) << 3 | 0) | 0;
     label$44 : {
      label$45 : while (1) {
       if (!((HEAP32[($7_1 + 296 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 288 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$44
       }
       label$46 : {
        label$47 : {
         if (!((HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$47
         }
         break label$46;
        }
        label$48 : {
         if ($342(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) | 0) {
          break label$48
         }
         if ($342(HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) | 0) {
          break label$48
         }
         HEAPF64[($7_1 + 232 | 0) >> 3] = +$27(HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0, $7_1 + 272 | 0 | 0);
         label$49 : {
          label$50 : {
           if (!(+HEAPF64[($7_1 + 232 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
            break label$50
           }
           $496_1 = -+HEAPF64[($7_1 + 232 | 0) >> 3];
           break label$49;
          }
          $496_1 = +HEAPF64[($7_1 + 232 | 0) >> 3];
         }
         $498_1 = $496_1;
         HEAPF64[($7_1 + 232 | 0) >> 3] = $498_1;
         label$51 : {
          if (!($498_1 > +HEAPF64[($7_1 + 248 | 0) >> 3] & 1 | 0)) {
           break label$51
          }
          HEAPF64[($7_1 + 248 | 0) >> 3] = +HEAPF64[($7_1 + 232 | 0) >> 3];
          HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 296 | 0) >> 2] | 0;
          HEAP32[($7_1 + 268 | 0) >> 2] = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
          label$52 : {
           if (HEAP32[($7_1 + 268 | 0) >> 2] | 0) {
            break label$52
           }
           if (HEAP32[(0 + 87704 | 0) >> 2] | 0) {
            break label$52
           }
           if (!(+HEAPF64[($7_1 + 248 | 0) >> 3] > +HEAPF64[($7_1 + 208 | 0) >> 3] & 1 | 0)) {
            break label$52
           }
           break label$44;
          }
         }
        }
       }
       HEAP32[($7_1 + 296 | 0) >> 2] = (HEAP32[($7_1 + 296 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
       continue label$45;
      };
     }
    }
    label$53 : {
     if ((HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$53
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6014 | 0, 6082 | 0, 0 | 0);
     $399_1 = 0;
     $382(5 | 0, $399_1 | 0, $399_1 | 0);
    }
    $325(HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0);
    label$54 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$54
     }
     $411_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $413_1 = $267(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) | 0;
     $416_1 = (HEAP32[($7_1 + 260 | 0) >> 2] | 0) + 1 | 0;
     $503_1 = +HEAPF64[($7_1 + 248 | 0) >> 3];
     $506_1 = +HEAPF64[($7_1 + 240 | 0) >> 3] * +HEAPF64[(0 + 89480 | 0) >> 3];
     HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[($7_1 + 208 | 0) >> 3];
     HEAPF64[($7_1 + 16 | 0) >> 3] = $506_1;
     HEAPF64[($7_1 + 8 | 0) >> 3] = $503_1;
     HEAP32[($7_1 + 4 | 0) >> 2] = $416_1;
     HEAP32[$7_1 >> 2] = $413_1;
     $396($411_1 | 0, 1002 | 0, 6149 | 0, $7_1 | 0);
    }
    HEAP32[($7_1 + 260 | 0) >> 2] = (HEAP32[($7_1 + 260 | 0) >> 2] | 0) + 1 | 0;
    continue label$22;
   };
  }
  global$0 = $7_1 + 320 | 0;
  return;
 }
 
 function $35($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0, $30_1 = 0, $33_1 = 0, $48_1 = 0, $59_1 = 0, $62_1 = 0, $13_1 = 0, $39_1 = 0, $68_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $13_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
    $396($13_1 | 0, 9004 | 0, 6264 | 0, $5_1 + 16 | 0 | 0);
    $19_1 = 0;
    HEAP32[($5_1 + 48 | 0) >> 2] = $19_1;
    label$3 : {
     if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != ($19_1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0;
     label$4 : {
      label$5 : while (1) {
       $30_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
       HEAP32[($5_1 + 44 | 0) >> 2] = $30_1 + 4 | 0;
       $33_1 = HEAP32[$30_1 >> 2] | 0;
       HEAP32[($5_1 + 48 | 0) >> 2] = $33_1;
       if (!(($33_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$4
       }
       $39_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
       HEAP32[$5_1 >> 2] = $267(HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) | 0;
       $396($39_1 | 0, 9005 | 0, 6267 | 0, $5_1 | 0);
       continue label$5;
      };
     }
    }
    $396(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 9006 | 0, 6262 | 0, 0 | 0);
    break label$1;
   }
   $48_1 = 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = $48_1;
   label$6 : {
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != ($48_1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0;
    label$7 : {
     label$8 : while (1) {
      $59_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = $59_1 + 4 | 0;
      $62_1 = HEAP32[$59_1 >> 2] | 0;
      HEAP32[($5_1 + 48 | 0) >> 2] = $62_1;
      if (!(($62_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      $68_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      HEAP32[($5_1 + 32 | 0) >> 2] = $267(HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) | 0;
      $396($68_1 | 0, 9007 | 0, 6272 | 0, $5_1 + 32 | 0 | 0);
      continue label$8;
     };
    }
   }
   $396(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 9008 | 0, 6262 | 0, 0 | 0);
  }
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $36($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $36_1 = 0, $8_1 = 0, $39_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
  $396($8_1 | 0, 9001 | 0, 6251 | 0, $7_1 + 16 | 0 | 0);
  HEAP32[($7_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($7_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($7_1 + 24 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $36_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
      HEAP32[($7_1 + 40 | 0) >> 2] = $36_1 + 8 | 0;
      HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[$36_1 >> 3];
      $39_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
      HEAPF64[$7_1 >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3];
      $396($39_1 | 0, 9002 | 0, 6255 | 0, $7_1 | 0);
      HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    $396(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 9003 | 0, 6262 | 0, 0 | 0);
    HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $7_1 + 64 | 0;
  return;
 }
 
 function $37($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0, $19_1 = 0, $22_1 = 0, $25_1 = 0, $36_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  $6_1 = 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = +($6_1 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) > ($6_1 | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = 0 - (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = $14_1;
  label$3 : {
   label$4 : while (1) {
    $19_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $19_1 + -1 | 0;
    if (!$19_1) {
     break label$3
    }
    $22_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    HEAP32[($5_1 + 36 | 0) >> 2] = $22_1 + 8 | 0;
    $36_1 = +HEAPF64[$22_1 >> 3];
    $25_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = $25_1 + 8 | 0;
    HEAPF64[($5_1 + 8 | 0) >> 3] = $36_1 - +HEAPF64[$25_1 >> 3];
    HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] + +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3];
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[($5_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[($5_1 + 16 | 0) >> 3]);
    break label$5;
   }
   HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3];
  }
  return +(+HEAPF64[($5_1 + 40 | 0) >> 3]);
 }
 
 function $38($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $34_1 = 0, $54_1 = 0, $64_1 = 0, $77_1 = 0, $80_1 = 0, $151_1 = 0, $153_1 = 0, $190_1 = 0.0, $170_1 = 0, $172_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = $3_1;
  HEAPF64[($6_1 + 80 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[($6_1 + 60 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $7_1;
  label$1 : {
   if (!(((HEAP32[((HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 90704 | 0) >> 2] = (HEAP32[(0 + 90704 | 0) >> 2] | 0) + 1 | 0;
   $4(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, $6_1 + 80 | 0 | 0);
   HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 100 | 0) >> 2] | 0;
   HEAP32[($6_1 + 52 | 0) >> 2] = 1;
  }
  $252(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0);
  $247(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0);
  HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 100 | 0) >> 2] | 0;
  $34_1 = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = $34_1;
  HEAP32[((HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 72 | 0) >> 2] = $34_1;
  label$2 : {
   if (!((HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] | 0;
   label$3 : while (1) {
    $54_1 = 0;
    label$4 : {
     if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $54_1 = (HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($54_1 & 1 | 0)) {
      break label$5
     }
     $64_1 = 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = $64_1;
     label$6 : {
      if (!((HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($64_1 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($6_1 + 64 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      label$7 : {
       label$8 : while (1) {
        $77_1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
        HEAP32[($6_1 + 64 | 0) >> 2] = $77_1 + 4 | 0;
        $80_1 = HEAP32[$77_1 >> 2] | 0;
        HEAP32[($6_1 + 68 | 0) >> 2] = $80_1;
        if (!(($80_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        label$9 : {
         if (!((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$9
         }
         continue label$8;
        }
        HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
        label$10 : {
         if (!(HEAP32[($6_1 + 52 | 0) >> 2] | 0)) {
          break label$10
         }
         if (((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0) {
          break label$10
         }
         continue label$8;
        }
        HEAP32[(0 + 90704 | 0) >> 2] = (HEAP32[(0 + 90704 | 0) >> 2] | 0) + 1 | 0;
        $4(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, $6_1 + 72 | 0 | 0);
        label$11 : {
         if (!(+HEAPF64[($6_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$11
         }
         $252(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0);
         $247(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0);
         label$12 : {
          if (!(((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
           break label$12
          }
          HEAP32[($6_1 + 52 | 0) >> 2] = 1;
          label$13 : {
           if (!(+HEAPF64[($6_1 + 72 | 0) >> 3] > +HEAPF64[($6_1 + 80 | 0) >> 3] & 1 | 0)) {
            break label$13
           }
           HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[($6_1 + 72 | 0) >> 3];
           HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
          }
         }
        }
        continue label$8;
       };
      }
     }
     HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$3;
    }
    break label$3;
   };
  }
  label$14 : {
   label$15 : {
    if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAPF64[(HEAP32[($6_1 + 96 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 80 | 0) >> 3];
    label$16 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$16
     }
     $151_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $153_1 = $267(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0;
     $190_1 = +HEAPF64[($6_1 + 80 | 0) >> 3];
     HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAPF64[($6_1 + 8 | 0) >> 3] = $190_1;
     HEAP32[$6_1 >> 2] = $153_1;
     $396($151_1 | 0, 2003 | 0, 4165 | 0, $6_1 | 0);
    }
    HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
    break label$14;
   }
   label$17 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$17
    }
    $170_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $172_1 = $267(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 32 | 0) >> 2] = $172_1;
    $396($170_1 | 0, 4011 | 0, 4217 | 0, $6_1 + 32 | 0 | 0);
   }
   HEAP32[($6_1 + 108 | 0) >> 2] = 0;
  }
  $180_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
  global$0 = $6_1 + 112 | 0;
  return $180_1 | 0;
 }
 
 function $39($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $25_1 = 0, $28_1 = 0, $37_1 = 0, $50_1 = 0, $53_1 = 0, $162_1 = 0.0, $113_1 = 0, $115_1 = 0, $132_1 = 0, $134_1 = 0, $163_1 = 0.0, $164_1 = 0.0, $136_1 = 0, $149_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $7_1;
  HEAPF64[($6_1 + 48 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAPF64[($6_1 + 40 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($6_1 + 72 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $25_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = $25_1 + 4 | 0;
     $28_1 = HEAP32[$25_1 >> 2] | 0;
     HEAP32[($6_1 + 72 | 0) >> 2] = $28_1;
     if (!(($28_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  $37_1 = 0;
  HEAP32[($6_1 + 72 | 0) >> 2] = $37_1;
  label$4 : {
   if (!((HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($37_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     $50_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = $50_1 + 4 | 0;
     $53_1 = HEAP32[$50_1 >> 2] | 0;
     HEAP32[($6_1 + 72 | 0) >> 2] = $53_1;
     if (!(($53_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      if (!((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
      HEAP32[(0 + 92384 | 0) >> 2] = (HEAP32[(0 + 92384 | 0) >> 2] | 0) + 1 | 0;
      $4(HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, $6_1 + 56 | 0 | 0);
      label$8 : {
       label$9 : {
        if ((HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$9
        }
        HEAPF64[($6_1 + 48 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
        HEAPF64[($6_1 + 40 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
        HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
        break label$8;
       }
       label$10 : {
        label$11 : {
         if (!(+HEAPF64[($6_1 + 56 | 0) >> 3] > +HEAPF64[($6_1 + 48 | 0) >> 3] & 1 | 0)) {
          break label$11
         }
         HEAPF64[($6_1 + 48 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
         HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
         break label$10;
        }
        label$12 : {
         if (!(+HEAPF64[($6_1 + 56 | 0) >> 3] < +HEAPF64[($6_1 + 40 | 0) >> 3] & 1 | 0)) {
          break label$12
         }
         HEAPF64[($6_1 + 40 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
        }
       }
      }
     }
     continue label$6;
    };
   }
  }
  label$13 : {
   label$14 : {
    if ((HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$14
    }
    label$15 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$15
     }
     $113_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $115_1 = HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $115_1;
     $396($113_1 | 0, 3067 | 0, 4267 | 0, $6_1 + 32 | 0 | 0);
    }
    $162_1 = +(0 | 0);
    HEAPF64[($6_1 + 40 | 0) >> 3] = $162_1;
    HEAPF64[($6_1 + 48 | 0) >> 3] = $162_1;
    break label$13;
   }
   label$16 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$16
    }
    $132_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $134_1 = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $163_1 = +HEAPF64[($6_1 + 48 | 0) >> 3];
    $164_1 = +HEAPF64[($6_1 + 40 | 0) >> 3];
    $136_1 = HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $136_1;
    HEAPF64[($6_1 + 16 | 0) >> 3] = $164_1;
    HEAPF64[($6_1 + 8 | 0) >> 3] = $163_1;
    HEAP32[$6_1 >> 2] = $134_1;
    $396($132_1 | 0, 4084 | 0, 4354 | 0, $6_1 | 0);
   }
  }
  HEAPF64[(HEAP32[($6_1 + 84 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 48 | 0) >> 3];
  HEAPF64[(HEAP32[($6_1 + 80 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 40 | 0) >> 3];
  $149_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  global$0 = $6_1 + 96 | 0;
  return $149_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $134_1 = 0.0, $44_1 = 0, $78_1 = 0, $135_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 90124 | 0) >> 2] | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(HEAP32[(0 + 88172 | 0) >> 2] | 0)) {
      break label$4
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8020 | 0, 4434 | 0, 0 | 0);
     break label$3;
    }
    label$5 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$5
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1001 | 0, 4494 | 0, 0 | 0);
    }
   }
   $26_1 = 0;
   $134_1 = +($26_1 | 0);
   HEAPF64[(0 + 90248 | 0) >> 3] = $134_1;
   HEAPF64[(0 + 90240 | 0) >> 3] = $134_1;
   label$6 : {
    if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != ($26_1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
    label$7 : while (1) {
     $44_1 = 0;
     label$8 : {
      if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      $44_1 = (HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$9 : {
      if (!($44_1 & 1 | 0)) {
       break label$9
      }
      label$10 : {
       label$11 : {
        if ((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$11
        }
        break label$10;
       }
       label$12 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
         break label$12
        }
        if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
         break label$12
        }
        break label$10;
       }
       label$13 : {
        if (((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0) {
         break label$13
        }
        $135_1 = +$30(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
        HEAPF64[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 32 | 0) >> 3] = $135_1;
        $78_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        HEAP32[($78_1 + 80 | 0) >> 2] = (HEAP32[($78_1 + 80 | 0) >> 2] | 0) & -1048577 | 0 | 1048576 | 0;
       }
       HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 32 | 0) >> 3];
       label$14 : {
        label$15 : {
         if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
          break label$15
         }
         label$16 : {
          if (!((((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0 | 0) == (HEAP32[(0 + 88268 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          HEAPF64[(0 + 90240 | 0) >> 3] = +HEAPF64[(0 + 90240 | 0) >> 3] + +HEAPF64[($3_1 + 16 | 0) >> 3];
         }
         break label$14;
        }
        HEAPF64[(0 + 90240 | 0) >> 3] = +HEAPF64[(0 + 90240 | 0) >> 3] + +HEAPF64[($3_1 + 16 | 0) >> 3];
        $4(HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0);
        HEAPF64[(0 + 90248 | 0) >> 3] = +HEAPF64[(0 + 90248 | 0) >> 3] + -+HEAPF64[($3_1 + 8 | 0) >> 3] * +HEAPF64[($3_1 + 16 | 0) >> 3] / +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
       }
       label$17 : {
        if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
         break label$17
        }
        HEAPF64[(0 + 90592 | 0) >> 3] = +HEAPF64[(0 + 90592 | 0) >> 3] + +HEAPF64[($3_1 + 16 | 0) >> 3];
        label$18 : {
         if (!(+HEAPF64[(0 + 90600 | 0) >> 3] < +HEAPF64[($3_1 + 16 | 0) >> 3] & 1 | 0)) {
          break label$18
         }
         HEAPF64[(0 + 90600 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3];
        }
        label$19 : {
         if (!(+HEAPF64[(0 + 90608 | 0) >> 3] > +HEAPF64[($3_1 + 16 | 0) >> 3] & 1 | 0)) {
          break label$19
         }
         HEAPF64[(0 + 90608 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3];
        }
       }
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$7;
     }
     break label$7;
    };
   }
   HEAP32[(0 + 90124 | 0) >> 2] = 1;
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $45_1 = 0, $82_1 = 0, $21_1 = 0, $40_1 = 0, $64_1 = 0, $67_1 = 0, $70_1 = 0, $74_1 = 0, $79_1 = 0, $104_1 = 0.0, $108_1 = 0.0, $115_1 = 0.0;
  $4_1 = global$0 - 48 | 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAPF64[($4_1 + 16 | 0) >> 3] = +(0 | 0);
     HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     label$4 : {
      label$5 : while (1) {
       $21_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $21_1 + -1 | 0;
       if (!$21_1) {
        break label$4
       }
       HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 3];
       HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0;
       continue label$5;
      };
     }
     HEAPF64[($4_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[($4_1 + 16 | 0) >> 3]);
     label$6 : {
      if (!(+HEAPF64[(0 + 91648 | 0) >> 3] > +HEAPF64[($4_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$6
      }
      HEAPF64[(0 + 91648 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
     }
     label$7 : {
      if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     label$8 : {
      label$9 : while (1) {
       $40_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $40_1 + -1 | 0;
       if (!$40_1) {
        break label$8
       }
       $104_1 = +HEAPF64[($4_1 + 16 | 0) >> 3];
       $45_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + -8 | 0;
       HEAP32[($4_1 + 32 | 0) >> 2] = $45_1;
       HEAPF64[$45_1 >> 3] = +HEAPF64[$45_1 >> 3] / $104_1;
       continue label$9;
      };
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAPF64[($4_1 + 16 | 0) >> 3] = +(0 | 0);
       HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
       label$12 : {
        label$13 : while (1) {
         $64_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $64_1 + -1 | 0;
         if (!$64_1) {
          break label$12
         }
         $67_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
         HEAP32[($4_1 + 32 | 0) >> 2] = $67_1 + 8 | 0;
         $108_1 = +HEAPF64[$67_1 >> 3];
         $70_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = $70_1 + 8 | 0;
         HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3] + $108_1 * +HEAPF64[$70_1 >> 3];
         continue label$13;
        };
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
       label$14 : {
        label$15 : while (1) {
         $74_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $74_1 + -1 | 0;
         if (!$74_1) {
          break label$14
         }
         $79_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + -8 | 0;
         HEAP32[($4_1 + 32 | 0) >> 2] = $79_1;
         $115_1 = +HEAPF64[$79_1 >> 3] * +HEAPF64[($4_1 + 16 | 0) >> 3];
         $82_1 = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + -8 | 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = $82_1;
         HEAPF64[$82_1 >> 3] = +HEAPF64[$82_1 >> 3] - $115_1;
         continue label$15;
        };
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = 1;
  }
  return HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $117_1 = 0.0, $58_1 = 0, $134_1 = 0.0, $99_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = 1;
  label$1 : {
   if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[(0 + 89400 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$4 : {
     if (!(+HEAPF64[($4_1 + 8 | 0) >> 3] > -8988465674311578540726371.0e283 & 1 | 0)) {
      break label$4
     }
     label$5 : {
      if (!(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 20 | 0) >> 2] = 0;
     }
     label$6 : {
      if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$7 : {
       label$8 : {
        if (!(+HEAPF64[($4_1 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
         break label$8
        }
        $117_1 = -+HEAPF64[($4_1 + 8 | 0) >> 3];
        break label$7;
       }
       $117_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
      }
      $58_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      HEAPF64[$58_1 >> 3] = +HEAPF64[$58_1 >> 3] + $117_1;
     }
    }
    label$9 : {
     if (!(+HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$9
     }
     HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$10 : {
      if (!(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
       break label$10
      }
      HEAP32[($4_1 + 20 | 0) >> 2] = 0;
     }
     label$11 : {
      if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$12 : {
       label$13 : {
        if (!(+HEAPF64[($4_1 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
         break label$13
        }
        $134_1 = -+HEAPF64[($4_1 + 8 | 0) >> 3];
        break label$12;
       }
       $134_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
      }
      $99_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      HEAPF64[$99_1 >> 3] = +HEAPF64[$99_1 >> 3] + $134_1;
     }
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  return HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $43() {
  var $2_1 = 0, $214_1 = 0.0, $26_1 = 0, $42_1 = 0, $192_1 = 0.0, $122_1 = 0, $149_1 = 0, $153_1 = 0, $156_1 = 0, $34_1 = 0, $188_1 = 0.0, $115_1 = 0, $132_1 = 0, $198_1 = 0.0, $213_1 = 0.0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 88336 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[(0 + 88336 | 0) >> 2] = HEAP32[(0 + 88328 | 0) >> 2] | 0;
    HEAP32[(0 + 88340 | 0) >> 2] = HEAP32[(0 + 88332 | 0) >> 2] | 0;
    HEAP32[($2_1 + 84 | 0) >> 2] = Math_imul(HEAP32[(0 + 88324 | 0) >> 2] | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0;
    $26_1 = $395(HEAP32[($2_1 + 84 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(0 + 88328 | 0) >> 2] = $26_1;
    label$3 : {
     if (($26_1 | 0) != (0 | 0) & 1 | 0) {
      break label$3
     }
     $34_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[(0 + 88324 | 0) >> 2] | 0;
     $396($34_1 | 0, 6009 | 0, 4589 | 0, $2_1 + 32 | 0 | 0);
     $42_1 = 0;
     $382(4 | 0, $42_1 | 0, $42_1 | 0);
    }
    HEAP32[(0 + 88332 | 0) >> 2] = 1;
    label$4 : {
     if (!(+HEAPF64[(0 + 90136 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[(0 + 90136 | 0) >> 3] = +$23(HEAP32[(0 + 88336 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
     $73(4643 | 0, 0 | 0, 87704 + 2432 | 0 | 0);
    }
    break label$1;
   }
   label$5 : {
    if (HEAP32[(0 + 88180 | 0) >> 2] | 0) {
     break label$5
    }
    if (!((HEAP32[(0 + 90100 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if ((((HEAP32[(0 + 90100 | 0) >> 2] | 0) - 2 | 0) - 1 | 0 | 0) % (1 | 0) | 0) {
      break label$6
     }
     HEAPF64[($2_1 + 40 | 0) >> 3] = +HEAPF64[(0 + 89480 | 0) >> 3] * .01;
     label$7 : {
      if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < +HEAPF64[($2_1 + 40 | 0) >> 3] & 1 | 0)) {
       break label$7
      }
      HEAPF64[(0 + 90136 | 0) >> 3] = +HEAPF64[(0 + 90136 | 0) >> 3] * 10.0;
      label$8 : {
       if (!(+HEAPF64[(0 + 90136 | 0) >> 3] > +HEAPF64[($2_1 + 40 | 0) >> 3] & 1 | 0)) {
        break label$8
       }
       HEAPF64[(0 + 90136 | 0) >> 3] = +HEAPF64[($2_1 + 40 | 0) >> 3];
      }
     }
    }
   }
   $73(4643 | 0, 0 | 0, 87704 + 2432 | 0 | 0);
  }
  label$9 : {
   if (!((HEAP32[(0 + 90100 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
    break label$9
   }
   $188_1 = +HEAPF64[(0 + 90136 | 0) >> 3];
   label$10 : {
    label$11 : {
     if (!(+HEAPF64[(0 + 89480 | 0) >> 3] / 4.0 < .1 & 1 | 0)) {
      break label$11
     }
     $192_1 = .1;
     break label$10;
    }
    $192_1 = +HEAPF64[(0 + 89480 | 0) >> 3] / 4.0;
   }
   if (!($188_1 > $192_1 & 1 | 0)) {
    break label$9
   }
   $115_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAPF64[($2_1 + 16 | 0) >> 3] = +HEAPF64[(0 + 90136 | 0) >> 3];
   $396($115_1 | 0, 6010 | 0, 4651 | 0, $2_1 + 16 | 0 | 0);
   $122_1 = 0;
   $382(1 | 0, $122_1 | 0, $122_1 | 0);
  }
  HEAP32[($2_1 + 88 | 0) >> 2] = $355() | 0;
  $73(4824 | 0, $2_1 + 88 | 0 | 0, 0 | 0);
  label$12 : {
   if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
    break label$12
   }
   $132_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $198_1 = +HEAPF64[(0 + 90136 | 0) >> 3];
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
   HEAPF64[$2_1 >> 3] = $198_1;
   $396($132_1 | 0, 6 | 0, 4837 | 0, $2_1 | 0);
  }
  HEAP32[($2_1 + 76 | 0) >> 2] = HEAP32[(0 + 88336 | 0) >> 2] | 0;
  HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[(0 + 88328 | 0) >> 2] | 0;
  HEAPF64[($2_1 + 56 | 0) >> 3] = 2.0 * +HEAPF64[(0 + 90136 | 0) >> 3] / 2147483646.0;
  HEAPF64[($2_1 + 48 | 0) >> 3] = -+HEAPF64[(0 + 90136 | 0) >> 3];
  HEAP32[($2_1 + 84 | 0) >> 2] = Math_imul(HEAP32[(0 + 88324 | 0) >> 2] | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0);
  HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[($2_1 + 84 | 0) >> 2] | 0;
  label$13 : {
   label$14 : while (1) {
    $149_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
    HEAP32[($2_1 + 92 | 0) >> 2] = $149_1 + -1 | 0;
    if (!$149_1) {
     break label$13
    }
    HEAPF64[($2_1 + 64 | 0) >> 3] = +($355() | 0 | 0);
    $153_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
    HEAP32[($2_1 + 76 | 0) >> 2] = $153_1 + 8 | 0;
    $213_1 = +HEAPF64[$153_1 >> 3] + (+HEAPF64[($2_1 + 64 | 0) >> 3] * +HEAPF64[($2_1 + 56 | 0) >> 3] + +HEAPF64[($2_1 + 48 | 0) >> 3]);
    $156_1 = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
    HEAP32[($2_1 + 80 | 0) >> 2] = $156_1 + 8 | 0;
    HEAPF64[$156_1 >> 3] = $213_1;
    continue label$14;
   };
  }
  label$15 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$15
   }
   $214_1 = 1797693134862315708145274.0e284;
   HEAPF64[(0 + 90352 | 0) >> 3] = $214_1;
   HEAPF64[(0 + 90344 | 0) >> 3] = $214_1;
   HEAPF64[(0 + 90336 | 0) >> 3] = $214_1;
   $44(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0);
  }
  global$0 = $2_1 + 96 | 0;
  return;
 }
 
 function $44($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $22_1 = 0, $28_1 = 0, $31_1 = 0, $34_1 = 0, $9_1 = 0, $62_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  label$1 : {
   if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
    break label$1
   }
   $9_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   $396($9_1 | 0, 11 | 0, 7518 | 0, $5_1 | 0);
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $22_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $22_1 + 8 | 0;
    HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[$22_1 >> 3];
    HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3];
    HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) - 2 | 0;
    label$4 : {
     label$5 : while (1) {
      $28_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = $28_1 + -1 | 0;
      if (!$28_1) {
       break label$4
      }
      $31_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
      HEAP32[($5_1 + 24 | 0) >> 2] = $31_1 + 8 | 0;
      HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[$31_1 >> 3];
      HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3];
      continue label$5;
     };
    }
    $62_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
    $34_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $34_1 + 8 | 0;
    HEAPF64[$34_1 >> 3] = $62_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  label$6 : {
   if (!(+HEAPF64[(0 + 90336 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$6
   }
   $45(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 90336 | 0) >> 3]), +(+HEAPF64[(0 + 90344 | 0) >> 3]), +(+HEAPF64[(0 + 90352 | 0) >> 3]));
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $45($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  $5_1 = +$5_1;
  var $8_1 = 0, $10_1 = 0, $55_1 = 0, $64_1 = 0, $19_1 = 0, $77_1 = 0.0, $78_1 = 0.0, $79_1 = 0.0, $39_1 = 0, $92_1 = 0.0, $43_1 = 0, $94_1 = 0.0, $95_1 = 0.0, $96_1 = 0.0, $97_1 = 0.0;
  $8_1 = global$0 - 176 | 0;
  global$0 = $8_1;
  $10_1 = 0;
  HEAP32[($8_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 168 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 164 | 0) >> 2] = $2_1;
  HEAPF64[($8_1 + 152 | 0) >> 3] = $3_1;
  HEAPF64[($8_1 + 144 | 0) >> 3] = $4_1;
  HEAPF64[($8_1 + 136 | 0) >> 3] = $5_1;
  HEAP32[($8_1 + 96 | 0) >> 2] = $10_1;
  HEAPF64[($8_1 + 104 | 0) >> 3] = +($10_1 | 0);
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $19_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $77_1 = +HEAPF64[($8_1 + 152 | 0) >> 3];
   $78_1 = +HEAPF64[($8_1 + 144 | 0) >> 3];
   $79_1 = +HEAPF64[($8_1 + 104 | 0) >> 3];
   HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[($8_1 + 136 | 0) >> 3];
   HEAPF64[($8_1 + 80 | 0) >> 3] = $79_1;
   HEAPF64[($8_1 + 72 | 0) >> 3] = $78_1;
   HEAPF64[($8_1 + 64 | 0) >> 3] = $77_1;
   $396($19_1 | 0, 4013 | 0, 6790 | 0, $8_1 + 64 | 0 | 0);
  }
  HEAPF64[(0 + 90336 | 0) >> 3] = +HEAPF64[($8_1 + 152 | 0) >> 3];
  HEAPF64[(0 + 90344 | 0) >> 3] = +HEAPF64[($8_1 + 144 | 0) >> 3];
  HEAPF64[(0 + 90352 | 0) >> 3] = +HEAPF64[($8_1 + 136 | 0) >> 3];
  HEAPF64[($8_1 + 128 | 0) >> 3] = +$29(+(+HEAPF64[($8_1 + 136 | 0) >> 3] - +HEAPF64[($8_1 + 104 | 0) >> 3]), +(+HEAPF64[($8_1 + 144 | 0) >> 3] - +HEAPF64[($8_1 + 152 | 0) >> 3]), +(+HEAPF64[(0 + 89488 | 0) >> 3]), $8_1 + 96 | 0 | 0);
  label$2 : {
   if (!(HEAP32[($8_1 + 96 | 0) >> 2] | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
      break label$4
     }
     $39_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $92_1 = +HEAPF64[($8_1 + 104 | 0) >> 3];
     HEAPF64[($8_1 + 8 | 0) >> 3] = +HEAPF64[($8_1 + 136 | 0) >> 3];
     HEAPF64[$8_1 >> 3] = $92_1;
     $396($39_1 | 0, 6019 | 0, 6865 | 0, $8_1 | 0);
     break label$3;
    }
    $43_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $94_1 = +HEAPF64[($8_1 + 104 | 0) >> 3];
    $95_1 = +HEAPF64[($8_1 + 136 | 0) >> 3];
    $96_1 = +HEAPF64[($8_1 + 152 | 0) >> 3];
    $97_1 = +HEAPF64[($8_1 + 144 | 0) >> 3];
    HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 144 | 0) >> 3] - +HEAPF64[($8_1 + 152 | 0) >> 3];
    HEAPF64[($8_1 + 40 | 0) >> 3] = $97_1;
    HEAPF64[($8_1 + 32 | 0) >> 3] = $96_1;
    HEAPF64[($8_1 + 24 | 0) >> 3] = $95_1;
    HEAPF64[($8_1 + 16 | 0) >> 3] = $94_1;
    $396($43_1 | 0, 6020 | 0, 7032 | 0, $8_1 + 16 | 0 | 0);
   }
   $55_1 = 0;
   $382(1 | 0, $55_1 | 0, $55_1 | 0);
  }
  HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[($8_1 + 104 | 0) >> 3] - +HEAPF64[($8_1 + 152 | 0) >> 3] * +HEAPF64[($8_1 + 128 | 0) >> 3];
  HEAP32[($8_1 + 116 | 0) >> 2] = ((HEAP32[($8_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) + -8 | 0;
  HEAP32[($8_1 + 100 | 0) >> 2] = HEAP32[($8_1 + 168 | 0) >> 2] | 0;
  label$5 : {
   label$6 : while (1) {
    $64_1 = HEAP32[($8_1 + 100 | 0) >> 2] | 0;
    HEAP32[($8_1 + 100 | 0) >> 2] = $64_1 + -1 | 0;
    if (!$64_1) {
     break label$5
    }
    HEAPF64[(HEAP32[($8_1 + 116 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 116 | 0) >> 2] | 0) >> 3] * +HEAPF64[($8_1 + 128 | 0) >> 3] + +HEAPF64[($8_1 + 120 | 0) >> 3];
    HEAP32[($8_1 + 116 | 0) >> 2] = (HEAP32[($8_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0;
    continue label$6;
   };
  }
  global$0 = $8_1 + 176 | 0;
  return;
 }
 
 function $46($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $31_1 = 0.0;
  $4_1 = global$0 - 48 | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 32 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $8_1 + -1 | 0;
    if (!$8_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!(+HEAPF64[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$4
      }
      $31_1 = -+HEAPF64[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 3];
      break label$3;
     }
     $31_1 = +HEAPF64[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 3];
    }
    HEAPF64[($4_1 + 16 | 0) >> 3] = $31_1;
    label$5 : {
     if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] > +HEAPF64[($4_1 + 32 | 0) >> 3] & 1 | 0)) {
      break label$5
     }
     HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0;
    continue label$2;
   };
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $47($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $344_1 = 0.0, $6_1 = 0, $54_1 = 0, $55_1 = 0, $358_1 = 0.0, $366_1 = 0.0, $231_1 = 0, $251_1 = 0, $252_1 = 0, $389_1 = 0.0, $390_1 = 0.0, $393_1 = 0.0, $394_1 = 0.0, $280_1 = 0, $317_1 = 0, $397_1 = 0.0, $398_1 = 0.0, $341_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  $344_1 = +($6_1 | 0);
  HEAP32[($5_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 132 | 0) >> 2] = $2_1;
  HEAPF64[(0 + 90152 | 0) >> 3] = $344_1;
  HEAPF64[(0 + 89448 | 0) >> 3] = $344_1;
  HEAPF64[(0 + 89480 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAPF64[(0 + 89472 | 0) >> 3] = $344_1;
  HEAPF64[(0 + 90168 | 0) >> 3] = $344_1;
  HEAP32[(0 + 90264 | 0) >> 2] = $6_1;
  label$1 : {
   if (!(HEAP32[(0 + 89392 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 90268 | 0) >> 2] = 1;
  }
  HEAP32[($5_1 + 92 | 0) >> 2] = $347((HEAP32[($5_1 + 132 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
  label$2 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$2
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8082 | 0, 4889 | 0, 0 | 0);
  }
  HEAP32[($5_1 + 128 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      $54_1 = (HEAP32[($5_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAP32[($5_1 + 104 | 0) >> 2] = $54_1;
      HEAP32[($5_1 + 108 | 0) >> 2] = $54_1;
      break label$5;
     }
     $55_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = $55_1;
     HEAP32[($5_1 + 108 | 0) >> 2] = $55_1;
    }
    HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
    HEAP32[($5_1 + 96 | 0) >> 2] = (HEAP32[($5_1 + 140 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($5_1 + 100 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 96 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$7
      }
      label$9 : {
       label$10 : {
        if (!((HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$10
        }
        break label$9;
       }
       label$11 : {
        label$12 : {
         if (!(+HEAPF64[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
          break label$12
         }
         HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
         break label$11;
        }
        label$13 : {
         if (!(+HEAPF64[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
          break label$13
         }
         HEAP32[($5_1 + 108 | 0) >> 2] = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        }
       }
      }
      HEAP32[($5_1 + 100 | 0) >> 2] = (HEAP32[($5_1 + 100 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
      continue label$8;
     };
    }
    label$14 : {
     if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) == ((HEAP32[($5_1 + 132 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAPF64[(0 + 89520 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[(0 + 89456 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    }
    label$15 : {
     label$16 : {
      if (!(HEAP32[(0 + 88192 | 0) >> 2] | 0)) {
       break label$16
      }
      if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) == ((HEAP32[($5_1 + 132 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$16
      }
      HEAPF64[($5_1 + 120 | 0) >> 3] = +HEAPF64[(0 + 89448 | 0) >> 3];
      break label$15;
     }
     label$17 : {
      label$18 : {
       if (!(+HEAPF64[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < -+HEAPF64[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
        break label$18
       }
       $358_1 = -+HEAPF64[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$17;
      }
      $358_1 = +HEAPF64[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     HEAPF64[($5_1 + 120 | 0) >> 3] = $358_1;
     label$19 : {
      if (!((HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$19
      }
      label$20 : {
       label$21 : {
        if (!(+HEAPF64[((HEAP32[(0 + 87808 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < -+HEAPF64[((HEAP32[(0 + 87808 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
         break label$21
        }
        $366_1 = -+HEAPF64[((HEAP32[(0 + 87808 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        break label$20;
       }
       $366_1 = +HEAPF64[((HEAP32[(0 + 87808 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      }
      HEAPF64[($5_1 + 112 | 0) >> 3] = $366_1;
      label$22 : {
       if (!(+HEAPF64[($5_1 + 120 | 0) >> 3] < +HEAPF64[($5_1 + 112 | 0) >> 3] & 1 | 0)) {
        break label$22
       }
       HEAPF64[($5_1 + 120 | 0) >> 3] = +HEAPF64[($5_1 + 112 | 0) >> 3];
      }
     }
     HEAPF64[($5_1 + 112 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$23 : {
      if (!(+HEAPF64[(0 + 89480 | 0) >> 3] < +HEAPF64[($5_1 + 112 | 0) >> 3] & 1 | 0)) {
       break label$23
      }
      HEAPF64[(0 + 89480 | 0) >> 3] = +HEAPF64[($5_1 + 112 | 0) >> 3];
     }
    }
    label$24 : {
     if (!(+HEAPF64[(0 + 89448 | 0) >> 3] < +HEAPF64[($5_1 + 120 | 0) >> 3] & 1 | 0)) {
      break label$24
     }
     HEAPF64[(0 + 89448 | 0) >> 3] = +HEAPF64[($5_1 + 120 | 0) >> 3];
    }
    $231_1 = $5_1 + 92 | 0;
    HEAPF64[(0 + 89472 | 0) >> 3] = +HEAPF64[(0 + 89472 | 0) >> 3] + +HEAPF64[($5_1 + 120 | 0) >> 3];
    $325($231_1 | 0, HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0);
    $325($231_1 | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0);
    HEAPF64[((HEAP32[(0 + 89528 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 80.0 * +HEAPF64[(0 + 89472 | 0) >> 3] * 2.220446049250313e-16;
    label$25 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$25
     }
     $251_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $252_1 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
     $389_1 = +HEAPF64[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $390_1 = +HEAPF64[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $393_1 = +HEAPF64[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $394_1 = +HEAPF64[((HEAP32[(0 + 89528 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $280_1 = $267(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = $267(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = $280_1;
     HEAPF64[($5_1 + 64 | 0) >> 3] = $394_1;
     HEAPF64[($5_1 + 56 | 0) >> 3] = $393_1;
     HEAPF64[($5_1 + 48 | 0) >> 3] = $390_1;
     HEAPF64[($5_1 + 40 | 0) >> 3] = $389_1;
     HEAP32[($5_1 + 32 | 0) >> 2] = $252_1;
     $396($251_1 | 0, 8106 | 0, 4987 | 0, $5_1 + 32 | 0 | 0);
    }
    label$26 : {
     if (!(HEAP32[(0 + 88192 | 0) >> 2] | 0)) {
      break label$26
     }
     if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) == ((HEAP32[($5_1 + 132 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$26
     }
     label$27 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
       break label$27
      }
      $317_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $397_1 = +HEAPF64[(0 + 89448 | 0) >> 3] - +HEAPF64[(0 + 89480 | 0) >> 3];
      $398_1 = +HEAPF64[(0 + 89448 | 0) >> 3];
      HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[(0 + 89480 | 0) >> 3];
      HEAPF64[($5_1 + 8 | 0) >> 3] = $398_1;
      HEAPF64[$5_1 >> 3] = $397_1;
      $396($317_1 | 0, 8107 | 0, 5046 | 0, $5_1 | 0);
     }
    }
    HEAP32[($5_1 + 128 | 0) >> 2] = (HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$28 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$28
   }
   $35(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5129 | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0);
  }
  $341_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  global$0 = $5_1 + 144 | 0;
  return $341_1 | 0;
 }
 
 function $48() {
  var $2_1 = 0, $29_1 = 0.0, $20_1 = 0, $35_1 = 0.0, $37_1 = 0.0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[(0 + 90152 | 0) >> 3] < +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    $29_1 = +HEAPF64[(0 + 89440 | 0) >> 3];
    break label$1;
   }
   $29_1 = +HEAPF64[(0 + 90152 | 0) >> 3];
  }
  HEAPF64[($2_1 + 24 | 0) >> 3] = $29_1;
  HEAPF64[($2_1 + 24 | 0) >> 3] = +HEAPF64[($2_1 + 24 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
  label$3 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$3
   }
   $20_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $35_1 = +HEAPF64[($2_1 + 24 | 0) >> 3];
   HEAPF64[($2_1 + 8 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
   HEAPF64[$2_1 >> 3] = $35_1;
   $396($20_1 | 0, 4012 | 0, 5179 | 0, $2_1 | 0);
  }
  $37_1 = +HEAPF64[($2_1 + 24 | 0) >> 3];
  global$0 = $2_1 + 32 | 0;
  return +$37_1;
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0, $35_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  $4(HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($3_1 + 8 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      $16_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = $16_1 + -1 | 0;
      if (!$16_1) {
       break label$3
      }
      HEAPF64[((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      continue label$4;
     };
    }
    HEAPF64[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 3] = -+HEAPF64[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 3];
    HEAP32[($3_1 + 28 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  }
  $35_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $35_1 | 0;
 }
 
 function $50($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $33_1 = 0, $48_1 = 0, $61_1 = 0, $64_1 = 0, $96_1 = 0, $99_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      if (HEAP32[(0 + 90144 | 0) >> 2] | 0) {
       break label$3
      }
     }
     $99_1 = +$48();
     HEAPF64[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 3] = $99_1;
     break label$2;
    }
    HEAPF64[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
   }
   label$5 : {
    if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$5
    }
    $33_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    HEAPF64[$33_1 >> 3] = +HEAPF64[$33_1 >> 3] + +HEAPF64[(0 + 90136 | 0) >> 3] * Math_sqrt(+(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0));
   }
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   label$7 : {
    label$8 : {
     if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     $48_1 = 0;
     HEAPF64[($5_1 + 16 | 0) >> 3] = 1797693134862315708145274.0e284;
     HEAP32[($5_1 + 12 | 0) >> 2] = $48_1;
     label$9 : {
      if (!((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($48_1 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
      label$10 : {
       label$11 : while (1) {
        $61_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        HEAP32[($5_1 + 8 | 0) >> 2] = $61_1 + 4 | 0;
        $64_1 = HEAP32[$61_1 >> 2] | 0;
        HEAP32[($5_1 + 12 | 0) >> 2] = $64_1;
        if (!(($64_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$10
        }
        HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
        $4(HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0);
        label$12 : {
         if (!(+HEAPF64[($5_1 + 16 | 0) >> 3] > +HEAPF64[($5_1 + 24 | 0) >> 3] & 1 | 0)) {
          break label$12
         }
         HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 24 | 0) >> 3];
        }
        continue label$11;
       };
      }
     }
     HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] - +HEAPF64[(0 + 89440 | 0) >> 3];
     break label$7;
    }
    HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] = +HEAPF64[(0 + 90168 | 0) >> 3] - +HEAPF64[(0 + 89440 | 0) >> 3];
   }
   label$13 : {
    if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$13
    }
    $96_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    HEAPF64[$96_1 >> 3] = +HEAPF64[$96_1 >> 3] - +HEAPF64[(0 + 90136 | 0) >> 3] * Math_sqrt(+(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0));
   }
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $51() {
  var $2_1 = 0, $98_1 = 0, $290_1 = 0, $3_1 = 0, $91_1 = 0, $114_1 = 0, $141_1 = 0, $192_1 = 0, $236_1 = 0, $247_1 = 0, $250_1 = 0, $268_1 = 0, $275_1 = 0, $285_1 = 0, $293_1 = 0, $82_1 = 0, $83_1 = 0, $108_1 = 0, $333_1 = 0.0, $337_1 = 0.0, $342_1 = 0.0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 68 | 0) >> 2] = HEAP32[(0 + 88320 | 0) >> 2] | 0;
  HEAP32[($2_1 + 64 | 0) >> 2] = HEAP32[(0 + 88324 | 0) >> 2] | 0;
  HEAP32[($2_1 + 56 | 0) >> 2] = ((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 0 | 0;
  HEAPF64[($2_1 + 24 | 0) >> 3] = +($3_1 | 0);
  HEAP32[($2_1 + 60 | 0) >> 2] = $156(HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  $513(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($2_1 + 76 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88320 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!(+HEAPF64[((HEAP32[(0 + 89408 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!(+HEAPF64[((HEAP32[(0 + 89404 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP8[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + (HEAP32[($2_1 + 76 | 0) >> 2] | 0) | 0) >> 0] = 255;
     HEAP32[($2_1 + 68 | 0) >> 2] = (HEAP32[($2_1 + 68 | 0) >> 2] | 0) + -1 | 0;
    }
    HEAP32[($2_1 + 76 | 0) >> 2] = (HEAP32[($2_1 + 76 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$4
   }
   HEAP8[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + (HEAP32[($2_1 + 76 | 0) >> 2] | 0) | 0) >> 0] = 1;
   HEAP32[($2_1 + 68 | 0) >> 2] = (HEAP32[($2_1 + 68 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
     break label$5
    }
    HEAP32[($2_1 + 64 | 0) >> 2] = (HEAP32[($2_1 + 64 | 0) >> 2] | 0) + 1 | 0;
   }
  }
  label$6 : {
   if (!((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$6
   }
   $158(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0);
   $82_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $83_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $83_1;
   $396($82_1 | 0, 6015 | 0, 6276 | 0, $2_1 + 16 | 0 | 0);
   $91_1 = 0;
   $382(5 | 0, $91_1 | 0, $91_1 | 0);
  }
  $98_1 = $395(Math_imul(HEAP32[($2_1 + 64 | 0) >> 2] | 0, HEAP32[($2_1 + 68 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  HEAP32[(0 + 90316 | 0) >> 2] = $98_1;
  HEAP32[($2_1 + 52 | 0) >> 2] = $98_1;
  label$7 : {
   if (($98_1 | 0) != (0 | 0) & 1 | 0) {
    break label$7
   }
   $158(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0);
   $108_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[(0 + 88324 | 0) >> 2] | 0;
   $396($108_1 | 0, 6016 | 0, 6362 | 0, $2_1 | 0);
   $114_1 = 0;
   $382(4 | 0, $114_1 | 0, $114_1 | 0);
  }
  $52(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88320 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0);
  label$8 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$8
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1003 | 0, 6417 | 0, 0 | 0);
  }
  $141_1 = 1;
  $52(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[(0 + 89408 | 0) >> 2] | 0 | 0, $141_1 | 0, (HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[(0 + 89408 | 0) >> 2] | 0 | 0, (HEAP32[($2_1 + 68 | 0) >> 2] | 0) + 1 | 0 | 0);
  $52(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[(0 + 89404 | 0) >> 2] | 0 | 0, $141_1 | 0, (HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[(0 + 89404 | 0) >> 2] | 0 | 0, (HEAP32[($2_1 + 68 | 0) >> 2] | 0) + 1 | 0 | 0);
  label$9 : {
   if (!(HEAP32[(0 + 87824 | 0) >> 2] | 0)) {
    break label$9
   }
   label$10 : {
    if ((HEAP32[(0 + 88304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$10
    }
    $158(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0);
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6017 | 0, 6466 | 0, 0 | 0);
    $192_1 = 0;
    $382(5 | 0, $192_1 | 0, $192_1 | 0);
   }
   $52(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88320 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88304 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(0 + 88320 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88304 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0);
  }
  $158(HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0);
  label$11 : {
   if (!(HEAP32[(0 + 88332 | 0) >> 2] | 0)) {
    break label$11
   }
   $394(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0);
  }
  HEAP32[(0 + 88328 | 0) >> 2] = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
  HEAP32[(0 + 88332 | 0) >> 2] = 1;
  HEAP32[(0 + 90316 | 0) >> 2] = 0;
  label$12 : {
   label$13 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$13
    }
    if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
     break label$13
    }
    HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[(0 + 88328 | 0) >> 2] | 0;
    HEAP32[($2_1 + 44 | 0) >> 2] = (HEAP32[(0 + 88328 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[($2_1 + 76 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
    label$14 : {
     label$15 : while (1) {
      $236_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
      HEAP32[($2_1 + 76 | 0) >> 2] = $236_1 + -1 | 0;
      if (!$236_1) {
       break label$14
      }
      HEAPF64[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      continue label$15;
     };
    }
    HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[(0 + 88324 | 0) >> 2] | 0;
    label$16 : {
     label$17 : while (1) {
      $247_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
      HEAP32[($2_1 + 72 | 0) >> 2] = $247_1 + -1 | 0;
      if (!$247_1) {
       break label$16
      }
      $250_1 = 0;
      HEAPF64[($2_1 + 32 | 0) >> 3] = +($250_1 | 0);
      HEAP32[($2_1 + 76 | 0) >> 2] = $250_1;
      label$18 : {
       label$19 : while (1) {
        if (!((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < ((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
         break label$18
        }
        HEAPF64[($2_1 + 32 | 0) >> 3] = +HEAPF64[($2_1 + 32 | 0) >> 3] + +HEAPF64[(HEAP32[($2_1 + 48 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($2_1 + 48 | 0) >> 2] | 0) >> 3];
        $268_1 = (HEAP32[($2_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$268_1 >> 3] = +HEAPF64[$268_1 >> 3] + +HEAPF64[(HEAP32[($2_1 + 48 | 0) >> 2] | 0) >> 3];
        HEAP32[($2_1 + 48 | 0) >> 2] = (HEAP32[($2_1 + 48 | 0) >> 2] | 0) + 8 | 0;
        HEAP32[($2_1 + 76 | 0) >> 2] = (HEAP32[($2_1 + 76 | 0) >> 2] | 0) + 1 | 0;
        continue label$19;
       };
      }
      $333_1 = +HEAPF64[($2_1 + 32 | 0) >> 3];
      $275_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = $275_1 + 8 | 0;
      HEAPF64[$275_1 >> 3] = $333_1;
      label$20 : {
       if (!(+HEAPF64[($2_1 + 24 | 0) >> 3] < +HEAPF64[($2_1 + 32 | 0) >> 3] & 1 | 0)) {
        break label$20
       }
       HEAPF64[($2_1 + 24 | 0) >> 3] = +HEAPF64[($2_1 + 32 | 0) >> 3];
      }
      continue label$17;
     };
    }
    HEAP32[($2_1 + 76 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
    label$21 : {
     label$22 : while (1) {
      $285_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
      HEAP32[($2_1 + 76 | 0) >> 2] = $285_1 + -1 | 0;
      if (!$285_1) {
       break label$21
      }
      $337_1 = +(HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0);
      $290_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = $290_1 + 8 | 0;
      HEAPF64[$290_1 >> 3] = +HEAPF64[$290_1 >> 3] / $337_1;
      continue label$22;
     };
    }
    $342_1 = +HEAPF64[($2_1 + 24 | 0) >> 3] * 1.1;
    $293_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
    HEAP32[($2_1 + 48 | 0) >> 2] = $293_1 + 8 | 0;
    HEAPF64[$293_1 >> 3] = $342_1;
    HEAP32[(0 + 88324 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + 1 | 0;
    label$23 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$23
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 9 | 0, 6551 | 0, 0 | 0);
    }
    break label$12;
   }
   label$24 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$24
    }
    $44(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0);
   }
  }
  global$0 = $2_1 + 80 | 0;
  return;
 }
 
 function $52($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $10_1 = 0, $23_1 = 0, $47_1 = 0, $61_1 = 0, $74_1 = 0, $84_1 = 0, $105_1 = 0, $112_1 = 0, $39_1 = 0, $40_1 = 0, $73_1 = 0, $104_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0;
  $9_1 = global$0 - 96 | 0;
  global$0 = $9_1;
  $10_1 = 0;
  HEAP32[($9_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 76 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 72 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 68 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 64 | 0) >> 2] = HEAP32[($9_1 + 76 | 0) >> 2] | 0;
  HEAP32[($9_1 + 60 | 0) >> 2] = $10_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $10_1;
  HEAP32[($9_1 + 48 | 0) >> 2] = $10_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $10_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $23_1 = 24;
    HEAP32[($9_1 + 64 | 0) >> 2] = (HEAP32[($9_1 + 64 | 0) >> 2] | 0) + (((HEAPU8[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + (HEAP32[($9_1 + 44 | 0) >> 2] | 0) | 0) >> 0] | 0) << $23_1 | 0) >> $23_1 | 0) | 0;
    HEAP32[($9_1 + 44 | 0) >> 2] = (HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!((HEAP32[($9_1 + 64 | 0) >> 2] | 0 | 0) != (HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   $39_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $40_1 = HEAP32[($9_1 + 68 | 0) >> 2] | 0;
   HEAP32[($9_1 + 20 | 0) >> 2] = HEAP32[($9_1 + 64 | 0) >> 2] | 0;
   HEAP32[($9_1 + 16 | 0) >> 2] = $40_1;
   $396($39_1 | 0, 6018 | 0, 6613 | 0, $9_1 + 16 | 0 | 0);
   $47_1 = 0;
   $382(5 | 0, $47_1 | 0, $47_1 | 0);
  }
  HEAP32[($9_1 + 48 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $61_1 = 24;
    label$6 : {
     label$7 : {
      label$8 : {
       if (!((((HEAPU8[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + (HEAP32[($9_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) << $61_1 | 0) >> $61_1 | 0 | 0) == (-1 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[($9_1 + 60 | 0) >> 2] = (HEAP32[($9_1 + 60 | 0) >> 2] | 0) + 1 | 0;
       break label$7;
      }
      $73_1 = HEAP32[($9_1 + 72 | 0) >> 2] | 0;
      $74_1 = HEAP32[($9_1 + 56 | 0) >> 2] | 0;
      HEAP32[($9_1 + 56 | 0) >> 2] = $74_1 + 1 | 0;
      HEAP32[($9_1 + 40 | 0) >> 2] = $73_1 + ($74_1 << 3 | 0) | 0;
      $84_1 = 24;
      label$9 : {
       label$10 : {
        if (!((((HEAPU8[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + (HEAP32[($9_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) << $84_1 | 0) >> $84_1 | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$10
        }
        label$11 : {
         if (!((HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) >= (HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$11
         }
         break label$6;
        }
        HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0;
        break label$9;
       }
       $104_1 = HEAP32[($9_1 + 84 | 0) >> 2] | 0;
       $105_1 = HEAP32[($9_1 + 60 | 0) >> 2] | 0;
       HEAP32[($9_1 + 60 | 0) >> 2] = $105_1 + 1 | 0;
       HEAP32[($9_1 + 36 | 0) >> 2] = $104_1 + ($105_1 << 3 | 0) | 0;
      }
      HEAP32[($9_1 + 52 | 0) >> 2] = HEAP32[($9_1 + 80 | 0) >> 2] | 0;
      label$12 : {
       label$13 : while (1) {
        $112_1 = HEAP32[($9_1 + 52 | 0) >> 2] | 0;
        HEAP32[($9_1 + 52 | 0) >> 2] = $112_1 + -1 | 0;
        if (!$112_1) {
         break label$12
        }
        HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 3];
        HEAP32[($9_1 + 40 | 0) >> 2] = (HEAP32[($9_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0;
        continue label$13;
       };
      }
     }
     label$14 : {
      if (!((HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) >= (HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      break label$4;
     }
    }
    HEAP32[($9_1 + 48 | 0) >> 2] = (HEAP32[($9_1 + 48 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  label$15 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$15
   }
   $146_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $147_1 = HEAP32[($9_1 + 80 | 0) >> 2] | 0;
   $148_1 = HEAP32[($9_1 + 76 | 0) >> 2] | 0;
   HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[($9_1 + 68 | 0) >> 2] | 0;
   HEAP32[($9_1 + 4 | 0) >> 2] = $148_1;
   HEAP32[$9_1 >> 2] = $147_1;
   $396($146_1 | 0, 1004 | 0, 6695 | 0, $9_1 | 0);
  }
  global$0 = $9_1 + 96 | 0;
  return;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (HEAP32[(0 + 88332 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 88328 | 0) >> 2] = $20(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(0 + 88332 | 0) >> 2] = 1;
  }
  $54(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $54($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $24_1 = 0, $50_1 = 0, $53_1 = 0, $56_1 = 0, $59_1 = 0, $66_1 = 0, $71_1 = 0, $74_1 = 0, $83_1 = 0.0, $88_1 = 0.0, $89_1 = 0.0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $36(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6756 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
  label$2 : {
   label$3 : while (1) {
    $24_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $24_1 + -1 | 0;
    if (!$24_1) {
     break label$2
    }
    HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($6_1 + 16 | 0) >> 2] = 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      HEAPF64[($6_1 + 24 | 0) >> 3] = +(0 | 0);
      HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
      label$6 : {
       label$7 : while (1) {
        $50_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
        HEAP32[($6_1 + 8 | 0) >> 2] = $50_1 + -1 | 0;
        if (!$50_1) {
         break label$6
        }
        $53_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
        HEAP32[($6_1 + 40 | 0) >> 2] = $53_1 + 8 | 0;
        $83_1 = +HEAPF64[$53_1 >> 3];
        $56_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
        HEAP32[($6_1 + 36 | 0) >> 2] = $56_1 + 8 | 0;
        HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3] + $83_1 * +HEAPF64[$56_1 >> 3];
        continue label$7;
       };
      }
      $88_1 = +HEAPF64[($6_1 + 24 | 0) >> 3];
      $59_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
      HEAP32[($6_1 + 20 | 0) >> 2] = $59_1 + 8 | 0;
      HEAPF64[$59_1 >> 3] = $88_1;
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
    label$8 : {
     label$9 : while (1) {
      $66_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
      HEAP32[($6_1 + 8 | 0) >> 2] = $66_1 + -1 | 0;
      if (!$66_1) {
       break label$8
      }
      $71_1 = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + -8 | 0;
      HEAP32[($6_1 + 20 | 0) >> 2] = $71_1;
      $89_1 = +HEAPF64[$71_1 >> 3];
      $74_1 = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + -8 | 0;
      HEAP32[($6_1 + 36 | 0) >> 2] = $74_1;
      HEAPF64[$74_1 >> 3] = $89_1;
      continue label$9;
     };
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0;
    continue label$3;
   };
  }
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $55() {
  label$1 : {
   if (HEAP32[(0 + 88332 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 88328 | 0) >> 2] = $20(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(0 + 88332 | 0) >> 2] = 1;
  }
  $56(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89408 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89404 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function $56($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $38_1 = 0, $87_1 = 0, $107_1 = 0, $114_1 = 0, $133_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $198_1 = 0.0, $94_1 = 0, $95_1 = 0, $208_1 = 0.0, $209_1 = 0.0, $210_1 = 0.0, $154_1 = 0, $155_1 = 0, $240_1 = 0.0, $241_1 = 0.0, $242_1 = 0.0, $243_1 = 0.0, $156_1 = 0, $244_1 = 0.0;
  $7_1 = global$0 - 256 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  HEAP32[($7_1 + 252 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 248 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 244 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 240 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 236 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 148 | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 228 | 0) >> 2] = $8_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($7_1 + 168 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 228 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($7_1 + 176 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 228 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$3 : {
     label$4 : {
      if (!(+HEAPF64[($7_1 + 168 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
       break label$4
      }
      if (!(+HEAPF64[($7_1 + 176 | 0) >> 3] < -8988465674311578540726371.0e283 & 1 | 0)) {
       break label$4
      }
      break label$3;
     }
     HEAPF64[($7_1 + 192 | 0) >> 3] = 1797693134862315708145274.0e284;
     HEAPF64[($7_1 + 184 | 0) >> 3] = -1797693134862315708145274.0e284;
     HEAP32[($7_1 + 232 | 0) >> 2] = HEAP32[($7_1 + 248 | 0) >> 2] | 0;
     HEAP32[($7_1 + 204 | 0) >> 2] = (HEAP32[($7_1 + 252 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 228 | 0) >> 2] | 0) << 3 | 0) | 0;
     label$5 : {
      label$6 : while (1) {
       $38_1 = HEAP32[($7_1 + 232 | 0) >> 2] | 0;
       HEAP32[($7_1 + 232 | 0) >> 2] = $38_1 + -1 | 0;
       if (!$38_1) {
        break label$5
       }
       label$7 : {
        if (!(+HEAPF64[($7_1 + 192 | 0) >> 3] > +HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$7
        }
        HEAPF64[($7_1 + 192 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3];
       }
       label$8 : {
        if (!(+HEAPF64[($7_1 + 184 | 0) >> 3] < +HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$8
        }
        HEAPF64[($7_1 + 184 | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3];
       }
       HEAP32[($7_1 + 204 | 0) >> 2] = (HEAP32[($7_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 244 | 0) >> 2] | 0) << 3 | 0) | 0;
       continue label$6;
      };
     }
     label$9 : {
      if (!(+HEAPF64[($7_1 + 168 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
       break label$9
      }
      HEAPF64[($7_1 + 168 | 0) >> 3] = +HEAPF64[($7_1 + 184 | 0) >> 3];
     }
     label$10 : {
      if (!(+HEAPF64[($7_1 + 176 | 0) >> 3] < -8988465674311578540726371.0e283 & 1 | 0)) {
       break label$10
      }
      HEAPF64[($7_1 + 176 | 0) >> 3] = +HEAPF64[($7_1 + 192 | 0) >> 3];
     }
     label$11 : {
      if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
       break label$11
      }
      if (!((HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0) == ((HEAP32[($7_1 + 244 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$11
      }
      if (!(+HEAPF64[($7_1 + 168 | 0) >> 3] < +HEAPF64[($7_1 + 176 | 0) >> 3] & 1 | 0)) {
       break label$11
      }
      $77_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $78_1 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
      $79_1 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
      $198_1 = +HEAPF64[($7_1 + 168 | 0) >> 3];
      HEAPF64[($7_1 + 128 | 0) >> 3] = +HEAPF64[($7_1 + 176 | 0) >> 3];
      HEAPF64[($7_1 + 120 | 0) >> 3] = $198_1;
      HEAP32[($7_1 + 116 | 0) >> 2] = $79_1;
      HEAP32[($7_1 + 112 | 0) >> 2] = $78_1;
      $396($77_1 | 0, 6021 | 0, 7202 | 0, $7_1 + 112 | 0 | 0);
      $87_1 = 0;
      $382(1 | 0, $87_1 | 0, $87_1 | 0);
     }
     HEAPF64[($7_1 + 208 | 0) >> 3] = +$29(+(+HEAPF64[($7_1 + 168 | 0) >> 3] - +HEAPF64[($7_1 + 176 | 0) >> 3]), +(+HEAPF64[($7_1 + 184 | 0) >> 3] - +HEAPF64[($7_1 + 192 | 0) >> 3]), +(+HEAPF64[(0 + 89488 | 0) >> 3]), $7_1 + 148 | 0 | 0);
     label$12 : {
      if (!(HEAP32[($7_1 + 148 | 0) >> 2] | 0)) {
       break label$12
      }
      $94_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $95_1 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
      $208_1 = +HEAPF64[($7_1 + 176 | 0) >> 3];
      $209_1 = +HEAPF64[($7_1 + 168 | 0) >> 3];
      $210_1 = +HEAPF64[($7_1 + 192 | 0) >> 3];
      HEAPF64[($7_1 + 96 | 0) >> 3] = +HEAPF64[($7_1 + 184 | 0) >> 3];
      HEAPF64[($7_1 + 88 | 0) >> 3] = $210_1;
      HEAPF64[($7_1 + 80 | 0) >> 3] = $209_1;
      HEAPF64[($7_1 + 72 | 0) >> 3] = $208_1;
      HEAP32[($7_1 + 64 | 0) >> 2] = $95_1;
      $396($94_1 | 0, 6022 | 0, 7297 | 0, $7_1 + 64 | 0 | 0);
      $107_1 = 0;
      $382(1 | 0, $107_1 | 0, $107_1 | 0);
     }
     HEAPF64[($7_1 + 216 | 0) >> 3] = (+HEAPF64[($7_1 + 176 | 0) >> 3] * +HEAPF64[($7_1 + 184 | 0) >> 3] - +HEAPF64[($7_1 + 192 | 0) >> 3] * +HEAPF64[($7_1 + 168 | 0) >> 3]) / (+HEAPF64[($7_1 + 184 | 0) >> 3] - +HEAPF64[($7_1 + 192 | 0) >> 3]);
     HEAP32[($7_1 + 204 | 0) >> 2] = (HEAP32[($7_1 + 252 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 228 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAP32[($7_1 + 232 | 0) >> 2] = HEAP32[($7_1 + 248 | 0) >> 2] | 0;
     label$13 : {
      label$14 : while (1) {
       $114_1 = HEAP32[($7_1 + 232 | 0) >> 2] | 0;
       HEAP32[($7_1 + 232 | 0) >> 2] = $114_1 + -1 | 0;
       if (!$114_1) {
        break label$13
       }
       HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] * +HEAPF64[($7_1 + 208 | 0) >> 3] + +HEAPF64[($7_1 + 216 | 0) >> 3];
       HEAP32[($7_1 + 204 | 0) >> 2] = (HEAP32[($7_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 244 | 0) >> 2] | 0) << 3 | 0) | 0;
       continue label$14;
      };
     }
     HEAP32[($7_1 + 204 | 0) >> 2] = (HEAP32[($7_1 + 252 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 228 | 0) >> 2] | 0) << 3 | 0) | 0;
     label$15 : {
      label$16 : {
       if (!(+HEAPF64[($7_1 + 176 | 0) >> 3] < +HEAPF64[($7_1 + 168 | 0) >> 3] & 1 | 0)) {
        break label$16
       }
       HEAPF64[($7_1 + 160 | 0) >> 3] = +HEAPF64[($7_1 + 176 | 0) >> 3];
       HEAPF64[($7_1 + 152 | 0) >> 3] = +HEAPF64[($7_1 + 168 | 0) >> 3];
       break label$15;
      }
      HEAPF64[($7_1 + 160 | 0) >> 3] = +HEAPF64[($7_1 + 168 | 0) >> 3];
      HEAPF64[($7_1 + 152 | 0) >> 3] = +HEAPF64[($7_1 + 176 | 0) >> 3];
     }
     HEAP32[($7_1 + 232 | 0) >> 2] = HEAP32[($7_1 + 248 | 0) >> 2] | 0;
     label$17 : {
      label$18 : while (1) {
       $133_1 = HEAP32[($7_1 + 232 | 0) >> 2] | 0;
       HEAP32[($7_1 + 232 | 0) >> 2] = $133_1 + -1 | 0;
       if (!$133_1) {
        break label$17
       }
       label$19 : {
        if (!(+HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] > +HEAPF64[($7_1 + 152 | 0) >> 3] & 1 | 0)) {
         break label$19
        }
        HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] = +HEAPF64[($7_1 + 152 | 0) >> 3];
       }
       label$20 : {
        if (!(+HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] < +HEAPF64[($7_1 + 160 | 0) >> 3] & 1 | 0)) {
         break label$20
        }
        HEAPF64[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 3] = +HEAPF64[($7_1 + 160 | 0) >> 3];
       }
       HEAP32[($7_1 + 204 | 0) >> 2] = (HEAP32[($7_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 244 | 0) >> 2] | 0) << 3 | 0) | 0;
       continue label$18;
      };
     }
     label$21 : {
      if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
       break label$21
      }
      $154_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $155_1 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
      $240_1 = +HEAPF64[($7_1 + 192 | 0) >> 3];
      $241_1 = +HEAPF64[($7_1 + 184 | 0) >> 3];
      $242_1 = +HEAPF64[($7_1 + 176 | 0) >> 3];
      $243_1 = +HEAPF64[($7_1 + 168 | 0) >> 3];
      $156_1 = HEAP32[($7_1 + 248 | 0) >> 2] | 0;
      $244_1 = +HEAPF64[($7_1 + 208 | 0) >> 3];
      HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[($7_1 + 216 | 0) >> 3];
      HEAPF64[($7_1 + 48 | 0) >> 3] = $244_1;
      HEAP32[($7_1 + 40 | 0) >> 2] = $156_1;
      HEAPF64[($7_1 + 32 | 0) >> 3] = $243_1;
      HEAPF64[($7_1 + 24 | 0) >> 3] = $242_1;
      HEAPF64[($7_1 + 16 | 0) >> 3] = $241_1;
      HEAPF64[($7_1 + 8 | 0) >> 3] = $240_1;
      HEAP32[$7_1 >> 2] = $155_1;
      $396($154_1 | 0, 10 | 0, 7405 | 0, $7_1 | 0);
     }
    }
    HEAP32[($7_1 + 228 | 0) >> 2] = (HEAP32[($7_1 + 228 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $7_1 + 256 | 0;
  return;
 }
 
 function $57() {
  var $2_1 = 0, $3_1 = 0, $26_1 = 0, $46_1 = 0, $66_1 = 0, $108_1 = 0, $112_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = $156((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != ($3_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
   label$2 : while (1) {
    $26_1 = 0;
    label$3 : {
     if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $26_1 = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$4 : {
     if (!($26_1 & 1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : {
       if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
       label$7 : {
        label$8 : while (1) {
         $46_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         HEAP32[($2_1 + 16 | 0) >> 2] = $46_1 + -1 | 0;
         if (!$46_1) {
          break label$7
         }
         HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = +HEAPF64[((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0;
         continue label$8;
        };
       }
       break label$5;
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      label$9 : {
       label$10 : while (1) {
        $66_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = $66_1 + -1 | 0;
        if (!$66_1) {
         break label$9
        }
        label$11 : {
         if (!((HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (+HEAPF64[((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0 | 0) & 1 | 0)) {
          break label$11
         }
         HEAP32[($2_1 + 24 | 0) >> 2] = 1;
         break label$9;
        }
        continue label$10;
       };
      }
     }
     label$12 : {
      if (!(HEAP32[($2_1 + 24 | 0) >> 2] | 0)) {
       break label$12
      }
      break label$4;
     }
     HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
  }
  $158(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[(0 + 88316 | 0) >> 2] | 0) << 2 | 0 | 0);
  label$13 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$13
   }
   $108_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
   $396($108_1 | 0, 3001 | 0, 7594 | 0, $2_1 | 0);
  }
  $112_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
  global$0 = $2_1 + 32 | 0;
  return $112_1 | 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $13_1 = +$59(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return +$13_1;
 }
 
 function $59($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $64_1 = 0, $61_1 = 0, $81_1 = 0.0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $6_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[($5_1 + 48 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $337(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAPF64[($5_1 + 24 | 0) >> 3] = +$37(HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 - (HEAP32[(0 + 88316 | 0) >> 2] | 0) | 0 | 0);
       label$6 : {
        if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] < +HEAPF64[($5_1 + 16 | 0) >> 3] & 1 | 0)) {
         break label$6
        }
        HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 24 | 0) >> 3];
        HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
        HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
     $61_1 = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0;
     $64_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $64_1;
     HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($61_1 + ($64_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $81_1 = Math_sqrt(+HEAPF64[($5_1 + 16 | 0) >> 3]);
  global$0 = $5_1 + 64 | 0;
  return +$81_1;
 }
 
 function $60() {
  var $13_1 = 0, $134_1 = 0, $14_1 = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5001 | 0, 7858 | 0, 0 | 0);
  }
  $13_1 = 0;
  $14_1 = 87704;
  $324($14_1 + 2584 | 0 | 0);
  $324($14_1 + 2588 | 0 | 0);
  $324($14_1 + 2628 | 0 | 0);
  $158(HEAP32[(0 + 89528 | 0) >> 2] | 0 | 0, (HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0 | 0);
  $158(HEAP32[(0 + 89400 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0);
  $158(HEAP32[(0 + 89396 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0);
  $158(HEAP32[(0 + 89408 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0);
  $158(HEAP32[(0 + 89404 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0);
  $158(HEAP32[(0 + 90296 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0 | 0);
  $158(HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0) << 2 | 0 | 0);
  HEAP32[(0 + 89396 | 0) >> 2] = $13_1;
  HEAP32[(0 + 89400 | 0) >> 2] = $13_1;
  HEAP32[(0 + 89528 | 0) >> 2] = $13_1;
  HEAP32[(0 + 89404 | 0) >> 2] = $13_1;
  HEAP32[(0 + 89408 | 0) >> 2] = $13_1;
  HEAP32[(0 + 90296 | 0) >> 2] = $13_1;
  HEAP32[(0 + 90300 | 0) >> 2] = $13_1;
  label$2 : {
   if (!((HEAP32[(0 + 90304 | 0) >> 2] | 0 | 0) != ($13_1 | 0) & 1 | 0)) {
    break label$2
   }
   $394(HEAP32[(0 + 90304 | 0) >> 2] | 0 | 0);
  }
  label$3 : {
   if (!((HEAP32[(0 + 90312 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $394(HEAP32[(0 + 90312 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[(0 + 90316 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $394(HEAP32[(0 + 90316 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   if (!((HEAP32[(0 + 88304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   $394(HEAP32[(0 + 88304 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   if (!((HEAP32[(0 + 88300 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   $394(HEAP32[(0 + 88300 | 0) >> 2] | 0 | 0);
  }
  $134_1 = 0;
  HEAP32[(0 + 88300 | 0) >> 2] = $134_1;
  HEAP32[(0 + 90304 | 0) >> 2] = $134_1;
  HEAP32[(0 + 90316 | 0) >> 2] = $134_1;
  HEAP32[(0 + 88304 | 0) >> 2] = $134_1;
  HEAP32[(0 + 90312 | 0) >> 2] = $134_1;
  label$7 : {
   if (!((HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0) != ($134_1 | 0) & 1 | 0)) {
    break label$7
   }
   if (!(HEAP32[(0 + 88332 | 0) >> 2] | 0)) {
    break label$7
   }
   $394(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0);
   HEAP32[(0 + 88328 | 0) >> 2] = 0;
  }
  label$8 : {
   if (!((HEAP32[(0 + 88336 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$8
   }
   if (!(HEAP32[(0 + 88340 | 0) >> 2] | 0)) {
    break label$8
   }
   $394(HEAP32[(0 + 88336 | 0) >> 2] | 0 | 0);
   HEAP32[(0 + 88336 | 0) >> 2] = 0;
  }
  label$9 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$9
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5002 | 0, 7908 | 0, 0 | 0);
  }
  return;
 }
 
 function $61($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $94_1 = 0, $334_1 = 0, $18_1 = 0, $31_1 = 0, $34_1 = 0, $42_1 = 0, $55_1 = 0, $58_1 = 0, $66_1 = 0, $79_1 = 0, $82_1 = 0, $137_1 = 0, $152_1 = 0, $170_1 = 0, $185_1 = 0, $199_1 = 0, $209_1 = 0, $222_1 = 0, $225_1 = 0, $231_1 = 0, $239_1 = 0, $276_1 = 0, $289_1 = 0, $292_1 = 0, $305_1 = 0, $361_1 = 0, $271_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $5_1 = 0;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 52 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5004 | 0, 7934 | 0, 0 | 0);
  }
  $18_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $18_1;
  label$2 : {
   if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != ($18_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $31_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $31_1 + 4 | 0;
     $34_1 = HEAP32[$31_1 >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $34_1;
     if (!(($34_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $158(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, 48 | 0);
     continue label$4;
    };
   }
  }
  $42_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $42_1;
  label$5 : {
   if (!((HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) != ($42_1 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[(0 + 90276 | 0) >> 2] | 0) + 4 | 0;
   label$6 : {
    label$7 : while (1) {
     $55_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $55_1 + 4 | 0;
     $58_1 = HEAP32[$55_1 >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $58_1;
     if (!(($58_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $158(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, 48 | 0);
     continue label$7;
    };
   }
  }
  $66_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $66_1;
  label$8 : {
   if (!((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != ($66_1 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0;
   label$9 : {
    label$10 : while (1) {
     $79_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $79_1 + 4 | 0;
     $82_1 = HEAP32[$79_1 >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $82_1;
     if (!(($82_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     $158(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, 48 | 0);
     continue label$10;
    };
   }
  }
  $94_1 = 0;
  HEAP32[(0 + 90272 | 0) >> 2] = $94_1;
  HEAP32[(0 + 90276 | 0) >> 2] = $94_1;
  HEAP32[(0 + 90280 | 0) >> 2] = $94_1;
  $324(87704 + 2580 | 0 | 0);
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$11
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5003 | 0, 7966 | 0, 0 | 0);
  }
  $351();
  label$12 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$12
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1005 | 0, 8022 | 0, 0 | 0);
  }
  label$13 : {
   if (!((HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$13
   }
   $331(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$14 : {
   label$15 : {
    if (!(HEAP32[($3_1 + 60 | 0) >> 2] | 0)) {
     break label$15
    }
    label$16 : {
     label$17 : while (1) {
      $137_1 = HEAP32[(0 + 90048 | 0) >> 2] | 0;
      HEAP32[($3_1 + 48 | 0) >> 2] = $137_1;
      if (!(($137_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$16
      }
      label$18 : {
       label$19 : {
        if (!((HEAP32[(HEAP32[($3_1 + 48 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$19
        }
        $288(HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0);
        break label$18;
       }
       $152_1 = 0;
       $158(HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0, 28 | 0);
       HEAP32[(0 + 90048 | 0) >> 2] = $152_1;
       HEAP32[(0 + 90056 | 0) >> 2] = $152_1;
       break label$16;
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
      continue label$17;
     };
    }
    break label$14;
   }
   label$20 : {
    if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
     break label$20
    }
    HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
    label$21 : while (1) {
     $170_1 = 0;
     label$22 : {
      if (!((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$22
      }
      $170_1 = (HEAP32[(HEAP32[($3_1 + 48 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$23 : {
      if (!($170_1 & 1 | 0)) {
       break label$23
      }
      $341((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 12 | 0 | 0);
      HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 48 | 0) >> 2] | 0) >> 2] | 0;
      continue label$21;
     }
     break label$21;
    };
   }
  }
  $185_1 = 0;
  HEAP32[(0 + 89388 | 0) >> 2] = $185_1;
  HEAP32[(0 + 90116 | 0) >> 2] = $185_1;
  label$24 : {
   label$25 : {
    if (!(HEAP32[($3_1 + 60 | 0) >> 2] | 0)) {
     break label$25
    }
    HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
    label$26 : while (1) {
     $199_1 = 0;
     label$27 : {
      if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$27
      }
      $199_1 = (HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$28 : {
      if (!($199_1 & 1 | 0)) {
       break label$28
      }
      $209_1 = 0;
      HEAP32[($3_1 + 40 | 0) >> 2] = $209_1;
      label$29 : {
       if (!((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($209_1 | 0) & 1 | 0)) {
        break label$29
       }
       HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
       label$30 : {
        label$31 : while (1) {
         $222_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
         HEAP32[($3_1 + 36 | 0) >> 2] = $222_1 + 4 | 0;
         $225_1 = HEAP32[$222_1 >> 2] | 0;
         HEAP32[($3_1 + 40 | 0) >> 2] = $225_1;
         if (!(($225_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$30
         }
         $231_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
         HEAP8[($231_1 + 16 | 0) >> 0] = (HEAPU8[($231_1 + 16 | 0) >> 0] | 0) & -2 | 0;
         continue label$31;
        };
       }
      }
      HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$26;
     }
     break label$26;
    };
    label$32 : {
     label$33 : while (1) {
      $239_1 = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
      HEAP32[($3_1 + 56 | 0) >> 2] = $239_1;
      if (!(($239_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$32
      }
      label$34 : {
       label$35 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
         break label$35
        }
        if (!(HEAP32[(0 + 90180 | 0) >> 2] | 0)) {
         break label$35
        }
        if (!(($337(HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0 | 0) > (1 | 0) & 1 | 0)) {
         break label$34
        }
       }
       label$36 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$36
        }
        $271_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($271_1 | 0, 4095 | 0, 8083 | 0, $3_1 | 0);
       }
       $276_1 = 0;
       HEAP32[($3_1 + 40 | 0) >> 2] = $276_1;
       label$37 : {
        if (!((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($276_1 | 0) & 1 | 0)) {
         break label$37
        }
        HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
        label$38 : {
         label$39 : while (1) {
          $289_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
          HEAP32[($3_1 + 36 | 0) >> 2] = $289_1 + 4 | 0;
          $292_1 = HEAP32[$289_1 >> 2] | 0;
          HEAP32[($3_1 + 40 | 0) >> 2] = $292_1;
          if (!(($292_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$38
          }
          label$40 : {
           label$41 : {
            if (!(((HEAPU8[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 1 | 0) & 255 | 0)) {
             break label$41
            }
            $287(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0);
            break label$40;
           }
           $305_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
           HEAP8[($305_1 + 16 | 0) >> 0] = HEAPU8[($305_1 + 16 | 0) >> 0] | 0 | 1 | 0;
          }
          HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
          continue label$39;
         };
        }
       }
      }
      $324((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 64 | 0 | 0);
      $324((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 68 | 0 | 0);
      $324((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 60 | 0 | 0);
      $324((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0 | 0);
      $324((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 52 | 0 | 0);
      label$42 : {
       label$43 : {
        if (!((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$43
        }
        $251(HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0);
        break label$42;
       }
       $334_1 = 0;
       $158(HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0, 88 | 0);
       HEAP32[(0 + 9e4 | 0) >> 2] = $334_1;
       HEAP32[(0 + 90012 | 0) >> 2] = $334_1;
       HEAP32[(0 + 90016 | 0) >> 2] = $334_1;
      }
      HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
      continue label$33;
     };
    }
    break label$24;
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = 1;
   label$44 : {
    if (!($322((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0 | 0, $3_1 + 20 | 0 | 0) | 0)) {
     break label$44
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 0;
   }
   HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$45 : while (1) {
    $361_1 = 0;
    label$46 : {
     if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$46
     }
     $361_1 = (HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$47 : {
     if (!($361_1 & 1 | 0)) {
      break label$47
     }
     $341((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 64 | 0 | 0);
     $341((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 68 | 0 | 0);
     label$48 : {
      label$49 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
        break label$49
       }
       if (!(HEAP32[($3_1 + 16 | 0) >> 2] | 0)) {
        break label$48
       }
      }
      $341((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 60 | 0 | 0);
      $341((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0 | 0);
      $341((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 52 | 0 | 0);
     }
     HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$45;
    }
    break label$45;
   };
  }
  $158(HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 89984 | 0) >> 2] = 0;
  global$0 = $3_1 + 64 | 0;
  return;
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $63(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 90192 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1006 | 0, 8139 | 0, 0 | 0);
  }
  $61(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $60();
  $373();
  $513(87704 | 0, 0 | 0, 2704 | 0) | 0;
  HEAP32[(0 + 90192 | 0) >> 2] = 1;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $64($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $160(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
  $65(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
  $66(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $65($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $374();
  $67(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ($354(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 87704 + 640 | 0 | 0, 256 | 0) | 0) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = 256;
   $396($13_1 | 0, 6033 | 0, 8173 | 0, $4_1 | 0);
   $392(1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $67($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $79_1 = 0.0, $80_1 = 0.0, $9_1 = 0, $12_1 = 0, $69_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $9_1 = -1;
  $79_1 = 1797693134862315708145274.0e284;
  $80_1 = +(0 | 0);
  $12_1 = 1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  fimport$1() | 0;
  $513(87704 | 0, 0 | 0, 2704 | 0) | 0;
  HEAP32[(0 + 90192 | 0) >> 2] = $12_1;
  HEAP32[(0 + 87792 | 0) >> 2] = $9_1;
  HEAP32[(0 + 89980 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  HEAP32[(0 + 89972 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[(0 + 89976 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[(0 + 90108 | 0) >> 2] = $9_1;
  HEAPF64[(0 + 90136 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 87856 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 90336 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 90344 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 90352 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 90360 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 90152 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 90160 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 89448 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 89472 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 89480 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[(0 + 87880 | 0) >> 2] = $12_1;
  HEAPF64[(0 + 89488 | 0) >> 3] = 2.2250738585072014e-308;
  HEAPF64[(0 + 87728 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 87912 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 87864 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 89552 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 87888 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 87768 | 0) >> 3] = $79_1;
  HEAP32[(0 + 87992 | 0) >> 2] = $12_1;
  HEAPF64[(0 + 90208 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 87776 | 0) >> 3] = $79_1;
  HEAPF64[(0 + 87896 | 0) >> 3] = $80_1;
  HEAP32[(0 + 88184 | 0) >> 2] = -2147483648;
  HEAP32[(0 + 87908 | 0) >> 2] = $12_1;
  HEAPF64[(0 + 90240 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 90248 | 0) >> 3] = $80_1;
  HEAPF64[(0 + 88248 | 0) >> 3] = $79_1;
  HEAP32[(0 + 88240 | 0) >> 2] = -3;
  HEAP32[(0 + 90024 | 0) >> 2] = $9_1;
  HEAP32[(0 + 90032 | 0) >> 2] = $9_1;
  HEAP32[(0 + 90040 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = fimport$0($5_1 + 16 | 0 | 0) | 0;
  $356(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 89384 | 0) >> 2] = $355() | 0;
  label$1 : {
   if (HEAP32[(0 + 89384 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 89384 | 0) >> 2] = (HEAP32[(0 + 89384 | 0) >> 2] | 0) + 1 | 0;
  }
  $69_1 = 87704;
  $73(11464 | 0, $69_1 + 1680 | 0 | 0, 0 | 0);
  $463($69_1 + 1868 | 0 | 0, 11471 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $68($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $97_1 = 0.0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $69(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (HEAP32[(0 + 90424 | 0) >> 2] | 0) {
    break label$1
   }
   $70();
  }
  $71();
  $72(87704 + 640 | 0 | 0);
  label$2 : {
   label$3 : {
    if (HEAP32[(0 + 88136 | 0) >> 2] | 0) {
     break label$3
    }
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!(HEAP32[(0 + 88132 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   $51();
  }
  label$4 : {
   if (!(HEAP32[(0 + 88188 | 0) >> 2] | 0)) {
    break label$4
   }
   $55();
  }
  label$5 : {
   if (!((HEAP32[(0 + 88184 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$5
   }
   $358(HEAP32[(0 + 90296 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0);
   label$6 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$6
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      $97_1 = +(0 | 0);
      HEAPF64[((HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $97_1;
      HEAPF64[((HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $97_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    HEAPF64[((HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
   }
   $41(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0) | 0;
   $53(HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0);
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $69($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $290_1 = 0, $428_1 = 0, $42_1 = 0, $49_1 = 0, $73_1 = 0, $77_1 = 0, $129_1 = 0, $146_1 = 0, $147_1 = 0, $172_1 = 0, $185_1 = 0, $196_1 = 0, $209_1 = 0, $220_1 = 0, $231_1 = 0, $271_1 = 0, $275_1 = 0, $326_1 = 0, $366_1 = 0, $486_1 = 0, $518_1 = 0, $551 = 0, $566 = 0, $604 = 0, $11_1 = 0, $33_1 = 0, $34_1 = 0, $160_1 = 0, $358_1 = 0, $390_1 = 0, $392_1 = 0, $393_1 = 0, $394_1 = 0, $396_1 = 0, $457_1 = 0, $459_1 = 0, $561 = 0, $562 = 0, $575 = 0, $647 = 0.0, $596 = 0, $597 = 0;
  $6_1 = global$0 - 240 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 232 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 228 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 224 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 212 | 0) >> 2] = 0;
  label$1 : {
   if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
    break label$1
   }
   $11_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($6_1 + 164 | 0) >> 2] = 88344;
   HEAP32[($6_1 + 160 | 0) >> 2] = 88604;
   $396($11_1 | 0, 13 | 0, 8362 | 0, $6_1 + 160 | 0 | 0);
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
     break label$3
    }
    if (!((HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0) > (2147483631 | 0) & 1 | 0)) {
     break label$2
    }
   }
   $33_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $34_1 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
   HEAP32[($6_1 + 152 | 0) >> 2] = HEAP32[($6_1 + 228 | 0) >> 2] | 0;
   HEAP32[($6_1 + 148 | 0) >> 2] = $34_1;
   HEAP32[($6_1 + 144 | 0) >> 2] = 2147483631;
   $396($33_1 | 0, 6412 | 0, 8397 | 0, $6_1 + 144 | 0 | 0);
   $42_1 = 0;
   $382(1 | 0, $42_1 | 0, $42_1 | 0);
  }
  HEAP32[(0 + 88332 | 0) >> 2] = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
  HEAP32[(0 + 88328 | 0) >> 2] = HEAP32[($6_1 + 236 | 0) >> 2] | 0;
  HEAP32[(0 + 88324 | 0) >> 2] = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
  $49_1 = HEAP32[($6_1 + 228 | 0) >> 2] | 0;
  HEAP32[(0 + 88320 | 0) >> 2] = $49_1;
  HEAP32[(0 + 88316 | 0) >> 2] = $49_1;
  label$4 : {
   label$5 : {
    if (HEAP32[(0 + 87928 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
     break label$5
    }
    if (!(+HEAPF64[(0 + 90136 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$5
    }
    HEAP32[(0 + 87884 | 0) >> 2] = 1;
    label$6 : {
     label$7 : {
      if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (4 | 0) & 1 | 0)) {
       break label$7
      }
      $73_1 = 0;
      HEAP32[(0 + 87948 | 0) >> 2] = 1;
      $73(8495 | 0, $73_1 | 0, $73_1 | 0);
      break label$6;
     }
     $77_1 = 0;
     HEAP32[(0 + 87876 | 0) >> 2] = 1;
     $73(8249 | 0, $77_1 | 0, $77_1 | 0);
    }
    break label$4;
   }
   label$8 : {
    if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[(0 + 87884 | 0) >> 2] = 1;
   }
  }
  label$9 : {
   if (!(HEAP32[(0 + 87928 | 0) >> 2] | 0)) {
    break label$9
   }
   label$10 : {
    if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
     break label$10
    }
    if (!(HEAP32[(0 + 87948 | 0) >> 2] | 0)) {
     break label$9
    }
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7095 | 0, 8506 | 0, 0 | 0);
  }
  label$11 : {
   if (HEAP32[(0 + 87928 | 0) >> 2] | 0) {
    break label$11
   }
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$11
   }
  }
  label$12 : {
   if (!(HEAP32[(0 + 88260 | 0) >> 2] | 0)) {
    break label$12
   }
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$12
   }
   if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
    break label$12
   }
   if (HEAP32[(0 + 87944 | 0) >> 2] | 0) {
    break label$12
   }
   if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
    break label$12
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7038 | 0, 8610 | 0, 0 | 0);
  }
  label$13 : {
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$13
   }
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$13
   }
   if (HEAP32[(0 + 88188 | 0) >> 2] | 0) {
    break label$13
   }
   if (HEAP32[(0 + 88192 | 0) >> 2] | 0) {
    break label$13
   }
   $129_1 = 0;
   HEAP32[(0 + 88192 | 0) >> 2] = 1;
   $73(8756 | 0, $129_1 | 0, $129_1 | 0);
  }
  label$14 : {
   if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
    break label$14
   }
   if (HEAP32[(0 + 87944 | 0) >> 2] | 0) {
    break label$14
   }
   if (!(+HEAPF64[(0 + 87768 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$14
   }
   if (!(+HEAPF64[(0 + 87888 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$14
   }
   $146_1 = 0;
   $147_1 = 1;
   HEAP32[(0 + 89392 | 0) >> 2] = $147_1;
   HEAP32[(0 + 90268 | 0) >> 2] = $147_1;
   $73(8772 | 0, $146_1 | 0, $146_1 | 0);
  }
  label$15 : {
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$15
   }
   if (!(0 & 1 | 0)) {
    break label$15
   }
   if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
    break label$15
   }
   $160_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   i64toi32_i32$0 = 1018167296;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 128 | 0) >> 2] = 0;
   HEAP32[($6_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   $396($160_1 | 0, 7039 | 0, 8786 | 0, $6_1 + 128 | 0 | 0);
  }
  label$16 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$16
   }
   if (!(HEAP32[(0 + 87840 | 0) >> 2] | 0)) {
    break label$16
   }
   if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
    break label$16
   }
   $172_1 = 0;
   HEAP32[(0 + 87844 | 0) >> 2] = 1;
   $73(8234 | 0, $172_1 | 0, $172_1 | 0);
  }
  label$17 : {
   if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
    break label$17
   }
   if (HEAP32[(0 + 87784 | 0) >> 2] | 0) {
    break label$17
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6038 | 0, 8914 | 0, 0 | 0);
   $185_1 = 0;
   $382(5 | 0, $185_1 | 0, $185_1 | 0);
  }
  label$18 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$18
   }
   if (!(HEAP32[(0 + 87824 | 0) >> 2] | 0)) {
    break label$18
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6046 | 0, 9092 | 0, 0 | 0);
   $196_1 = 0;
   $382(1 | 0, $196_1 | 0, $196_1 | 0);
  }
  label$19 : {
   if (HEAP32[(0 + 87784 | 0) >> 2] | 0) {
    break label$19
   }
   label$20 : {
    if (HEAP32[(0 + 88268 | 0) >> 2] | 0) {
     break label$20
    }
    if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
     break label$19
    }
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6047 | 0, 9188 | 0, 0 | 0);
   $209_1 = 0;
   $382(1 | 0, $209_1 | 0, $209_1 | 0);
  }
  label$21 : {
   if (!(HEAP32[(0 + 88268 | 0) >> 2] | 0)) {
    break label$21
   }
   if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
    break label$21
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6048 | 0, 9293 | 0, 0 | 0);
   $220_1 = 0;
   $382(1 | 0, $220_1 | 0, $220_1 | 0);
  }
  label$22 : {
   if (!(HEAP32[(0 + 87904 | 0) >> 2] | 0)) {
    break label$22
   }
   if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
    break label$22
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6362 | 0, 9373 | 0, 0 | 0);
   $231_1 = 0;
   $382(1 | 0, $231_1 | 0, $231_1 | 0);
  }
  label$23 : {
   if (!(HEAP32[(0 + 87904 | 0) >> 2] | 0)) {
    break label$23
   }
   if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
    break label$23
   }
   label$24 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$24
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2108 | 0, 9466 | 0, 0 | 0);
   }
   HEAP32[(0 + 87904 | 0) >> 2] = 0;
  }
  label$25 : {
   if (!(HEAP32[(0 + 88192 | 0) >> 2] | 0)) {
    break label$25
   }
   if (HEAP32[(0 + 87784 | 0) >> 2] | 0) {
    break label$25
   }
   if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
    break label$25
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7040 | 0, 9539 | 0, 0 | 0);
  }
  $271_1 = 0;
  label$26 : {
   if (HEAP32[(0 + 88200 | 0) >> 2] | 0) {
    break label$26
   }
   $275_1 = 1;
   label$27 : {
    if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
     break label$27
    }
    $275_1 = (HEAP32[(0 + 87724 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   $271_1 = $275_1;
  }
  HEAP32[(0 + 88296 | 0) >> 2] = $271_1 & 1 | 0;
  $290_1 = 0;
  label$28 : {
   if (!(HEAP32[(0 + 88296 | 0) >> 2] | 0)) {
    break label$28
   }
   label$29 : {
    if (!(HEAP32[(0 + 87844 | 0) >> 2] | 0)) {
     break label$29
    }
    $290_1 = 0;
    if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
     break label$28
    }
   }
   $290_1 = (HEAP32[(0 + 87924 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0;
  }
  HEAP32[(0 + 88312 | 0) >> 2] = $290_1 & 1 | 0;
  label$30 : {
   label$31 : {
    if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
     break label$31
    }
    HEAP32[(0 + 90104 | 0) >> 2] = 2;
    break label$30;
   }
   label$32 : {
    if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
     break label$32
    }
    HEAP32[(0 + 90104 | 0) >> 2] = 1;
   }
  }
  label$33 : {
   if (!(HEAP32[(0 + 88228 | 0) >> 2] | 0)) {
    break label$33
   }
   if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
    break label$33
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6049 | 0, 9632 | 0, 0 | 0);
   $326_1 = 0;
   $382(1 | 0, $326_1 | 0, $326_1 | 0);
  }
  label$34 : {
   label$35 : {
    if (HEAP32[(0 + 88136 | 0) >> 2] | 0) {
     break label$35
    }
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$34
    }
    if (!(HEAP32[(0 + 88132 | 0) >> 2] | 0)) {
     break label$34
    }
   }
   HEAP32[(0 + 88316 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - (HEAP32[(0 + 88136 | 0) >> 2] | 0) | 0;
   label$36 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$36
    }
    HEAP32[(0 + 88316 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0;
    label$37 : {
     if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
      break label$37
     }
     HEAP32[($6_1 + 212 | 0) >> 2] = 1;
    }
   }
  }
  label$38 : {
   if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (1 | 0) & 1 | 0)) {
    break label$38
   }
   $358_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($6_1 + 112 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
   $396($358_1 | 0, 6050 | 0, 9702 | 0, $6_1 + 112 | 0 | 0);
   $366_1 = 0;
   $382(1 | 0, $366_1 | 0, $366_1 | 0);
  }
  HEAP32[($6_1 + 200 | 0) >> 2] = 2;
  HEAPF64[($6_1 + 184 | 0) >> 3] = 1.0;
  label$39 : {
   label$40 : while (1) {
    if (!((HEAP32[($6_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$39
    }
    HEAPF64[($6_1 + 184 | 0) >> 3] = +HEAPF64[($6_1 + 184 | 0) >> 3] * +(HEAP32[($6_1 + 200 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 200 | 0) >> 2] = (HEAP32[($6_1 + 200 | 0) >> 2] | 0) + 1 | 0;
    continue label$40;
   };
  }
  HEAPF64[(0 + 88288 | 0) >> 3] = 1.0 / +HEAPF64[($6_1 + 184 | 0) >> 3];
  label$41 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$41
   }
   $390_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $392_1 = HEAP32[(0 + 88320 | 0) >> 2] | 0;
   $393_1 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
   $394_1 = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
   $396_1 = HEAP32[(0 + 88136 | 0) >> 2] | 0;
   HEAP32[($6_1 + 96 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
   HEAP32[($6_1 + 92 | 0) >> 2] = $396_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $394_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = $393_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $392_1;
   $396($390_1 | 0, 2005 | 0, 9741 | 0, $6_1 + 80 | 0 | 0);
  }
  HEAP32[(0 + 89988 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0;
  HEAP32[(0 + 89992 | 0) >> 2] = (HEAP32[(0 + 89988 | 0) >> 2] | 0) - 8 | 0;
  HEAP32[($6_1 + 216 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0;
  label$42 : {
   if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (6 | 0) & 1 | 0)) {
    break label$42
   }
   $428_1 = 0;
   HEAP32[(0 + 87908 | 0) >> 2] = $428_1;
   $73(9853 | 0, $428_1 | 0, $428_1 | 0);
  }
  label$43 : {
   if (!(HEAP32[(0 + 87804 | 0) >> 2] | 0)) {
    break label$43
   }
   HEAP32[($6_1 + 216 | 0) >> 2] = (HEAP32[($6_1 + 216 | 0) >> 2] | 0) + 1 | 0;
  }
  label$44 : {
   label$45 : {
    if (!((HEAP32[(0 + 88180 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$45
    }
    HEAP32[(0 + 88236 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
    label$46 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$46
     }
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
      break label$46
     }
     $457_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $459_1 = HEAP32[(0 + 88180 | 0) >> 2] | 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
     HEAP32[($6_1 + 64 | 0) >> 2] = $459_1;
     $396($457_1 | 0, 8162 | 0, 9883 | 0, $6_1 + 64 | 0 | 0);
     HEAP32[(0 + 87832 | 0) >> 2] = 0;
    }
    break label$44;
   }
   label$47 : {
    label$48 : {
     if ((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) != (-3 | 0) & 1 | 0) {
      break label$48
     }
     if (+HEAPF64[(0 + 88248 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0) {
      break label$48
     }
     if (!(HEAP32[(0 + 88256 | 0) >> 2] | 0)) {
      break label$47
     }
    }
    label$49 : {
     label$50 : {
      if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
       break label$50
      }
      $486_1 = HEAP32[(0 + 87832 | 0) >> 2] | 0;
      break label$49;
     }
     $486_1 = 3;
    }
    HEAP32[(0 + 88232 | 0) >> 2] = $486_1;
    HEAP32[(0 + 87832 | 0) >> 2] = 0;
   }
  }
  label$51 : {
   label$52 : {
    if (!(HEAP32[(0 + 88184 | 0) >> 2] | 0)) {
     break label$52
    }
    if (!((HEAP32[(0 + 88184 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$51
    }
   }
   HEAP32[($6_1 + 220 | 0) >> 2] = fimport$0($6_1 + 180 | 0 | 0) | 0;
   label$53 : {
    label$54 : {
     if (!((HEAP32[(0 + 88184 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
      break label$54
     }
     $518_1 = 0;
     HEAP32[($6_1 + 220 | 0) >> 2] = $518_1 - (HEAP32[($6_1 + 220 | 0) >> 2] | 0) | 0;
     $73(8261 | 0, $6_1 + 220 | 0 | 0, $518_1 | 0);
     break label$53;
    }
    $73(9942 | 0, $6_1 + 220 | 0 | 0, 0 | 0);
   }
   HEAP32[(0 + 88184 | 0) >> 2] = HEAP32[($6_1 + 220 | 0) >> 2] | 0;
  }
  HEAP32[($6_1 + 220 | 0) >> 2] = HEAP32[(0 + 88184 | 0) >> 2] | 0;
  label$55 : {
   label$56 : {
    if (!((HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0) == (-2147483648 | 0) & 1 | 0)) {
     break label$56
    }
    HEAP32[($6_1 + 220 | 0) >> 2] = 1;
    break label$55;
   }
   label$57 : {
    if (!((HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$57
    }
    HEAP32[($6_1 + 220 | 0) >> 2] = 0 - (HEAP32[($6_1 + 220 | 0) >> 2] | 0) | 0;
   }
  }
  $356(HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0);
  HEAPF64[($6_1 + 192 | 0) >> 3] = +(0 | 0);
  HEAP32[($6_1 + 208 | 0) >> 2] = 1e3;
  label$58 : {
   label$59 : while (1) {
    $551 = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
    HEAP32[($6_1 + 208 | 0) >> 2] = $551 + -1 | 0;
    if (!$551) {
     break label$58
    }
    HEAP32[($6_1 + 204 | 0) >> 2] = $355() | 0;
    HEAPF64[($6_1 + 192 | 0) >> 3] = +HEAPF64[($6_1 + 192 | 0) >> 3] + +(HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0);
    label$60 : {
     if (!(+(HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) > 2147483646.0 & 1 | 0)) {
      break label$60
     }
     $561 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $562 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
     i64toi32_i32$0 = 1105199103;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = -8388608;
     HEAP32[($6_1 + 12 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[$6_1 >> 2] = $562;
     $396($561 | 0, 8036 | 0, 9957 | 0, $6_1 | 0);
     $566 = 0;
     $382(1 | 0, $566 | 0, $566 | 0);
    }
    continue label$59;
   };
  }
  $356(HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0);
  HEAPF64[($6_1 + 192 | 0) >> 3] = +HEAPF64[($6_1 + 192 | 0) >> 3] / 1.0e3;
  label$61 : {
   label$62 : {
    if (+HEAPF64[($6_1 + 192 | 0) >> 3] < 214748364.60000002 & 1 | 0) {
     break label$62
    }
    if (!(+HEAPF64[($6_1 + 192 | 0) >> 3] > 1932735281.4 & 1 | 0)) {
     break label$61
    }
   }
   $575 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $647 = +HEAPF64[($6_1 + 192 | 0) >> 3];
   i64toi32_i32$0 = 1105199103;
   i64toi32_i32$1 = $6_1 + 48 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = -8388608;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1104150527;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 40 | 0) >> 2] = -8388608;
   HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
   HEAPF64[($6_1 + 32 | 0) >> 3] = $647;
   $396($575 | 0, 8037 | 0, 10050 | 0, $6_1 + 32 | 0 | 0);
  }
  HEAPF64[(0 + 88152 | 0) >> 3] = 2.0 * +HEAPF64[(0 + 88144 | 0) >> 3] / 2147483646.0;
  HEAPF64[(0 + 88160 | 0) >> 3] = 1.0 - +HEAPF64[(0 + 88144 | 0) >> 3];
  label$63 : {
   if (!(((HEAP32[($6_1 + 232 | 0) >> 2] | 0) + (HEAP32[($6_1 + 212 | 0) >> 2] | 0) | 0 | 0) < (HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$63
   }
   $596 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $597 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 216 | 0) >> 2] | 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $597;
   $396($596 | 0, 6214 | 0, 10215 | 0, $6_1 + 16 | 0 | 0);
   $604 = 0;
   $382(1 | 0, $604 | 0, $604 | 0);
  }
  $74();
  global$0 = $6_1 + 240 | 0;
  return;
 }
 
 function $70() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = 18;
  $161(HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0, 8 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 65536 | 0, 131072 | 0);
  $164(28 | 0);
  label$1 : {
   if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
    break label$1
   }
   $164(20 | 0);
   $164(48 | 0);
  }
  $164(88 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) + 8 | 0;
  $164(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0);
  $164(HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  $164(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0);
  $391();
  $162();
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $71() {
  var $2_1 = 0, $83_1 = 0, $131_1 = 0.0, $132_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[(0 + 89996 | 0) >> 2] = ((HEAP32[(0 + 90424 | 0) >> 2] | 0) - 8 | 0 | 0) / (4 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 89996 | 0) >> 2] = 8;
  }
  HEAP32[(0 + 90288 | 0) >> 2] = $323(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90292 | 0) >> 2] = $323(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90332 | 0) >> 2] = $323(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 89528 | 0) >> 2] = $156((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  HEAP32[(0 + 89400 | 0) >> 2] = $156(((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0;
  HEAP32[(0 + 89396 | 0) >> 2] = $156(((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0;
  HEAP32[(0 + 89408 | 0) >> 2] = $156(((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0;
  HEAP32[(0 + 89404 | 0) >> 2] = $156(((HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[(0 + 88320 | 0) >> 2] | 0) + 1 | 0;
  label$3 : {
   label$4 : while (1) {
    $83_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $83_1 + -1 | 0;
    if (!$83_1) {
     break label$3
    }
    $131_1 = 1797693134862315708145274.0e284;
    $132_1 = -1797693134862315708145274.0e284;
    HEAPF64[((HEAP32[(0 + 89400 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $132_1;
    HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $131_1;
    HEAPF64[((HEAP32[(0 + 89408 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $132_1;
    HEAPF64[((HEAP32[(0 + 89404 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $131_1;
    continue label$4;
   };
  }
  HEAP32[(0 + 90296 | 0) >> 2] = $156(Math_imul((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  HEAP32[(0 + 90300 | 0) >> 2] = $156(((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0) << 2 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $30_1 = 0, $44_1 = 0, $52_1 = 0, $58_1 = 0, $61_1 = 0, $63_1 = 0, $66_1 = 0, $67_1 = 0, $81_1 = 0, $91_1 = 0, $101_1 = 0, $108_1 = 0, $136_1 = 0, $147_1 = 0, $168_1 = 0, $179_1 = 0, $202_1 = 0, $210_1 = 0, $216_1 = 0, $219_1 = 0, $221_1 = 0, $224_1 = 0, $225_1 = 0, $239_1 = 0, $250_1 = 0, $262_1 = 0, $279_1 = 0, $290_1 = 0, $303_1 = 0, $313_1 = 0, $323_1 = 0, $330_1 = 0, $354_1 = 0, $366_1 = 0, $383_1 = 0, $393_1 = 0, $416_1 = 0, $419_1 = 0, $423_1 = 0, $440_1 = 0, $449_1 = 0, $507_1 = 0, $106_1 = 0, $110_1 = 0, $133_1 = 0, $134_1 = 0, $138_1 = 0, $166_1 = 0, $514_1 = 0.0, $328_1 = 0, $351_1 = 0, $352_1 = 0, $356_1 = 0, $497_1 = 0, $498_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 112 | 0) >> 2] = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
  HEAP32[($3_1 + 104 | 0) >> 2] = 0;
  HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[(0 + 88320 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[(0 + 88132 | 0) >> 2] | 0) {
     break label$2
    }
    if (!(HEAP32[(0 + 88136 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = (HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    if (!(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $30_1 = 24;
    label$5 : {
     if (!((((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $30_1 | 0) >> $30_1 | 0 | 0) == (45 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    }
    $44_1 = 24;
    label$6 : {
     label$7 : {
      if (!((((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $44_1 | 0) >> $44_1 | 0 | 0) == (80 | 0) & 1 | 0)) {
       break label$7
      }
      $52_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
      HEAP32[($3_1 + 112 | 0) >> 2] = $52_1 + 1 | 0;
      HEAP32[($3_1 + 108 | 0) >> 2] = $52_1;
      label$8 : while (1) {
       $58_1 = 24;
       $61_1 = 0;
       label$9 : {
        if (!(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $58_1 | 0) >> $58_1 | 0)) {
         break label$9
        }
        $63_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
        HEAP32[($3_1 + 112 | 0) >> 2] = $63_1 + 1 | 0;
        $66_1 = HEAPU8[$63_1 >> 0] | 0;
        HEAP8[($3_1 + 103 | 0) >> 0] = $66_1;
        $67_1 = 24;
        $61_1 = ($398(($66_1 << $67_1 | 0) >> $67_1 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0;
       }
       label$10 : {
        if (!($61_1 & 1 | 0)) {
         break label$10
        }
        $81_1 = 24;
        label$11 : {
         label$12 : {
          if ((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $81_1 | 0) >> $81_1 | 0 | 0) == (100 | 0) & 1 | 0) {
           break label$12
          }
          $91_1 = 24;
          if (!((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $91_1 | 0) >> $91_1 | 0 | 0) == (68 | 0) & 1 | 0)) {
           break label$11
          }
         }
         $101_1 = 24;
         label$13 : {
          if ($397(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $101_1 | 0) >> $101_1 | 0 | 0) | 0) {
           break label$13
          }
          $106_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $108_1 = 24;
          $110_1 = ((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $108_1 | 0) >> $108_1 | 0;
          HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($3_1 + 32 | 0) >> 2] = $110_1;
          $396($106_1 | 0, 7044 | 0, 11477 | 0, $3_1 + 32 | 0 | 0);
          HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
          continue label$8;
         }
         HEAP32[($3_1 + 124 | 0) >> 2] = $360(HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0, $3_1 + 112 | 0 | 0) | 0;
         label$14 : {
          if (!((HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) >= (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$14
          }
          $133_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $134_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
          $136_1 = 24;
          $138_1 = ((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $136_1 | 0) >> $136_1 | 0;
          HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
          HEAP32[($3_1 + 4 | 0) >> 2] = $138_1;
          HEAP32[$3_1 >> 2] = $134_1;
          $396($133_1 | 0, 7045 | 0, 11559 | 0, $3_1 | 0);
          HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
          continue label$8;
         }
         $147_1 = 24;
         label$15 : {
          label$16 : {
           if (!((((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $147_1 | 0) >> $147_1 | 0 | 0) == (58 | 0) & 1 | 0)) {
            break label$16
           }
           HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 1 | 0;
           HEAPF64[($3_1 + 128 | 0) >> 3] = +$359(HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0, $3_1 + 112 | 0 | 0);
           label$17 : {
            if (!(Math_abs(+HEAPF64[($3_1 + 128 | 0) >> 3]) > 1.0 & 1 | 0)) {
             break label$17
            }
            $166_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $514_1 = +HEAPF64[($3_1 + 128 | 0) >> 3];
            $168_1 = 24;
            HEAP32[($3_1 + 24 | 0) >> 2] = ((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $168_1 | 0) >> $168_1 | 0;
            HEAPF64[($3_1 + 16 | 0) >> 3] = $514_1;
            $396($166_1 | 0, 7046 | 0, 11637 | 0, $3_1 + 16 | 0 | 0);
            HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
            continue label$8;
           }
           break label$15;
          }
          HEAPF64[($3_1 + 128 | 0) >> 3] = +(0 | 0);
         }
         $179_1 = 24;
         label$18 : {
          label$19 : {
           if (!((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $179_1 | 0) >> $179_1 | 0 | 0) == (100 | 0) & 1 | 0)) {
            break label$19
           }
           HEAPF64[((HEAP32[(0 + 89400 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($3_1 + 128 | 0) >> 3];
           break label$18;
          }
          HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($3_1 + 128 | 0) >> 3];
         }
        }
        continue label$8;
       }
       break label$8;
      };
      break label$6;
     }
     $202_1 = 24;
     label$20 : {
      label$21 : {
       if (!((((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $202_1 | 0) >> $202_1 | 0 | 0) == (81 | 0) & 1 | 0)) {
        break label$21
       }
       $210_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
       HEAP32[($3_1 + 112 | 0) >> 2] = $210_1 + 1 | 0;
       HEAP32[($3_1 + 108 | 0) >> 2] = $210_1;
       label$22 : while (1) {
        $216_1 = 24;
        $219_1 = 0;
        label$23 : {
         if (!(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $216_1 | 0) >> $216_1 | 0)) {
          break label$23
         }
         $221_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
         HEAP32[($3_1 + 112 | 0) >> 2] = $221_1 + 1 | 0;
         $224_1 = HEAPU8[$221_1 >> 0] | 0;
         HEAP8[($3_1 + 103 | 0) >> 0] = $224_1;
         $225_1 = 24;
         $219_1 = ($398(($224_1 << $225_1 | 0) >> $225_1 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0;
        }
        label$24 : {
         if (!($219_1 & 1 | 0)) {
          break label$24
         }
         $239_1 = 24;
         label$25 : {
          label$26 : {
           if (!((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $239_1 | 0) >> $239_1 | 0 | 0) == (98 | 0) & 1 | 0)) {
            break label$26
           }
           $250_1 = 24;
           if (!((((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $250_1 | 0) >> $250_1 | 0 | 0) == (66 | 0) & 1 | 0)) {
            break label$26
           }
           HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[($3_1 + 116 | 0) >> 2] = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
           label$27 : {
            label$28 : while (1) {
             $262_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
             HEAP32[($3_1 + 116 | 0) >> 2] = $262_1 + -1 | 0;
             if (!$262_1) {
              break label$27
             }
             HEAPF64[((HEAP32[(0 + 89408 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -.5;
             HEAPF64[((HEAP32[(0 + 89404 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = .5;
             continue label$28;
            };
           }
           break label$25;
          }
          $279_1 = 24;
          label$29 : {
           label$30 : {
            if (!((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $279_1 | 0) >> $279_1 | 0 | 0) == (98 | 0) & 1 | 0)) {
             break label$30
            }
            $290_1 = 24;
            if (!((((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $290_1 | 0) >> $290_1 | 0 | 0) == (98 | 0) & 1 | 0)) {
             break label$30
            }
            HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 1 | 0;
            break label$29;
           }
           $303_1 = 24;
           label$31 : {
            label$32 : {
             if ((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $303_1 | 0) >> $303_1 | 0 | 0) == (98 | 0) & 1 | 0) {
              break label$32
             }
             $313_1 = 24;
             if (!((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $313_1 | 0) >> $313_1 | 0 | 0) == (66 | 0) & 1 | 0)) {
              break label$31
             }
            }
            $323_1 = 24;
            label$33 : {
             if ($397(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $323_1 | 0) >> $323_1 | 0 | 0) | 0) {
              break label$33
             }
             $328_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
             $330_1 = 24;
             HEAP32[($3_1 + 64 | 0) >> 2] = ((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $330_1 | 0) >> $330_1 | 0;
             $396($328_1 | 0, 7047 | 0, 11721 | 0, $3_1 + 64 | 0 | 0);
             HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
             continue label$22;
            }
            HEAP32[($3_1 + 124 | 0) >> 2] = $360(HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0, $3_1 + 112 | 0 | 0) | 0;
            label$34 : {
             if (!((HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) >= (HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$34
             }
             $351_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
             $352_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
             $354_1 = 24;
             $356_1 = ((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $354_1 | 0) >> $354_1 | 0;
             HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
             HEAP32[($3_1 + 52 | 0) >> 2] = $356_1;
             HEAP32[($3_1 + 48 | 0) >> 2] = $352_1;
             $396($351_1 | 0, 7048 | 0, 11786 | 0, $3_1 + 48 | 0 | 0);
             HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
             continue label$22;
            }
            $366_1 = 24;
            label$35 : {
             label$36 : {
              if (!((((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $366_1 | 0) >> $366_1 | 0 | 0) == (58 | 0) & 1 | 0)) {
               break label$36
              }
              HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 1 | 0;
              HEAPF64[($3_1 + 128 | 0) >> 3] = +$359(HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0, $3_1 + 112 | 0 | 0);
              break label$35;
             }
             $383_1 = 24;
             label$37 : {
              label$38 : {
               if (!((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $383_1 | 0) >> $383_1 | 0 | 0) == (98 | 0) & 1 | 0)) {
                break label$38
               }
               HEAPF64[($3_1 + 128 | 0) >> 3] = -.5;
               break label$37;
              }
              HEAPF64[($3_1 + 128 | 0) >> 3] = .5;
             }
            }
            $393_1 = 24;
            label$39 : {
             label$40 : {
              if (!((((HEAPU8[($3_1 + 103 | 0) >> 0] | 0) << $393_1 | 0) >> $393_1 | 0 | 0) == (98 | 0) & 1 | 0)) {
               break label$40
              }
              HEAPF64[((HEAP32[(0 + 89408 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($3_1 + 128 | 0) >> 3];
              break label$39;
             }
             HEAPF64[((HEAP32[(0 + 89404 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($3_1 + 128 | 0) >> 3];
            }
           }
          }
         }
         continue label$22;
        }
        break label$22;
       };
       break label$20;
      }
      label$41 : while (1) {
       $416_1 = 24;
       $419_1 = 0;
       label$42 : {
        if (!(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $416_1 | 0) >> $416_1 | 0)) {
         break label$42
        }
        $423_1 = 24;
        $419_1 = ($398(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $423_1 | 0) >> $423_1 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0;
       }
       label$43 : {
        if (!($419_1 & 1 | 0)) {
         break label$43
        }
        HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 1 | 0;
        continue label$41;
       }
       break label$41;
      };
     }
    }
    label$44 : {
     label$45 : while (1) {
      $440_1 = 24;
      if (!($398(((HEAPU8[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $440_1 | 0) >> $440_1 | 0 | 0) | 0)) {
       break label$44
      }
      HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      continue label$45;
     };
    }
    continue label$4;
   };
  }
  HEAP32[($3_1 + 116 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$46 : {
   label$47 : while (1) {
    $449_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
    HEAP32[($3_1 + 116 | 0) >> 2] = $449_1 + -1 | 0;
    if (!$449_1) {
     break label$46
    }
    label$48 : {
     label$49 : {
      if (!(+HEAPF64[((HEAP32[(0 + 89400 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > -8988465674311578540726371.0e283 & 1 | 0)) {
       break label$49
      }
      HEAP32[(0 + 87812 | 0) >> 2] = 1;
      label$50 : {
       if (!(+HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
        break label$50
       }
       HEAP32[(0 + 88208 | 0) >> 2] = 1;
       HEAP32[(0 + 87812 | 0) >> 2] = 0;
       break label$46;
      }
      break label$48;
     }
     label$51 : {
      if (!(+HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
       break label$51
      }
      HEAP32[(0 + 87812 | 0) >> 2] = 1;
     }
    }
    continue label$47;
   };
  }
  label$52 : {
   if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$52
   }
   if (HEAP32[(0 + 87712 | 0) >> 2] | 0) {
    break label$52
   }
   $497_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $498_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
   HEAP32[($3_1 + 84 | 0) >> 2] = (HEAP32[($3_1 + 104 | 0) >> 2] | 0) - (HEAP32[($3_1 + 140 | 0) >> 2] | 0) | 0;
   HEAP32[($3_1 + 80 | 0) >> 2] = $498_1;
   $396($497_1 | 0, 6036 | 0, 8274 | 0, $3_1 + 80 | 0 | 0);
   $507_1 = 0;
   $382(1 | 0, $507_1 | 0, $507_1 | 0);
  }
  global$0 = $3_1 + 144 | 0;
  return;
 }
 
 function $73($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $25_1 = 0, $42_1 = 0, $59_1 = 0, $15_1 = 0, $17_1 = 0, $44_1 = 0, $61_1 = 0, $133_1 = 0;
  $5_1 = global$0 - 320 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 316 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 312 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 308 | 0) >> 2] = $2_1;
  label$1 : {
   if (!(($518(HEAP32[($5_1 + 316 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 140 >>> 0 & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $17_1 = $518(HEAP32[($5_1 + 316 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[($5_1 + 316 | 0) >> 2] | 0;
   HEAP32[($5_1 + 68 | 0) >> 2] = 140;
   HEAP32[($5_1 + 64 | 0) >> 2] = $17_1;
   $396($15_1 | 0, 6408 | 0, 11864 | 0, $5_1 + 64 | 0 | 0);
   $25_1 = 0;
   $382(5 | 0, $25_1 | 0, $25_1 | 0);
  }
  HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($5_1 + 316 | 0) >> 2] | 0;
  $408($5_1 + 96 | 0 | 0, 11986 | 0, $5_1 + 48 | 0 | 0) | 0;
  label$2 : {
   if (!((HEAP32[($5_1 + 312 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $42_1 = $5_1 + 96 | 0;
   $44_1 = $42_1 + ($518($42_1 | 0) | 0) | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 312 | 0) >> 2] | 0) >> 2] | 0;
   $408($44_1 | 0, 11991 | 0, $5_1 + 32 | 0 | 0) | 0;
  }
  label$3 : {
   if (!((HEAP32[($5_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $59_1 = $5_1 + 96 | 0;
   $61_1 = $59_1 + ($518($59_1 | 0) | 0) | 0;
   HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 308 | 0) >> 2] | 0) >> 3];
   $408($61_1 | 0, 11995 | 0, $5_1 + 16 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 92 | 0) >> 2] = $518($5_1 + 96 | 0 | 0) | 0;
  HEAP32[(0 + 89372 | 0) >> 2] = (HEAP32[(0 + 89372 | 0) >> 2] | 0) + (HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = (512 - ($518(88860 | 0) | 0) | 0) - 1 | 0;
  label$4 : {
   if (!((HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($5_1 + 88 | 0) >> 2] = 0;
  }
  label$5 : {
   if (!((HEAP32[(0 + 89372 | 0) >> 2] | 0 | 0) >= (80 | 0) & 1 | 0)) {
    break label$5
   }
   if (!((HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$5
   }
   $468(87704 + 1156 | 0 | 0, 12002 | 0, HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 88 | 0) >> 2] = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 89372 | 0) >> 2] = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$6
   }
   label$7 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$7
    }
    $133_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $5_1 + 96 | 0;
    $396($133_1 | 0, 1058 | 0, 12004 | 0, $5_1 | 0);
   }
  }
  $468(87704 + 1156 | 0 | 0, $5_1 + 96 | 0 | 0, HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 320 | 0;
  return;
 }
 
 function $74() {
  var $2_1 = 0, $4_1 = 0, $371_1 = 0, $40_1 = 0, $71_1 = 0, $77_1 = 0, $176_1 = 0, $201_1 = 0, $224_1 = 0, $242_1 = 0, $244_1 = 0, $276_1 = 0, $292_1 = 0, $318_1 = 0, $343_1 = 0, $394_1 = 0, $13_1 = 0, $432_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $4_1 = 0;
  HEAP32[($2_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = 88344;
   $396($13_1 | 0, 3024 | 0, 10296 | 0, $2_1 + 16 | 0 | 0);
  }
  label$2 : {
   if (HEAP32[(0 + 87968 | 0) >> 2] | 0) {
    break label$2
   }
   if (HEAP32[(0 + 87976 | 0) >> 2] | 0) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (HEAP32[(0 + 87784 | 0) >> 2] | 0) {
      break label$4
     }
     if (HEAP32[(0 + 87836 | 0) >> 2] | 0) {
      break label$4
     }
     if (+HEAPF64[(0 + 87856 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0) {
      break label$4
     }
     if (HEAP32[(0 + 87848 | 0) >> 2] | 0) {
      break label$4
     }
     if (HEAP32[(0 + 87932 | 0) >> 2] | 0) {
      break label$3
     }
     if (HEAP32[(0 + 87816 | 0) >> 2] | 0) {
      break label$4
     }
     if (!(HEAP32[(0 + 87804 | 0) >> 2] | 0)) {
      break label$3
     }
    }
    $40_1 = 0;
    HEAP32[(0 + 87968 | 0) >> 2] = 1;
    $73(10326 | 0, $40_1 | 0, $40_1 | 0);
   }
  }
  label$5 : {
   if (!(HEAP32[(0 + 88128 | 0) >> 2] | 0)) {
    break label$5
   }
   label$6 : {
    label$7 : {
     if ((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0) {
      break label$7
     }
     if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
      break label$7
     }
     if (HEAP32[(0 + 88284 | 0) >> 2] | 0) {
      break label$7
     }
     if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$6
     }
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6215 | 0, 10332 | 0, 0 | 0);
    $71_1 = 0;
    $382(1 | 0, $71_1 | 0, $71_1 | 0);
   }
   HEAP32[(0 + 87792 | 0) >> 2] = 3;
   HEAP32[(0 + 88112 | 0) >> 2] = 1;
  }
  HEAP32[($2_1 + 32 | 0) >> 2] = 29;
  label$8 : {
   label$9 : while (1) {
    $77_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = $77_1 + -1 | 0;
    if (!$77_1) {
     break label$8
    }
    label$10 : {
     label$11 : {
      if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($2_1 + 44 | 0) >> 2] = 1;
      break label$10;
     }
     label$12 : {
      label$13 : {
       label$14 : {
        if ((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0) {
         break label$14
        }
        if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (13 | 0) & 1 | 0)) {
         break label$13
        }
       }
       HEAP32[($2_1 + 40 | 0) >> 2] = 1;
       break label$12;
      }
      label$15 : {
       label$16 : {
        if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
         break label$16
        }
        HEAP32[($2_1 + 36 | 0) >> 2] = 1;
        break label$15;
       }
       label$17 : {
        label$18 : {
         if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (20 | 0) & 1 | 0)) {
          break label$18
         }
         HEAP32[($2_1 + 36 | 0) >> 2] = 1;
         break label$17;
        }
        label$19 : {
         label$20 : {
          if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (19 | 0) & 1 | 0)) {
           break label$20
          }
          if (HEAP32[(0 + 87824 | 0) >> 2] | 0) {
           break label$20
          }
          $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6053 | 0, 10414 | 0, 0 | 0);
          $176_1 = 0;
          $382(1 | 0, $176_1 | 0, $176_1 | 0);
          break label$19;
         }
         label$21 : {
          label$22 : {
           if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (25 | 0) & 1 | 0)) {
            break label$22
           }
           label$23 : {
            if (HEAP32[(0 + 87824 | 0) >> 2] | 0) {
             break label$23
            }
            if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
             break label$22
            }
           }
           $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6054 | 0, 10499 | 0, 0 | 0);
           $201_1 = 0;
           $382(1 | 0, $201_1 | 0, $201_1 | 0);
           break label$21;
          }
          label$24 : {
           label$25 : {
            if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
             break label$25
            }
            if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
             break label$25
            }
            $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6055 | 0, 10608 | 0, 0 | 0);
            $224_1 = 0;
            $382(1 | 0, $224_1 | 0, $224_1 | 0);
            break label$24;
           }
           label$26 : {
            if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (26 | 0) & 1 | 0)) {
             break label$26
            }
            label$27 : {
             label$28 : {
              if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
               break label$28
              }
              $242_1 = 0;
              $73(10684 | 0, $242_1 | 0, $242_1 | 0);
              break label$27;
             }
             $244_1 = 0;
             $73(10693 | 0, $244_1 | 0, $244_1 | 0);
            }
           }
          }
         }
        }
       }
      }
     }
    }
    continue label$9;
   };
  }
  label$29 : {
   if (!(HEAP32[($2_1 + 36 | 0) >> 2] | 0)) {
    break label$29
   }
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$29
   }
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$29
   }
   label$30 : {
    if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
     break label$30
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7041 | 0, 10703 | 0, 0 | 0);
   }
  }
  label$31 : {
   if (!(HEAP32[($2_1 + 40 | 0) >> 2] | 0)) {
    break label$31
   }
   label$32 : {
    if ((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0) {
     break label$32
    }
    if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
     break label$31
    }
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6056 | 0, 10810 | 0, 0 | 0);
   $276_1 = 0;
   $382(1 | 0, $276_1 | 0, $276_1 | 0);
  }
  label$33 : {
   if (!(HEAP32[($2_1 + 44 | 0) >> 2] | 0)) {
    break label$33
   }
   label$34 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
     break label$34
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6057 | 0, 10939 | 0, 0 | 0);
    $292_1 = 0;
    $382(1 | 0, $292_1 | 0, $292_1 | 0);
   }
   label$35 : {
    if (!(HEAP32[(0 + 87980 | 0) >> 2] | 0)) {
     break label$35
    }
    if ((((((HEAP32[(0 + 87956 | 0) >> 2] | 0) + (HEAP32[(0 + 87952 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 87964 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 88116 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 87788 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 88112 | 0) >> 2] | 0) | 0) {
     break label$35
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6058 | 0, 11015 | 0, 0 | 0);
    $318_1 = 0;
    $382(1 | 0, $318_1 | 0, $318_1 | 0);
   }
   label$36 : {
    if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
     break label$36
    }
    label$37 : {
     if ((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0) {
      break label$37
     }
     if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$36
     }
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6059 | 0, 11069 | 0, 0 | 0);
    $343_1 = 0;
    $382(1 | 0, $343_1 | 0, $343_1 | 0);
   }
   label$38 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$38
    }
    if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$38
    }
    label$39 : {
     if (HEAP32[(0 + 87956 | 0) >> 2] | 0) {
      break label$39
     }
     if (HEAP32[(0 + 88116 | 0) >> 2] | 0) {
      break label$39
     }
     if (!(HEAP32[(0 + 87952 | 0) >> 2] | 0)) {
      break label$38
     }
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7042 | 0, 11140 | 0, 0 | 0);
    $371_1 = 0;
    HEAP32[(0 + 87952 | 0) >> 2] = $371_1;
    HEAP32[(0 + 88116 | 0) >> 2] = $371_1;
    HEAP32[(0 + 87956 | 0) >> 2] = $371_1;
   }
  }
  label$40 : {
   if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
    break label$40
   }
   if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
    break label$40
   }
   if (HEAP32[(0 + 87932 | 0) >> 2] | 0) {
    break label$40
   }
   label$41 : {
    label$42 : {
     label$43 : {
      if (!(HEAP32[(0 + 87956 | 0) >> 2] | 0)) {
       break label$43
      }
      if (HEAP32[(0 + 88116 | 0) >> 2] | 0) {
       break label$42
      }
     }
     if (!(HEAP32[($2_1 + 36 | 0) >> 2] | 0)) {
      break label$41
     }
    }
    label$44 : {
     label$45 : {
      if (!(HEAP32[(0 + 90236 | 0) >> 2] | 0)) {
       break label$45
      }
      $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7072 | 0, 11269 | 0, 0 | 0);
      break label$44;
     }
     $394_1 = 0;
     HEAP32[(0 + 87840 | 0) >> 2] = 1;
     $73(11370 | 0, $394_1 | 0, $394_1 | 0);
    }
   }
  }
  HEAP32[(0 + 87960 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$46 : {
   label$47 : {
    if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$47
    }
    label$48 : {
     label$49 : {
      if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$49
      }
      HEAP32[(0 + 87960 | 0) >> 2] = (HEAP32[(0 + 87960 | 0) >> 2] | 0) + -1 | 0;
      label$50 : {
       label$51 : {
        if (!(HEAP32[($2_1 + 44 | 0) >> 2] | 0)) {
         break label$51
        }
        if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
         break label$50
        }
       }
       $432_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       HEAP32[$2_1 >> 2] = HEAP32[(0 + 87792 | 0) >> 2] | 0;
       $396($432_1 | 0, 7043 | 0, 11380 | 0, $2_1 | 0);
      }
      break label$48;
     }
     HEAP32[(0 + 87792 | 0) >> 2] = -1;
    }
    break label$46;
   }
   label$52 : {
    if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
     break label$52
    }
    HEAP32[(0 + 87792 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
    HEAP32[(0 + 87960 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
   }
  }
  global$0 = $2_1 + 48 | 0;
  return;
 }
 
 function $75() {
  var $2_1 = 0, $23_1 = 0, $16_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
  $76();
  $77();
  label$1 : {
   if (!(($337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
   $396($16_1 | 0, 6206 | 0, 12071 | 0, $2_1 | 0);
   $23_1 = 0;
   $382(5 | 0, $23_1 | 0, $23_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $76() {
  label$1 : {
   if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
    break label$1
   }
   $285(1 | 0);
   $294();
  }
  label$2 : {
   if (!(HEAP32[(0 + 88260 | 0) >> 2] | 0)) {
    break label$2
   }
   if (HEAP32[(0 + 90128 | 0) >> 2] | 0) {
    break label$2
   }
   $313();
   label$3 : {
    if (!(HEAP32[(0 + 88276 | 0) >> 2] | 0)) {
     break label$3
    }
    if (HEAP32[(0 + 87764 | 0) >> 2] | 0) {
     break label$3
    }
    $278(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
   }
  }
  $297(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
  label$4 : {
   if (!(HEAP32[(0 + 88308 | 0) >> 2] | 0)) {
    break label$4
   }
   $40(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   label$6 : {
    if (HEAP32[(0 + 87836 | 0) >> 2] | 0) {
     break label$6
    }
    if (HEAP32[(0 + 87848 | 0) >> 2] | 0) {
     break label$6
    }
    if (!(+HEAPF64[(0 + 87856 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$5
    }
   }
   $78(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
  }
  label$7 : {
   if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
    break label$7
   }
   $372();
  }
  return;
 }
 
 function $77() {
  var $2_1 = 0, $23_1 = 0, $103_1 = 0, $133_1 = 0, $94_1 = 0, $96_1 = 0, $97_1 = 0, $126_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = $337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
  $402(0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 88124 | 0) >> 2] | 0)) {
     break label$2
    }
    $155(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (HEAP32[(0 + 87996 | 0) >> 2] | 0) {
     break label$3
    }
    $155(HEAP32[(0 + 89976 | 0) >> 2] | 0 | 0);
   }
  }
  HEAP32[($2_1 + 60 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) < (29 | 0) & 1 | 0)) {
     break label$4
    }
    $23_1 = 0;
    $79(HEAP32[(0 + 89976 | 0) >> 2] | 0 | 0, HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, $23_1 | 0, $23_1 | 0);
    HEAP32[($2_1 + 60 | 0) >> 2] = (HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  $402(0 | 0) | 0;
  $371();
  label$6 : {
   if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
    break label$6
   }
   if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
    break label$6
   }
   label$7 : {
    if (+HEAPF64[(0 + 90136 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0) {
     break label$7
    }
    if (!(HEAP32[(0 + 88180 | 0) >> 2] | 0)) {
     break label$6
    }
   }
   $380(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[(0 + 94852 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$8 : {
   if (!(HEAP32[(0 + 88276 | 0) >> 2] | 0)) {
    break label$8
   }
   label$9 : {
    if ((HEAP32[(0 + 92120 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0) {
     break label$9
    }
    if (!((HEAP32[(0 + 92168 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$8
    }
   }
   $380(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[(0 + 94856 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$10 : {
   if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
    break label$10
   }
   $378(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 12143 | 0);
   $165(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
   HEAP32[($2_1 + 52 | 0) >> 2] = (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) + 8 | 0;
   $94_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $96_1 = HEAP32[(0 + 89988 | 0) >> 2] | 0;
   $97_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = (HEAP32[($2_1 + 52 | 0) >> 2] | 0) + 4 | 0;
   $103_1 = 20;
   HEAP32[(($2_1 + 16 | 0) + $103_1 | 0) >> 2] = $97_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $96_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = 88;
   HEAP32[($2_1 + 24 | 0) >> 2] = 28;
   HEAP32[($2_1 + 20 | 0) >> 2] = $103_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = 48;
   $396($94_1 | 0, 8040 | 0, 12144 | 0, $2_1 + 16 | 0 | 0);
  }
  label$11 : {
   if (!(($337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$11
   }
   $126_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
   $396($126_1 | 0, 6065 | 0, 12269 | 0, $2_1 | 0);
   $133_1 = 0;
   $382(5 | 0, $133_1 | 0, $133_1 | 0);
  }
  global$0 = $2_1 + 64 | 0;
  return;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $40_1 = 0, $82_1 = 0, $88_1 = 0, $99_1 = 0, $102_1 = 0, $108_1 = 0, $114_1 = 0, $127_1 = 0, $133_1 = 0, $144_1 = 0, $147_1 = 0, $153_1 = 0, $159_1 = 0, $164_1 = 0, $175_1 = 0, $178_1 = 0, $195_1 = 0, $199_1 = 0, $218_1 = 0, $16_1 = 0, $18_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $347(HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $18_1 = HEAP32[(0 + 87836 | 0) >> 2] | 0;
   $20_1 = HEAP32[(0 + 87848 | 0) >> 2] | 0;
   HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[(0 + 87856 | 0) >> 3];
   HEAP32[($3_1 + 4 | 0) >> 2] = $20_1;
   HEAP32[$3_1 >> 2] = $18_1;
   $396($16_1 | 0, 2006 | 0, 12783 | 0, $3_1 | 0);
  }
  label$2 : {
   if (!((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
   label$3 : while (1) {
    $40_1 = 0;
    label$4 : {
     if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $40_1 = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($40_1 & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
       break label$6
      }
      if (!(((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
       break label$6
      }
      $325($3_1 + 32 | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$3;
    }
    break label$3;
   };
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = $337(HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  label$7 : {
   if (!(HEAP32[(0 + 87836 | 0) >> 2] | 0)) {
    break label$7
   }
   $440((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, 4 | 0, 1 | 0);
   $82_1 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) - (HEAP32[(0 + 87836 | 0) >> 2] | 0) | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $82_1;
   label$8 : {
    if (!(($82_1 | 0) > (0 | 0) & 1 | 0)) {
     break label$8
    }
    $88_1 = 0;
    HEAP32[($3_1 + 40 | 0) >> 2] = $88_1;
    label$9 : {
     if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != ($88_1 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0;
     label$10 : {
      label$11 : while (1) {
       $99_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
       HEAP32[($3_1 + 36 | 0) >> 2] = $99_1 + 4 | 0;
       $102_1 = HEAP32[$99_1 >> 2] | 0;
       HEAP32[($3_1 + 40 | 0) >> 2] = $102_1;
       if (!(($102_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       $108_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
       HEAP32[($108_1 + 80 | 0) >> 2] = (HEAP32[($108_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
       $114_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($3_1 + 24 | 0) >> 2] = $114_1;
       label$12 : {
        if ($114_1) {
         break label$12
        }
        break label$10;
       }
       continue label$11;
      };
     }
    }
   }
  }
  label$13 : {
   if (!(HEAP32[(0 + 87848 | 0) >> 2] | 0)) {
    break label$13
   }
   $440((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, 4 | 0, 2 | 0);
   $127_1 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) - (HEAP32[(0 + 87848 | 0) >> 2] | 0) | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $127_1;
   label$14 : {
    if (!(($127_1 | 0) > (0 | 0) & 1 | 0)) {
     break label$14
    }
    $133_1 = 0;
    HEAP32[($3_1 + 40 | 0) >> 2] = $133_1;
    label$15 : {
     if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != ($133_1 | 0) & 1 | 0)) {
      break label$15
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0;
     label$16 : {
      label$17 : while (1) {
       $144_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
       HEAP32[($3_1 + 36 | 0) >> 2] = $144_1 + 4 | 0;
       $147_1 = HEAP32[$144_1 >> 2] | 0;
       HEAP32[($3_1 + 40 | 0) >> 2] = $147_1;
       if (!(($147_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$16
       }
       $153_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
       HEAP32[($153_1 + 80 | 0) >> 2] = (HEAP32[($153_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
       $159_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($3_1 + 24 | 0) >> 2] = $159_1;
       label$18 : {
        if ($159_1) {
         break label$18
        }
        break label$16;
       }
       continue label$17;
      };
     }
    }
   }
  }
  label$19 : {
   if (!(+HEAPF64[(0 + 87856 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$19
   }
   $164_1 = 0;
   HEAP32[($3_1 + 40 | 0) >> 2] = $164_1;
   label$20 : {
    if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != ($164_1 | 0) & 1 | 0)) {
     break label$20
    }
    HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0;
    label$21 : {
     label$22 : while (1) {
      $175_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
      HEAP32[($3_1 + 36 | 0) >> 2] = $175_1 + 4 | 0;
      $178_1 = HEAP32[$175_1 >> 2] | 0;
      HEAP32[($3_1 + 40 | 0) >> 2] = $178_1;
      if (!(($178_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$21
      }
      label$23 : {
       label$24 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0)) {
         break label$24
        }
        if (!(+HEAPF64[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 3] < +HEAPF64[(0 + 87856 | 0) >> 3] & 1 | 0)) {
         break label$23
        }
       }
       $195_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
       HEAP32[($195_1 + 80 | 0) >> 2] = (HEAP32[($195_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
      }
      continue label$22;
     };
    }
   }
  }
  $199_1 = 0;
  $348($3_1 + 32 | 0 | 0);
  HEAP32[($3_1 + 24 | 0) >> 2] = $199_1;
  label$25 : {
   if (!((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) != ($199_1 | 0) & 1 | 0)) {
    break label$25
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
   label$26 : while (1) {
    $218_1 = 0;
    label$27 : {
     if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$27
     }
     $218_1 = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$28 : {
     if (!($218_1 & 1 | 0)) {
      break label$28
     }
     label$29 : {
      if (!(((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$26;
    }
    break label$26;
   };
  }
  HEAP32[(0 + 90072 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return;
 }
 
 function $79($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $356_1 = 0, $372_1 = 0, $383_1 = 0, $386_1 = 0, $55_1 = 0, $108_1 = 0, $135_1 = 0, $153_1 = 0, $159_1 = 0, $201_1 = 0, $203_1 = 0, $209_1 = 0, $211_1 = 0, $216_1 = 0, $218_1 = 0, $219_1 = 0, $220_1 = 0, $223_1 = 0, $225_1 = 0, $253_1 = 0, $408_1 = 0.0;
  $7_1 = global$0 - 224 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 220 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 216 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 212 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 208 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 204 | 0) >> 2] = $4_1;
  HEAP32[(0 + 90328 | 0) >> 2] = HEAP32[(0 + 88140 | 0) >> 2] | 0;
  HEAP32[(0 + 88140 | 0) >> 2] = 0;
  label$1 : {
   if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (19 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7056 | 0, 16400 | 0, 0 | 0);
  }
  label$3 : {
   label$4 : {
    if (HEAP32[($7_1 + 216 | 0) >> 2] | 0) {
     break label$4
    }
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($7_1 + 168 | 0) >> 2] = $80(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 164 | 0) >> 2] = $11(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) | 0;
     $55_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
     HEAP32[$7_1 >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
     $396($55_1 | 0, 9186 | 0, 16504 | 0, $7_1 | 0);
     $81(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0, -1 | 0);
     $158(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
     $348($7_1 + 168 | 0 | 0);
     break label$5;
    }
    label$7 : {
     label$8 : {
      if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (28 | 0) & 1 | 0)) {
       break label$8
      }
      label$9 : {
       label$10 : {
        if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
         break label$10
        }
        $82(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
        break label$9;
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
          break label$12
         }
         $83(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
         break label$11;
        }
        $84(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
       }
      }
      break label$7;
     }
     label$13 : {
      label$14 : {
       if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (18 | 0) & 1 | 0)) {
        break label$14
       }
       $108_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = 88860;
       HEAP32[($7_1 + 16 | 0) >> 2] = 7840;
       $396($108_1 | 0, 9187 | 0, 16510 | 0, $7_1 + 16 | 0 | 0);
       break label$13;
      }
      label$15 : {
       label$16 : {
        if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (21 | 0) & 1 | 0)) {
         break label$16
        }
        if (HEAP32[(0 + 88284 | 0) >> 2] | 0) {
         break label$16
        }
        $85(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
        break label$15;
       }
       label$17 : {
        label$18 : {
         if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (22 | 0) & 1 | 0)) {
          break label$18
         }
         $135_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
         HEAP32[($7_1 + 36 | 0) >> 2] = 88344;
         HEAP32[($7_1 + 32 | 0) >> 2] = 88604;
         $396($135_1 | 0, 9188 | 0, 16545 | 0, $7_1 + 32 | 0 | 0);
         break label$17;
        }
        label$19 : {
         label$20 : {
          if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (23 | 0) & 1 | 0)) {
           break label$20
          }
          $396(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, 9189 | 0, 16554 | 0, 0 | 0);
          $153_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
          HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[(0 + 90240 | 0) >> 3];
          $396($153_1 | 0, 9190 | 0, 13218 | 0, $7_1 + 48 | 0 | 0);
          $159_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
          HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[(0 + 90248 | 0) >> 3];
          $396($159_1 | 0, 9191 | 0, 13218 | 0, $7_1 + 64 | 0 | 0);
          $396(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, 9192 | 0, 13226 | 0, 0 | 0);
          break label$19;
         }
         label$21 : {
          label$22 : {
           if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (24 | 0) & 1 | 0)) {
            break label$22
           }
           $86(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, $7_1 + 200 | 0 | 0, $7_1 + 196 | 0 | 0, $7_1 + 188 | 0 | 0, $7_1 + 192 | 0 | 0, $7_1 + 184 | 0 | 0, $7_1 + 180 | 0 | 0);
           HEAP32[($7_1 + 168 | 0) >> 2] = $80(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) | 0;
           $201_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
           $203_1 = HEAP32[(0 + 88316 | 0) >> 2] | 0;
           $209_1 = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
           $211_1 = HEAP32[(0 + 90064 | 0) >> 2] | 0;
           $216_1 = (HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0;
           $218_1 = $337(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) | 0;
           $219_1 = HEAP32[($7_1 + 200 | 0) >> 2] | 0;
           $220_1 = HEAP32[($7_1 + 184 | 0) >> 2] | 0;
           $223_1 = (HEAP32[($7_1 + 200 | 0) >> 2] | 0) - (HEAP32[($7_1 + 196 | 0) >> 2] | 0) | 0;
           $225_1 = HEAP32[(0 + 90952 | 0) >> 2] | 0;
           HEAP32[($7_1 + 116 | 0) >> 2] = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
           HEAP32[($7_1 + 112 | 0) >> 2] = $225_1;
           HEAP32[($7_1 + 108 | 0) >> 2] = $223_1;
           HEAP32[($7_1 + 104 | 0) >> 2] = $220_1;
           HEAP32[($7_1 + 100 | 0) >> 2] = $219_1;
           HEAP32[($7_1 + 96 | 0) >> 2] = $218_1;
           HEAP32[($7_1 + 92 | 0) >> 2] = $216_1;
           HEAP32[($7_1 + 88 | 0) >> 2] = $211_1;
           HEAP32[($7_1 + 84 | 0) >> 2] = $209_1;
           HEAP32[($7_1 + 80 | 0) >> 2] = $203_1;
           $396($201_1 | 0, 9193 | 0, 16559 | 0, $7_1 + 80 | 0 | 0);
           $348($7_1 + 168 | 0 | 0);
           $50(0 | 0, $7_1 + 152 | 0 | 0, $7_1 + 144 | 0 | 0);
           $253_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
           $408_1 = +HEAPF64[($7_1 + 152 | 0) >> 3];
           HEAPF64[($7_1 + 136 | 0) >> 3] = +HEAPF64[($7_1 + 144 | 0) >> 3];
           HEAPF64[($7_1 + 128 | 0) >> 3] = $408_1;
           $396($253_1 | 0, 9194 | 0, 16595 | 0, $7_1 + 128 | 0 | 0);
           break label$21;
          }
          label$23 : {
           label$24 : {
            if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (27 | 0) & 1 | 0)) {
             break label$24
            }
            $87(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
            break label$23;
           }
           label$25 : {
            label$26 : {
             if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
              break label$26
             }
             if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0)) {
              break label$26
             }
             $88(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
             break label$25;
            }
            label$27 : {
             label$28 : {
              if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
               break label$28
              }
              if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
               break label$28
              }
              $89(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
              $88(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
              $90(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
              break label$27;
             }
             label$29 : {
              label$30 : {
               if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
                break label$30
               }
               label$31 : {
                if ((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (26 | 0) & 1 | 0) {
                 break label$31
                }
                if ((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0) {
                 break label$31
                }
                if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
                 break label$30
                }
               }
               $91(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
               break label$29;
              }
              $89(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
              label$32 : {
               if (!((HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                break label$32
               }
               HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
               label$33 : while (1) {
                $356_1 = 0;
                label$34 : {
                 if (!((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                  break label$34
                 }
                 $356_1 = (HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
                }
                label$35 : {
                 if (!($356_1 & 1 | 0)) {
                  break label$35
                 }
                 $92(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
                 HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
                 continue label$33;
                }
                break label$33;
               };
              }
              $372_1 = 0;
              HEAP32[($7_1 + 176 | 0) >> 2] = $372_1;
              label$36 : {
               if (!((HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0) != ($372_1 | 0) & 1 | 0)) {
                break label$36
               }
               HEAP32[($7_1 + 172 | 0) >> 2] = (HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0;
               label$37 : {
                label$38 : while (1) {
                 $383_1 = HEAP32[($7_1 + 172 | 0) >> 2] | 0;
                 HEAP32[($7_1 + 172 | 0) >> 2] = $383_1 + 4 | 0;
                 $386_1 = HEAP32[$383_1 >> 2] | 0;
                 HEAP32[($7_1 + 176 | 0) >> 2] = $386_1;
                 if (!(($386_1 | 0) != (0 | 0) & 1 | 0)) {
                  break label$37
                 }
                 $92(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
                 continue label$38;
                };
               }
              }
              $90(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  HEAP32[(0 + 88140 | 0) >> 2] = HEAP32[(0 + 90328 | 0) >> 2] | 0;
  global$0 = $7_1 + 224 | 0;
  return;
 }
 
 function $80($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $40_1 = 0, $78_1 = 0, $91_1 = 0, $104_1 = 0, $107_1 = 0, $131_1 = 0, $142_1 = 0, $145_1 = 0, $154_1 = 0, $167_1 = 0, $170_1 = 0, $192_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = $347(HEAP32[(0 + 90064 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
    label$3 : while (1) {
     $40_1 = 0;
     label$4 : {
      if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      $40_1 = (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$5 : {
      if (!($40_1 & 1 | 0)) {
       break label$5
      }
      HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
      $325($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
      continue label$3;
     }
     break label$3;
    };
    break label$1;
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    label$7 : while (1) {
     $78_1 = 0;
     label$8 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      $78_1 = (HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$9 : {
      if (!($78_1 & 1 | 0)) {
       break label$9
      }
      label$10 : {
       label$11 : {
        if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
         break label$11
        }
        if (!($100(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0)) {
         break label$11
        }
        break label$10;
       }
       $91_1 = 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = $91_1;
       label$12 : {
        if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($91_1 | 0) & 1 | 0)) {
         break label$12
        }
        HEAP32[$5_1 >> 2] = (HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
        label$13 : {
         label$14 : while (1) {
          $104_1 = HEAP32[$5_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $104_1 + 4 | 0;
          $107_1 = HEAP32[$104_1 >> 2] | 0;
          HEAP32[($5_1 + 4 | 0) >> 2] = $107_1;
          if (!(($107_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$13
          }
          label$15 : {
           if (!((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$15
           }
           HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
           $325($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
          }
          continue label$14;
         };
        }
       }
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$7;
     }
     break label$7;
    };
   }
  }
  $131_1 = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $131_1;
  label$16 : {
   if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != ($131_1 | 0) & 1 | 0)) {
    break label$16
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0;
   label$17 : {
    label$18 : while (1) {
     $142_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $142_1 + 4 | 0;
     $145_1 = HEAP32[$142_1 >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $145_1;
     if (!(($145_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$17
     }
     label$19 : {
      if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
       break label$19
      }
      if (!($100(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0)) {
       break label$19
      }
      continue label$18;
     }
     $154_1 = 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $154_1;
     label$20 : {
      if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($154_1 | 0) & 1 | 0)) {
       break label$20
      }
      HEAP32[$5_1 >> 2] = (HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
      label$21 : {
       label$22 : while (1) {
        $167_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $167_1 + 4 | 0;
        $170_1 = HEAP32[$167_1 >> 2] | 0;
        HEAP32[($5_1 + 4 | 0) >> 2] = $170_1;
        if (!(($170_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$21
        }
        label$23 : {
         if (!((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$23
         }
         HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
         $325($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
        }
        continue label$22;
       };
      }
     }
     continue label$18;
    };
   }
  }
  $192_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $192_1 | 0;
 }
 
 function $81($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $49_1 = 0, $53_1 = 0, $22_1 = 0, $42_1 = 0, $62_1 = 0, $65_1 = 0;
  $7_1 = global$0 - 96 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $22_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
    HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
    $396($22_1 | 0, 9211 | 0, 15246 | 0, $7_1 + 48 | 0 | 0);
    label$4 : {
     if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
      break label$4
     }
     if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (-3 | 0) & 1 | 0)) {
      break label$4
     }
     $42_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
     HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
     $396($42_1 | 0, 9212 | 0, 16837 | 0, $7_1 + 32 | 0 | 0);
    }
   }
   HEAP32[($7_1 + 72 | 0) >> 2] = HEAP32[($7_1 + 84 | 0) >> 2] | 0;
   label$5 : {
    label$6 : while (1) {
     $49_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
     HEAP32[($7_1 + 72 | 0) >> 2] = $49_1 + -1 | 0;
     if (!$49_1) {
      break label$5
     }
     $53_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
     HEAP32[($7_1 + 80 | 0) >> 2] = $53_1 + 8 | 0;
     HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[$53_1 >> 3];
     label$7 : {
      label$8 : {
       if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$8
       }
       $62_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
       HEAPF64[$7_1 >> 3] = +HEAPF64[($7_1 + 64 | 0) >> 3];
       $396($62_1 | 0, 9213 | 0, 16844 | 0, $7_1 | 0);
       break label$7;
      }
      $65_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
      HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[($7_1 + 64 | 0) >> 3];
      $396($65_1 | 0, 9214 | 0, 13218 | 0, $7_1 + 16 | 0 | 0);
     }
     continue label$6;
    };
   }
   $396(HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0, 9215 | 0, 13226 | 0, 0 | 0);
  }
  global$0 = $7_1 + 96 | 0;
  return;
 }
 
 function $82($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $31_1 = 0, $7_1 = 0, $22_1 = 0, $25_1 = 0, $44_1 = 0, $47_1 = 0, $63_1 = 0, $70_1 = 0, $80_1 = 0, $91_1 = 0, $94_1 = 0, $74_1 = 0, $106_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $80(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  $294();
  HEAP32[($6_1 + 56 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $22_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
     HEAP32[($6_1 + 52 | 0) >> 2] = $22_1 + 4 | 0;
     $25_1 = HEAP32[$22_1 >> 2] | 0;
     HEAP32[($6_1 + 56 | 0) >> 2] = $25_1;
     if (!(($25_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $31_1 = 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $31_1;
     HEAP32[($6_1 + 48 | 0) >> 2] = $31_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $31_1;
     label$4 : {
      if (!((HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($31_1 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
      label$5 : {
       label$6 : while (1) {
        $44_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
        HEAP32[($6_1 + 36 | 0) >> 2] = $44_1 + 4 | 0;
        $47_1 = HEAP32[$44_1 >> 2] | 0;
        HEAP32[($6_1 + 40 | 0) >> 2] = $47_1;
        if (!(($47_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$5
        }
        label$7 : {
         label$8 : {
          if (!(((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
           break label$8
          }
          HEAP32[($6_1 + 48 | 0) >> 2] = 1;
          break label$7;
         }
         HEAP32[($6_1 + 44 | 0) >> 2] = 1;
        }
        continue label$6;
       };
      }
     }
     label$9 : {
      label$10 : {
       if (!(HEAP32[($6_1 + 48 | 0) >> 2] | 0)) {
        break label$10
       }
       if (!(HEAP32[($6_1 + 44 | 0) >> 2] | 0)) {
        break label$10
       }
       $63_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
       HEAP8[($63_1 + 24 | 0) >> 0] = HEAPU8[($63_1 + 24 | 0) >> 0] | 0 | 1 | 0;
       HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       break label$9;
      }
      $70_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
      HEAP8[($70_1 + 24 | 0) >> 0] = (HEAPU8[($70_1 + 24 | 0) >> 0] | 0) & -2 | 0;
     }
     continue label$3;
    };
   }
  }
  $74_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
  $396($74_1 | 0, 9091 | 0, 13238 | 0, $6_1 + 16 | 0 | 0);
  $80_1 = 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = $80_1;
  label$11 : {
   if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != ($80_1 | 0) & 1 | 0)) {
    break label$11
   }
   HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 4 | 0;
   label$12 : {
    label$13 : while (1) {
     $91_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
     HEAP32[($6_1 + 52 | 0) >> 2] = $91_1 + 4 | 0;
     $94_1 = HEAP32[$91_1 >> 2] | 0;
     HEAP32[($6_1 + 56 | 0) >> 2] = $94_1;
     if (!(($94_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
     label$14 : {
      if (!(((HEAPU8[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0)) {
       break label$14
      }
      $106_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
      HEAP32[$6_1 >> 2] = $267(HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
      $396($106_1 | 0, 9092 | 0, 13238 | 0, $6_1 | 0);
     }
     continue label$13;
    };
   }
  }
  $348($6_1 + 60 | 0 | 0);
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $83($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $51_1 = 0, $54_1 = 0, $165_1 = 0, $32_1 = 0, $101_1 = 0, $103_1 = 0, $127_1 = 0, $147_1 = 0;
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 112 | 0) >> 2] = $3_1;
  $86(HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $6_1 + 108 | 0 | 0, $6_1 + 92 | 0 | 0, $6_1 + 100 | 0 | 0, $6_1 + 104 | 0 | 0, $6_1 + 96 | 0 | 0, $6_1 + 88 | 0 | 0);
  HEAP32[($6_1 + 84 | 0) >> 2] = $80(HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0) | 0;
  $32_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
  HEAP32[($6_1 + 48 | 0) >> 2] = $337(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) | 0;
  $396($32_1 | 0, 9088 | 0, 13238 | 0, $6_1 + 48 | 0 | 0);
  $348($6_1 + 84 | 0 | 0);
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 108 | 0) >> 2] | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $51_1 = HEAP32[($6_1 + 120 | 0) >> 2] | 0;
     break label$3;
    }
    $51_1 = HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   }
   $54_1 = $51_1;
   HEAP32[($6_1 + 76 | 0) >> 2] = $54_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $54_1;
   HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if (!((((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 0 | 0)) {
       break label$7
      }
      HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP32[($6_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      HEAP32[($6_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      break label$6;
     }
     HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     HEAP32[($6_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($6_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    }
    label$8 : {
     if (!((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     $101_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $103_1 = HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $103_1;
     $396($101_1 | 0, 6218 | 0, 14808 | 0, $6_1 + 32 | 0 | 0);
     $150(5 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0);
    }
    label$9 : {
     if (!(HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
      break label$9
     }
     label$10 : {
      if (!((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
      $127_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
      HEAP32[($6_1 + 16 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
      $396($127_1 | 0, 9089 | 0, 13238 | 0, $6_1 + 16 | 0 | 0);
     }
     label$11 : {
      if (!((HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
      $147_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
      HEAP32[$6_1 >> 2] = $267(HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
      $396($147_1 | 0, 9090 | 0, 13238 | 0, $6_1 | 0);
     }
    }
    HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
    HEAP32[($6_1 + 80 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
    $165_1 = 0;
    label$12 : {
     if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
     $165_1 = (HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0);
    }
    if ($165_1 & 1 | 0) {
     continue label$5
    }
    break label$5;
   };
  }
  global$0 = $6_1 + 128 | 0;
  return;
 }
 
 function $84($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $32_1 = 0, $35_1 = 0, $72_1 = 0, $107_1 = 0, $66_1 = 0, $98_1 = 0, $104_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = $347(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $353(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, $7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 60 | 0) >> 2] = $80(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 48 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $32_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $32_1 + 4 | 0;
     $35_1 = HEAP32[$32_1 >> 2] | 0;
     HEAP32[($6_1 + 48 | 0) >> 2] = $35_1;
     if (!(($35_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($6_1 + 40 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     label$4 : {
      if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[(((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     }
     continue label$3;
    };
   }
  }
  $348($6_1 + 60 | 0 | 0);
  $66_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
  $396($66_1 | 0, 9086 | 0, 13238 | 0, $6_1 + 16 | 0 | 0);
  $72_1 = 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = $72_1;
  label$5 : {
   if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) != ($72_1 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($6_1 + 32 | 0) >> 2] = 0;
   HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = $337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     label$8 : {
      if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      $98_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
      HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
      $396($98_1 | 0, 9087 | 0, 13238 | 0, $6_1 | 0);
     }
     $104_1 = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0;
     $107_1 = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $107_1;
     HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[($104_1 + ($107_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$7;
    };
   }
  }
  $348($6_1 + 56 | 0 | 0);
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $85($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $32_1 = 0, $35_1 = 0, $82_1 = 0, $95_1 = 0, $108_1 = 0, $111_1 = 0, $136_1 = 0, $147_1 = 0, $150_1 = 0, $159_1 = 0, $172_1 = 0, $175_1 = 0, $198_1 = 0, $235_1 = 0, $260_1 = 0, $300_1 = 0, $232_1 = 0, $242_1 = 0, $243_1 = 0, $252_1 = 0, $254_1 = 0, $297_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($6_1 + 72 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $347(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) | 0;
  $353(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, $7_1 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 60 | 0) >> 2] = $80(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 36 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $32_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $32_1 + 4 | 0;
     $35_1 = HEAP32[$32_1 >> 2] | 0;
     HEAP32[($6_1 + 36 | 0) >> 2] = $35_1;
     if (!(($35_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($6_1 + 28 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     label$4 : {
      if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[(((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     }
     continue label$3;
    };
   }
  }
  label$5 : {
   label$6 : {
    if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
     break label$6
    }
    if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
     break label$6
    }
    if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
     break label$5
    }
   }
   label$7 : {
    if (!((HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
    label$8 : while (1) {
     $82_1 = 0;
     label$9 : {
      if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      $82_1 = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$10 : {
      if (!($82_1 & 1 | 0)) {
       break label$10
      }
      label$11 : {
       label$12 : {
        if (HEAP32[($6_1 + 80 | 0) >> 2] | 0) {
         break label$12
        }
        if (!($100(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0)) {
         break label$12
        }
        break label$11;
       }
       $95_1 = 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $95_1;
       label$13 : {
        if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($95_1 | 0) & 1 | 0)) {
         break label$13
        }
        HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
        label$14 : {
         label$15 : while (1) {
          $108_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
          HEAP32[($6_1 + 40 | 0) >> 2] = $108_1 + 4 | 0;
          $111_1 = HEAP32[$108_1 >> 2] | 0;
          HEAP32[($6_1 + 44 | 0) >> 2] = $111_1;
          if (!(($111_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$14
          }
          HEAP32[($6_1 + 28 | 0) >> 2] = $267(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0;
          label$16 : {
           if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
            break label$16
           }
           HEAP32[(((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
          }
          continue label$15;
         };
        }
       }
      }
      HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$8;
     }
     break label$8;
    };
   }
   $136_1 = 0;
   HEAP32[($6_1 + 52 | 0) >> 2] = $136_1;
   label$17 : {
    if (!((HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) != ($136_1 | 0) & 1 | 0)) {
     break label$17
    }
    HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + 4 | 0;
    label$18 : {
     label$19 : while (1) {
      $147_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
      HEAP32[($6_1 + 48 | 0) >> 2] = $147_1 + 4 | 0;
      $150_1 = HEAP32[$147_1 >> 2] | 0;
      HEAP32[($6_1 + 52 | 0) >> 2] = $150_1;
      if (!(($150_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$18
      }
      label$20 : {
       if (HEAP32[($6_1 + 80 | 0) >> 2] | 0) {
        break label$20
       }
       if (!($100(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0)) {
        break label$20
       }
       continue label$19;
      }
      $159_1 = 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $159_1;
      label$21 : {
       if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($159_1 | 0) & 1 | 0)) {
        break label$21
       }
       HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
       label$22 : {
        label$23 : while (1) {
         $172_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
         HEAP32[($6_1 + 40 | 0) >> 2] = $172_1 + 4 | 0;
         $175_1 = HEAP32[$172_1 >> 2] | 0;
         HEAP32[($6_1 + 44 | 0) >> 2] = $175_1;
         if (!(($175_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$22
         }
         HEAP32[($6_1 + 28 | 0) >> 2] = $267(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0;
         label$24 : {
          if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$24
          }
          HEAP32[(((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
         }
         continue label$23;
        };
       }
      }
      continue label$19;
     };
    }
   }
  }
  $198_1 = 0;
  $348($6_1 + 60 | 0 | 0);
  HEAP32[($6_1 + 44 | 0) >> 2] = $198_1;
  label$25 : {
   if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) != ($198_1 | 0) & 1 | 0)) {
    break label$25
   }
   HEAP32[($6_1 + 68 | 0) >> 2] = 0;
   HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($6_1 + 64 | 0) >> 2] = $337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
   label$26 : {
    label$27 : while (1) {
     if (!((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$26
     }
     label$28 : {
      if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$28
      }
      HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 1 | 0;
     }
     $232_1 = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0;
     $235_1 = (HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = $235_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($232_1 + ($235_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$27;
    };
   }
  }
  label$29 : {
   label$30 : {
    if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
     break label$30
    }
    $242_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
    $243_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = $243_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = 88344;
    HEAP32[$6_1 >> 2] = 88604;
    $396($242_1 | 0, 9218 | 0, 14154 | 0, $6_1 | 0);
    break label$29;
   }
   $252_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
   $254_1 = HEAP32[(0 + 88316 | 0) >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $254_1;
   $396($252_1 | 0, 9219 | 0, 13361 | 0, $6_1 + 16 | 0 | 0);
  }
  $260_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $260_1;
  label$31 : {
   if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) != ($260_1 | 0) & 1 | 0)) {
    break label$31
   }
   HEAP32[($6_1 + 68 | 0) >> 2] = 0;
   HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($6_1 + 64 | 0) >> 2] = $337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
   label$32 : {
    label$33 : while (1) {
     if (!((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$32
     }
     label$34 : {
      if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$34
      }
      label$35 : {
       if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
        break label$35
       }
       $396(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0, 9220 | 0, 13358 | 0, 0 | 0);
      }
      $121(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0);
     }
     $297_1 = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0;
     $300_1 = (HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = $300_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($297_1 + ($300_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$33;
    };
   }
  }
  label$36 : {
   if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
    break label$36
   }
   $396(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0, 9221 | 0, 14711 | 0, 0 | 0);
  }
  $348($6_1 + 56 | 0 | 0);
  global$0 = $6_1 + 96 | 0;
  return;
 }
 
 function $86($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $12_1 = 0, $28_1 = 0, $53_1 = 0, $104_1 = 0, $115_1 = 0, $118_1 = 0, $139_1 = 0, $57_1 = 0, $86_1 = 0, $99_1 = 0, $143_1 = 0, $172_1 = 0, $185_1 = 0;
  $11_1 = global$0 - 80 | 0;
  global$0 = $11_1;
  $12_1 = 0;
  HEAP32[($11_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 52 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 48 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $12_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $12_1;
  HEAP32[($11_1 + 24 | 0) >> 2] = $12_1;
  HEAP32[($11_1 + 20 | 0) >> 2] = $12_1;
  HEAP32[($11_1 + 16 | 0) >> 2] = $12_1;
  HEAP32[($11_1 + 12 | 0) >> 2] = $12_1;
  label$1 : {
   if (!((HEAP32[($11_1 + 76 | 0) >> 2] | 0 | 0) != ($12_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($11_1 + 40 | 0) >> 2] = HEAP32[($11_1 + 76 | 0) >> 2] | 0;
   label$2 : while (1) {
    $28_1 = 0;
    label$3 : {
     if (!((HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $28_1 = (HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$4 : {
     if (!($28_1 & 1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
          break label$8
         }
         if (HEAP32[(0 + 90176 | 0) >> 2] | 0) {
          break label$7
         }
        }
        if (HEAP32[($11_1 + 68 | 0) >> 2] | 0) {
         break label$6
        }
        if (!($100(HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) | 0)) {
         break label$6
        }
       }
       HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = 0;
       break label$5;
      }
      $53_1 = (HEAP32[($11_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($11_1 + 32 | 0) >> 2] = $53_1;
      HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = $53_1;
      $57_1 = $337(HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + $57_1 | 0;
      label$9 : {
       label$10 : {
        if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
         break label$10
        }
        HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        label$11 : {
         if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0)) {
          break label$11
         }
         if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
          break label$11
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = (HEAP32[($11_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        }
        break label$9;
       }
       $86_1 = $337(HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($11_1 + 24 | 0) >> 2] = (HEAP32[($11_1 + 24 | 0) >> 2] | 0) + $86_1 | 0;
      }
      label$12 : {
       if (!((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       $99_1 = $337(HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($11_1 + 16 | 0) >> 2] = (HEAP32[($11_1 + 16 | 0) >> 2] | 0) + $99_1 | 0;
      }
     }
     HEAP32[($11_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
  }
  $104_1 = 0;
  HEAP32[($11_1 + 40 | 0) >> 2] = $104_1;
  label$13 : {
   if (!((HEAP32[($11_1 + 72 | 0) >> 2] | 0 | 0) != ($104_1 | 0) & 1 | 0)) {
    break label$13
   }
   HEAP32[($11_1 + 36 | 0) >> 2] = (HEAP32[($11_1 + 72 | 0) >> 2] | 0) + 4 | 0;
   label$14 : {
    label$15 : while (1) {
     $115_1 = HEAP32[($11_1 + 36 | 0) >> 2] | 0;
     HEAP32[($11_1 + 36 | 0) >> 2] = $115_1 + 4 | 0;
     $118_1 = HEAP32[$115_1 >> 2] | 0;
     HEAP32[($11_1 + 40 | 0) >> 2] = $118_1;
     if (!(($118_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$14
     }
     label$16 : {
      label$17 : {
       label$18 : {
        label$19 : {
         if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
          break label$19
         }
         if (HEAP32[(0 + 90176 | 0) >> 2] | 0) {
          break label$18
         }
        }
        if (HEAP32[($11_1 + 68 | 0) >> 2] | 0) {
         break label$17
        }
        if (!($100(HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) | 0)) {
         break label$17
        }
       }
       HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = 0;
       break label$16;
      }
      $139_1 = (HEAP32[($11_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($11_1 + 32 | 0) >> 2] = $139_1;
      HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = $139_1;
      $143_1 = $337(HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + $143_1 | 0;
      label$20 : {
       label$21 : {
        if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
         break label$21
        }
        HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        label$22 : {
         if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0)) {
          break label$22
         }
         if (!(((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
          break label$22
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = (HEAP32[($11_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        }
        break label$20;
       }
       $172_1 = $337(HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($11_1 + 24 | 0) >> 2] = (HEAP32[($11_1 + 24 | 0) >> 2] | 0) + $172_1 | 0;
      }
      label$23 : {
       if (!((HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$23
       }
       $185_1 = $337(HEAP32[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($11_1 + 16 | 0) >> 2] = (HEAP32[($11_1 + 16 | 0) >> 2] | 0) + $185_1 | 0;
      }
     }
     continue label$15;
    };
   }
  }
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 32 | 0) >> 2] | 0) + 1 | 0) | 0;
  HEAP32[(HEAP32[($11_1 + 64 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 32 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($11_1 + 60 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($11_1 + 56 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 20 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($11_1 + 52 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($11_1 + 48 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($11_1 + 44 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
  global$0 = $11_1 + 80 | 0;
  return;
 }
 
 function $87($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $40_1 = 0, $63_1 = 0, $66_1 = 0, $92_1 = 0, $102_1 = 0, $115_1 = 0, $118_1 = 0, $129_1 = 0, $140_1 = 0, $143_1 = 0, $149_1 = 0, $162_1 = 0, $165_1 = 0, $174_1 = 0, $209_1 = 0, $223_1 = 0, $226_1 = 0, $239_1 = 0, $259_1 = 0, $272_1 = 0, $291_1 = 0, $34_1 = 0, $203_1 = 0, $232_1 = 0, $265_1 = 0, $288_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 148 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 144 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
  $86(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0, $6_1 + 140 | 0 | 0, $6_1 + 136 | 0 | 0, $6_1 + 128 | 0 | 0, $6_1 + 132 | 0 | 0, $6_1 + 120 | 0 | 0, $6_1 + 116 | 0 | 0);
  $34_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
  HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[($6_1 + 100 | 0) >> 2] | 0;
  $396($34_1 | 0, 9248 | 0, 13238 | 0, $6_1 + 48 | 0 | 0);
  $40_1 = 0;
  $294();
  HEAP32[($6_1 + 112 | 0) >> 2] = $80(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 108 | 0) >> 2] = $347(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = $347(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0;
  $353(HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, $40_1 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0);
  $353(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, $40_1 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 96 | 0) >> 2] = $40_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0) != ($40_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 92 | 0) >> 2] = (HEAP32[($6_1 + 112 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $63_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     HEAP32[($6_1 + 92 | 0) >> 2] = $63_1 + 4 | 0;
     $66_1 = HEAP32[$63_1 >> 2] | 0;
     HEAP32[($6_1 + 96 | 0) >> 2] = $66_1;
     if (!(($66_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $274(HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0);
     continue label$3;
    };
   }
  }
  label$4 : {
   if (!((HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 80 | 0) >> 2] = HEAP32[($6_1 + 152 | 0) >> 2] | 0;
   label$5 : while (1) {
    $92_1 = 0;
    label$6 : {
     if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $92_1 = (HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$7 : {
     if (!($92_1 & 1 | 0)) {
      break label$7
     }
     $102_1 = 0;
     HEAP32[($6_1 + 64 | 0) >> 2] = $102_1;
     label$8 : {
      if (!((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($102_1 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP32[($6_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
      label$9 : {
       label$10 : while (1) {
        $115_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
        HEAP32[($6_1 + 60 | 0) >> 2] = $115_1 + 4 | 0;
        $118_1 = HEAP32[$115_1 >> 2] | 0;
        HEAP32[($6_1 + 64 | 0) >> 2] = $118_1;
        if (!(($118_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$9
        }
        $274(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0);
        continue label$10;
       };
      }
     }
     HEAP32[($6_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$5;
    }
    break label$5;
   };
  }
  $129_1 = 0;
  HEAP32[($6_1 + 80 | 0) >> 2] = $129_1;
  label$11 : {
   if (!((HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) != ($129_1 | 0) & 1 | 0)) {
    break label$11
   }
   HEAP32[($6_1 + 76 | 0) >> 2] = (HEAP32[($6_1 + 148 | 0) >> 2] | 0) + 4 | 0;
   label$12 : {
    label$13 : while (1) {
     $140_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 76 | 0) >> 2] = $140_1 + 4 | 0;
     $143_1 = HEAP32[$140_1 >> 2] | 0;
     HEAP32[($6_1 + 80 | 0) >> 2] = $143_1;
     if (!(($143_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
     $149_1 = 0;
     HEAP32[($6_1 + 64 | 0) >> 2] = $149_1;
     label$14 : {
      if (!((HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($149_1 | 0) & 1 | 0)) {
       break label$14
      }
      HEAP32[($6_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
      label$15 : {
       label$16 : while (1) {
        $162_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
        HEAP32[($6_1 + 60 | 0) >> 2] = $162_1 + 4 | 0;
        $165_1 = HEAP32[$162_1 >> 2] | 0;
        HEAP32[($6_1 + 64 | 0) >> 2] = $165_1;
        if (!(($165_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$15
        }
        $274(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0);
        continue label$16;
       };
      }
     }
     continue label$13;
    };
   }
  }
  $174_1 = 0;
  HEAP32[($6_1 + 96 | 0) >> 2] = $174_1;
  label$17 : {
   if (!((HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0) != ($174_1 | 0) & 1 | 0)) {
    break label$17
   }
   HEAP32[($6_1 + 88 | 0) >> 2] = 0;
   HEAP32[($6_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($6_1 + 84 | 0) >> 2] = $337(HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0) | 0;
   label$18 : {
    label$19 : while (1) {
     if (!((HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$18
     }
     label$20 : {
      label$21 : {
       if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$21
       }
       HEAP32[($6_1 + 124 | 0) >> 2] = $337(HEAP32[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
       $203_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
       HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
       $396($203_1 | 0, 9249 | 0, 13231 | 0, $6_1 + 16 | 0 | 0);
       $209_1 = 0;
       $108(HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0);
       HEAP32[($6_1 + 72 | 0) >> 2] = $209_1;
       label$22 : {
        if (!((HEAP32[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($209_1 | 0) & 1 | 0)) {
         break label$22
        }
        HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
        label$23 : {
         label$24 : while (1) {
          $223_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
          HEAP32[($6_1 + 68 | 0) >> 2] = $223_1 + 4 | 0;
          $226_1 = HEAP32[$223_1 >> 2] | 0;
          HEAP32[($6_1 + 72 | 0) >> 2] = $226_1;
          if (!(($226_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$23
          }
          $232_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
          label$25 : {
           label$26 : {
            if (!(HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
             break label$26
            }
            $239_1 = (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) - 1 | 0;
            break label$25;
           }
           $239_1 = 0 - (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) | 0;
          }
          HEAP32[$6_1 >> 2] = $239_1;
          $396($232_1 | 0, 9250 | 0, 13234 | 0, $6_1 | 0);
          continue label$24;
         };
        }
       }
       $396(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0, 9251 | 0, 13226 | 0, 0 | 0);
       break label$20;
      }
      $259_1 = HEAP32[(((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($6_1 + 80 | 0) >> 2] = $259_1;
      label$27 : {
       label$28 : {
        if (!(($259_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$28
        }
        $265_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
        label$29 : {
         label$30 : {
          if (!(HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
           break label$30
          }
          $272_1 = (HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) - 1 | 0;
          break label$29;
         }
         $272_1 = 0 - (HEAP32[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) | 0;
        }
        HEAP32[($6_1 + 32 | 0) >> 2] = $272_1;
        $396($265_1 | 0, 9252 | 0, 17956 | 0, $6_1 + 32 | 0 | 0);
        break label$27;
       }
       $396(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0, 9253 | 0, 13228 | 0, 0 | 0);
      }
     }
     $288_1 = (HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 4 | 0;
     $291_1 = (HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 88 | 0) >> 2] = $291_1;
     HEAP32[($6_1 + 96 | 0) >> 2] = HEAP32[($288_1 + ($291_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$19;
    };
   }
  }
  $348($6_1 + 104 | 0 | 0);
  $348($6_1 + 108 | 0 | 0);
  $348($6_1 + 112 | 0 | 0);
  global$0 = $6_1 + 160 | 0;
  return;
 }
 
 function $88($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $47_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $301_1 = 0, $63_1 = 0, $66_1 = 0, $104_1 = 0, $146_1 = 0, $160_1 = 0, $188_1 = 0, $216_1 = 0, $231_1 = 0, $242_1 = 0, $245_1 = 0, $269_1 = 0, $282_1 = 0, $308_1 = 0, $322_1 = 0, $325_1 = 0, $365_1 = 0, $378_1 = 0, $381_1 = 0, $435_1 = 0, $448_1 = 0, $451_1 = 0, $492_1 = 0, $101_1 = 0, $116_1 = 0, $117_1 = 0, $123_1 = 0, $127_1 = 0, $128_1 = 0, $149_1 = 0, $163_1 = 0, $215_1 = 0, $268_1 = 0, $359_1 = 0, $397_1 = 0, $404_1 = 0, $405_1 = 0, $412_1 = 0, $422_1 = 0, $461_1 = 0, $476_1 = 0, $489_1 = 0;
  $7_1 = global$0 - 288 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  HEAP32[($7_1 + 284 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 276 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 268 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 256 | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 244 | 0) >> 2] = 1;
  HEAP32[($7_1 + 204 | 0) >> 2] = HEAP32[(0 + 90060 | 0) >> 2] | 0;
  HEAP32[($7_1 + 216 | 0) >> 2] = $107(HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 260 | 0 | 0) | 0;
  HEAP32[($7_1 + 212 | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) != ($8_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 240 | 0) >> 2] = 0;
   HEAP32[($7_1 + 212 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($7_1 + 236 | 0) >> 2] = $337(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      $47_1 = 0;
      HEAP32[($7_1 + 256 | 0) >> 2] = (HEAP32[($7_1 + 256 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($7_1 + 248 | 0) >> 2] = $47_1;
      HEAP32[($7_1 + 252 | 0) >> 2] = $47_1;
      HEAP32[($7_1 + 224 | 0) >> 2] = $47_1;
      label$5 : {
       if (!((HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($47_1 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($7_1 + 220 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
       label$6 : {
        label$7 : while (1) {
         $63_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
         HEAP32[($7_1 + 220 | 0) >> 2] = $63_1 + 4 | 0;
         $66_1 = HEAP32[$63_1 >> 2] | 0;
         HEAP32[($7_1 + 224 | 0) >> 2] = $66_1;
         if (!(($66_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$6
         }
         label$8 : {
          label$9 : {
           if (HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) {
            break label$9
           }
           HEAP32[($7_1 + 248 | 0) >> 2] = 1;
           break label$8;
          }
          label$10 : {
           if (!((HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 204 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$10
           }
           HEAP32[($7_1 + 252 | 0) >> 2] = (HEAP32[($7_1 + 252 | 0) >> 2] | 0) + 1 | 0;
          }
         }
         continue label$7;
        };
       }
      }
      label$11 : {
       if (!(HEAP32[($7_1 + 248 | 0) >> 2] | 0)) {
        break label$11
       }
       if (HEAP32[($7_1 + 252 | 0) >> 2] | 0) {
        break label$11
       }
       HEAP32[(((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($7_1 + 240 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
       HEAP32[($7_1 + 256 | 0) >> 2] = (HEAP32[($7_1 + 256 | 0) >> 2] | 0) + -1 | 0;
      }
     }
     $101_1 = (HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 4 | 0;
     $104_1 = (HEAP32[($7_1 + 240 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($7_1 + 240 | 0) >> 2] = $104_1;
     HEAP32[($7_1 + 212 | 0) >> 2] = HEAP32[($101_1 + ($104_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  label$12 : {
   label$13 : {
    if (!((HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
     break label$13
    }
    $116_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
    $117_1 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
    HEAP32[($7_1 + 180 | 0) >> 2] = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
    HEAP32[($7_1 + 176 | 0) >> 2] = $117_1;
    $396($116_1 | 0, 9254 | 0, 17962 | 0, $7_1 + 176 | 0 | 0);
    break label$12;
   }
   $123_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
   $127_1 = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
   $128_1 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
   HEAP32[($7_1 + 200 | 0) >> 2] = $337(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 196 | 0) >> 2] = $128_1;
   HEAP32[($7_1 + 192 | 0) >> 2] = $127_1;
   $396($123_1 | 0, 9255 | 0, 18029 | 0, $7_1 + 192 | 0 | 0);
  }
  label$14 : {
   label$15 : {
    if (!((HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
     break label$15
    }
    HEAP32[($7_1 + 264 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
    label$16 : {
     label$17 : while (1) {
      $146_1 = HEAP32[($7_1 + 264 | 0) >> 2] | 0;
      HEAP32[($7_1 + 264 | 0) >> 2] = $146_1 + -1 | 0;
      if (!$146_1) {
       break label$16
      }
      $149_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $396($149_1 | 0, 9256 | 0, 13218 | 0, $7_1 | 0);
      continue label$17;
     };
    }
    $396(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0, 9257 | 0, 18041 | 0, 0 | 0);
    break label$14;
   }
   HEAP32[($7_1 + 264 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
   label$18 : {
    label$19 : while (1) {
     $160_1 = HEAP32[($7_1 + 264 | 0) >> 2] | 0;
     HEAP32[($7_1 + 264 | 0) >> 2] = $160_1 + -1 | 0;
     if (!$160_1) {
      break label$18
     }
     $163_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
     i64toi32_i32$0 = -1071369290;
     HEAP32[($7_1 + 160 | 0) >> 2] = 1168231105;
     HEAP32[($7_1 + 164 | 0) >> 2] = i64toi32_i32$0;
     $396($163_1 | 0, 9258 | 0, 13218 | 0, $7_1 + 160 | 0 | 0);
     continue label$19;
    };
   }
   $396(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0, 9259 | 0, 13226 | 0, 0 | 0);
  }
  label$20 : {
   if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$20
   }
   HEAP32[($7_1 + 232 | 0) >> 2] = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
   label$21 : while (1) {
    $188_1 = 0;
    label$22 : {
     if (!((HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$22
     }
     $188_1 = (HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$23 : {
     if (!($188_1 & 1 | 0)) {
      break label$23
     }
     label$24 : {
      if (!(HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
       break label$24
      }
      if (!((HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 204 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$24
      }
      label$25 : {
       if (!((HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
        break label$25
       }
       $215_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
       $216_1 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
       HEAP32[($7_1 + 244 | 0) >> 2] = $216_1 + 1 | 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($7_1 + 16 | 0) >> 2] = $216_1;
       $396($215_1 | 0, 9260 | 0, 18065 | 0, $7_1 + 16 | 0 | 0);
      }
      $109(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($7_1 + 232 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$21;
    }
    break label$21;
   };
  }
  $231_1 = 0;
  HEAP32[($7_1 + 232 | 0) >> 2] = $231_1;
  label$26 : {
   if (!((HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0) != ($231_1 | 0) & 1 | 0)) {
    break label$26
   }
   HEAP32[($7_1 + 228 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 4 | 0;
   label$27 : {
    label$28 : while (1) {
     $242_1 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     HEAP32[($7_1 + 228 | 0) >> 2] = $242_1 + 4 | 0;
     $245_1 = HEAP32[$242_1 >> 2] | 0;
     HEAP32[($7_1 + 232 | 0) >> 2] = $245_1;
     if (!(($245_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$27
     }
     label$29 : {
      if (!(HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
       break label$29
      }
      if (!((HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 204 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$29
      }
      label$30 : {
       if (!((HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
        break label$30
       }
       $268_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
       $269_1 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
       HEAP32[($7_1 + 244 | 0) >> 2] = $269_1 + 1 | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($7_1 + 32 | 0) >> 2] = $269_1;
       $396($268_1 | 0, 9261 | 0, 18065 | 0, $7_1 + 32 | 0 | 0);
      }
      $109(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0);
     }
     continue label$28;
    };
   }
  }
  $282_1 = 0;
  HEAP32[($7_1 + 212 | 0) >> 2] = $282_1;
  label$31 : {
   if (!((HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) != ($282_1 | 0) & 1 | 0)) {
    break label$31
   }
   HEAP32[($7_1 + 240 | 0) >> 2] = 0;
   HEAP32[($7_1 + 212 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($7_1 + 236 | 0) >> 2] = $337(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0;
   label$32 : {
    label$33 : while (1) {
     if (!((HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$32
     }
     $301_1 = 0;
     HEAP32[($7_1 + 252 | 0) >> 2] = $301_1;
     HEAP32[($7_1 + 248 | 0) >> 2] = $301_1;
     label$34 : {
      if (!((HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0) != ($301_1 | 0) & 1 | 0)) {
       break label$34
      }
      $308_1 = 0;
      $108(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0);
      HEAP32[($7_1 + 224 | 0) >> 2] = $308_1;
      label$35 : {
       if (!((HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($308_1 | 0) & 1 | 0)) {
        break label$35
       }
       HEAP32[($7_1 + 220 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
       label$36 : {
        label$37 : while (1) {
         $322_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
         HEAP32[($7_1 + 220 | 0) >> 2] = $322_1 + 4 | 0;
         $325_1 = HEAP32[$322_1 >> 2] | 0;
         HEAP32[($7_1 + 224 | 0) >> 2] = $325_1;
         if (!(($325_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$36
         }
         label$38 : {
          label$39 : {
           if (HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) {
            break label$39
           }
           HEAP32[($7_1 + 248 | 0) >> 2] = 1;
           break label$38;
          }
          label$40 : {
           if (!((HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 204 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$40
           }
           HEAP32[($7_1 + 252 | 0) >> 2] = (HEAP32[($7_1 + 252 | 0) >> 2] | 0) + 1 | 0;
          }
         }
         continue label$37;
        };
       }
      }
     }
     label$41 : {
      label$42 : {
       if (!((HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
        break label$42
       }
       label$43 : {
        label$44 : {
         if (!((HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$44
         }
         $359_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
         $396($359_1 | 0, 9262 | 0, 13231 | 0, $7_1 + 80 | 0 | 0);
         $365_1 = 0;
         HEAP32[($7_1 + 224 | 0) >> 2] = $365_1;
         label$45 : {
          if (!((HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($365_1 | 0) & 1 | 0)) {
           break label$45
          }
          HEAP32[($7_1 + 220 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
          label$46 : {
           label$47 : while (1) {
            $378_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
            HEAP32[($7_1 + 220 | 0) >> 2] = $378_1 + 4 | 0;
            $381_1 = HEAP32[$378_1 >> 2] | 0;
            HEAP32[($7_1 + 224 | 0) >> 2] = $381_1;
            if (!(($381_1 | 0) != (0 | 0) & 1 | 0)) {
             break label$46
            }
            label$48 : {
             if (!(HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
              break label$48
             }
             if (!((HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 204 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
              break label$48
             }
             $397_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
             HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
             $396($397_1 | 0, 9263 | 0, 13234 | 0, $7_1 + 48 | 0 | 0);
            }
            continue label$47;
           };
          }
         }
         $404_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
         $405_1 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
         HEAP32[($7_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         HEAP32[($7_1 + 64 | 0) >> 2] = $405_1;
         $396($404_1 | 0, 9264 | 0, 18075 | 0, $7_1 + 64 | 0 | 0);
         break label$43;
        }
        $412_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
        HEAP32[($7_1 + 96 | 0) >> 2] = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
        $396($412_1 | 0, 9265 | 0, 18088 | 0, $7_1 + 96 | 0 | 0);
       }
       break label$41;
      }
      label$49 : {
       if (!(HEAP32[($7_1 + 248 | 0) >> 2] | 0)) {
        break label$49
       }
       HEAP32[($7_1 + 252 | 0) >> 2] = (HEAP32[($7_1 + 252 | 0) >> 2] | 0) + 1 | 0;
      }
      $422_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
      HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
      $396($422_1 | 0, 9266 | 0, 13231 | 0, $7_1 + 144 | 0 | 0);
      label$50 : {
       if (!((HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$50
       }
       $435_1 = 0;
       HEAP32[($7_1 + 224 | 0) >> 2] = $435_1;
       label$51 : {
        if (!((HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($435_1 | 0) & 1 | 0)) {
         break label$51
        }
        HEAP32[($7_1 + 220 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
        label$52 : {
         label$53 : while (1) {
          $448_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
          HEAP32[($7_1 + 220 | 0) >> 2] = $448_1 + 4 | 0;
          $451_1 = HEAP32[$448_1 >> 2] | 0;
          HEAP32[($7_1 + 224 | 0) >> 2] = $451_1;
          if (!(($451_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$52
          }
          label$54 : {
           label$55 : {
            if (HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) {
             break label$55
            }
            label$56 : {
             if (!(HEAP32[($7_1 + 248 | 0) >> 2] | 0)) {
              break label$56
             }
             HEAP32[($7_1 + 248 | 0) >> 2] = 0;
             $461_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
             HEAP32[($7_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
             $396($461_1 | 0, 9267 | 0, 13234 | 0, $7_1 + 112 | 0 | 0);
            }
            break label$54;
           }
           label$57 : {
            if (!((HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 204 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
             break label$57
            }
            $476_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
            HEAP32[($7_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 224 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
            $396($476_1 | 0, 9268 | 0, 13234 | 0, $7_1 + 128 | 0 | 0);
           }
          }
          continue label$53;
         };
        }
       }
      }
      $396(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0, 9269 | 0, 13226 | 0, 0 | 0);
     }
     $489_1 = (HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 4 | 0;
     $492_1 = (HEAP32[($7_1 + 240 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($7_1 + 240 | 0) >> 2] = $492_1;
     HEAP32[($7_1 + 212 | 0) >> 2] = HEAP32[($489_1 + ($492_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$33;
    };
   }
  }
  label$58 : {
   if (!((HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
    break label$58
   }
   $396(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0, 9270 | 0, 14708 | 0, 0 | 0);
  }
  $348($7_1 + 216 | 0 | 0);
  global$0 = $7_1 + 288 | 0;
  return;
 }
 
 function $89($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $24_1 = 0, $193_1 = 0, $214_1 = 0, $232_1 = 0, $243_1 = 0, $246_1 = 0, $312_1 = 0, $333_1 = 0, $404_1 = 0, $417_1 = 0, $420_1 = 0, $589 = 0, $600 = 0, $603 = 0, $632 = 0, $668 = 0, $681 = 0, $684 = 0, $696 = 0, $709 = 0, $712 = 0, $726 = 0, $737 = 0, $740 = 0, $772 = 0, $785 = 0, $788 = 0, $800 = 0, $813 = 0, $816 = 0, $1060 = 0, $1073 = 0, $1076 = 0, $1113 = 0, $1181 = 0, $26_1 = 0, $32_1 = 0, $41_1 = 0, $43_1 = 0, $163_1 = 0, $178_1 = 0, $262_1 = 0, $297_1 = 0, $298_1 = 0, $304_1 = 0, $305_1 = 0, $453_1 = 0, $457_1 = 0, $836 = 0, $862 = 0, $868 = 0, $878 = 0, $879 = 0, $890 = 0, $894 = 0, $944 = 0, $950 = 0, $952 = 0, $958 = 0, $983 = 0, $984 = 0, $990 = 0, $991 = 0, $1011 = 0, $1012 = 0, $1018 = 0, $1021 = 0, $1138 = 0, $1148 = 0, $1149 = 0, $1158 = 0, $1162 = 0, $1168 = 0, $1175 = 0;
  $7_1 = global$0 - 464 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 460 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 456 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 452 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 448 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 444 | 0) >> 2] = $4_1;
  $8_1 = 0;
  HEAP32[($8_1 + 90224 | 0) >> 2] = $8_1;
  $86(HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 448 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 444 | 0) >> 2] | 0 | 0, $7_1 + 440 | 0 | 0, $7_1 + 436 | 0 | 0, $7_1 + 428 | 0 | 0, $7_1 + 432 | 0 | 0, $7_1 + 424 | 0 | 0, $7_1 + 420 | 0 | 0);
  $24_1 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($24_1 | 0) {
     case 0:
      break label$1;
     case 1:
      $26_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      $396($26_1 | 0, 9033 | 0, 13238 | 0, $7_1 + 16 | 0 | 0);
      break label$1;
     case 3:
      $32_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      $396($32_1 | 0, 9034 | 0, 13238 | 0, $7_1 + 32 | 0 | 0);
      break label$1;
     case 4:
      label$22 : {
       if (HEAP32[(0 + 90104 | 0) >> 2] | 0) {
        break label$22
       }
       $285(2 | 0);
      }
      $41_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      $43_1 = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      HEAP32[($7_1 + 48 | 0) >> 2] = $43_1;
      $396($41_1 | 0, 9035 | 0, 13361 | 0, $7_1 + 48 | 0 | 0);
      break label$1;
     case 5:
     case 6:
      label$23 : {
       if (!((HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$23
       }
       $127(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 13368 | 0, HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 448 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 444 | 0) >> 2] | 0 | 0);
      }
      break label$1;
     case 7:
      label$24 : {
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
        break label$24
       }
       break label$2;
      }
      label$25 : {
       if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
        break label$25
       }
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
        break label$25
       }
       break label$2;
      }
      label$26 : {
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
        break label$26
       }
       label$27 : {
        if (HEAP32[(0 + 88112 | 0) >> 2] | 0) {
         break label$27
        }
        if (!(HEAP32[(0 + 87788 | 0) >> 2] | 0)) {
         break label$26
        }
       }
       $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7049 | 0, 13390 | 0, 0 | 0);
      }
      label$28 : {
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$28
       }
       label$29 : {
        if (HEAP32[(0 + 87972 | 0) >> 2] | 0) {
         break label$29
        }
        if (HEAP32[(0 + 87988 | 0) >> 2] | 0) {
         break label$29
        }
        if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$28
        }
        if (!(HEAP32[(0 + 87952 | 0) >> 2] | 0)) {
         break label$28
        }
       }
       $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7050 | 0, 13465 | 0, 0 | 0);
      }
      label$30 : {
       if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$30
       }
       if (!(HEAP32[(0 + 88116 | 0) >> 2] | 0)) {
        break label$30
       }
       $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7051 | 0, 13547 | 0, 0 | 0);
      }
      label$31 : {
       if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$31
       }
       if (!(HEAP32[(0 + 87788 | 0) >> 2] | 0)) {
        break label$31
       }
       if (!(HEAP32[(0 + 87980 | 0) >> 2] | 0)) {
        break label$31
       }
       $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7052 | 0, 13606 | 0, 0 | 0);
      }
      label$32 : {
       label$33 : {
        if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$33
        }
        $163_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
        HEAP32[($7_1 + 116 | 0) >> 2] = 88344;
        HEAP32[($7_1 + 112 | 0) >> 2] = 88604;
        $396($163_1 | 0, 9036 | 0, 13655 | 0, $7_1 + 112 | 0 | 0);
        break label$32;
       }
       label$34 : {
        label$35 : {
         if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
          break label$35
         }
         $178_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
         HEAP32[($7_1 + 132 | 0) >> 2] = 88344;
         HEAP32[($7_1 + 128 | 0) >> 2] = 88604;
         $396($178_1 | 0, 9037 | 0, 13697 | 0, $7_1 + 128 | 0 | 0);
         break label$34;
        }
        label$36 : {
         if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
          break label$36
         }
         $193_1 = 0;
         HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($7_1 + 412 | 0) >> 2] = $193_1;
         label$37 : {
          if (!((HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0) != ($193_1 | 0) & 1 | 0)) {
           break label$37
          }
          HEAP32[($7_1 + 408 | 0) >> 2] = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
          label$38 : while (1) {
           $214_1 = 0;
           label$39 : {
            if (!((HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$39
            }
            $214_1 = (HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
           }
           label$40 : {
            if (!($214_1 & 1 | 0)) {
             break label$40
            }
            $128(0 | 0, HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0, $7_1 + 412 | 0 | 0, HEAP32[($7_1 + 444 | 0) >> 2] | 0 | 0);
            HEAP32[($7_1 + 408 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
            continue label$38;
           }
           break label$38;
          };
         }
         $232_1 = 0;
         HEAP32[($7_1 + 408 | 0) >> 2] = $232_1;
         label$41 : {
          if (!((HEAP32[($7_1 + 448 | 0) >> 2] | 0 | 0) != ($232_1 | 0) & 1 | 0)) {
           break label$41
          }
          HEAP32[($7_1 + 404 | 0) >> 2] = (HEAP32[($7_1 + 448 | 0) >> 2] | 0) + 4 | 0;
          label$42 : {
           label$43 : while (1) {
            $243_1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
            HEAP32[($7_1 + 404 | 0) >> 2] = $243_1 + 4 | 0;
            $246_1 = HEAP32[$243_1 >> 2] | 0;
            HEAP32[($7_1 + 408 | 0) >> 2] = $246_1;
            if (!(($246_1 | 0) != (0 | 0) & 1 | 0)) {
             break label$42
            }
            $128(0 | 0, HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0, $7_1 + 412 | 0 | 0, HEAP32[($7_1 + 444 | 0) >> 2] | 0 | 0);
            continue label$43;
           };
          }
         }
         HEAP32[(0 + 90400 | 0) >> 2] = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
         HEAP32[(0 + 90220 | 0) >> 2] = 0;
         $262_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
         HEAP32[($7_1 + 148 | 0) >> 2] = 88344;
         HEAP32[($7_1 + 144 | 0) >> 2] = 88604;
         $396($262_1 | 0, 9038 | 0, 13752 | 0, $7_1 + 144 | 0 | 0);
        }
       }
      }
      label$44 : {
       if (!(HEAP32[(0 + 87964 | 0) >> 2] | 0)) {
        break label$44
       }
       HEAP32[(0 + 90224 | 0) >> 2] = (HEAP32[(0 + 90224 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($7_1 + 412 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
       label$45 : {
        if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
         break label$45
        }
        if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
         break label$45
        }
        HEAP32[($7_1 + 412 | 0) >> 2] = (HEAP32[($7_1 + 412 | 0) >> 2] | 0) + -1 | 0;
       }
       label$46 : {
        label$47 : {
         if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
          break label$47
         }
         $297_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
         $298_1 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
         HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = $298_1;
         $396($297_1 | 0, 9039 | 0, 13768 | 0, $7_1 + 80 | 0 | 0);
         break label$46;
        }
        $304_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
        $305_1 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
        HEAP32[($7_1 + 100 | 0) >> 2] = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
        HEAP32[($7_1 + 96 | 0) >> 2] = $305_1;
        $396($304_1 | 0, 9040 | 0, 13783 | 0, $7_1 + 96 | 0 | 0);
       }
       HEAP32[($7_1 + 416 | 0) >> 2] = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
       label$48 : {
        label$49 : while (1) {
         $312_1 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
         HEAP32[($7_1 + 416 | 0) >> 2] = $312_1 + -1 | 0;
         if (!$312_1) {
          break label$48
         }
         label$50 : {
          if ((HEAP32[($7_1 + 416 | 0) >> 2] | 0 | 0) % (20 | 0) | 0) {
           break label$50
          }
          $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9041 | 0, 13226 | 0, 0 | 0);
         }
         $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9042 | 0, 13358 | 0, 0 | 0);
         continue label$49;
        };
       }
       $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9043 | 0, 13797 | 0, 0 | 0);
       HEAP32[($7_1 + 416 | 0) >> 2] = (HEAP32[($7_1 + 412 | 0) >> 2] | 0) - 1 | 0;
       label$51 : {
        label$52 : while (1) {
         $333_1 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
         HEAP32[($7_1 + 416 | 0) >> 2] = $333_1 + -1 | 0;
         if (!$333_1) {
          break label$51
         }
         label$53 : {
          if ((HEAP32[($7_1 + 416 | 0) >> 2] | 0 | 0) % (20 | 0) | 0) {
           break label$53
          }
          $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9044 | 0, 13226 | 0, 0 | 0);
         }
         $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9045 | 0, 13819 | 0, 0 | 0);
         continue label$52;
        };
       }
       $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9046 | 0, 13822 | 0, 0 | 0);
       HEAP32[($7_1 + 388 | 0) >> 2] = HEAP32[(0 + 88328 | 0) >> 2] | 0;
       HEAP32[($7_1 + 380 | 0) >> 2] = (HEAP32[(0 + 88328 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0) << 3 | 0) | 0;
       label$54 : {
        label$55 : while (1) {
         if (!((HEAP32[($7_1 + 388 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 380 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$54
         }
         label$56 : {
          label$57 : {
           if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
            break label$57
           }
           if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
            break label$57
           }
           if (!(($267(HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0) | 0 | 0) != ((HEAP32[(0 + 88324 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
            break label$56
           }
          }
          label$58 : {
           label$59 : {
            if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
             break label$59
            }
            $121(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0);
            break label$58;
           }
           $129(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0);
          }
         }
         HEAP32[($7_1 + 388 | 0) >> 2] = (HEAP32[($7_1 + 388 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
         continue label$55;
        };
       }
       $404_1 = 0;
       HEAP32[($7_1 + 388 | 0) >> 2] = $404_1;
       label$60 : {
        if (!((HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) != ($404_1 | 0) & 1 | 0)) {
         break label$60
        }
        HEAP32[($7_1 + 384 | 0) >> 2] = (HEAP32[(0 + 90288 | 0) >> 2] | 0) + 4 | 0;
        label$61 : {
         label$62 : while (1) {
          $417_1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
          HEAP32[($7_1 + 384 | 0) >> 2] = $417_1 + 4 | 0;
          $420_1 = HEAP32[$417_1 >> 2] | 0;
          HEAP32[($7_1 + 388 | 0) >> 2] = $420_1;
          if (!(($420_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$61
          }
          label$63 : {
           label$64 : {
            if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
             break label$64
            }
            $121(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0);
            break label$63;
           }
           $129(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0);
          }
          continue label$62;
         };
        }
       }
       $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9047 | 0, 13841 | 0, 0 | 0);
      }
      label$65 : {
       if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$65
       }
       if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
        break label$65
       }
       $453_1 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
       $457_1 = Math_imul(HEAP32[(0 + 90400 | 0) >> 2] | 0, 3);
       HEAP32[($7_1 + 68 | 0) >> 2] = HEAP32[(0 + 90400 | 0) >> 2] | 0;
       HEAP32[($7_1 + 64 | 0) >> 2] = $457_1;
       $396($453_1 | 0, 9048 | 0, 13869 | 0, $7_1 + 64 | 0 | 0);
      }
      HEAPF64[(0 + 90200 | 0) >> 3] = 2.0 * +HEAPF64[(0 + 89440 | 0) >> 3];
      label$66 : {
       label$67 : {
        if (!(HEAP32[(0 + 87948 | 0) >> 2] | 0)) {
         break label$67
        }
        label$68 : {
         if (!(+HEAPF64[(0 + 90200 | 0) >> 3] < +HEAPF64[(0 + 87888 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
          break label$68
         }
         HEAPF64[(0 + 90200 | 0) >> 3] = +HEAPF64[(0 + 87888 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
        }
        break label$66;
       }
       label$69 : {
        if (!(HEAP32[(0 + 87944 | 0) >> 2] | 0)) {
         break label$69
        }
        label$70 : {
         if (!(+HEAPF64[(0 + 90200 | 0) >> 3] < +HEAPF64[(0 + 87896 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
          break label$70
         }
         HEAPF64[(0 + 90200 | 0) >> 3] = +HEAPF64[(0 + 87896 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
        }
       }
      }
      HEAPF64[(0 + 90208 | 0) >> 3] = +HEAPF64[(0 + 90200 | 0) >> 3];
      label$71 : {
       if (!((HEAP32[(0 + 88116 | 0) >> 2] | 0) + (HEAP32[(0 + 87956 | 0) >> 2] | 0) | 0)) {
        break label$71
       }
       label$72 : {
        if (!(+HEAPF64[(0 + 90208 | 0) >> 3] < +HEAPF64[(0 + 89448 | 0) >> 3] * .02 & 1 | 0)) {
         break label$72
        }
        HEAPF64[(0 + 90208 | 0) >> 3] = +HEAPF64[(0 + 89448 | 0) >> 3] * .02;
       }
      }
      label$73 : {
       label$74 : {
        if (!(+HEAPF64[(0 + 87768 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
         break label$74
        }
        label$75 : {
         if (!(+HEAPF64[(0 + 90208 | 0) >> 3] < (1.0 - +HEAPF64[(0 + 87768 | 0) >> 3]) * +HEAPF64[(0 + 89448 | 0) >> 3] & 1 | 0)) {
          break label$75
         }
         HEAPF64[(0 + 90208 | 0) >> 3] = (1.0 - +HEAPF64[(0 + 87768 | 0) >> 3]) * +HEAPF64[(0 + 89448 | 0) >> 3];
        }
        break label$73;
       }
       label$76 : {
        if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
         break label$76
        }
        if (!(HEAP32[(0 + 87944 | 0) >> 2] | 0)) {
         break label$76
        }
        if (!(+HEAPF64[(0 + 87776 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
         break label$76
        }
        label$77 : {
         if (!(+HEAPF64[(0 + 90208 | 0) >> 3] < (1.0 - +HEAPF64[(0 + 87776 | 0) >> 3]) * +HEAPF64[(0 + 89448 | 0) >> 3] & 1 | 0)) {
          break label$77
         }
         HEAPF64[(0 + 90208 | 0) >> 3] = (1.0 - +HEAPF64[(0 + 87776 | 0) >> 3]) * +HEAPF64[(0 + 89448 | 0) >> 3];
        }
       }
      }
      label$78 : {
       if (!(+HEAPF64[(0 + 90208 | 0) >> 3] < +HEAPF64[(0 + 87912 | 0) >> 3] & 1 | 0)) {
        break label$78
       }
       HEAPF64[(0 + 90208 | 0) >> 3] = +HEAPF64[(0 + 87912 | 0) >> 3];
      }
      label$79 : {
       if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
        break label$79
       }
       HEAPF64[(0 + 90208 | 0) >> 3] = +HEAPF64[(0 + 90208 | 0) >> 3] + +HEAPF64[(0 + 90136 | 0) >> 3] * Math_sqrt(+(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0));
      }
      label$80 : {
       if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
        break label$80
       }
       label$81 : {
        if (HEAP32[(0 + 87956 | 0) >> 2] | 0) {
         break label$81
        }
        if (HEAP32[(0 + 88116 | 0) >> 2] | 0) {
         break label$81
        }
        if (!(HEAP32[(0 + 87952 | 0) >> 2] | 0)) {
         break label$80
        }
       }
       HEAP32[($7_1 + 392 | 0) >> 2] = $80(HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 448 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 444 | 0) >> 2] | 0 | 0) | 0;
       label$82 : {
        if (!(HEAP32[(0 + 88116 | 0) >> 2] | 0)) {
         break label$82
        }
        if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
         break label$82
        }
        $130(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 392 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 90208 | 0) >> 3]));
       }
       label$83 : {
        label$84 : {
         if (HEAP32[(0 + 87956 | 0) >> 2] | 0) {
          break label$84
         }
         if (!(HEAP32[(0 + 87952 | 0) >> 2] | 0)) {
          break label$83
         }
        }
        HEAP32[(0 + 90324 | 0) >> 2] = 1;
        label$85 : {
         if (!(HEAP32[(0 + 87956 | 0) >> 2] | 0)) {
          break label$85
         }
         if (HEAP32[(0 + 88116 | 0) >> 2] | 0) {
          break label$85
         }
         $589 = 0;
         HEAP32[($7_1 + 400 | 0) >> 2] = $589;
         label$86 : {
          if (!((HEAP32[($7_1 + 392 | 0) >> 2] | 0 | 0) != ($589 | 0) & 1 | 0)) {
           break label$86
          }
          HEAP32[($7_1 + 396 | 0) >> 2] = (HEAP32[($7_1 + 392 | 0) >> 2] | 0) + 4 | 0;
          label$87 : {
           label$88 : while (1) {
            $600 = HEAP32[($7_1 + 396 | 0) >> 2] | 0;
            HEAP32[($7_1 + 396 | 0) >> 2] = $600 + 4 | 0;
            $603 = HEAP32[$600 >> 2] | 0;
            HEAP32[($7_1 + 400 | 0) >> 2] = $603;
            if (!(($603 | 0) != (0 | 0) & 1 | 0)) {
             break label$87
            }
            $131(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 400 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 90208 | 0) >> 3]));
            continue label$88;
           };
          }
         }
        }
        label$89 : {
         if (!((HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$89
         }
         HEAP32[($7_1 + 408 | 0) >> 2] = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
         label$90 : while (1) {
          $632 = 0;
          label$91 : {
           if (!((HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$91
           }
           $632 = (HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
          }
          label$92 : {
           if (!($632 & 1 | 0)) {
            break label$92
           }
           label$93 : {
            label$94 : {
             if (HEAP32[($7_1 + 444 | 0) >> 2] | 0) {
              break label$94
             }
             if (!($100(HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0) | 0)) {
              break label$94
             }
             break label$93;
            }
            label$95 : {
             if ((HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
              break label$95
             }
             break label$93;
            }
            label$96 : {
             if (!(HEAP32[(0 + 87952 | 0) >> 2] | 0)) {
              break label$96
             }
             if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
              break label$96
             }
             $132(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 90200 | 0) >> 3]));
            }
            label$97 : {
             if (HEAP32[(0 + 87956 | 0) >> 2] | 0) {
              break label$97
             }
             break label$93;
            }
            $668 = 0;
            HEAP32[($7_1 + 388 | 0) >> 2] = $668;
            label$98 : {
             if (!((HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($668 | 0) & 1 | 0)) {
              break label$98
             }
             HEAP32[($7_1 + 384 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
             label$99 : {
              label$100 : while (1) {
               $681 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
               HEAP32[($7_1 + 384 | 0) >> 2] = $681 + 4 | 0;
               $684 = HEAP32[$681 >> 2] | 0;
               HEAP32[($7_1 + 388 | 0) >> 2] = $684;
               if (!(($684 | 0) != (0 | 0) & 1 | 0)) {
                break label$99
               }
               $131(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, 0 | 0, +(+HEAPF64[(0 + 90208 | 0) >> 3]));
               continue label$100;
              };
             }
            }
            $696 = 0;
            HEAP32[($7_1 + 388 | 0) >> 2] = $696;
            label$101 : {
             if (!((HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != ($696 | 0) & 1 | 0)) {
              break label$101
             }
             HEAP32[($7_1 + 384 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0;
             label$102 : {
              label$103 : while (1) {
               $709 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
               HEAP32[($7_1 + 384 | 0) >> 2] = $709 + 4 | 0;
               $712 = HEAP32[$709 >> 2] | 0;
               HEAP32[($7_1 + 388 | 0) >> 2] = $712;
               if (!(($712 | 0) != (0 | 0) & 1 | 0)) {
                break label$102
               }
               $131(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, 0 | 0, +(+HEAPF64[(0 + 90208 | 0) >> 3]));
               continue label$103;
              };
             }
            }
           }
           HEAP32[($7_1 + 408 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
           continue label$90;
          }
          break label$90;
         };
        }
        $726 = 0;
        HEAP32[($7_1 + 408 | 0) >> 2] = $726;
        label$104 : {
         if (!((HEAP32[($7_1 + 448 | 0) >> 2] | 0 | 0) != ($726 | 0) & 1 | 0)) {
          break label$104
         }
         HEAP32[($7_1 + 404 | 0) >> 2] = (HEAP32[($7_1 + 448 | 0) >> 2] | 0) + 4 | 0;
         label$105 : {
          label$106 : while (1) {
           $737 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
           HEAP32[($7_1 + 404 | 0) >> 2] = $737 + 4 | 0;
           $740 = HEAP32[$737 >> 2] | 0;
           HEAP32[($7_1 + 408 | 0) >> 2] = $740;
           if (!(($740 | 0) != (0 | 0) & 1 | 0)) {
            break label$105
           }
           label$107 : {
            if (HEAP32[($7_1 + 444 | 0) >> 2] | 0) {
             break label$107
            }
            if (!($100(HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0) | 0)) {
             break label$107
            }
            continue label$106;
           }
           label$108 : {
            if ((HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
             break label$108
            }
            continue label$106;
           }
           label$109 : {
            if (!(HEAP32[(0 + 87952 | 0) >> 2] | 0)) {
             break label$109
            }
            if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
             break label$109
            }
            $132(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 90200 | 0) >> 3]));
           }
           label$110 : {
            if (HEAP32[(0 + 87956 | 0) >> 2] | 0) {
             break label$110
            }
            continue label$106;
           }
           $772 = 0;
           HEAP32[($7_1 + 388 | 0) >> 2] = $772;
           label$111 : {
            if (!((HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($772 | 0) & 1 | 0)) {
             break label$111
            }
            HEAP32[($7_1 + 384 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
            label$112 : {
             label$113 : while (1) {
              $785 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
              HEAP32[($7_1 + 384 | 0) >> 2] = $785 + 4 | 0;
              $788 = HEAP32[$785 >> 2] | 0;
              HEAP32[($7_1 + 388 | 0) >> 2] = $788;
              if (!(($788 | 0) != (0 | 0) & 1 | 0)) {
               break label$112
              }
              $131(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, 0 | 0, +(+HEAPF64[(0 + 90208 | 0) >> 3]));
              continue label$113;
             };
            }
           }
           $800 = 0;
           HEAP32[($7_1 + 388 | 0) >> 2] = $800;
           label$114 : {
            if (!((HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != ($800 | 0) & 1 | 0)) {
             break label$114
            }
            HEAP32[($7_1 + 384 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0;
            label$115 : {
             label$116 : while (1) {
              $813 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
              HEAP32[($7_1 + 384 | 0) >> 2] = $813 + 4 | 0;
              $816 = HEAP32[$813 >> 2] | 0;
              HEAP32[($7_1 + 388 | 0) >> 2] = $816;
              if (!(($816 | 0) != (0 | 0) & 1 | 0)) {
               break label$115
              }
              $131(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, 0 | 0, +(+HEAPF64[(0 + 90208 | 0) >> 3]));
              continue label$116;
             };
            }
           }
           continue label$106;
          };
         }
        }
       }
       $348($7_1 + 392 | 0 | 0);
      }
      HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
      break label$1;
     case 8:
      $836 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      HEAP32[($7_1 + 160 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      $396($836 | 0, 9049 | 0, 13238 | 0, $7_1 + 160 | 0 | 0);
      break label$1;
     case 14:
      label$117 : {
       if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
        break label$117
       }
       if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
        break label$117
       }
       $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7053 | 0, 13883 | 0, 0 | 0);
      }
      HEAP32[(0 + 90220 | 0) >> 2] = HEAP32[(0 + 90084 | 0) >> 2] | 0;
      label$118 : {
       label$119 : {
        if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
         break label$119
        }
        $862 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
        HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
        $396($862 | 0, 9050 | 0, 13238 | 0, $7_1 + 176 | 0 | 0);
        break label$118;
       }
       $868 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
       HEAP32[($7_1 + 192 | 0) >> 2] = (HEAP32[($7_1 + 436 | 0) >> 2] | 0) + (HEAP32[($7_1 + 432 | 0) >> 2] | 0) | 0;
       $396($868 | 0, 9051 | 0, 13238 | 0, $7_1 + 192 | 0 | 0);
      }
      break label$1;
     case 9:
     case 11:
     case 12:
      label$120 : {
       label$121 : {
        if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
         break label$121
        }
        $878 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
        $879 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
        HEAP32[($7_1 + 220 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($7_1 + 216 | 0) >> 2] = $879;
        HEAP32[($7_1 + 212 | 0) >> 2] = 88344;
        HEAP32[($7_1 + 208 | 0) >> 2] = 88604;
        $396($878 | 0, 9052 | 0, 14023 | 0, $7_1 + 208 | 0 | 0);
        break label$120;
       }
       $890 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
       $894 = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($7_1 + 228 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
       HEAP32[($7_1 + 224 | 0) >> 2] = $894;
       $396($890 | 0, 9053 | 0, 13361 | 0, $7_1 + 224 | 0 | 0);
      }
      break label$1;
     case 13:
     case 15:
      label$122 : {
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
        break label$122
       }
       break label$2;
      }
      label$123 : {
       if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
        break label$123
       }
       $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7054 | 0, 14053 | 0, 0 | 0);
      }
      label$124 : {
       label$125 : {
        if (!((HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0) == (13 | 0) & 1 | 0)) {
         break label$125
        }
        label$126 : {
         label$127 : {
          if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
           break label$127
          }
          $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9054 | 0, 14106 | 0, 0 | 0);
          break label$126;
         }
         $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9055 | 0, 14120 | 0, 0 | 0);
        }
        break label$124;
       }
       $396(HEAP32[($7_1 + 460 | 0) >> 2] | 0 | 0, 9056 | 0, 14138 | 0, 0 | 0);
      }
      HEAP32[(0 + 90220 | 0) >> 2] = 0;
      break label$1;
     case 16:
      $944 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      HEAP32[($7_1 + 240 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      $396($944 | 0, 9057 | 0, 13238 | 0, $7_1 + 240 | 0 | 0);
      break label$1;
     case 19:
      $950 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      $952 = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      HEAP32[($7_1 + 260 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      HEAP32[($7_1 + 256 | 0) >> 2] = $952;
      $396($950 | 0, 9058 | 0, 13361 | 0, $7_1 + 256 | 0 | 0);
      break label$1;
     case 10:
      $958 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      HEAP32[($7_1 + 272 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      $396($958 | 0, 9059 | 0, 13238 | 0, $7_1 + 272 | 0 | 0);
      break label$1;
     case 17:
     case 25:
      label$128 : {
       if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
        break label$128
       }
       break label$2;
      }
      HEAP32[($7_1 + 412 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      label$129 : {
       label$130 : {
        label$131 : {
         if ((HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0) {
          break label$131
         }
         if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
          break label$130
         }
        }
        $983 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
        $984 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
        $990 = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
        $991 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
        HEAP32[($7_1 + 300 | 0) >> 2] = (HEAP32[($7_1 + 428 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
        HEAP32[($7_1 + 296 | 0) >> 2] = $991;
        HEAP32[($7_1 + 292 | 0) >> 2] = $990;
        HEAP32[($7_1 + 288 | 0) >> 2] = $984;
        $396($983 | 0, 9060 | 0, 14141 | 0, $7_1 + 288 | 0 | 0);
        break label$129;
       }
       HEAP32[(0 + 90220 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
       label$132 : {
        if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
         break label$132
        }
        HEAP32[($7_1 + 412 | 0) >> 2] = (HEAP32[($7_1 + 412 | 0) >> 2] | 0) + -1 | 0;
       }
       $1011 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
       $1012 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
       $1018 = ((HEAP32[(0 + 90220 | 0) >> 2] | 0) + (HEAP32[($7_1 + 440 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 436 | 0) >> 2] | 0) | 0;
       $1021 = (HEAP32[($7_1 + 436 | 0) >> 2] | 0) + (HEAP32[($7_1 + 432 | 0) >> 2] | 0) | 0;
       HEAP32[($7_1 + 316 | 0) >> 2] = (HEAP32[($7_1 + 428 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
       HEAP32[($7_1 + 312 | 0) >> 2] = $1021;
       HEAP32[($7_1 + 308 | 0) >> 2] = $1018;
       HEAP32[($7_1 + 304 | 0) >> 2] = $1012;
       $396($1011 | 0, 9061 | 0, 14141 | 0, $7_1 + 304 | 0 | 0);
      }
      HEAP32[($7_1 + 388 | 0) >> 2] = HEAP32[(0 + 88328 | 0) >> 2] | 0;
      HEAP32[($7_1 + 380 | 0) >> 2] = (HEAP32[(0 + 88328 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0) << 3 | 0) | 0;
      label$133 : {
       label$134 : while (1) {
        if (!((HEAP32[($7_1 + 388 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 380 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$133
        }
        $81(HEAP32[(0 + 89976 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0, -1 | 0);
        HEAP32[($7_1 + 388 | 0) >> 2] = (HEAP32[($7_1 + 388 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
        continue label$134;
       };
      }
      $1060 = 0;
      HEAP32[($7_1 + 388 | 0) >> 2] = $1060;
      label$135 : {
       if (!((HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) != ($1060 | 0) & 1 | 0)) {
        break label$135
       }
       HEAP32[($7_1 + 384 | 0) >> 2] = (HEAP32[(0 + 90288 | 0) >> 2] | 0) + 4 | 0;
       label$136 : {
        label$137 : while (1) {
         $1073 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
         HEAP32[($7_1 + 384 | 0) >> 2] = $1073 + 4 | 0;
         $1076 = HEAP32[$1073 >> 2] | 0;
         HEAP32[($7_1 + 388 | 0) >> 2] = $1076;
         if (!(($1076 | 0) != (0 | 0) & 1 | 0)) {
          break label$136
         }
         $81(HEAP32[(0 + 89976 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 388 | 0) >> 2] | 0 | 0, -1 | 0);
         continue label$137;
        };
       }
      }
      label$138 : {
       if (!((HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0) == (25 | 0) & 1 | 0)) {
        break label$138
       }
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
        break label$138
       }
       HEAP32[($7_1 + 408 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
       label$139 : while (1) {
        $1113 = 0;
        label$140 : {
         if (!((HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$140
         }
         $1113 = (HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
        }
        label$141 : {
         if (!($1113 & 1 | 0)) {
          break label$141
         }
         label$142 : {
          if (((HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
           break label$142
          }
          if (!(HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
           break label$142
          }
          $109(HEAP32[(0 + 89976 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 408 | 0) >> 2] | 0 | 0);
         }
         HEAP32[($7_1 + 408 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 408 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
         continue label$139;
        }
        break label$139;
       };
      }
      break label$1;
     case 20:
      $1138 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      HEAP32[($7_1 + 320 | 0) >> 2] = HEAP32[($7_1 + 424 | 0) >> 2] | 0;
      $396($1138 | 0, 9062 | 0, 13238 | 0, $7_1 + 320 | 0 | 0);
      break label$1;
     case 21:
      label$143 : {
       if (HEAP32[(0 + 88284 | 0) >> 2] | 0) {
        break label$143
       }
       break label$2;
      }
      label$144 : {
       label$145 : {
        if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
         break label$145
        }
        $1148 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
        $1149 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
        HEAP32[($7_1 + 348 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
        HEAP32[($7_1 + 344 | 0) >> 2] = $1149;
        HEAP32[($7_1 + 340 | 0) >> 2] = 88344;
        HEAP32[($7_1 + 336 | 0) >> 2] = 88604;
        $396($1148 | 0, 9063 | 0, 14154 | 0, $7_1 + 336 | 0 | 0);
        break label$144;
       }
       $1158 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
       $1162 = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($7_1 + 356 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
       HEAP32[($7_1 + 352 | 0) >> 2] = $1162;
       $396($1158 | 0, 9064 | 0, 13361 | 0, $7_1 + 352 | 0 | 0);
      }
      break label$1;
     case 26:
      $1168 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
      HEAP32[($7_1 + 368 | 0) >> 2] = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
      $396($1168 | 0, 9065 | 0, 13238 | 0, $7_1 + 368 | 0 | 0);
      break label$1;
     case 24:
     default:
      break label$3;
     };
    }
   }
   $1175 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$7_1 >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
   $396($1175 | 0, 6068 | 0, 14180 | 0, $7_1 | 0);
   $1181 = 0;
   $382(5 | 0, $1181 | 0, $1181 | 0);
  }
  global$0 = $7_1 + 464 | 0;
  return;
 }
 
 function $90($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $17_1 = 0, $37_1 = 0, $58_1 = 0, $76_1 = 0, $87_1 = 0, $90_1 = 0, $129_1 = 0, $120_1 = 0, $122_1 = 0, $124_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  label$1 : {
   if (HEAP32[(0 + 90224 | 0) >> 2] | 0) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7055 | 0, 14582 | 0, 0 | 0);
  }
  $17_1 = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + -7 | 0;
  label$2 : {
   label$3 : {
    switch ($17_1 | 0) {
    case 0:
     label$9 : {
      label$10 : {
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$10
       }
       if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$10
       }
       if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
        break label$10
       }
       $37_1 = 0;
       HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($7_1 + 24 | 0) >> 2] = $37_1;
       label$11 : {
        if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) != ($37_1 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        label$12 : while (1) {
         $58_1 = 0;
         label$13 : {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$13
          }
          $58_1 = (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
         }
         label$14 : {
          if (!($58_1 & 1 | 0)) {
           break label$14
          }
          $128(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, $7_1 + 24 | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
          HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
          continue label$12;
         }
         break label$12;
        };
       }
       $76_1 = 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = $76_1;
       label$15 : {
        if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) != ($76_1 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 4 | 0;
        label$16 : {
         label$17 : while (1) {
          $87_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
          HEAP32[($7_1 + 16 | 0) >> 2] = $87_1 + 4 | 0;
          $90_1 = HEAP32[$87_1 >> 2] | 0;
          HEAP32[($7_1 + 20 | 0) >> 2] = $90_1;
          if (!(($90_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$16
          }
          $128(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, $7_1 + 24 | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
          continue label$17;
         };
        }
       }
       label$18 : {
        label$19 : {
         if ((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90400 | 0) >> 2] | 0 | 0) & 1 | 0) {
          break label$19
         }
         if (!((HEAP32[(0 + 90220 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90400 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$18
         }
        }
        $120_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $122_1 = HEAP32[(0 + 90400 | 0) >> 2] | 0;
        $124_1 = HEAP32[(0 + 90220 | 0) >> 2] | 0;
        HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
        HEAP32[($7_1 + 4 | 0) >> 2] = $124_1;
        HEAP32[$7_1 >> 2] = $122_1;
        $396($120_1 | 0, 6069 | 0, 14616 | 0, $7_1 | 0);
        $129_1 = 0;
        $382(5 | 0, $129_1 | 0, $129_1 | 0);
       }
       break label$9;
      }
      $396(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, 9079 | 0, 14708 | 0, 0 | 0);
     }
     break label$2;
    case 2:
    case 4:
    case 5:
     label$20 : {
      if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
       break label$20
      }
      $396(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, 9080 | 0, 14711 | 0, 0 | 0);
     }
     break label$2;
    case 6:
     $396(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, 9081 | 0, 14716 | 0, 0 | 0);
     break label$2;
    case 8:
     $396(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, 9082 | 0, 14708 | 0, 0 | 0);
     break label$2;
    case 14:
     label$21 : {
      if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
       break label$21
      }
      $396(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, 9083 | 0, 14711 | 0, 0 | 0);
     }
     break label$2;
    default:
     break label$3;
    };
   }
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $91($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $45_1 = 0, $9_1 = 0, $44_1 = 0, $37_1 = 0, $59_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  $9_1 = 0;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $9_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $9_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) == (26 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 24 | 0) >> 2] = 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = 3;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = 1;
     HEAP32[($7_1 + 20 | 0) >> 2] = 4;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($7_1 + 24 | 0) >> 2] = 2;
      HEAP32[($7_1 + 20 | 0) >> 2] = 4;
      break label$5;
     }
     $37_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
     $396($37_1 | 0, 6219 | 0, 17807 | 0, $7_1 + 16 | 0 | 0);
     $44_1 = 0;
     $382(5 | 0, $44_1 | 0, $44_1 | 0);
    }
   }
  }
  $45_1 = 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = $107(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, $7_1 + 28 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
  HEAP32[($7_1 + 36 | 0) >> 2] = $137($45_1 | 0, $45_1 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, $45_1 | 0) | 0;
  $59_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  $396($59_1 | 0, 9231 | 0, 13238 | 0, $7_1 | 0);
  HEAP32[($7_1 + 36 | 0) >> 2] = $137(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $348($7_1 + 40 | 0 | 0);
  global$0 = $7_1 + 64 | 0;
  return;
 }
 
 function $92($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $25_1 = 0, $31_1 = 0, $59_1 = 0, $72_1 = 0, $75_1 = 0, $110_1 = 0, $115_1 = 0, $159_1 = 0, $171_1 = 0, $280_1 = 0, $396_1 = 0, $404_1 = 0, $416_1 = 0, $429_1 = 0, $432_1 = 0, $445_1 = 0, $473_1 = 0, $481_1 = 0, $493_1 = 0, $496_1 = 0, $500_1 = 0, $503_1 = 0, $508_1 = 0, $514_1 = 0, $519_1 = 0, $522_1 = 0, $537 = 0, $549 = 0, $562 = 0, $565 = 0, $611 = 0, $624 = 0, $627 = 0, $39_1 = 0, $51_1 = 0, $81_1 = 0, $228_1 = 0, $277_1 = 0, $278_1 = 0, $291_1 = 0, $315_1 = 0, $324_1 = 0, $338_1 = 0, $361_1 = 0, $375_1 = 0, $392_1 = 0, $393_1 = 0, $394_1 = 0, $400_1 = 0, $401_1 = 0, $402_1 = 0, $408_1 = 0, $438_1 = 0, $681 = 0.0, $683 = 0.0, $687 = 0.0, $689 = 0.0, $540 = 0, i64toi32_i32$0 = 0, $582 = 0, $583 = 0, $584 = 0, $586 = 0, $603 = 0, $633 = 0;
  $6_1 = global$0 - 400 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 396 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 392 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 388 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 384 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 384 | 0) >> 2] | 0) {
     break label$2
    }
    if (!($100(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0) | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$3
    }
    if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
     break label$3
    }
    if (!((HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0) != (5 | 0) & 1 | 0)) {
     break label$3
    }
    break label$1;
   }
   $25_1 = 0;
   HEAP32[($25_1 + 90224 | 0) >> 2] = (HEAP32[($25_1 + 90224 | 0) >> 2] | 0) + 1 | 0;
   $31_1 = (HEAP32[($6_1 + 392 | 0) >> 2] | 0) + -1 | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            switch ($31_1 | 0) {
            case 0:
             label$24 : {
              label$25 : {
               if (!(((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0)) {
                break label$25
               }
               $39_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
               HEAPF64[$6_1 >> 3] = +HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 32 | 0) >> 3];
               $396($39_1 | 0, 9009 | 0, 13218 | 0, $6_1 | 0);
               $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9010 | 0, 13226 | 0, 0 | 0);
               break label$24;
              }
              $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9011 | 0, 13228 | 0, 0 | 0);
             }
             break label$1;
            case 2:
             $51_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
             HEAP32[($6_1 + 32 | 0) >> 2] = $337(HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
             $396($51_1 | 0, 9012 | 0, 13231 | 0, $6_1 + 32 | 0 | 0);
             $59_1 = 0;
             HEAP32[($6_1 + 312 | 0) >> 2] = $59_1;
             label$26 : {
              if (!((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($59_1 | 0) & 1 | 0)) {
               break label$26
              }
              HEAP32[($6_1 + 300 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
              label$27 : {
               label$28 : while (1) {
                $72_1 = HEAP32[($6_1 + 300 | 0) >> 2] | 0;
                HEAP32[($6_1 + 300 | 0) >> 2] = $72_1 + 4 | 0;
                $75_1 = HEAP32[$72_1 >> 2] | 0;
                HEAP32[($6_1 + 312 | 0) >> 2] = $75_1;
                if (!(($75_1 | 0) != (0 | 0) & 1 | 0)) {
                 break label$27
                }
                $81_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
                HEAP32[($6_1 + 16 | 0) >> 2] = $267(HEAP32[($6_1 + 312 | 0) >> 2] | 0 | 0) | 0;
                $396($81_1 | 0, 9013 | 0, 13234 | 0, $6_1 + 16 | 0 | 0);
                continue label$28;
               };
              }
             }
             $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9014 | 0, 13226 | 0, 0 | 0);
             break label$1;
            case 3:
             $109(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0);
             break label$1;
            case 4:
             $93(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0);
             break label$1;
            case 5:
             $94(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0);
             break label$1;
            case 6:
             label$29 : {
              if ((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
               break label$29
              }
              break label$1;
             }
             HEAP32[($6_1 + 292 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
             label$30 : {
              label$31 : while (1) {
               $110_1 = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
               HEAP32[($6_1 + 292 | 0) >> 2] = $110_1 + -1 | 0;
               if (!$110_1) {
                break label$30
               }
               $115_1 = $6_1 + 352 | 0;
               HEAPF64[($115_1 + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + 1.0) / 2.0;
               label$32 : {
                if (!(+HEAPF64[($115_1 + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < -1.0 & 1 | 0)) {
                 break label$32
                }
                HEAPF64[(($6_1 + 352 | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0;
               }
               label$33 : {
                if (!(+HEAPF64[(($6_1 + 352 | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > 1.0 & 1 | 0)) {
                 break label$33
                }
                HEAPF64[(($6_1 + 352 | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
               }
               continue label$31;
              };
             }
             $159_1 = $6_1 + 352 | 0;
             $110($159_1 | 0, $159_1 | 0);
             label$34 : {
              if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$34
              }
              $171_1 = 0;
              $16($6_1 + 352 | 0 | 0, 3 | 0, 1 | 0, $171_1 | 0, $171_1 | 0);
             }
             label$35 : {
              label$36 : {
               if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (2 | 0) & 1 | 0)) {
                break label$36
               }
               $111(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 352 | 0 | 0);
               break label$35;
              }
              label$37 : {
               label$38 : {
                if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
                 break label$38
                }
                label$39 : {
                 label$40 : {
                  if (!(((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
                   break label$40
                  }
                  $112(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 352 | 0 | 0);
                  break label$39;
                 }
                 $113(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 352 | 0 | 0);
                }
                break label$37;
               }
               label$41 : {
                label$42 : {
                 if (!(((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
                  break label$42
                 }
                 $114(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 352 | 0 | 0);
                 break label$41;
                }
                $115(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 352 | 0 | 0);
               }
              }
             }
             break label$1;
            case 7:
             $228_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
             HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             $396($228_1 | 0, 9015 | 0, 13238 | 0, $6_1 + 48 | 0 | 0);
             break label$1;
            case 13:
            case 16:
            case 24:
             label$43 : {
              label$44 : {
               if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
                break label$44
               }
               if (!((HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0) != (25 | 0) & 1 | 0)) {
                break label$44
               }
               $116(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0);
               break label$43;
              }
              label$45 : {
               label$46 : {
                label$47 : {
                 if (((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
                  break label$47
                 }
                 if ((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
                  break label$47
                 }
                 if (!((HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0)) {
                  break label$46
                 }
                }
                $117(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0);
                break label$45;
               }
               $277_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
               $278_1 = HEAP32[($6_1 + 388 | 0) >> 2] | 0;
               $280_1 = HEAP32[(0 + 90220 | 0) >> 2] | 0;
               HEAP32[(0 + 90220 | 0) >> 2] = $280_1 + 1 | 0;
               $118($277_1 | 0, $278_1 | 0, $280_1 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0);
              }
             }
             break label$1;
            case 8:
             $50(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0, $6_1 + 320 | 0 | 0);
             HEAPF64[($6_1 + 344 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[($6_1 + 320 | 0) >> 3];
             break label$11;
            case 15:
             $291_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
             HEAP32[($6_1 + 144 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0;
             $396($291_1 | 0, 9016 | 0, 13238 | 0, $6_1 + 144 | 0 | 0);
             break label$1;
            case 10:
             HEAPF64[($6_1 + 344 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 16 | 0) >> 3];
             break label$11;
            case 12:
            case 14:
             break label$10;
            case 11:
             break label$12;
            case 25:
             break label$5;
            case 20:
             break label$6;
            case 19:
             break label$7;
            case 18:
             break label$8;
            case 9:
             break label$9;
            default:
             break label$4;
            };
           }
           $50(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 328 | 0 | 0, 0 | 0);
           HEAPF64[($6_1 + 344 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 16 | 0) >> 3] - +HEAPF64[($6_1 + 328 | 0) >> 3];
          }
          label$48 : {
           if ((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
            break label$48
           }
           $315_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
           HEAP32[($6_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           $396($315_1 | 0, 9017 | 0, 13242 | 0, $6_1 + 128 | 0 | 0);
           break label$1;
          }
          label$49 : {
           label$50 : {
            if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
             break label$50
            }
            $324_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
            HEAPF64[($6_1 + 80 | 0) >> 3] = -+HEAPF64[($6_1 + 344 | 0) >> 3];
            $396($324_1 | 0, 9018 | 0, 13218 | 0, $6_1 + 80 | 0 | 0);
            HEAP32[($6_1 + 292 | 0) >> 2] = 0;
            label$51 : {
             label$52 : while (1) {
              if (!((HEAP32[($6_1 + 292 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$51
              }
              $338_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
              HEAPF64[($6_1 + 64 | 0) >> 3] = -+HEAPF64[((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              $396($338_1 | 0, 9019 | 0, 13218 | 0, $6_1 + 64 | 0 | 0);
              HEAP32[($6_1 + 292 | 0) >> 2] = (HEAP32[($6_1 + 292 | 0) >> 2] | 0) + 1 | 0;
              continue label$52;
             };
            }
            break label$49;
           }
           HEAP32[($6_1 + 292 | 0) >> 2] = 0;
           label$53 : {
            label$54 : while (1) {
             if (!((HEAP32[($6_1 + 292 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$53
             }
             $361_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
             HEAPF64[($6_1 + 96 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             $396($361_1 | 0, 9020 | 0, 13218 | 0, $6_1 + 96 | 0 | 0);
             HEAP32[($6_1 + 292 | 0) >> 2] = (HEAP32[($6_1 + 292 | 0) >> 2] | 0) + 1 | 0;
             continue label$54;
            };
           }
           $375_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
           HEAPF64[($6_1 + 112 | 0) >> 3] = +HEAPF64[($6_1 + 344 | 0) >> 3];
           $396($375_1 | 0, 9021 | 0, 13218 | 0, $6_1 + 112 | 0 | 0);
          }
          $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9022 | 0, 13226 | 0, 0 | 0);
          break label$1;
         }
         label$55 : {
          label$56 : {
           if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
            break label$56
           }
           $392_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
           $393_1 = HEAP32[($6_1 + 388 | 0) >> 2] | 0;
           $394_1 = HEAP32[($6_1 + 392 | 0) >> 2] | 0;
           $396_1 = HEAP32[(0 + 90220 | 0) >> 2] | 0;
           HEAP32[(0 + 90220 | 0) >> 2] = $396_1 + 1 | 0;
           $119($392_1 | 0, $393_1 | 0, $394_1 | 0, $396_1 | 0);
           break label$55;
          }
          $400_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
          $401_1 = HEAP32[($6_1 + 388 | 0) >> 2] | 0;
          $402_1 = HEAP32[($6_1 + 392 | 0) >> 2] | 0;
          $404_1 = HEAP32[(0 + 90220 | 0) >> 2] | 0;
          HEAP32[(0 + 90220 | 0) >> 2] = $404_1 + 1 | 0;
          $120($400_1 | 0, $401_1 | 0, $402_1 | 0, $404_1 | 0);
         }
         break label$1;
        }
        $408_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
        HEAP32[($6_1 + 176 | 0) >> 2] = $337(HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
        $396($408_1 | 0, 9023 | 0, 13231 | 0, $6_1 + 176 | 0 | 0);
        $416_1 = 0;
        HEAP32[($6_1 + 280 | 0) >> 2] = $416_1;
        label$57 : {
         if (!((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($416_1 | 0) & 1 | 0)) {
          break label$57
         }
         HEAP32[($6_1 + 276 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
         label$58 : {
          label$59 : while (1) {
           $429_1 = HEAP32[($6_1 + 276 | 0) >> 2] | 0;
           HEAP32[($6_1 + 276 | 0) >> 2] = $429_1 + 4 | 0;
           $432_1 = HEAP32[$429_1 >> 2] | 0;
           HEAP32[($6_1 + 280 | 0) >> 2] = $432_1;
           if (!(($432_1 | 0) != (0 | 0) & 1 | 0)) {
            break label$58
           }
           $438_1 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
           label$60 : {
            label$61 : {
             if (!(HEAP32[((HEAP32[($6_1 + 280 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
              break label$61
             }
             $445_1 = (HEAP32[((HEAP32[($6_1 + 280 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) - 1 | 0;
             break label$60;
            }
            $445_1 = 0 - (HEAP32[((HEAP32[($6_1 + 280 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) | 0;
           }
           HEAP32[($6_1 + 160 | 0) >> 2] = $445_1;
           $396($438_1 | 0, 9024 | 0, 13234 | 0, $6_1 + 160 | 0 | 0);
           continue label$59;
          };
         }
        }
        $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9025 | 0, 13226 | 0, 0 | 0);
        break label$1;
       }
       label$62 : {
        if ((HEAP32[(0 + 88304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$62
        }
        $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6067 | 0, 13267 | 0, 0 | 0);
        $473_1 = 0;
        $382(1 | 0, $473_1 | 0, $473_1 | 0);
       }
       label$63 : {
        label$64 : {
         if (!(+HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 16 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$64
         }
         break label$63;
        }
        $481_1 = $156(HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($6_1 + 304 | 0) >> 2] = $481_1;
        HEAP32[($6_1 + 312 | 0) >> 2] = $481_1;
        HEAP32[($6_1 + 308 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
        HEAP32[($6_1 + 296 | 0) >> 2] = HEAP32[(0 + 88304 | 0) >> 2] | 0;
        label$65 : {
         label$66 : {
          if (!(+HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 16 | 0) >> 3] < -+HEAPF64[(0 + 89496 | 0) >> 3] & 1 | 0)) {
           break label$66
          }
          HEAP32[($6_1 + 292 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
          label$67 : {
           label$68 : while (1) {
            $493_1 = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
            HEAP32[($6_1 + 292 | 0) >> 2] = $493_1 + -1 | 0;
            if (!$493_1) {
             break label$67
            }
            $496_1 = HEAP32[($6_1 + 308 | 0) >> 2] | 0;
            HEAP32[($6_1 + 308 | 0) >> 2] = $496_1 + 8 | 0;
            $681 = +HEAPF64[$496_1 >> 3] / -+HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 16 | 0) >> 3];
            $500_1 = HEAP32[($6_1 + 296 | 0) >> 2] | 0;
            HEAP32[($6_1 + 296 | 0) >> 2] = $500_1 + 8 | 0;
            $683 = $681 + +HEAPF64[$500_1 >> 3];
            $503_1 = HEAP32[($6_1 + 304 | 0) >> 2] | 0;
            HEAP32[($6_1 + 304 | 0) >> 2] = $503_1 + 8 | 0;
            HEAPF64[$503_1 >> 3] = $683;
            continue label$68;
           };
          }
          break label$65;
         }
         HEAP32[($6_1 + 292 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
         label$69 : {
          label$70 : while (1) {
           $508_1 = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
           HEAP32[($6_1 + 292 | 0) >> 2] = $508_1 + -1 | 0;
           if (!$508_1) {
            break label$69
           }
           $514_1 = HEAP32[($6_1 + 308 | 0) >> 2] | 0;
           HEAP32[($6_1 + 308 | 0) >> 2] = $514_1 + 8 | 0;
           $687 = +$29(+(+HEAPF64[$514_1 >> 3]), +(+HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 16 | 0) >> 3]), +(+HEAPF64[(0 + 89488 | 0) >> 3]), $6_1 + 316 | 0 | 0);
           $519_1 = HEAP32[($6_1 + 296 | 0) >> 2] | 0;
           HEAP32[($6_1 + 296 | 0) >> 2] = $519_1 + 8 | 0;
           $689 = $687 + +HEAPF64[$519_1 >> 3];
           $522_1 = HEAP32[($6_1 + 304 | 0) >> 2] | 0;
           HEAP32[($6_1 + 304 | 0) >> 2] = $522_1 + 8 | 0;
           HEAPF64[$522_1 >> 3] = $689;
           label$71 : {
            if (!(HEAP32[($6_1 + 316 | 0) >> 2] | 0)) {
             break label$71
            }
            $158(HEAP32[($6_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
            break label$63;
           }
           continue label$70;
          };
         }
        }
        $121(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($6_1 + 312 | 0) >> 2] | 0 | 0);
        $158(HEAP32[($6_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
        break label$1;
       }
       HEAP32[($6_1 + 292 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
       label$72 : {
        label$73 : while (1) {
         $537 = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
         HEAP32[($6_1 + 292 | 0) >> 2] = $537 + -1 | 0;
         if (!$537) {
          break label$72
         }
         $540 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
         i64toi32_i32$0 = -1071369290;
         HEAP32[($6_1 + 192 | 0) >> 2] = 1168231105;
         HEAP32[($6_1 + 196 | 0) >> 2] = i64toi32_i32$0;
         $396($540 | 0, 9026 | 0, 13218 | 0, $6_1 + 192 | 0 | 0);
         continue label$73;
        };
       }
       $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9027 | 0, 13226 | 0, 0 | 0);
       break label$1;
      }
      $549 = 0;
      HEAP32[($6_1 + 312 | 0) >> 2] = $549;
      label$74 : {
       if (!((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($549 | 0) & 1 | 0)) {
        break label$74
       }
       HEAP32[($6_1 + 300 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
       label$75 : {
        label$76 : while (1) {
         $562 = HEAP32[($6_1 + 300 | 0) >> 2] | 0;
         HEAP32[($6_1 + 300 | 0) >> 2] = $562 + 4 | 0;
         $565 = HEAP32[$562 >> 2] | 0;
         HEAP32[($6_1 + 312 | 0) >> 2] = $565;
         if (!(($565 | 0) != (0 | 0) & 1 | 0)) {
          break label$75
         }
         HEAP32[($6_1 + 288 | 0) >> 2] = $293(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 312 | 0) >> 2] | 0 | 0, $6_1 + 336 | 0 | 0) | 0;
         HEAP32[($6_1 + 272 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($6_1 + 268 | 0) >> 2] = $267(HEAP32[($6_1 + 312 | 0) >> 2] | 0 | 0) | 0;
         $582 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
         $583 = HEAP32[($6_1 + 272 | 0) >> 2] | 0;
         $584 = HEAP32[($6_1 + 268 | 0) >> 2] | 0;
         $586 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAPF64[($6_1 + 224 | 0) >> 3] = +HEAPF64[($6_1 + 336 | 0) >> 3];
         HEAP32[($6_1 + 216 | 0) >> 2] = $586;
         HEAP32[($6_1 + 212 | 0) >> 2] = $584;
         HEAP32[($6_1 + 208 | 0) >> 2] = $583;
         $396($582 | 0, 9028 | 0, 13340 | 0, $6_1 + 208 | 0 | 0);
         continue label$76;
        };
       }
      }
      break label$1;
     }
     label$77 : {
      if (!(HEAP32[(0 + 87756 | 0) >> 2] | 0)) {
       break label$77
      }
      $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9029 | 0, 13358 | 0, 0 | 0);
     }
     $109(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0);
     break label$1;
    }
    $603 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
    HEAP32[($6_1 + 256 | 0) >> 2] = $337(HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
    $396($603 | 0, 9030 | 0, 13231 | 0, $6_1 + 256 | 0 | 0);
    $611 = 0;
    HEAP32[($6_1 + 288 | 0) >> 2] = $611;
    label$78 : {
     if (!((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($611 | 0) & 1 | 0)) {
      break label$78
     }
     HEAP32[($6_1 + 284 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$79 : {
      label$80 : while (1) {
       $624 = HEAP32[($6_1 + 284 | 0) >> 2] | 0;
       HEAP32[($6_1 + 284 | 0) >> 2] = $624 + 4 | 0;
       $627 = HEAP32[$624 >> 2] | 0;
       HEAP32[($6_1 + 288 | 0) >> 2] = $627;
       if (!(($627 | 0) != (0 | 0) & 1 | 0)) {
        break label$79
       }
       $633 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
       HEAP32[($6_1 + 240 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
       $396($633 | 0, 9031 | 0, 13234 | 0, $6_1 + 240 | 0 | 0);
       continue label$80;
      };
     }
    }
    $396(HEAP32[($6_1 + 396 | 0) >> 2] | 0 | 0, 9032 | 0, 13226 | 0, 0 | 0);
    break label$1;
   }
  }
  global$0 = $6_1 + 400 | 0;
  return;
 }
 
 function $93($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $94(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $95(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $94($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $519_1 = 0, $532 = 0, $535 = 0, $616 = 0, $629 = 0, $632 = 0, $688 = 0, $701 = 0, $704 = 0, $43_1 = 0, $306_1 = 0, $328_1 = 0, $358_1 = 0, $380_1 = 0, $396_1 = 0, $414_1 = 0, $424_1 = 0, $440_1 = 0, $471_1 = 0, $512_1 = 0, $557 = 0, $568 = 0, $609 = 0, $654 = 0, $675 = 0, $732 = 0;
  $4_1 = global$0 - 304 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 300 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 296 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$2
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9133 | 0, 15376 | 0, 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$3
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9134 | 0, 15389 | 0, 0 | 0);
    break label$1;
   }
   label$4 : {
    if ((HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9135 | 0, 15406 | 0, 0 | 0);
    break label$1;
   }
   HEAP32[(0 + 90328 | 0) >> 2] = HEAP32[(0 + 88140 | 0) >> 2] | 0;
   HEAP32[(0 + 88140 | 0) >> 2] = 0;
   $43_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
   HEAP32[($4_1 + 256 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($43_1 | 0, 9136 | 0, 15418 | 0, $4_1 + 256 | 0 | 0);
   $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9137 | 0, 15425 | 0, 0 | 0);
   label$5 : {
    label$6 : {
     if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0)) {
      break label$6
     }
     $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9138 | 0, 15438 | 0, 0 | 0);
     break label$5;
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9139 | 0, 15443 | 0, 0 | 0);
   }
   label$7 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
     break label$7
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9140 | 0, 15451 | 0, 0 | 0);
   }
   label$8 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
     break label$8
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9141 | 0, 15463 | 0, 0 | 0);
   }
   label$9 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
     break label$9
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9142 | 0, 15476 | 0, 0 | 0);
   }
   label$10 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$10
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9143 | 0, 15491 | 0, 0 | 0);
   }
   label$11 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
     break label$11
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9144 | 0, 15500 | 0, 0 | 0);
   }
   label$12 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 27 | 0) & 1 | 0)) {
     break label$12
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9145 | 0, 15510 | 0, 0 | 0);
   }
   label$13 : {
    if (((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0) {
     break label$13
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9146 | 0, 15518 | 0, 0 | 0);
   }
   label$14 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
     break label$14
    }
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$14
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9147 | 0, 15524 | 0, 0 | 0);
   }
   label$15 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 15 | 0) & 1 | 0)) {
     break label$15
    }
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$15
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9418 | 0, 15530 | 0, 0 | 0);
   }
   label$16 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0)) {
     break label$16
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9419 | 0, 15537 | 0, 0 | 0);
   }
   label$17 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 24 | 0) & 1 | 0)) {
     break label$17
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9148 | 0, 15545 | 0, 0 | 0);
   }
   label$18 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0)) {
     break label$18
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9149 | 0, 15562 | 0, 0 | 0);
   }
   label$19 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 26 | 0) & 1 | 0)) {
     break label$19
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9420 | 0, 15576 | 0, 0 | 0);
   }
   label$20 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0)) {
     break label$20
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9150 | 0, 15587 | 0, 0 | 0);
   }
   label$21 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
     break label$21
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9151 | 0, 15600 | 0, 0 | 0);
   }
   label$22 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 22 | 0) & 1 | 0)) {
     break label$22
    }
    if (((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 23 | 0) & 1 | 0) {
     break label$22
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9152 | 0, 15610 | 0, 0 | 0);
   }
   label$23 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 23 | 0) & 1 | 0)) {
     break label$23
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9153 | 0, 15623 | 0, 0 | 0);
   }
   label$24 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 29 | 0) & 1 | 0)) {
     break label$24
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9154 | 0, 15636 | 0, 0 | 0);
   }
   label$25 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
     break label$25
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9155 | 0, 15646 | 0, 0 | 0);
   }
   label$26 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 18 | 0) & 1 | 0)) {
     break label$26
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9156 | 0, 15655 | 0, 0 | 0);
   }
   label$27 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0)) {
     break label$27
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9157 | 0, 15668 | 0, 0 | 0);
   }
   label$28 : {
    if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
     break label$28
    }
    $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9158 | 0, 15680 | 0, 0 | 0);
   }
   $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9159 | 0, 13226 | 0, 0 | 0);
   label$29 : {
    label$30 : {
     if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0)) {
      break label$30
     }
     $306_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
     HEAPF64[($4_1 + 176 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 3];
     $396($306_1 | 0, 9160 | 0, 15691 | 0, $4_1 + 176 | 0 | 0);
     break label$29;
    }
    label$31 : {
     label$32 : {
      if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
       break label$32
      }
      if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
       break label$32
      }
      if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$32
      }
      $328_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
      HEAP32[($4_1 + 192 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $396($328_1 | 0, 9161 | 0, 15710 | 0, $4_1 + 192 | 0 | 0);
      break label$31;
     }
     label$33 : {
      label$34 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
        break label$34
       }
       label$35 : {
        if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$35
        }
        if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$35
        }
        $358_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
        HEAP32[($4_1 + 208 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($358_1 | 0, 9162 | 0, 15734 | 0, $4_1 + 208 | 0 | 0);
       }
       break label$33;
      }
      label$36 : {
       label$37 : {
        if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
         break label$37
        }
        label$38 : {
         if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$38
         }
         $380_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
         HEAP32[($4_1 + 224 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $396($380_1 | 0, 9163 | 0, 15776 | 0, $4_1 + 224 | 0 | 0);
        }
        break label$36;
       }
       label$39 : {
        if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$39
        }
        $396_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
        HEAP32[($4_1 + 240 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($396_1 | 0, 9164 | 0, 15822 | 0, $4_1 + 240 | 0 | 0);
       }
      }
     }
    }
   }
   label$40 : {
    label$41 : {
     if (!(((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0 | 0) == (511 | 0) & 1 | 0)) {
      break label$41
     }
     $414_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
     HEAP32[($4_1 + 144 | 0) >> 2] = 511;
     $396($414_1 | 0, 9427 | 0, 15848 | 0, $4_1 + 144 | 0 | 0);
     break label$40;
    }
    label$42 : {
     if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0)) {
      break label$42
     }
     $424_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
     HEAP32[($4_1 + 160 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0;
     $396($424_1 | 0, 9165 | 0, 15869 | 0, $4_1 + 160 | 0 | 0);
    }
   }
   $81(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 15887 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, -1 | 0);
   $440_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 128 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 16 | 0) >> 3];
   $396($440_1 | 0, 9166 | 0, 15902 | 0, $4_1 + 128 | 0 | 0);
   label$43 : {
    label$44 : {
     if ((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
      break label$44
     }
     if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$43
     }
    }
    $109(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 5 | 0, 15924 | 0, HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0);
   }
   label$45 : {
    if (!(+HEAPF64[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 8 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$45
    }
    $471_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
    HEAPF64[($4_1 + 112 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 8 | 0) >> 3];
    $396($471_1 | 0, 9167 | 0, 15939 | 0, $4_1 + 112 | 0 | 0);
   }
   label$46 : {
    if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$46
    }
    label$47 : {
     label$48 : {
      if (!((HEAP32[((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$48
      }
      if (0 & 1 | 0) {
       break label$46
      }
      break label$47;
     }
     if (1 & 1 | 0) {
      break label$46
     }
    }
    HEAP32[($4_1 + 284 | 0) >> 2] = $344(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0;
    label$49 : {
     label$50 : {
      if (!(($337(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0 | 0) < (6 | 0) & 1 | 0)) {
       break label$50
      }
      $512_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
      HEAP32[($4_1 + 80 | 0) >> 2] = $267(HEAP32[($4_1 + 284 | 0) >> 2] | 0 | 0) | 0;
      $396($512_1 | 0, 9168 | 0, 15965 | 0, $4_1 + 80 | 0 | 0);
      $519_1 = 0;
      HEAP32[($4_1 + 292 | 0) >> 2] = $519_1;
      label$51 : {
       if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != ($519_1 | 0) & 1 | 0)) {
        break label$51
       }
       HEAP32[($4_1 + 288 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0;
       label$52 : {
        label$53 : while (1) {
         $532 = HEAP32[($4_1 + 288 | 0) >> 2] | 0;
         HEAP32[($4_1 + 288 | 0) >> 2] = $532 + 4 | 0;
         $535 = HEAP32[$532 >> 2] | 0;
         HEAP32[($4_1 + 292 | 0) >> 2] = $535;
         if (!(($535 | 0) != (0 | 0) & 1 | 0)) {
          break label$52
         }
         $121(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 15999 | 0, HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0);
         continue label$53;
        };
       }
      }
      break label$49;
     }
     label$54 : {
      label$55 : {
       if (!(($337(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0 | 0) < (21 | 0) & 1 | 0)) {
        break label$55
       }
       $35(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 16005 | 0, HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0);
       break label$54;
      }
      $557 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
      HEAP32[($4_1 + 96 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0;
      $396($557 | 0, 9169 | 0, 16024 | 0, $4_1 + 96 | 0 | 0);
      $121(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 16055 | 0, HEAP32[($4_1 + 284 | 0) >> 2] | 0 | 0);
     }
    }
    $568 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
    HEAPF64[($4_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($4_1 + 296 | 0) >> 2] | 0) >> 3];
    $396($568 | 0, 9170 | 0, 16066 | 0, $4_1 + 64 | 0 | 0);
   }
   label$56 : {
    if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$56
    }
    label$57 : {
     label$58 : {
      if (!((HEAP32[((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$58
      }
      if (0 & 1 | 0) {
       break label$56
      }
      break label$57;
     }
     if (1 & 1 | 0) {
      break label$56
     }
    }
    HEAP32[($4_1 + 284 | 0) >> 2] = $344(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
    label$59 : {
     label$60 : {
      if (!(($337(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0 | 0) < (6 | 0) & 1 | 0)) {
       break label$60
      }
      $609 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
      HEAP32[($4_1 + 32 | 0) >> 2] = $267(HEAP32[($4_1 + 284 | 0) >> 2] | 0 | 0) | 0;
      $396($609 | 0, 9171 | 0, 16098 | 0, $4_1 + 32 | 0 | 0);
      $616 = 0;
      HEAP32[($4_1 + 292 | 0) >> 2] = $616;
      label$61 : {
       if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($616 | 0) & 1 | 0)) {
        break label$61
       }
       HEAP32[($4_1 + 288 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
       label$62 : {
        label$63 : while (1) {
         $629 = HEAP32[($4_1 + 288 | 0) >> 2] | 0;
         HEAP32[($4_1 + 288 | 0) >> 2] = $629 + 4 | 0;
         $632 = HEAP32[$629 >> 2] | 0;
         HEAP32[($4_1 + 292 | 0) >> 2] = $632;
         if (!(($632 | 0) != (0 | 0) & 1 | 0)) {
          break label$62
         }
         $121(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 15999 | 0, HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0);
         continue label$63;
        };
       }
      }
      break label$59;
     }
     label$64 : {
      label$65 : {
       if (!(($337(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0 | 0) < (21 | 0) & 1 | 0)) {
        break label$65
       }
       $35(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 16133 | 0, HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0);
       break label$64;
      }
      $654 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
      HEAP32[($4_1 + 48 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
      $396($654 | 0, 9172 | 0, 16153 | 0, $4_1 + 48 | 0 | 0);
      $121(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 16055 | 0, HEAP32[($4_1 + 284 | 0) >> 2] | 0 | 0);
     }
    }
    HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
    $4(HEAP32[($4_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0, $4_1 + 264 | 0 | 0);
    $675 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
    HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[($4_1 + 264 | 0) >> 3];
    $396($675 | 0, 9173 | 0, 16185 | 0, $4_1 + 16 | 0 | 0);
   }
   $122(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 16217 | 0, HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
   $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9174 | 0, 16233 | 0, 0 | 0);
   $688 = 0;
   HEAP32[($4_1 + 280 | 0) >> 2] = $688;
   label$66 : {
    if (!((HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($688 | 0) & 1 | 0)) {
     break label$66
    }
    HEAP32[($4_1 + 276 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$67 : {
     label$68 : while (1) {
      $701 = HEAP32[($4_1 + 276 | 0) >> 2] | 0;
      HEAP32[($4_1 + 276 | 0) >> 2] = $701 + 4 | 0;
      $704 = HEAP32[$701 >> 2] | 0;
      HEAP32[($4_1 + 280 | 0) >> 2] = $704;
      if (!(($704 | 0) != (0 | 0) & 1 | 0)) {
       break label$67
      }
      label$69 : {
       label$70 : {
        if (!((HEAP32[($4_1 + 280 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$70
        }
        $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9175 | 0, 16259 | 0, 0 | 0);
        break label$69;
       }
       label$71 : {
        label$72 : {
         if (!((HEAP32[($4_1 + 280 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$72
         }
         $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9176 | 0, 16271 | 0, 0 | 0);
         break label$71;
        }
        $732 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
        HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 280 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($732 | 0, 9177 | 0, 16287 | 0, $4_1 | 0);
       }
      }
      continue label$68;
     };
    }
   }
   $396(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, 9178 | 0, 13226 | 0, 0 | 0);
   HEAP32[(0 + 88140 | 0) >> 2] = HEAP32[(0 + 90328 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 304 | 0;
  return;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $18_1 = 0, $31_1 = 0, $34_1 = 0, $53_1 = 0, $66_1 = 0, $69_1 = 0, $75_1 = 0, $98_1 = 0, $115_1 = 0, $127_1 = 0, $140_1 = 0, $143_1 = 0, $149_1 = 0, $162_1 = 0, $165_1 = 0, $181_1 = 0, $197_1 = 0, $239_1 = 0, $252_1 = 0, $255_1 = 0, $272_1 = 0, $285_1 = 0, $288_1 = 0, $40_1 = 0, $261_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$2
    }
    if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
     break label$2
    }
    $396(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 9179 | 0, 16292 | 0, 0 | 0);
    $18_1 = 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = $18_1;
    label$3 : {
     if (!((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($18_1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
     label$4 : {
      label$5 : while (1) {
       $31_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
       HEAP32[($4_1 + 40 | 0) >> 2] = $31_1 + 4 | 0;
       $34_1 = HEAP32[$31_1 >> 2] | 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = $34_1;
       if (!(($34_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$4
       }
       $40_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
       HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       $396($40_1 | 0, 9180 | 0, 16322 | 0, $4_1 | 0);
       continue label$5;
      };
     }
    }
    $396(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 9181 | 0, 13226 | 0, 0 | 0);
    break label$1;
   }
   $396(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 9182 | 0, 16327 | 0, 0 | 0);
   $53_1 = 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = $53_1;
   label$6 : {
    if (!((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($53_1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$7 : {
     label$8 : while (1) {
      $66_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
      HEAP32[($4_1 + 40 | 0) >> 2] = $66_1 + 4 | 0;
      $69_1 = HEAP32[$66_1 >> 2] | 0;
      HEAP32[($4_1 + 44 | 0) >> 2] = $69_1;
      if (!(($69_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      $75_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
      HEAP8[($75_1 + 16 | 0) >> 0] = (HEAPU8[($75_1 + 16 | 0) >> 0] | 0) & -2 | 0;
      continue label$8;
     };
    }
   }
   label$9 : {
    label$10 : {
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$11 : while (1) {
      $98_1 = 0;
      label$12 : {
       if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       $98_1 = (((HEAPU8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) != (0 | 0) ^ -1 | 0;
      }
      label$13 : {
       if (!($98_1 & 1 | 0)) {
        break label$13
       }
       $115_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
       HEAP8[($115_1 + 16 | 0) >> 0] = HEAPU8[($115_1 + 16 | 0) >> 0] | 0 | 1 | 0;
       $134(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
       HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = $290(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
       continue label$11;
      }
      break label$11;
     };
     break label$9;
    }
    $127_1 = 0;
    HEAP32[($4_1 + 52 | 0) >> 2] = $127_1;
    label$14 : {
     if (!((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($127_1 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$15 : {
      label$16 : while (1) {
       $140_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
       HEAP32[($4_1 + 48 | 0) >> 2] = $140_1 + 4 | 0;
       $143_1 = HEAP32[$140_1 >> 2] | 0;
       HEAP32[($4_1 + 52 | 0) >> 2] = $143_1;
       if (!(($143_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$15
       }
       $149_1 = 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = $149_1;
       label$17 : {
        if (!((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($149_1 | 0) & 1 | 0)) {
         break label$17
        }
        HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
        label$18 : {
         label$19 : while (1) {
          $162_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
          HEAP32[($4_1 + 40 | 0) >> 2] = $162_1 + 4 | 0;
          $165_1 = HEAP32[$162_1 >> 2] | 0;
          HEAP32[($4_1 + 44 | 0) >> 2] = $165_1;
          if (!(($165_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$18
          }
          label$20 : {
           label$21 : {
            if (!((HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$21
            }
            $181_1 = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
            break label$20;
           }
           $181_1 = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          }
          label$22 : {
           if (!(($181_1 | 0) == (HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$22
           }
           if (((HEAPU8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 1 | 0) & 255 | 0) {
            break label$22
           }
           $197_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
           HEAP8[($197_1 + 16 | 0) >> 0] = HEAPU8[($197_1 + 16 | 0) >> 0] | 0 | 1 | 0;
           $134(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
           HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
          }
          continue label$19;
         };
        }
       }
       continue label$16;
      };
     }
    }
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
   label$23 : {
    if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$23
    }
    if (!(((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
     break label$23
    }
    if (!(HEAP32[(0 + 90180 | 0) >> 2] | 0)) {
     break label$23
    }
    $396(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 9411 | 0, 16342 | 0, 0 | 0);
   }
   label$24 : {
    if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$24
    }
    $396(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 9183 | 0, 16381 | 0, 0 | 0);
    $239_1 = 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = $239_1;
    label$25 : {
     if (!((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($239_1 | 0) & 1 | 0)) {
      break label$25
     }
     HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
     label$26 : {
      label$27 : while (1) {
       $252_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
       HEAP32[($4_1 + 40 | 0) >> 2] = $252_1 + 4 | 0;
       $255_1 = HEAP32[$252_1 >> 2] | 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = $255_1;
       if (!(($255_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$26
       }
       $261_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
       HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       $396($261_1 | 0, 9184 | 0, 16322 | 0, $4_1 + 16 | 0 | 0);
       continue label$27;
      };
     }
    }
    $396(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 9185 | 0, 13226 | 0, 0 | 0);
   }
   $272_1 = 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = $272_1;
   label$28 : {
    if (!((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($272_1 | 0) & 1 | 0)) {
     break label$28
    }
    HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$29 : {
     label$30 : while (1) {
      $285_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
      HEAP32[($4_1 + 40 | 0) >> 2] = $285_1 + 4 | 0;
      $288_1 = HEAP32[$285_1 >> 2] | 0;
      HEAP32[($4_1 + 44 | 0) >> 2] = $288_1;
      if (!(($288_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$29
      }
      label$31 : {
       if (((HEAPU8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 1 | 0) & 255 | 0) {
        break label$31
       }
       $134(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
      }
      continue label$30;
     };
    }
   }
  }
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $96($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $37_1 = 0, $40_1 = 0, $96_1 = 0, $123_1 = 0, $136_1 = 0, $139_1 = 0, $147_1 = 0, $16_1 = 0, $19_1 = 0, $43_1 = 0, $154_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0) {
     break label$2
    }
    $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9234 | 0, 17874 | 0, 0 | 0);
    break label$1;
   }
   $16_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
   $19_1 = $267(HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[($4_1 + 32 | 0) >> 2] = $19_1;
   $396($16_1 | 0, 9235 | 0, 17888 | 0, $4_1 + 32 | 0 | 0);
   HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   label$3 : {
    if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
    label$4 : {
     label$5 : while (1) {
      $37_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
      HEAP32[($4_1 + 64 | 0) >> 2] = $37_1 + -1 | 0;
      if (!$37_1) {
       break label$4
      }
      $40_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
      HEAP32[($4_1 + 68 | 0) >> 2] = $40_1 + 8 | 0;
      HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[$40_1 >> 3];
      $43_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
      HEAPF64[$4_1 >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3];
      $396($43_1 | 0, 9236 | 0, 17900 | 0, $4_1 | 0);
      continue label$5;
     };
    }
   }
   label$6 : {
    if (!((((HEAPU8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
     break label$6
    }
    $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9237 | 0, 17907 | 0, 0 | 0);
   }
   label$7 : {
    if (!((((HEAPU8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 3 | 0) & 1 | 0) & 255 | 0)) {
     break label$7
    }
    $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9238 | 0, 17916 | 0, 0 | 0);
   }
   label$8 : {
    if (!((((HEAPU8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0)) {
     break label$8
    }
    $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9415 | 0, 15500 | 0, 0 | 0);
   }
   label$9 : {
    if (!(((HEAPU8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0)) {
     break label$9
    }
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$9
    }
    $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9416 | 0, 15524 | 0, 0 | 0);
   }
   $96_1 = 1;
   label$10 : {
    if (!((((HEAPU8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> $96_1 | 0) & $96_1 | 0) & 255 | 0)) {
     break label$10
    }
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$10
    }
    $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9417 | 0, 15530 | 0, 0 | 0);
   }
   $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9239 | 0, 13226 | 0, 0 | 0);
   if (!((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9240 | 0, 17926 | 0, 0 | 0);
   $123_1 = 0;
   HEAP32[($4_1 + 56 | 0) >> 2] = $123_1;
   label$11 : {
    if (!((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($123_1 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
    label$12 : {
     label$13 : while (1) {
      $136_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
      HEAP32[($4_1 + 52 | 0) >> 2] = $136_1 + 4 | 0;
      $139_1 = HEAP32[$136_1 >> 2] | 0;
      HEAP32[($4_1 + 56 | 0) >> 2] = $139_1;
      if (!(($139_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$12
      }
      $147_1 = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($4_1 + 60 | 0) >> 2] = $147_1;
      label$14 : {
       if (($147_1 | 0) % (100 | 0) | 0) {
        break label$14
       }
       $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9241 | 0, 17939 | 0, 0 | 0);
      }
      $154_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $396($154_1 | 0, 9242 | 0, 16287 | 0, $4_1 + 16 | 0 | 0);
      continue label$13;
     };
    }
   }
   $396(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 9243 | 0, 13226 | 0, 0 | 0);
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $97($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = -1;
    break label$1;
   }
   label$3 : {
    if (((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 1;
    break label$1;
   }
   label$4 : {
    if (!(+HEAPF64[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 32 | 0) >> 3] > +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 3] & 1 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 1;
    break label$1;
   }
   label$5 : {
    if (!(+HEAPF64[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 32 | 0) >> 3] == +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 3] & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = -1;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $98($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  $10_1 = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $10_1;
  label$1 : {
   if ($10_1) {
    break label$1
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0 - (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) | 0;
  }
  $16_1 = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $16_1;
  label$2 : {
   if ($16_1) {
    break label$2
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = 0 - (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) | 0;
  }
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $99($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return ((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0) - ((HEAP32[((HEAP32[$4_1 >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0) | 0 | 0;
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0, $35_1 = 0, $38_1 = 0, $77_1 = 0, $88_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 87976 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     if (!(((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[(0 + 87968 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0;
     break label$1;
    }
    $22_1 = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $22_1;
    label$4 : {
     if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($22_1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[$3_1 >> 2] = (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$5 : {
      label$6 : while (1) {
       $35_1 = HEAP32[$3_1 >> 2] | 0;
       HEAP32[$3_1 >> 2] = $35_1 + 4 | 0;
       $38_1 = HEAP32[$35_1 >> 2] | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $38_1;
       if (!(($38_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       label$7 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 0;
        break label$1;
       }
       continue label$6;
      };
     }
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   label$8 : {
    if (!(HEAP32[(0 + 87968 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ((((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0;
    break label$1;
   }
   label$9 : {
    if ((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$9
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   $77_1 = 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = (($42(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, $77_1 | 0) | 0 | 0) != ($77_1 | 0) ^ -1 | 0) & 1 | 0;
  }
  $88_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $88_1 | 0;
 }
 
 function $101($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $115_1 = 0, $144_1 = 0, $52_1 = 0, $63_1 = 0, $66_1 = 0, $143_1 = 0, $159_1 = 0, $162_1 = 0, $194_1 = 0, $202_1 = 0, $205_1 = 0, $208_1 = 0, $211_1 = 0, $264_1 = 0, $354_1 = 0, $421_1 = 0, $501_1 = 0, $88_1 = 0, $136_1 = 0, $191_1 = 0, $193_1 = 0, $529 = 0.0, $531 = 0.0, $319_1 = 0, $320_1 = 0, $321_1 = 0, $379_1 = 0, $380_1 = 0, $381_1 = 0, $567 = 0.0, $487_1 = 0, $488_1 = 0, $489_1 = 0, $491_1 = 0, $498_1 = 0, $520_1 = 0;
  $6_1 = global$0 - 240 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 232 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 228 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 224 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 188 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 148 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 144 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 140 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 132 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
  HEAPF64[($6_1 + 96 | 0) >> 3] = +($7_1 | 0);
  HEAP32[($6_1 + 172 | 0) >> 2] = (HEAP32[(0 + 90296 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88316 | 0) >> 2] | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($6_1 + 208 | 0) >> 2] = $7_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 208 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($6_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[((HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($6_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / 2.0;
    HEAP32[($6_1 + 208 | 0) >> 2] = (HEAP32[($6_1 + 208 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $52_1 = 0;
  HEAP32[($6_1 + 220 | 0) >> 2] = $52_1;
  label$3 : {
   if (!((HEAP32[($6_1 + 228 | 0) >> 2] | 0 | 0) != ($52_1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($6_1 + 216 | 0) >> 2] = (HEAP32[($6_1 + 228 | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $63_1 = HEAP32[($6_1 + 216 | 0) >> 2] | 0;
     HEAP32[($6_1 + 216 | 0) >> 2] = $63_1 + 4 | 0;
     $66_1 = HEAP32[$63_1 >> 2] | 0;
     HEAP32[($6_1 + 220 | 0) >> 2] = $66_1;
     if (!(($66_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 136 | 0) >> 2] = (HEAP32[($6_1 + 136 | 0) >> 2] | 0) + 1 | 0;
     label$6 : {
      label$7 : {
       if (HEAP32[((HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) {
        break label$7
       }
       HEAP32[($6_1 + 140 | 0) >> 2] = 1;
       break label$6;
      }
      label$8 : {
       if ((HEAP32[((HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$8
       }
       $88_1 = $32(HEAP32[((HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 40 | 0) >> 2] = $88_1;
      }
      $325($6_1 + 148 | 0 | 0, HEAP32[((HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0);
     }
     continue label$5;
    };
   }
  }
  label$9 : {
   label$10 : {
    if (!((HEAP32[($6_1 + 136 | 0) >> 2] | 0 | 0) > (HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($6_1 + 188 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
    $325($6_1 + 188 | 0 | 0, HEAP32[((HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    label$11 : {
     if (!(HEAP32[($6_1 + 140 | 0) >> 2] | 0)) {
      break label$11
     }
     $325($6_1 + 188 | 0 | 0, HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0);
    }
    $115_1 = 0;
    $34(HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0, $115_1 | 0, $115_1 | 0, $6_1 + 188 | 0 | 0);
    $334(HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $115_1 | 0) | 0;
    break label$9;
   }
   label$12 : {
    label$13 : {
     if (!((HEAP32[($6_1 + 136 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     label$14 : {
      if (!(HEAP32[($6_1 + 140 | 0) >> 2] | 0)) {
       break label$14
      }
      $325($6_1 + 148 | 0 | 0, HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 148 | 0) >> 2] | 0;
     break label$12;
    }
    $136_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($6_1 + 80 | 0) >> 2] = HEAP32[($6_1 + 136 | 0) >> 2] | 0;
    $396($136_1 | 0, 6216 | 0, 12342 | 0, $6_1 + 80 | 0 | 0);
    $143_1 = 0;
    $382(5 | 0, $143_1 | 0, $143_1 | 0);
   }
  }
  $144_1 = 0;
  HEAP32[($6_1 + 212 | 0) >> 2] = $144_1;
  HEAP32[($6_1 + 156 | 0) >> 2] = HEAP32[(0 + 90296 | 0) >> 2] | 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 184 | 0) >> 2] = $144_1;
  label$15 : {
   if (!((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($144_1 | 0) & 1 | 0)) {
    break label$15
   }
   HEAP32[($6_1 + 180 | 0) >> 2] = (HEAP32[($6_1 + 188 | 0) >> 2] | 0) + 4 | 0;
   label$16 : {
    label$17 : while (1) {
     $159_1 = HEAP32[($6_1 + 180 | 0) >> 2] | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $159_1 + 4 | 0;
     $162_1 = HEAP32[$159_1 >> 2] | 0;
     HEAP32[($6_1 + 184 | 0) >> 2] = $162_1;
     if (!(($162_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$16
     }
     label$18 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
       break label$18
      }
      $36(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 12426 | 0, $6_1 + 184 | 0 | 0, 1 | 0, HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0);
     }
     label$19 : {
      if (!((HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$19
      }
      $191_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
      $193_1 = HEAP32[(0 + 90300 | 0) >> 2] | 0;
      $194_1 = HEAP32[($6_1 + 212 | 0) >> 2] | 0;
      HEAP32[($6_1 + 212 | 0) >> 2] = $194_1 + 1 | 0;
      HEAP32[($193_1 + ($194_1 << 2 | 0) | 0) >> 2] = $191_1;
      HEAP32[($6_1 + 160 | 0) >> 2] = HEAP32[($6_1 + 176 | 0) >> 2] | 0;
      HEAP32[($6_1 + 208 | 0) >> 2] = HEAP32[($6_1 + 132 | 0) >> 2] | 0;
      label$20 : {
       label$21 : while (1) {
        $202_1 = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
        HEAP32[($6_1 + 208 | 0) >> 2] = $202_1 + -1 | 0;
        if (!$202_1) {
         break label$20
        }
        $205_1 = HEAP32[($6_1 + 184 | 0) >> 2] | 0;
        HEAP32[($6_1 + 184 | 0) >> 2] = $205_1 + 8 | 0;
        $529 = +HEAPF64[$205_1 >> 3];
        $208_1 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
        HEAP32[($6_1 + 160 | 0) >> 2] = $208_1 + 8 | 0;
        $531 = $529 - +HEAPF64[$208_1 >> 3];
        $211_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
        HEAP32[($6_1 + 156 | 0) >> 2] = $211_1 + 8 | 0;
        HEAPF64[$211_1 >> 3] = $531;
        continue label$21;
       };
      }
     }
     continue label$17;
    };
   }
  }
  HEAP32[((HEAP32[(0 + 90300 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 212 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
  HEAP32[($6_1 + 168 | 0) >> 2] = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
  $19(HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90300 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 144 | 0 | 0);
  label$22 : {
   label$23 : {
    if (!((HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($6_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$23
    }
    HEAP32[($6_1 + 164 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    break label$22;
   }
   HEAP32[($6_1 + 164 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
  HEAPF64[($6_1 + 120 | 0) >> 3] = +$28(HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0, $6_1 + 112 | 0 | 0);
  label$24 : {
   if (!(+HEAPF64[($6_1 + 120 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$24
   }
   HEAPF64[($6_1 + 112 | 0) >> 3] = -+HEAPF64[($6_1 + 112 | 0) >> 3];
   HEAP32[($6_1 + 152 | 0) >> 2] = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
   HEAP32[($6_1 + 208 | 0) >> 2] = HEAP32[($6_1 + 132 | 0) >> 2] | 0;
   label$25 : {
    label$26 : while (1) {
     $264_1 = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
     HEAP32[($6_1 + 208 | 0) >> 2] = $264_1 + -1 | 0;
     if (!$264_1) {
      break label$25
     }
     HEAPF64[(HEAP32[($6_1 + 152 | 0) >> 2] | 0) >> 3] = -+HEAPF64[(HEAP32[($6_1 + 152 | 0) >> 2] | 0) >> 3];
     HEAP32[($6_1 + 152 | 0) >> 2] = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + 8 | 0;
     continue label$26;
    };
   }
  }
  label$27 : {
   label$28 : {
    if (HEAP32[(0 + 88276 | 0) >> 2] | 0) {
     break label$28
    }
    if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
     break label$27
    }
   }
   HEAP32[($6_1 + 204 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 200 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   label$29 : {
    if (HEAP32[($6_1 + 140 | 0) >> 2] | 0) {
     break label$29
    }
    HEAP32[(0 + 91024 | 0) >> 2] = (HEAP32[(0 + 91024 | 0) >> 2] | 0) + 1 | 0;
    HEAPF64[($6_1 + 120 | 0) >> 3] = +$28(HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0, $6_1 + 112 | 0 | 0);
    label$30 : {
     if (!(+HEAPF64[($6_1 + 120 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$30
     }
     HEAPF64[($6_1 + 120 | 0) >> 3] = -+HEAPF64[($6_1 + 120 | 0) >> 3];
    }
    HEAP32[(0 + 92168 | 0) >> 2] = (HEAP32[(0 + 92168 | 0) >> 2] | 0) + 1 | 0;
    label$31 : {
     if (!(+HEAPF64[(0 + 92184 | 0) >> 3] < +HEAPF64[($6_1 + 120 | 0) >> 3] & 1 | 0)) {
      break label$31
     }
     HEAPF64[(0 + 92184 | 0) >> 3] = +HEAPF64[($6_1 + 120 | 0) >> 3];
    }
    HEAPF64[(0 + 92176 | 0) >> 3] = +HEAPF64[(0 + 92176 | 0) >> 3] + +HEAPF64[($6_1 + 120 | 0) >> 3];
    label$32 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$32
     }
     $319_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $320_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
     $321_1 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
     HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 120 | 0) >> 3];
     HEAP32[($6_1 + 68 | 0) >> 2] = $321_1;
     HEAP32[($6_1 + 64 | 0) >> 2] = $320_1;
     $396($319_1 | 0, 4014 | 0, 12466 | 0, $6_1 + 64 | 0 | 0);
    }
    HEAP32[($6_1 + 208 | 0) >> 2] = 0;
    label$33 : {
     label$34 : while (1) {
      if (!((HEAP32[($6_1 + 208 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$33
      }
      HEAPF64[((HEAP32[($6_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 208 | 0) >> 2] = (HEAP32[($6_1 + 208 | 0) >> 2] | 0) + 1 | 0;
      continue label$34;
     };
    }
    $354_1 = 0;
    $15(HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, $354_1 | 0);
    HEAPF64[($6_1 + 104 | 0) >> 3] = +$28(HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0, $6_1 + 96 | 0 | 0);
    label$35 : {
     label$36 : {
      if (!(+HEAPF64[($6_1 + 104 | 0) >> 3] < +($354_1 | 0) & 1 | 0)) {
       break label$36
      }
      HEAPF64[($6_1 + 104 | 0) >> 3] = +HEAPF64[($6_1 + 104 | 0) >> 3] + 1.0;
      break label$35;
     }
     HEAPF64[($6_1 + 104 | 0) >> 3] = +HEAPF64[($6_1 + 104 | 0) >> 3] - 1.0;
    }
    label$37 : {
     if (!(+HEAPF64[($6_1 + 104 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$37
     }
     HEAPF64[($6_1 + 104 | 0) >> 3] = -+HEAPF64[($6_1 + 104 | 0) >> 3];
    }
    label$38 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$38
     }
     $379_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $380_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
     $381_1 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
     $567 = +HEAPF64[($6_1 + 104 | 0) >> 3];
     HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[($6_1 + 144 | 0) >> 2] | 0;
     HEAPF64[($6_1 + 40 | 0) >> 3] = $567;
     HEAP32[($6_1 + 36 | 0) >> 2] = $381_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $380_1;
     $396($379_1 | 0, 4015 | 0, 12513 | 0, $6_1 + 32 | 0 | 0);
    }
    label$39 : {
     label$40 : {
      if (!(HEAP32[($6_1 + 144 | 0) >> 2] | 0)) {
       break label$40
      }
      HEAP32[(0 + 92144 | 0) >> 2] = (HEAP32[(0 + 92144 | 0) >> 2] | 0) + 1 | 0;
      label$41 : {
       if (!(+HEAPF64[(0 + 92160 | 0) >> 3] < +HEAPF64[($6_1 + 104 | 0) >> 3] & 1 | 0)) {
        break label$41
       }
       HEAPF64[(0 + 92160 | 0) >> 3] = +HEAPF64[($6_1 + 104 | 0) >> 3];
      }
      HEAPF64[(0 + 92152 | 0) >> 3] = +HEAPF64[(0 + 92152 | 0) >> 3] + +HEAPF64[($6_1 + 104 | 0) >> 3];
      break label$39;
     }
     HEAP32[(0 + 92192 | 0) >> 2] = (HEAP32[(0 + 92192 | 0) >> 2] | 0) + 1 | 0;
     label$42 : {
      if (!(+HEAPF64[(0 + 92208 | 0) >> 3] < +HEAPF64[($6_1 + 104 | 0) >> 3] & 1 | 0)) {
       break label$42
      }
      HEAPF64[(0 + 92208 | 0) >> 3] = +HEAPF64[($6_1 + 104 | 0) >> 3];
     }
     HEAPF64[(0 + 92200 | 0) >> 3] = +HEAPF64[(0 + 92200 | 0) >> 3] + +HEAPF64[($6_1 + 104 | 0) >> 3];
    }
   }
   label$43 : {
    if (!((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$43
    }
    $421_1 = 0;
    HEAP32[($6_1 + 184 | 0) >> 2] = $421_1;
    label$44 : {
     if (!((HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) != ($421_1 | 0) & 1 | 0)) {
      break label$44
     }
     HEAP32[($6_1 + 196 | 0) >> 2] = 0;
     HEAP32[($6_1 + 184 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($6_1 + 192 | 0) >> 2] = $337(HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) | 0;
     label$45 : {
      label$46 : while (1) {
       if (!((HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$45
       }
       label$47 : {
        if ($342(HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0) | 0) {
         break label$47
        }
        HEAP32[($6_1 + 220 | 0) >> 2] = HEAP32[(((HEAP32[($6_1 + 228 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 196 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        HEAP32[(0 + 91024 | 0) >> 2] = (HEAP32[(0 + 91024 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[($6_1 + 120 | 0) >> 3] = +$28(HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0, $6_1 + 112 | 0 | 0);
        label$48 : {
         if (!(+HEAPF64[($6_1 + 120 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$48
         }
         HEAPF64[($6_1 + 120 | 0) >> 3] = -+HEAPF64[($6_1 + 120 | 0) >> 3];
        }
        HEAP32[(0 + 92120 | 0) >> 2] = (HEAP32[(0 + 92120 | 0) >> 2] | 0) + 1 | 0;
        label$49 : {
         if (!(+HEAPF64[(0 + 92136 | 0) >> 3] < +HEAPF64[($6_1 + 120 | 0) >> 3] & 1 | 0)) {
          break label$49
         }
         HEAPF64[(0 + 92136 | 0) >> 3] = +HEAPF64[($6_1 + 120 | 0) >> 3];
        }
        HEAPF64[(0 + 92128 | 0) >> 3] = +HEAPF64[(0 + 92128 | 0) >> 3] + +HEAPF64[($6_1 + 120 | 0) >> 3];
        label$50 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
          break label$50
         }
         $487_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $488_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
         $489_1 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
         $491_1 = HEAP32[((HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
         HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 120 | 0) >> 3];
         HEAP32[($6_1 + 8 | 0) >> 2] = $491_1;
         HEAP32[($6_1 + 4 | 0) >> 2] = $489_1;
         HEAP32[$6_1 >> 2] = $488_1;
         $396($487_1 | 0, 4016 | 0, 12564 | 0, $6_1 | 0);
        }
       }
       $498_1 = (HEAP32[($6_1 + 148 | 0) >> 2] | 0) + 4 | 0;
       $501_1 = (HEAP32[($6_1 + 196 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($6_1 + 196 | 0) >> 2] = $501_1;
       HEAP32[($6_1 + 184 | 0) >> 2] = HEAP32[($498_1 + ($501_1 << 2 | 0) | 0) >> 2] | 0;
       continue label$46;
      };
     }
    }
   }
  }
  HEAPF64[(HEAP32[($6_1 + 224 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 112 | 0) >> 3];
  label$51 : {
   if (!((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$51
   }
   $348($6_1 + 188 | 0 | 0);
  }
  $348($6_1 + 148 | 0 | 0);
  $520_1 = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
  global$0 = $6_1 + 240 | 0;
  return $520_1 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0, $27_1 = 0, $73_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $24_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $24_1 + 4 | 0;
     $27_1 = HEAP32[$24_1 >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $27_1;
     if (!(($27_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!(((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
       break label$4
      }
      label$5 : {
       label$6 : {
        if (!(HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
         break label$6
        }
        label$7 : {
         label$8 : {
          if (!(((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
           break label$8
          }
          if (!($352($3_1 + 20 | 0 | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) | 0)) {
           break label$7
          }
         }
         $325($3_1 + 24 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0);
        }
        break label$5;
       }
       label$9 : {
        if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
         break label$9
        }
        HEAP32[($3_1 + 8 | 0) >> 2] = 0;
        $325($3_1 + 24 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0);
       }
      }
     }
     continue label$3;
    };
   }
  }
  $440((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0, $337(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0, 4 | 0, 5 | 0);
  $348($3_1 + 20 | 0 | 0);
  $73_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $73_1 | 0;
 }
 
 function $103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $28_1 = 0, $34_1 = 0, $38_1 = 0, $51_1 = 0, $54_1 = 0, $74_1 = 0, $110_1 = 0, $123_1 = 0, $126_1 = 0, $142_1 = 0, $151_1 = 0, $164_1 = 0, $167_1 = 0, $191_1 = 0, $204_1 = 0, $207_1 = 0, $213_1 = 0, $180_1 = 0, $183_1 = 0, $222_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = 1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $25_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = $25_1 + 4 | 0;
     $28_1 = HEAP32[$25_1 >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $28_1;
     if (!(($28_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $34_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     HEAP32[($34_1 + 80 | 0) >> 2] = (HEAP32[($34_1 + 80 | 0) >> 2] | 0) & -32769 | 0;
     continue label$3;
    };
   }
  }
  $38_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $38_1;
  label$4 : {
   if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($38_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     $51_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = $51_1 + 4 | 0;
     $54_1 = HEAP32[$51_1 >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $54_1;
     if (!(($54_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      if (((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 15 | 0) & 1 | 0) {
       break label$7
      }
      HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
      break label$5;
     }
     continue label$6;
    };
   }
  }
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    $74_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($74_1 + 80 | 0) >> 2] = (HEAP32[($74_1 + 80 | 0) >> 2] | 0) & -32769 | 0 | 32768 | 0;
    label$10 : {
     if (!(((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
      break label$10
     }
     label$11 : {
      label$12 : {
       if (!(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
        break label$12
       }
       label$13 : {
        label$14 : {
         if (!(((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
          break label$14
         }
         if (!($352($4_1 + 32 | 0 | 0, HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) | 0)) {
          break label$13
         }
        }
        $325($4_1 + 36 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
       }
       break label$11;
      }
      label$15 : {
       if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
        break label$15
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = 0;
       $325($4_1 + 36 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
      }
     }
    }
    $110_1 = 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = $110_1;
    label$16 : {
     if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($110_1 | 0) & 1 | 0)) {
      break label$16
     }
     HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$17 : {
      label$18 : while (1) {
       $123_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
       HEAP32[($4_1 + 24 | 0) >> 2] = $123_1 + 4 | 0;
       $126_1 = HEAP32[$123_1 >> 2] | 0;
       HEAP32[($4_1 + 28 | 0) >> 2] = $126_1;
       if (!(($126_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$17
       }
       label$19 : {
        if (((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 15 | 0) & 1 | 0) {
         break label$19
        }
        label$20 : {
         if (!($342(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0)) {
          break label$20
         }
         break label$17;
        }
        $142_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
        HEAP32[($142_1 + 80 | 0) >> 2] = (HEAP32[($142_1 + 80 | 0) >> 2] | 0) & -32769 | 0 | 32768 | 0;
       }
       continue label$18;
      };
     }
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    continue label$9;
   };
  }
  label$21 : {
   if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
    break label$21
   }
   $151_1 = 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = $151_1;
   label$22 : {
    if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($151_1 | 0) & 1 | 0)) {
     break label$22
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
    label$23 : {
     label$24 : while (1) {
      $164_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      HEAP32[($4_1 + 24 | 0) >> 2] = $164_1 + 4 | 0;
      $167_1 = HEAP32[$164_1 >> 2] | 0;
      HEAP32[($4_1 + 28 | 0) >> 2] = $167_1;
      if (!(($167_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$23
      }
      label$25 : {
       if (((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 15 | 0) & 1 | 0) {
        break label$25
       }
       $180_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $183_1 = $267(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[$4_1 >> 2] = $183_1;
       $396($180_1 | 0, 6217 | 0, 12620 | 0, $4_1 | 0);
       $382(5 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0);
      }
      continue label$24;
     };
    }
   }
  }
  $191_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $191_1;
  label$26 : {
   if (!((HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($191_1 | 0) & 1 | 0)) {
    break label$26
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$27 : {
    label$28 : while (1) {
     $204_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = $204_1 + 4 | 0;
     $207_1 = HEAP32[$204_1 >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $207_1;
     if (!(($207_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$27
     }
     $213_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     HEAP32[($213_1 + 80 | 0) >> 2] = (HEAP32[($213_1 + 80 | 0) >> 2] | 0) & -32769 | 0 | 32768 | 0;
     continue label$28;
    };
   }
  }
  $348($4_1 + 32 | 0 | 0);
  $222_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $222_1 | 0;
 }
 
 function $104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $147_1 = 0, $14_1 = 0, $16_1 = 0, $30_1 = 0, $40_1 = 0, $46_1 = 0, $59_1 = 0, $62_1 = 0, $76_1 = 0, $82_1 = 0, $95_1 = 0, $98_1 = 0, $110_1 = 0, $123_1 = 0, $126_1 = 0, $165_1 = 0, $168_1 = 0, $281_1 = 0, $294_1 = 0, $297_1 = 0, $303_1 = 0, $241_1 = 0, $242_1 = 0, $245_1 = 0, $310_1 = 0;
  $8_1 = global$0 - 96 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 72 | 0) >> 2] = $5_1;
  $9_1 = 0;
  HEAP32[($8_1 + 40 | 0) >> 2] = $347(HEAP32[($9_1 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 24 | 0) >> 2] = HEAP32[($9_1 + 90060 | 0) >> 2] | 0;
  HEAP32[($8_1 + 20 | 0) >> 2] = $9_1;
  $14_1 = 1;
  HEAP32[($9_1 + 90260 | 0) >> 2] = (HEAP32[($9_1 + 90260 | 0) >> 2] | 0) + $14_1 | 0;
  $16_1 = HEAP32[($8_1 + 84 | 0) >> 2] | 0;
  HEAP8[($16_1 + 24 | 0) >> 0] = HEAPU8[($16_1 + 24 | 0) >> 0] | 0 | $14_1 | 0;
  label$1 : {
   if (!(HEAP32[($8_1 + 80 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
   label$2 : while (1) {
    $30_1 = 0;
    label$3 : {
     if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $30_1 = (HEAP32[(HEAP32[($8_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$4 : {
     if (!($30_1 & 1 | 0)) {
      break label$4
     }
     $40_1 = HEAP32[($8_1 + 36 | 0) >> 2] | 0;
     HEAP8[($40_1 + 24 | 0) >> 0] = (HEAPU8[($40_1 + 24 | 0) >> 0] | 0) & -2 | 0;
     HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($8_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
  }
  $46_1 = 0;
  HEAP32[($8_1 + 60 | 0) >> 2] = $46_1;
  label$5 : {
   if (!((HEAP32[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($46_1 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($8_1 + 56 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$6 : {
    label$7 : while (1) {
     $59_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     HEAP32[($8_1 + 56 | 0) >> 2] = $59_1 + 4 | 0;
     $62_1 = HEAP32[$59_1 >> 2] | 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = $62_1;
     if (!(($62_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     label$8 : {
      if (!((HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($8_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$8
      }
      $76_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
      HEAP32[($76_1 + 80 | 0) >> 2] = (HEAP32[($76_1 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
     }
     continue label$7;
    };
   }
  }
  $82_1 = 0;
  HEAP32[($8_1 + 60 | 0) >> 2] = $82_1;
  label$9 : {
   if (!((HEAP32[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($82_1 | 0) & 1 | 0)) {
    break label$9
   }
   HEAP32[($8_1 + 56 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$10 : {
    label$11 : while (1) {
     $95_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     HEAP32[($8_1 + 56 | 0) >> 2] = $95_1 + 4 | 0;
     $98_1 = HEAP32[$95_1 >> 2] | 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = $98_1;
     if (!(($98_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$10
     }
     label$12 : {
      if (!(((HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
       break label$12
      }
      $110_1 = 0;
      HEAP32[($8_1 + 36 | 0) >> 2] = $110_1;
      label$13 : {
       if (!((HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($110_1 | 0) & 1 | 0)) {
        break label$13
       }
       HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$14 : {
        label$15 : while (1) {
         $123_1 = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
         HEAP32[($8_1 + 32 | 0) >> 2] = $123_1 + 4 | 0;
         $126_1 = HEAP32[$123_1 >> 2] | 0;
         HEAP32[($8_1 + 36 | 0) >> 2] = $126_1;
         if (!(($126_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$14
         }
         label$16 : {
          if (!((HEAP32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          if (((HEAPU8[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0) {
           break label$16
          }
          $147_1 = 0;
          HEAP32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
          HEAP32[($8_1 + 64 | 0) >> 2] = $147_1;
          HEAP32[($8_1 + 28 | 0) >> 2] = 1;
          $331(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, $147_1 | 0);
          HEAP32[($8_1 + 52 | 0) >> 2] = $147_1;
          label$17 : {
           if (!((HEAP32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($147_1 | 0) & 1 | 0)) {
            break label$17
           }
           HEAP32[($8_1 + 48 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
           label$18 : {
            label$19 : while (1) {
             $165_1 = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
             HEAP32[($8_1 + 48 | 0) >> 2] = $165_1 + 4 | 0;
             $168_1 = HEAP32[$165_1 >> 2] | 0;
             HEAP32[($8_1 + 52 | 0) >> 2] = $168_1;
             if (!(($168_1 | 0) != (0 | 0) & 1 | 0)) {
              break label$18
             }
             label$20 : {
              if (!(((HEAP32[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
               break label$20
              }
              label$21 : {
               label$22 : {
                if (!(HEAP32[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0)) {
                 break label$22
                }
                label$23 : {
                 label$24 : {
                  if (!(((HEAP32[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
                   break label$24
                  }
                  if (!($352($8_1 + 40 | 0 | 0, HEAP32[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) | 0)) {
                   break label$23
                  }
                 }
                 HEAP32[($8_1 + 64 | 0) >> 2] = (HEAP32[($8_1 + 64 | 0) >> 2] | 0) + 1 | 0;
                }
                break label$21;
               }
               label$25 : {
                if (!(HEAP32[($8_1 + 28 | 0) >> 2] | 0)) {
                 break label$25
                }
                HEAP32[($8_1 + 64 | 0) >> 2] = (HEAP32[($8_1 + 64 | 0) >> 2] | 0) + 1 | 0;
                HEAP32[($8_1 + 28 | 0) >> 2] = 0;
               }
              }
             }
             continue label$19;
            };
           }
          }
          label$26 : {
           if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) >= ((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
            break label$26
           }
           label$27 : {
            label$28 : {
             if (!(HEAP32[($8_1 + 28 | 0) >> 2] | 0)) {
              break label$28
             }
             label$29 : {
              if (!((HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
               break label$29
              }
              continue label$15;
             }
             HEAP32[($8_1 + 68 | 0) >> 2] = 0;
             break label$27;
            }
            label$30 : {
             if (!((HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
              break label$30
             }
             continue label$15;
            }
            HEAP32[($8_1 + 68 | 0) >> 2] = 1;
           }
           HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 1 | 0;
           label$31 : {
            if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
             break label$31
            }
            $241_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $242_1 = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
            $245_1 = $267(HEAP32[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
            HEAP32[($8_1 + 8 | 0) >> 2] = $267(HEAP32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
            HEAP32[($8_1 + 4 | 0) >> 2] = $245_1;
            HEAP32[$8_1 >> 2] = $242_1;
            $396($241_1 | 0, 4017 | 0, 12713 | 0, $8_1 | 0);
           }
           label$32 : {
            if (!((HEAP32[($8_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$32
            }
            label$33 : {
             label$34 : {
              if (!(HEAP32[($8_1 + 72 | 0) >> 2] | 0)) {
               break label$34
              }
              if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
               break label$34
              }
              HEAP32[($8_1 + 44 | 0) >> 2] = $103(HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0;
              break label$33;
             }
             HEAP32[($8_1 + 44 | 0) >> 2] = $102(HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0;
            }
            FUNCTION_TABLE[HEAP32[($8_1 + 88 | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 92 | 0) >> 2] | 0, HEAP32[($8_1 + 84 | 0) >> 2] | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0, HEAP32[($8_1 + 68 | 0) >> 2] | 0);
            $348($8_1 + 44 | 0 | 0);
           }
          }
         }
         continue label$15;
        };
       }
      }
     }
     continue label$11;
    };
   }
  }
  $281_1 = 0;
  HEAP32[($8_1 + 60 | 0) >> 2] = $281_1;
  label$35 : {
   if (!((HEAP32[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($281_1 | 0) & 1 | 0)) {
    break label$35
   }
   HEAP32[($8_1 + 56 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$36 : {
    label$37 : while (1) {
     $294_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     HEAP32[($8_1 + 56 | 0) >> 2] = $294_1 + 4 | 0;
     $297_1 = HEAP32[$294_1 >> 2] | 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = $297_1;
     if (!(($297_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$36
     }
     $303_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
     HEAP32[($303_1 + 80 | 0) >> 2] = (HEAP32[($303_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
     continue label$37;
    };
   }
  }
  $348($8_1 + 40 | 0 | 0);
  $310_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
  global$0 = $8_1 + 96 | 0;
  return $310_1 | 0;
 }
 
 function $105($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $40_1 = 0, $53_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 0 | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 2 | 0;
  $4(HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $6_1 | 0);
  HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3] = +HEAPF64[$6_1 >> 3];
  $40_1 = $13(HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[$6_1 >> 3])) | 0;
  HEAP32[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 2] = $40_1;
  $4(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $6_1 | 0);
  label$3 : {
   if (!(+HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3] > +HEAPF64[$6_1 >> 3] & 1 | 0)) {
    break label$3
   }
   HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3] = +HEAPF64[$6_1 >> 3];
  }
  $53_1 = $13(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[$6_1 >> 3])) | 0;
  HEAP32[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 2] = $53_1;
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $106($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $24_1 = 0, $55_1 = 0.0, $30_1 = 0, $32_1 = 0, $64_1 = 0.0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
      break label$3
     }
     if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$2
     }
    }
    $50(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[(0 + 90208 | 0) >> 3];
    label$4 : {
     if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$4
     }
     HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] - +HEAPF64[(0 + 90136 | 0) >> 3] * Math_sqrt(+(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0));
    }
    $23_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAPF64[$23_1 >> 3] = +HEAPF64[$23_1 >> 3] + +HEAPF64[($5_1 + 8 | 0) >> 3];
    $24_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAPF64[$24_1 >> 3] = +HEAPF64[$24_1 >> 3] - +HEAPF64[($5_1 + 8 | 0) >> 3];
    label$5 : {
     label$6 : {
      if (HEAP32[(0 + 87956 | 0) >> 2] | 0) {
       break label$6
      }
      if (!(HEAP32[(0 + 88116 | 0) >> 2] | 0)) {
       break label$5
      }
     }
     $55_1 = .002;
     $30_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     HEAPF64[$30_1 >> 3] = +HEAPF64[$30_1 >> 3] + +HEAPF64[(0 + 89448 | 0) >> 3] * $55_1;
     $32_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     HEAPF64[$32_1 >> 3] = +HEAPF64[$32_1 >> 3] - +HEAPF64[(0 + 89448 | 0) >> 3] * $55_1;
    }
    break label$1;
   }
   $64_1 = +(0 | 0);
   HEAPF64[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 3] = $64_1;
   HEAPF64[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 3] = $64_1;
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $107($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $62_1 = 0, $84_1 = 0, $95_1 = 0, $98_1 = 0, $124_1 = 0, $159_1 = 0, $163_1 = 0, $190_1 = 0, $203_1 = 0, $209_1 = 0, $220_1 = 0, $223_1 = 0, $232_1 = 0, $249_1 = 0, $250_1 = 0, $254_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $9_1 = 0;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $9_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $9_1;
  HEAP32[(0 + 90224 | 0) >> 2] = (HEAP32[(0 + 90224 | 0) >> 2] | 0) + 1 | 0;
  $285(1 | 0);
  $294();
  HEAP32[($7_1 + 12 | 0) >> 2] = $276() | 0;
  label$1 : {
   if (!(HEAP32[(0 + 87740 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[(0 + 88324 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = 0;
  }
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  label$2 : {
   if (!((HEAP32[(0 + 90256 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 90060 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   HEAP32[(0 + 90256 | 0) >> 2] = HEAP32[(0 + 90060 | 0) >> 2] | 0;
  }
  label$3 : {
   if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
   label$4 : while (1) {
    $62_1 = 0;
    label$5 : {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $62_1 = (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$6 : {
     if (!($62_1 & 1 | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if (HEAP32[($7_1 + 36 | 0) >> 2] | 0) {
        break label$8
       }
       if ($100(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
        break label$7
       }
      }
      label$9 : {
       if (((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0) {
        break label$9
       }
       HEAP32[($7_1 + 8 | 0) >> 2] = 1;
       break label$6;
      }
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$4;
    }
    break label$4;
   };
  }
  $84_1 = 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = $84_1;
  label$10 : {
   if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) != ($84_1 | 0) & 1 | 0)) {
    break label$10
   }
   HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 4 | 0;
   label$11 : {
    label$12 : while (1) {
     $95_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = $95_1 + 4 | 0;
     $98_1 = HEAP32[$95_1 >> 2] | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = $98_1;
     if (!(($98_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     label$13 : {
      label$14 : {
       if (HEAP32[($7_1 + 36 | 0) >> 2] | 0) {
        break label$14
       }
       if ($100(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
        break label$13
       }
      }
      label$15 : {
       if (((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0) {
        break label$15
       }
       HEAP32[($7_1 + 8 | 0) >> 2] = 1;
       break label$11;
      }
     }
     continue label$12;
    };
   }
  }
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$16 : while (1) {
   $124_1 = 0;
   label$17 : {
    if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$17
    }
    $124_1 = (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$18 : {
    if (!($124_1 & 1 | 0)) {
     break label$18
    }
    label$19 : {
     label$20 : {
      if (!((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$20
      }
      if (!((((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0 | 0) == (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] = 0;
      break label$19;
     }
     HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
    }
    $159_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($159_1 + 80 | 0) >> 2] = (HEAP32[($159_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
    $163_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($163_1 + 80 | 0) >> 2] = (HEAP32[($163_1 + 80 | 0) >> 2] | 0) & -32769 | 0 | 32768 | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$16;
   }
   break label$16;
  };
  HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
  label$21 : {
   if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$21
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
   label$22 : while (1) {
    $190_1 = 0;
    label$23 : {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$23
     }
     $190_1 = (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$24 : {
     if (!($190_1 & 1 | 0)) {
      break label$24
     }
     label$25 : {
      label$26 : {
       if (HEAP32[($7_1 + 36 | 0) >> 2] | 0) {
        break label$26
       }
       if ($100(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
        break label$25
       }
      }
      $203_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
      HEAP32[($7_1 + 24 | 0) >> 2] = $203_1 + 1 | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] = $203_1;
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$22;
    }
    break label$22;
   };
  }
  $209_1 = 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = $209_1;
  label$27 : {
   if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) != ($209_1 | 0) & 1 | 0)) {
    break label$27
   }
   HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 4 | 0;
   label$28 : {
    label$29 : while (1) {
     $220_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = $220_1 + 4 | 0;
     $223_1 = HEAP32[$220_1 >> 2] | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = $223_1;
     if (!(($223_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$28
     }
     label$30 : {
      label$31 : {
       if (HEAP32[($7_1 + 36 | 0) >> 2] | 0) {
        break label$31
       }
       if ($100(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
        break label$30
       }
      }
      $232_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
      HEAP32[($7_1 + 24 | 0) >> 2] = $232_1 + 1 | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] = $232_1;
     }
     continue label$29;
    };
   }
  }
  HEAP32[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  label$32 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$32
   }
   $249_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $250_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
   HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
   HEAP32[$7_1 >> 2] = $250_1;
   $396($249_1 | 0, 2007 | 0, 12868 | 0, $7_1 | 0);
  }
  $254_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  global$0 = $7_1 + 48 | 0;
  return $254_1 | 0;
 }
 
 function $108($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $28_1 = 0, $92_1 = 0, $105_1 = 0, $108_1 = 0, $13_1 = 0, $134_1 = 0, $136_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $396($13_1 | 0, 4018 | 0, 12910 | 0, $3_1 + 16 | 0 | 0);
  }
  label$2 : {
   if (HEAP32[(0 + 89388 | 0) >> 2] | 0) {
    break label$2
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6428 | 0, 13027 | 0, 0 | 0);
   $28_1 = 0;
   $382(5 | 0, $28_1 | 0, $28_1 | 0);
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      if (!((((HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 0 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    }
    label$7 : {
     if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    }
    break label$3;
   }
   label$8 : {
    label$9 : {
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($3_1 + 56 | 0) >> 2] = $347($337(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
     HEAP32[($3_1 + 52 | 0) >> 2] = $333(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
     $325($3_1 + 56 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0);
     label$10 : {
      label$11 : while (1) {
       if (!($337(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0)) {
        break label$10
       }
       $92_1 = 0;
       HEAP32[($3_1 + 40 | 0) >> 2] = $92_1;
       label$12 : {
        if (!((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($92_1 | 0) & 1 | 0)) {
         break label$12
        }
        HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
        label$13 : {
         label$14 : while (1) {
          $105_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
          HEAP32[($3_1 + 36 | 0) >> 2] = $105_1 + 4 | 0;
          $108_1 = HEAP32[$105_1 >> 2] | 0;
          HEAP32[($3_1 + 40 | 0) >> 2] = $108_1;
          if (!(($108_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$13
          }
          label$15 : {
           if (!($342(HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0)) {
            break label$15
           }
           $332(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0;
           $325($3_1 + 56 | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0);
           HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
           break label$13;
          }
          continue label$14;
         };
        }
       }
       label$16 : {
        if ((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$16
        }
        $134_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $136_1 = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[$3_1 >> 2] = $136_1;
        $396($134_1 | 0, 6066 | 0, 13141 | 0, $3_1 | 0);
        $382(5 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0, 0 | 0);
       }
       continue label$11;
      };
     }
     $324((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0 | 0);
     $349() | 0;
     HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
     break label$8;
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
    $440((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, 4 | 0, 5 | 0);
   }
  }
  global$0 = $3_1 + 64 | 0;
  return;
 }
 
 function $109($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $72_1 = 0, $82_1 = 0, $104_1 = 0, i64toi32_i32$0 = 0, $133_1 = 0, $143_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $396(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, 9066 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, 0 | 0);
   }
   label$4 : {
    label$5 : {
     if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0;
     label$6 : {
      label$7 : {
       label$8 : {
        if (!((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$8
        }
        if (!(((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
         break label$8
        }
        if (HEAP32[(0 + 87740 | 0) >> 2] | 0) {
         break label$7
        }
       }
       label$9 : {
        if ((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$9
        }
        $72_1 = $32(HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 2] = $72_1;
       }
       HEAP32[($6_1 + 44 | 0) >> 2] = 0;
       label$10 : {
        label$11 : while (1) {
         if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$10
         }
         $82_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
         HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         $396($82_1 | 0, 9067 | 0, 13218 | 0, $6_1 + 16 | 0 | 0);
         HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1 | 0;
         continue label$11;
        };
       }
       break label$6;
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = 0;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        $104_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
        i64toi32_i32$0 = -1071369290;
        HEAP32[$6_1 >> 2] = 1168231105;
        HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $396($104_1 | 0, 9068 | 0, 13218 | 0, $6_1 | 0);
        HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
     }
     break label$4;
    }
    HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
    label$14 : {
     if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) == (25 | 0) & 1 | 0)) {
      break label$14
     }
     if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
      break label$14
     }
     HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + -1 | 0;
    }
    label$15 : {
     if ((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$15
     }
     $133_1 = $12(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 2] = $133_1;
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    label$16 : {
     label$17 : while (1) {
      if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$16
      }
      $143_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
      HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $396($143_1 | 0, 9069 | 0, 13218 | 0, $6_1 + 32 | 0 | 0);
      HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1 | 0;
      continue label$17;
     };
    }
   }
   label$18 : {
    if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
     break label$18
    }
    if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$18
    }
    $396(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, 9070 | 0, 14260 | 0, 0 | 0);
    break label$1;
   }
   $396(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, 9071 | 0, 13226 | 0, 0 | 0);
  }
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0, $52_1 = 0, $64_1 = 0, $82_1 = 0, $88_1 = 0.0, $35_1 = 0, $51_1 = 0, $90_1 = 0.0, $63_1 = 0, $81_1 = 0;
  $4_1 = global$0 - 16 | 0;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $5_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
       break label$4
      }
      label$5 : {
       if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       $88_1 = +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 3 | 0) | 0) >> 3];
       $35_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       $36_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
       HEAPF64[($35_1 + ($36_1 << 3 | 0) | 0) >> 3] = $88_1;
      }
      break label$3;
     }
     label$6 : {
      label$7 : {
       if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       $51_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       $52_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $52_1 + 1 | 0;
       HEAPF64[($51_1 + ($52_1 << 3 | 0) | 0) >> 3] = +(0 | 0);
       break label$6;
      }
      $90_1 = +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 3 | 0) | 0) >> 3];
      $63_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      $64_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $64_1 + 1 | 0;
      HEAPF64[($63_1 + ($64_1 << 3 | 0) | 0) >> 3] = $90_1;
     }
    }
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
     break label$8
    }
    $81_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $82_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $82_1 + 1 | 0;
    HEAPF64[($81_1 + ($82_1 << 3 | 0) | 0) >> 3] = +(0 | 0);
    continue label$9;
   };
  }
  return;
 }
 
 function $111($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $45_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  $105(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, $5_1 + 48 | 0 | 0, $5_1 + 44 | 0 | 0, $5_1 + 32 | 0 | 0);
  $106(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, $5_1 + 16 | 0 | 0, $5_1 + 24 | 0 | 0);
  label$1 : {
   label$2 : {
    if (HEAP32[(0 + 87988 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
     break label$1
    }
    if (HEAP32[(0 + 87972 | 0) >> 2] | 0) {
     break label$1
    }
   }
   $123(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 16 | 0) >> 3]), HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0);
  }
  label$3 : {
   label$4 : {
    if (HEAP32[(0 + 87972 | 0) >> 2] | 0) {
     break label$4
    }
    if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
     break label$3
    }
    if (HEAP32[(0 + 87988 | 0) >> 2] | 0) {
     break label$3
    }
    if (!(+HEAPF64[($5_1 + 16 | 0) >> 3] - +HEAPF64[($5_1 + 24 | 0) >> 3] > 2.0 * +HEAPF64[(0 + 89448 | 0) >> 3] * .002 & 1 | 0)) {
     break label$3
    }
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 3;
   label$5 : {
    label$6 : while (1) {
     $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $45_1 + -1 | 0;
     if (!$45_1) {
      break label$5
     }
     HEAPF64[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 - +HEAPF64[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     continue label$6;
    };
   }
   $123(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 24 | 0) >> 3]), HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0);
  }
  $158(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  $158(HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $112($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $15_1 = 0, $192_1 = 0, $6_1 = 0, $18_1 = 0, $44_1 = 0, $47_1 = 0, $79_1 = 0, $114_1 = 0, $130_1 = 0, $133_1 = 0, $254_1 = 0, $261_1 = 0, $265_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  $15_1 = $5_1 + 16 | 0;
  $18_1 = $5_1 + 48 | 0;
  HEAP32[($5_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 132 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = 0;
  $192_1 = 0;
  i64toi32_i32$1 = $18_1;
  HEAP32[i64toi32_i32$1 >> 2] = $192_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $192_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $18_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $192_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15168 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15172 | 0) >> 2] | 0;
  $254_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $15_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $254_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15160 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15164 | 0) >> 2] | 0;
  $261_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $15_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $261_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15156 | 0) >> 2] | 0;
  $265_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $15_1;
  HEAP32[i64toi32_i32$0 >> 2] = $265_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $106(HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, $5_1 + 88 | 0 | 0, $5_1 + 80 | 0 | 0);
  HEAP32[($5_1 + 124 | 0) >> 2] = $289(HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 128 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 120 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 116 | 0) >> 2] = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $44_1 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
     HEAP32[($5_1 + 116 | 0) >> 2] = $44_1 + 4 | 0;
     $47_1 = HEAP32[$44_1 >> 2] | 0;
     HEAP32[($5_1 + 120 | 0) >> 2] = $47_1;
     if (!(($47_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $325($5_1 + 128 | 0 | 0, HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
     continue label$3;
    };
   }
  }
  label$4 : {
   label$5 : {
    if (HEAP32[(0 + 87988 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
     break label$4
    }
    if (HEAP32[(0 + 87972 | 0) >> 2] | 0) {
     break label$4
    }
   }
   $124(HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 88 | 0) >> 3]), HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (HEAP32[(0 + 87972 | 0) >> 2] | 0) {
     break label$7
    }
    if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
     break label$6
    }
    if (HEAP32[(0 + 87988 | 0) >> 2] | 0) {
     break label$6
    }
    if (!(+HEAPF64[($5_1 + 88 | 0) >> 3] - +HEAPF64[($5_1 + 80 | 0) >> 3] > 2.0 * +HEAPF64[(0 + 89448 | 0) >> 3] * .002 & 1 | 0)) {
     break label$6
    }
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 3;
   label$8 : {
    label$9 : while (1) {
     $79_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $79_1 + -1 | 0;
     if (!$79_1) {
      break label$8
     }
     HEAPF64[((HEAP32[($5_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 - +HEAPF64[((HEAP32[($5_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     continue label$9;
    };
   }
   $124(HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 80 | 0) >> 3]), HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0);
  }
  $348($5_1 + 128 | 0 | 0);
  $348($5_1 + 124 | 0 | 0);
  label$10 : {
   label$11 : {
    if (HEAP32[(0 + 87788 | 0) >> 2] | 0) {
     break label$11
    }
    if (!(HEAP32[(0 + 88112 | 0) >> 2] | 0)) {
     break label$10
    }
   }
   label$12 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$12
    }
    if (HEAP32[(0 + 90176 | 0) >> 2] | 0) {
     break label$10
    }
   }
   $114_1 = 0;
   HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
   HEAP32[($5_1 + 104 | 0) >> 2] = $114_1;
   label$13 : {
    if (!((HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($114_1 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[($5_1 + 100 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$14 : {
     label$15 : while (1) {
      $130_1 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
      HEAP32[($5_1 + 100 | 0) >> 2] = $130_1 + 4 | 0;
      $133_1 = HEAP32[$130_1 >> 2] | 0;
      HEAP32[($5_1 + 104 | 0) >> 2] = $133_1;
      if (!(($133_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$14
      }
      label$16 : {
       if (!((HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       HEAP32[($5_1 + 124 | 0) >> 2] = $345(HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, ((HEAP32[($5_1 + 100 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0 | 0, 0 | 0) | 0;
       label$17 : {
        if (!(HEAP32[(0 + 87788 | 0) >> 2] | 0)) {
         break label$17
        }
        $125(HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0, $5_1 + 48 | 0 | 0);
       }
       label$18 : {
        if (!(HEAP32[(0 + 88112 | 0) >> 2] | 0)) {
         break label$18
        }
        HEAP32[($5_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($5_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        $126(HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, $5_1 + 16 | 0 | 0);
       }
       $324($5_1 + 124 | 0 | 0);
      }
      continue label$15;
     };
    }
   }
  }
  global$0 = $5_1 + 144 | 0;
  return;
 }
 
 function $113($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $224_1 = 0, $6_1 = 0, $16_1 = 0, $43_1 = 0, $46_1 = 0, $92_1 = 0, $109_1 = 0, $120_1 = 0, $123_1 = 0, $150_1 = 0, $166_1 = 0, $169_1 = 0, $185_1 = 0, $284_1 = 0, $291_1 = 0, $295_1 = 0;
  $5_1 = global$0 - 160 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  $16_1 = $5_1 + 32 | 0;
  HEAP32[($5_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 148 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = 0;
  $224_1 = 0;
  i64toi32_i32$1 = $16_1;
  HEAP32[i64toi32_i32$1 >> 2] = $224_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $224_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $16_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $224_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15088 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15092 | 0) >> 2] | 0;
  $284_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $284_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15080 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15084 | 0) >> 2] | 0;
  $291_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $291_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15072 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15076 | 0) >> 2] | 0;
  $295_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[$5_1 >> 2] = $295_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $106(HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 72 | 0 | 0);
  HEAP32[($5_1 + 132 | 0) >> 2] = $289(HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = $337(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 136 | 0) >> 2] = $347(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 128 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 124 | 0) >> 2] = (HEAP32[($5_1 + 132 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $43_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
     HEAP32[($5_1 + 124 | 0) >> 2] = $43_1 + 4 | 0;
     $46_1 = HEAP32[$43_1 >> 2] | 0;
     HEAP32[($5_1 + 128 | 0) >> 2] = $46_1;
     if (!(($46_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
     $4(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0, $5_1 + 88 | 0 | 0);
     HEAP32[($5_1 + 112 | 0) >> 2] = $13(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 88 | 0) >> 3])) | 0;
     $325($5_1 + 136 | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0);
     continue label$3;
    };
   }
  }
  label$4 : {
   label$5 : {
    if (HEAP32[(0 + 87988 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
     break label$4
    }
    if (HEAP32[(0 + 87972 | 0) >> 2] | 0) {
     break label$4
    }
   }
   $124(HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 80 | 0) >> 3]), HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (HEAP32[(0 + 87972 | 0) >> 2] | 0) {
     break label$7
    }
    if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
     break label$6
    }
    if (HEAP32[(0 + 87988 | 0) >> 2] | 0) {
     break label$6
    }
    if (!(+HEAPF64[($5_1 + 80 | 0) >> 3] - +HEAPF64[($5_1 + 72 | 0) >> 3] > 2.0 * +HEAPF64[(0 + 89448 | 0) >> 3] * .002 & 1 | 0)) {
     break label$6
    }
   }
   HEAP32[($5_1 + 64 | 0) >> 2] = 3;
   label$8 : {
    label$9 : while (1) {
     $92_1 = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
     HEAP32[($5_1 + 64 | 0) >> 2] = $92_1 + -1 | 0;
     if (!$92_1) {
      break label$8
     }
     HEAPF64[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 - +HEAPF64[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     continue label$9;
    };
   }
   $124(HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 72 | 0) >> 3]), HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0);
  }
  $109_1 = 0;
  HEAP32[($5_1 + 108 | 0) >> 2] = $109_1;
  label$10 : {
   if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != ($109_1 | 0) & 1 | 0)) {
    break label$10
   }
   HEAP32[($5_1 + 104 | 0) >> 2] = (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 4 | 0;
   label$11 : {
    label$12 : while (1) {
     $120_1 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = $120_1 + 4 | 0;
     $123_1 = HEAP32[$120_1 >> 2] | 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = $123_1;
     if (!(($123_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     $158(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
     continue label$12;
    };
   }
  }
  $348($5_1 + 136 | 0 | 0);
  $348($5_1 + 132 | 0 | 0);
  label$13 : {
   label$14 : {
    if (HEAP32[(0 + 87788 | 0) >> 2] | 0) {
     break label$14
    }
    if (!(HEAP32[(0 + 88112 | 0) >> 2] | 0)) {
     break label$13
    }
   }
   label$15 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$15
    }
    if (HEAP32[(0 + 90176 | 0) >> 2] | 0) {
     break label$13
    }
   }
   $150_1 = 0;
   HEAP32[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
   HEAP32[($5_1 + 144 | 0) >> 2] = $150_1;
   label$16 : {
    if (!((HEAP32[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($150_1 | 0) & 1 | 0)) {
     break label$16
    }
    HEAP32[($5_1 + 140 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$17 : {
     label$18 : while (1) {
      $166_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
      HEAP32[($5_1 + 140 | 0) >> 2] = $166_1 + 4 | 0;
      $169_1 = HEAP32[$166_1 >> 2] | 0;
      HEAP32[($5_1 + 144 | 0) >> 2] = $169_1;
      if (!(($169_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$17
      }
      label$19 : {
       label$20 : {
        if (!((HEAP32[((HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$20
        }
        $185_1 = HEAP32[((HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        break label$19;
       }
       $185_1 = HEAP32[((HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      }
      HEAP32[($5_1 + 100 | 0) >> 2] = $185_1;
      label$21 : {
       if (!((HEAP32[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$21
       }
       label$22 : {
        if (!(HEAP32[(0 + 87788 | 0) >> 2] | 0)) {
         break label$22
        }
        $125(HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 144 | 0) >> 2] | 0) >> 2] | 0 | 0, $5_1 + 32 | 0 | 0);
       }
       label$23 : {
        if (!(HEAP32[(0 + 88112 | 0) >> 2] | 0)) {
         break label$23
        }
        HEAP32[($5_1 + 120 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($5_1 + 116 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        $126(HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, $5_1 | 0);
       }
      }
      continue label$18;
     };
    }
   }
  }
  global$0 = $5_1 + 160 | 0;
  return;
 }
 
 function $114($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0, $32_1 = 0, $35_1 = 0, $112_1 = 0, $123_1 = 0, $126_1 = 0, $89_1 = 0, $91_1 = 0, $103_1 = 0, $105_1 = 0, $149_1 = 0, $173_1 = 0, $189_1 = 0.0, $190_1 = 0.0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
      break label$3
     }
     if (!(((HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
      break label$2
     }
     if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
      break label$2
     }
    }
    break label$1;
   }
   $19_1 = 0;
   HEAP32[($5_1 + 92 | 0) >> 2] = $19_1;
   if (!((HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($19_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $32_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
     HEAP32[($5_1 + 88 | 0) >> 2] = $32_1 + 4 | 0;
     $35_1 = HEAP32[$32_1 >> 2] | 0;
     HEAP32[($5_1 + 92 | 0) >> 2] = $35_1;
     if (!(($35_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      if (!((HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      continue label$5;
     }
     label$7 : {
      if (!(HEAP32[(0 + 88128 | 0) >> 2] | 0)) {
       break label$7
      }
      if (((HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0) {
       break label$7
      }
      continue label$5;
     }
     HEAP32[($5_1 + 96 | 0) >> 2] = $345(HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, ((HEAP32[($5_1 + 88 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0 | 0, 0 | 0) | 0;
     label$8 : {
      label$9 : {
       if (!(HEAP32[(0 + 87788 | 0) >> 2] | 0)) {
        break label$9
       }
       $125(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0);
       break label$8;
      }
      label$10 : {
       label$11 : {
        if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$11
        }
        $89_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
        $91_1 = HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 48 | 0) >> 2] = $91_1;
        $396($89_1 | 0, 9119 | 0, 15316 | 0, $5_1 + 48 | 0 | 0);
        break label$10;
       }
       HEAP32[(0 + 90220 | 0) >> 2] = (HEAP32[(0 + 90220 | 0) >> 2] | 0) + 1 | 0;
       $103_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
       $105_1 = HEAP32[((HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 64 | 0) >> 2] = $105_1;
       $396($103_1 | 0, 9120 | 0, 15351 | 0, $5_1 + 64 | 0 | 0);
      }
      $112_1 = 0;
      HEAP32[($5_1 + 84 | 0) >> 2] = $112_1;
      label$12 : {
       if (!((HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) != ($112_1 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[($5_1 + 80 | 0) >> 2] = (HEAP32[($5_1 + 96 | 0) >> 2] | 0) + 4 | 0;
       label$13 : {
        label$14 : while (1) {
         $123_1 = HEAP32[($5_1 + 80 | 0) >> 2] | 0;
         HEAP32[($5_1 + 80 | 0) >> 2] = $123_1 + 4 | 0;
         $126_1 = HEAP32[$123_1 >> 2] | 0;
         HEAP32[($5_1 + 84 | 0) >> 2] = $126_1;
         if (!(($126_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$13
         }
         HEAP32[($5_1 + 76 | 0) >> 2] = 0;
         label$15 : {
          label$16 : while (1) {
           if (!((HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$15
           }
           label$17 : {
            if (!((HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$17
            }
            $149_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
            HEAPF64[$5_1 >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            $396($149_1 | 0, 9121 | 0, 15116 | 0, $5_1 | 0);
           }
           HEAP32[($5_1 + 76 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 1 | 0;
           continue label$16;
          };
         }
         $396(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, 9122 | 0, 13226 | 0, 0 | 0);
         continue label$14;
        };
       }
      }
      label$18 : {
       if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
        break label$18
       }
       $173_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
       $189_1 = +HEAPF64[(HEAP32[($5_1 + 100 | 0) >> 2] | 0) >> 3];
       $190_1 = +HEAPF64[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + 8 | 0) >> 3];
       HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + 16 | 0) >> 3];
       HEAPF64[($5_1 + 24 | 0) >> 3] = $190_1;
       HEAPF64[($5_1 + 16 | 0) >> 3] = $189_1;
       $396($173_1 | 0, 9123 | 0, 15289 | 0, $5_1 + 16 | 0 | 0);
      }
     }
     $324($5_1 + 96 | 0 | 0);
     continue label$5;
    };
   }
  }
  global$0 = $5_1 + 112 | 0;
  return;
 }
 
 function $115($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0, $32_1 = 0, $35_1 = 0, $51_1 = 0, $111_1 = 0, $124_1 = 0, $127_1 = 0, $88_1 = 0, $100_1 = 0, $102_1 = 0, $104_1 = 0, $165_1 = 0, $191_1 = 0, $205_1 = 0.0, $206_1 = 0.0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
      break label$3
     }
     if (!(((HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
      break label$2
     }
     if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
      break label$2
     }
    }
    break label$1;
   }
   $19_1 = 0;
   HEAP32[($5_1 + 108 | 0) >> 2] = $19_1;
   if (!((HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($19_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 104 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $32_1 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = $32_1 + 4 | 0;
     $35_1 = HEAP32[$32_1 >> 2] | 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = $35_1;
     if (!(($35_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      label$7 : {
       if (!((HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       $51_1 = HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$6;
      }
      $51_1 = HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 112 | 0) >> 2] = $51_1;
     label$8 : {
      if (!((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      continue label$5;
     }
     label$9 : {
      if (!(HEAP32[(0 + 88128 | 0) >> 2] | 0)) {
       break label$9
      }
      if (((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0) {
       break label$9
      }
      continue label$5;
     }
     label$10 : {
      label$11 : {
       if (!(HEAP32[(0 + 87788 | 0) >> 2] | 0)) {
        break label$11
       }
       $125(HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 108 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0);
       break label$10;
      }
      label$12 : {
       label$13 : {
        if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$13
        }
        $88_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
        HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($88_1 | 0, 9114 | 0, 15249 | 0, $5_1 + 48 | 0 | 0);
        break label$12;
       }
       HEAP32[(0 + 90220 | 0) >> 2] = (HEAP32[(0 + 90220 | 0) >> 2] | 0) + 1 | 0;
       $100_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
       $102_1 = HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       $104_1 = HEAP32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 68 | 0) >> 2] = $104_1;
       HEAP32[($5_1 + 64 | 0) >> 2] = $102_1;
       $396($100_1 | 0, 9115 | 0, 15266 | 0, $5_1 + 64 | 0 | 0);
      }
      $111_1 = 0;
      HEAP32[($5_1 + 100 | 0) >> 2] = $111_1;
      label$14 : {
       if (!((HEAP32[(HEAP32[($5_1 + 108 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($111_1 | 0) & 1 | 0)) {
        break label$14
       }
       HEAP32[($5_1 + 96 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 108 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
       label$15 : {
        label$16 : while (1) {
         $124_1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
         HEAP32[($5_1 + 96 | 0) >> 2] = $124_1 + 4 | 0;
         $127_1 = HEAP32[$124_1 >> 2] | 0;
         HEAP32[($5_1 + 100 | 0) >> 2] = $127_1;
         if (!(($127_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$15
         }
         HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
         $4(HEAP32[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0, $5_1 + 80 | 0 | 0);
         HEAP32[($5_1 + 92 | 0) >> 2] = $13(HEAP32[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 80 | 0) >> 3])) | 0;
         HEAP32[($5_1 + 88 | 0) >> 2] = 0;
         label$17 : {
          label$18 : while (1) {
           if (!((HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$17
           }
           label$19 : {
            if (!((HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$19
            }
            $165_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
            HEAPF64[$5_1 >> 3] = +HEAPF64[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            $396($165_1 | 0, 9116 | 0, 15116 | 0, $5_1 | 0);
           }
           HEAP32[($5_1 + 88 | 0) >> 2] = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 1 | 0;
           continue label$18;
          };
         }
         $396(HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0, 9117 | 0, 13226 | 0, 0 | 0);
         $158(HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
         continue label$16;
        };
       }
      }
      label$20 : {
       if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
        break label$20
       }
       $191_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
       $205_1 = +HEAPF64[(HEAP32[($5_1 + 116 | 0) >> 2] | 0) >> 3];
       $206_1 = +HEAPF64[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 3];
       HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 16 | 0) >> 3];
       HEAPF64[($5_1 + 24 | 0) >> 3] = $206_1;
       HEAPF64[($5_1 + 16 | 0) >> 3] = $205_1;
       $396($191_1 | 0, 9118 | 0, 15289 | 0, $5_1 + 16 | 0 | 0);
      }
     }
     continue label$5;
    };
   }
  }
  global$0 = $5_1 + 128 | 0;
  return;
 }
 
 function $116($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $22_1 = 0, $33_1 = 0, $36_1 = 0, $15_1 = 0, $42_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $289(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $337(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   $396($15_1 | 0, 9111 | 0, 15123 | 0, $5_1 + 16 | 0 | 0);
  }
  $22_1 = 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $22_1;
  label$2 : {
   if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != ($22_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $33_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = $33_1 + 4 | 0;
     $36_1 = HEAP32[$33_1 >> 2] | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = $36_1;
     if (!(($36_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $42_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAP32[$5_1 >> 2] = $267(HEAP32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     $396($42_1 | 0, 9112 | 0, 15123 | 0, $5_1 | 0);
     continue label$4;
    };
   }
  }
  $396(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, 9113 | 0, 13226 | 0, 0 | 0);
  $348($5_1 + 24 | 0 | 0);
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $117($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $50_1 = 0, $63_1 = 0, $66_1 = 0, $78_1 = 0, $94_1 = 0, $133_1 = 0, $136_1 = 0, $137_1 = 0, $20_1 = 0, $72_1 = 0, $100_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) == (25 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $20_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
   $396($20_1 | 0, 9129 | 0, 15123 | 0, $5_1 + 32 | 0 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if ((((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 0 | 0) {
      break label$5
     }
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
      break label$4
     }
     if (((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
      break label$4
     }
    }
    $50_1 = 0;
    HEAP32[($5_1 + 48 | 0) >> 2] = $50_1;
    label$6 : {
     if (!((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($50_1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$7 : {
      label$8 : while (1) {
       $63_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
       HEAP32[($5_1 + 44 | 0) >> 2] = $63_1 + 4 | 0;
       $66_1 = HEAP32[$63_1 >> 2] | 0;
       HEAP32[($5_1 + 48 | 0) >> 2] = $66_1;
       if (!(($66_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$7
       }
       $72_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
       HEAP32[$5_1 >> 2] = $267(HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
       $396($72_1 | 0, 9130 | 0, 15123 | 0, $5_1 | 0);
       continue label$8;
      };
     }
    }
    break label$3;
   }
   $78_1 = 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = $78_1;
   label$9 : {
    if (!((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($78_1 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = ((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + 4 | 0;
    label$10 : {
     label$11 : while (1) {
      $94_1 = HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($5_1 + 48 | 0) >> 2] = $94_1;
      if (!(($94_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$10
      }
      $100_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = $267(HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
      $396($100_1 | 0, 9131 | 0, 15123 | 0, $5_1 + 16 | 0 | 0);
      label$12 : {
       label$13 : {
        if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) == ((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0 | 0) & 1 | 0)) {
         break label$13
        }
        HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0;
        break label$12;
       }
       label$14 : {
        label$15 : {
         if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) == (((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + 4 | 0 | 0) & 1 | 0)) {
          break label$15
         }
         $133_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
         HEAP32[($5_1 + 44 | 0) >> 2] = $133_1 + -4 | 0;
         $136_1 = $133_1;
         break label$14;
        }
        $137_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
        HEAP32[($5_1 + 44 | 0) >> 2] = $137_1 + 4 | 0;
        $136_1 = $137_1;
       }
      }
      continue label$11;
     };
    }
   }
  }
  $396(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 9132 | 0, 13226 | 0, 0 | 0);
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $118($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $28_1 = 0, $31_1 = 0, $67_1 = 0, $80_1 = 0, $83_1 = 0, $95_1 = 0, $111_1 = 0, $150_1 = 0, $153_1 = 0, $154_1 = 0, $44_1 = 0, $51_1 = 0, $89_1 = 0, $117_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$2
    }
    if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
     break label$2
    }
    break label$1;
   }
   $15_1 = 0;
   HEAP32[($6_1 + 68 | 0) >> 2] = $15_1;
   if (!((HEAP32[((HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($15_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 64 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $28_1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
     HEAP32[($6_1 + 64 | 0) >> 2] = $28_1 + 4 | 0;
     $31_1 = HEAP32[$28_1 >> 2] | 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = $31_1;
     if (!(($31_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) == (25 | 0) & 1 | 0)) {
       break label$5
      }
      $44_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
      HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      $396($44_1 | 0, 9124 | 0, 15123 | 0, $6_1 + 48 | 0 | 0);
     }
     $51_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
     $396($51_1 | 0, 9125 | 0, 15123 | 0, $6_1 + 32 | 0 | 0);
     label$6 : {
      label$7 : {
       if (!(((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0) ^ 0 | 0)) {
        break label$7
       }
       $67_1 = 0;
       HEAP32[($6_1 + 76 | 0) >> 2] = $67_1;
       label$8 : {
        if (!((HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($67_1 | 0) & 1 | 0)) {
         break label$8
        }
        HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
        label$9 : {
         label$10 : while (1) {
          $80_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
          HEAP32[($6_1 + 72 | 0) >> 2] = $80_1 + 4 | 0;
          $83_1 = HEAP32[$80_1 >> 2] | 0;
          HEAP32[($6_1 + 76 | 0) >> 2] = $83_1;
          if (!(($83_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$9
          }
          $89_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
          HEAP32[$6_1 >> 2] = $267(HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
          $396($89_1 | 0, 9126 | 0, 15123 | 0, $6_1 | 0);
          continue label$10;
         };
        }
       }
       break label$6;
      }
      $95_1 = 0;
      HEAP32[($6_1 + 76 | 0) >> 2] = $95_1;
      label$11 : {
       if (!((HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($95_1 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($6_1 + 72 | 0) >> 2] = ((HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + 4 | 0;
       label$12 : {
        label$13 : while (1) {
         $111_1 = HEAP32[(HEAP32[($6_1 + 72 | 0) >> 2] | 0) >> 2] | 0;
         HEAP32[($6_1 + 76 | 0) >> 2] = $111_1;
         if (!(($111_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$12
         }
         $117_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
         HEAP32[($6_1 + 16 | 0) >> 2] = $267(HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
         $396($117_1 | 0, 9127 | 0, 15123 | 0, $6_1 + 16 | 0 | 0);
         label$14 : {
          label$15 : {
           if (!((HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) == ((HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0 | 0) & 1 | 0)) {
            break label$15
           }
           HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 8 | 0;
           break label$14;
          }
          label$16 : {
           label$17 : {
            if (!((HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) == (((HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + 4 | 0 | 0) & 1 | 0)) {
             break label$17
            }
            $150_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
            HEAP32[($6_1 + 72 | 0) >> 2] = $150_1 + -4 | 0;
            $153_1 = $150_1;
            break label$16;
           }
           $154_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
           HEAP32[($6_1 + 72 | 0) >> 2] = $154_1 + 4 | 0;
           $153_1 = $154_1;
          }
         }
         continue label$13;
        };
       }
      }
     }
     $396(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0, 9128 | 0, 13226 | 0, 0 | 0);
     continue label$4;
    };
   }
  }
  global$0 = $6_1 + 96 | 0;
  return;
 }
 
 function $119($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $31_1 = 0, $32_1 = 0, $50_1 = 0.0, $51_1 = 0.0, $52_1 = 0.0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $3_1;
  $105(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, $6_1 + 60 | 0 | 0, $6_1 + 56 | 0 | 0, $6_1 + 48 | 0 | 0);
  label$1 : {
   if (!(HEAP32[($6_1 + 64 | 0) >> 2] | 0)) {
    break label$1
   }
   $396(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, 9096 | 0, 14978 | 0, 0 | 0);
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) == (13 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 14980;
    break label$2;
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = 15018;
  }
  $31_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  $32_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  $50_1 = +HEAPF64[(HEAP32[($6_1 + 60 | 0) >> 2] | 0) >> 3];
  $51_1 = +HEAPF64[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3];
  $52_1 = +HEAPF64[(HEAP32[($6_1 + 56 | 0) >> 2] | 0) >> 3];
  HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($6_1 + 16 | 0) >> 3] = $52_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = $51_1;
  HEAPF64[$6_1 >> 3] = $50_1;
  $396($31_1 | 0, 9097 | 0, $32_1 | 0, $6_1 | 0);
  $158(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  $158(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $120($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $13_1 = 0, $29_1 = 0, $32_1 = 0, $76_1 = 0, $87_1 = 0, $90_1 = 0, $110_1 = 0, $121_1 = 0, $124_1 = 0, $102_1 = 0, $103_1 = 0, $148_1 = 0.0, $149_1 = 0.0, $139_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = 1;
  label$1 : {
   if (!(HEAP32[($6_1 + 96 | 0) >> 2] | 0)) {
    break label$1
   }
   $396(HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, 9105 | 0, 15176 | 0, 0 | 0);
  }
  $13_1 = 0;
  HEAP32[($6_1 + 80 | 0) >> 2] = $289(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 84 | 0) >> 2] = $347($337(HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = $13_1;
  label$2 : {
   if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) != ($13_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($6_1 + 88 | 0) >> 2] = (HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $29_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
     HEAP32[($6_1 + 88 | 0) >> 2] = $29_1 + 4 | 0;
     $32_1 = HEAP32[$29_1 >> 2] | 0;
     HEAP32[($6_1 + 92 | 0) >> 2] = $32_1;
     if (!(($32_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
     $4(HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, $6_1 + 56 | 0 | 0);
     HEAP32[($6_1 + 76 | 0) >> 2] = $13(HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6_1 + 56 | 0) >> 3])) | 0;
     $325($6_1 + 84 | 0 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0);
     continue label$4;
    };
   }
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) == (13 | 0) & 1 | 0)) {
     break label$6
    }
    $396(HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, 9106 | 0, 15179 | 0, 0 | 0);
    HEAP32[($6_1 + 52 | 0) >> 2] = 15181;
    HEAP32[($6_1 + 48 | 0) >> 2] = 15206;
    break label$5;
   }
   $396(HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, 9107 | 0, 15208 | 0, 0 | 0);
   HEAP32[($6_1 + 52 | 0) >> 2] = 15218;
   HEAP32[($6_1 + 48 | 0) >> 2] = 15243;
  }
  $76_1 = 0;
  HEAP32[($6_1 + 76 | 0) >> 2] = $76_1;
  label$7 : {
   if (!((HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) != ($76_1 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + 4 | 0;
   label$8 : {
    label$9 : while (1) {
     $87_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
     HEAP32[($6_1 + 72 | 0) >> 2] = $87_1 + 4 | 0;
     $90_1 = HEAP32[$87_1 >> 2] | 0;
     HEAP32[($6_1 + 76 | 0) >> 2] = $90_1;
     if (!(($90_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     label$10 : {
      label$11 : {
       if (!(HEAP32[($6_1 + 68 | 0) >> 2] | 0)) {
        break label$11
       }
       HEAP32[($6_1 + 68 | 0) >> 2] = 0;
       break label$10;
      }
      $396(HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, 9108 | 0, 15176 | 0, 0 | 0);
     }
     $102_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
     $103_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
     $148_1 = +HEAPF64[(HEAP32[($6_1 + 76 | 0) >> 2] | 0) >> 3];
     $149_1 = +HEAPF64[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 3];
     HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 3];
     HEAPF64[($6_1 + 8 | 0) >> 3] = $149_1;
     HEAPF64[$6_1 >> 3] = $148_1;
     $396($102_1 | 0, 9109 | 0, $103_1 | 0, $6_1 | 0);
     continue label$9;
    };
   }
  }
  $110_1 = 0;
  HEAP32[($6_1 + 76 | 0) >> 2] = $110_1;
  label$12 : {
   if (!((HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) != ($110_1 | 0) & 1 | 0)) {
    break label$12
   }
   HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + 4 | 0;
   label$13 : {
    label$14 : while (1) {
     $121_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
     HEAP32[($6_1 + 72 | 0) >> 2] = $121_1 + 4 | 0;
     $124_1 = HEAP32[$121_1 >> 2] | 0;
     HEAP32[($6_1 + 76 | 0) >> 2] = $124_1;
     if (!(($124_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$13
     }
     $158(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
     continue label$14;
    };
   }
  }
  $348($6_1 + 84 | 0 | 0);
  $348($6_1 + 80 | 0 | 0);
  $139_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
  HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  $396($139_1 | 0, 9110 | 0, 15246 | 0, $6_1 + 32 | 0 | 0);
  global$0 = $6_1 + 112 | 0;
  return;
 }
 
 function $121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $267(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $81(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $122($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $23_1 = 0, $26_1 = 0, $6_1 = 0, $32_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $396($6_1 | 0, 9245 | 0, 15246 | 0, $5_1 + 16 | 0 | 0);
  $12_1 = 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $12_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) != ($12_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $23_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = $23_1 + 4 | 0;
     $26_1 = HEAP32[$23_1 >> 2] | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = $26_1;
     if (!(($26_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $32_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     $35_1 = $267(HEAP32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     HEAP32[$5_1 >> 2] = $35_1;
     $396($32_1 | 0, 9246 | 0, 17946 | 0, $5_1 | 0);
     continue label$3;
    };
   }
  }
  $396(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, 9247 | 0, 13226 | 0, 0 | 0);
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $123($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $65_1 = 0, $11_1 = 0, $28_1 = 0, $72_1 = 0.0, $73_1 = 0.0, $74_1 = 0.0, $75_1 = 0.0, $55_1 = 0, $78_1 = 0.0, $79_1 = 0.0;
  $8_1 = global$0 - 128 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 112 | 0) >> 2] = $3_1;
  HEAPF64[($8_1 + 104 | 0) >> 3] = $4_1;
  HEAP32[($8_1 + 100 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 96 | 0) >> 2] = HEAP32[($8_1 + 120 | 0) >> 2] | 0;
  HEAP32[($8_1 + 92 | 0) >> 2] = HEAP32[($8_1 + 116 | 0) >> 2] | 0;
  $11_1 = HEAP32[($8_1 + 124 | 0) >> 2] | 0;
  HEAP32[($8_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($8_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
  $396($11_1 | 0, 9093 | 0, 14896 | 0, $8_1 + 80 | 0 | 0);
  label$1 : {
   if (!(+HEAPF64[($8_1 + 104 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($8_1 + 96 | 0) >> 2] = $13(HEAP32[($8_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 112 | 0) >> 2] | 0 | 0, +-+HEAPF64[($8_1 + 104 | 0) >> 3]) | 0;
   HEAP32[($8_1 + 92 | 0) >> 2] = $13(HEAP32[($8_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 112 | 0) >> 2] | 0 | 0, +-+HEAPF64[($8_1 + 104 | 0) >> 3]) | 0;
  }
  $28_1 = HEAP32[($8_1 + 124 | 0) >> 2] | 0;
  $72_1 = +HEAPF64[(HEAP32[($8_1 + 96 | 0) >> 2] | 0) >> 3];
  $73_1 = +HEAPF64[((HEAP32[($8_1 + 96 | 0) >> 2] | 0) + 8 | 0) >> 3];
  $74_1 = +HEAPF64[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 3];
  $75_1 = +HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 3];
  i64toi32_i32$0 = 0;
  $65_1 = 0;
  i64toi32_i32$1 = $8_1 + 72 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $65_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($8_1 + 64 | 0) >> 3] = $75_1;
  HEAPF64[($8_1 + 56 | 0) >> 3] = $74_1;
  i64toi32_i32$1 = $8_1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $65_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($8_1 + 40 | 0) >> 3] = $73_1;
  HEAPF64[($8_1 + 32 | 0) >> 3] = $72_1;
  $396($28_1 | 0, 9094 | 0, 14918 | 0, $8_1 + 32 | 0 | 0);
  label$2 : {
   if (!(+HEAPF64[($8_1 + 104 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$2
   }
   $158(HEAP32[($8_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
   $158(HEAP32[($8_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  }
  $55_1 = HEAP32[($8_1 + 124 | 0) >> 2] | 0;
  $78_1 = +HEAPF64[(HEAP32[($8_1 + 100 | 0) >> 2] | 0) >> 3];
  $79_1 = +HEAPF64[((HEAP32[($8_1 + 100 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 100 | 0) >> 2] | 0) + 16 | 0) >> 3];
  HEAPF64[($8_1 + 8 | 0) >> 3] = $79_1;
  HEAPF64[$8_1 >> 3] = $78_1;
  $396($55_1 | 0, 9095 | 0, 14955 | 0, $8_1 | 0);
  global$0 = $8_1 + 128 | 0;
  return;
 }
 
 function $124($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $22_1 = 0, $35_1 = 0, $38_1 = 0, $51_1 = 0, $62_1 = 0, $65_1 = 0, $10_1 = 0, $11_1 = 0, $92_1 = 0, $127_1 = 0, $141_1 = 0, $150_1 = 0, $167_1 = 0.0, $168_1 = 0.0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 132 | 0) >> 2] = $2_1;
  HEAPF64[($7_1 + 120 | 0) >> 3] = $3_1;
  HEAP32[($7_1 + 116 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 108 | 0) >> 2] = $337(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
  $11_1 = HEAP32[($7_1 + 108 | 0) >> 2] | 0;
  HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
  HEAP32[($7_1 + 80 | 0) >> 2] = $11_1;
  $396($10_1 | 0, 9098 | 0, 15096 | 0, $7_1 + 80 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($7_1 + 120 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
     break label$2
    }
    $22_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $347(HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 100 | 0) >> 2] = $22_1;
    label$3 : {
     if (!((HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) != ($22_1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($7_1 + 96 | 0) >> 2] = (HEAP32[($7_1 + 136 | 0) >> 2] | 0) + 4 | 0;
     label$4 : {
      label$5 : while (1) {
       $35_1 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
       HEAP32[($7_1 + 96 | 0) >> 2] = $35_1 + 4 | 0;
       $38_1 = HEAP32[$35_1 >> 2] | 0;
       HEAP32[($7_1 + 100 | 0) >> 2] = $38_1;
       if (!(($38_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$4
       }
       $325($7_1 + 92 | 0 | 0, $13(HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, +-+HEAPF64[($7_1 + 120 | 0) >> 3]) | 0 | 0);
       continue label$5;
      };
     }
    }
    break label$1;
   }
   HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
  }
  $51_1 = 0;
  HEAP32[($7_1 + 100 | 0) >> 2] = $51_1;
  label$6 : {
   if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) != ($51_1 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($7_1 + 96 | 0) >> 2] = (HEAP32[($7_1 + 92 | 0) >> 2] | 0) + 4 | 0;
   label$7 : {
    label$8 : while (1) {
     $62_1 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
     HEAP32[($7_1 + 96 | 0) >> 2] = $62_1 + 4 | 0;
     $65_1 = HEAP32[$62_1 >> 2] | 0;
     HEAP32[($7_1 + 100 | 0) >> 2] = $65_1;
     if (!(($65_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($7_1 + 112 | 0) >> 2] = 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$12
         }
         $396(HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, 9099 | 0, 13819 | 0, 0 | 0);
         break label$11;
        }
        $92_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
        HEAPF64[$7_1 >> 3] = +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        $396($92_1 | 0, 9100 | 0, 15116 | 0, $7_1 | 0);
       }
       HEAP32[($7_1 + 112 | 0) >> 2] = (HEAP32[($7_1 + 112 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     label$13 : {
      if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      $158(HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
     }
     $396(HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, 9101 | 0, 13226 | 0, 0 | 0);
     continue label$8;
    };
   }
  }
  label$14 : {
   if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$14
   }
   $348($7_1 + 92 | 0 | 0);
  }
  $127_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
  HEAP32[($7_1 + 64 | 0) >> 2] = HEAP32[($7_1 + 108 | 0) >> 2] | 0;
  $396($127_1 | 0, 9102 | 0, 15123 | 0, $7_1 + 64 | 0 | 0);
  HEAP32[($7_1 + 104 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$15
    }
    $141_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 104 | 0) >> 2] | 0;
    $396($141_1 | 0, 9103 | 0, 15123 | 0, $7_1 + 16 | 0 | 0);
    HEAP32[($7_1 + 104 | 0) >> 2] = (HEAP32[($7_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  $150_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
  $167_1 = +HEAPF64[(HEAP32[($7_1 + 116 | 0) >> 2] | 0) >> 3];
  $168_1 = +HEAPF64[((HEAP32[($7_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 116 | 0) >> 2] | 0) + 16 | 0) >> 3];
  HEAPF64[($7_1 + 40 | 0) >> 3] = $168_1;
  HEAPF64[($7_1 + 32 | 0) >> 3] = $167_1;
  $396($150_1 | 0, 9104 | 0, 15127 | 0, $7_1 + 32 | 0 | 0);
  global$0 = $7_1 + 144 | 0;
  return;
 }
 
 function $125($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $63_1 = 0, $75_1 = 0, $78_1 = 0, $259_1 = 0.0, $112_1 = 0, $150_1 = 0, $22_1 = 0, $23_1 = 0, $54_1 = 0, $56_1 = 0, $151_1 = 0, $269_1 = 0.0, $270_1 = 0.0, $158_1 = 0, $272_1 = 0.0, $273_1 = 0.0, $274_1 = 0.0, $170_1 = 0, $176_1 = 0, $192_1 = 0, $276_1 = 0.0, $277_1 = 0.0, $218_1 = 0, $279_1 = 0.0, $280_1 = 0.0;
  $7_1 = global$0 - 320 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 316 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 312 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 308 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 304 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 300 | 0) >> 2] = $4_1;
  HEAPF64[($7_1 + 288 | 0) >> 3] = +$10(HEAP32[((HEAP32[($7_1 + 312 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 308 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
  HEAPF64[($7_1 + 280 | 0) >> 3] = 1.0 - +HEAPF64[($7_1 + 288 | 0) >> 3] * +HEAPF64[($7_1 + 288 | 0) >> 3];
  HEAP32[($7_1 + 196 | 0) >> 2] = $337(HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
     break label$2
    }
    $22_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
    $23_1 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
    HEAP32[($7_1 + 180 | 0) >> 2] = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
    HEAP32[($7_1 + 176 | 0) >> 2] = $23_1;
    $396($22_1 | 0, 9195 | 0, 16610 | 0, $7_1 + 176 | 0 | 0);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
      break label$4
     }
     if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$4
     }
     $396(HEAP32[($7_1 + 316 | 0) >> 2] | 0 | 0, 9196 | 0, 16628 | 0, 0 | 0);
     break label$3;
    }
    HEAP32[(0 + 90220 | 0) >> 2] = (HEAP32[(0 + 90220 | 0) >> 2] | 0) + 1 | 0;
   }
  }
  $54_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
  $56_1 = HEAP32[((HEAP32[($7_1 + 312 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
  HEAP32[($7_1 + 164 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
  HEAP32[($7_1 + 160 | 0) >> 2] = $56_1;
  $396($54_1 | 0, 9197 | 0, 16639 | 0, $7_1 + 160 | 0 | 0);
  $63_1 = 0;
  HEAPF64[($7_1 + 240 | 0) >> 3] = 1.0 / (10.0 * +HEAPF64[(0 + 89448 | 0) >> 3]);
  HEAP32[($7_1 + 204 | 0) >> 2] = $63_1;
  label$5 : {
   if (!((HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0) != ($63_1 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($7_1 + 200 | 0) >> 2] = (HEAP32[($7_1 + 304 | 0) >> 2] | 0) + 4 | 0;
   label$6 : {
    label$7 : while (1) {
     $75_1 = HEAP32[($7_1 + 200 | 0) >> 2] | 0;
     HEAP32[($7_1 + 200 | 0) >> 2] = $75_1 + 4 | 0;
     $78_1 = HEAP32[$75_1 >> 2] | 0;
     HEAP32[($7_1 + 204 | 0) >> 2] = $78_1;
     if (!(($78_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 2 | 0;
     $4(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0, $7_1 + 272 | 0 | 0);
     $4(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0, $7_1 + 264 | 0 | 0);
     HEAPF64[($7_1 + 256 | 0) >> 3] = +$29(+(-+HEAPF64[($7_1 + 272 | 0) >> 3] + +HEAPF64[($7_1 + 288 | 0) >> 3] * +HEAPF64[($7_1 + 264 | 0) >> 3]), +(+HEAPF64[($7_1 + 280 | 0) >> 3]), +(+HEAPF64[($7_1 + 240 | 0) >> 3]), $7_1 + 188 | 0 | 0);
     HEAPF64[($7_1 + 248 | 0) >> 3] = +$29(+(-+HEAPF64[($7_1 + 264 | 0) >> 3] + +HEAPF64[($7_1 + 288 | 0) >> 3] * +HEAPF64[($7_1 + 272 | 0) >> 3]), +(+HEAPF64[($7_1 + 280 | 0) >> 3]), +(+HEAPF64[($7_1 + 240 | 0) >> 3]), $7_1 + 184 | 0 | 0);
     label$8 : {
      label$9 : {
       if (HEAP32[($7_1 + 188 | 0) >> 2] | 0) {
        break label$9
       }
       if (!(HEAP32[($7_1 + 184 | 0) >> 2] | 0)) {
        break label$8
       }
      }
      $259_1 = +(0 | 0);
      HEAPF64[($7_1 + 248 | 0) >> 3] = $259_1;
      HEAPF64[($7_1 + 256 | 0) >> 3] = $259_1;
     }
     HEAP32[($7_1 + 192 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
     label$10 : {
      label$11 : while (1) {
       $112_1 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
       HEAP32[($7_1 + 192 | 0) >> 2] = $112_1 + -1 | 0;
       if (!$112_1) {
        break label$10
       }
       HEAPF64[(($7_1 + 208 | 0) + ((HEAP32[($7_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($7_1 + 312 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($7_1 + 256 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($7_1 + 308 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($7_1 + 248 | 0) >> 3];
       continue label$11;
      };
     }
     label$12 : {
      label$13 : {
       if (!((HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
        break label$13
       }
       $150_1 = $7_1 + 208 | 0;
       $110($150_1 | 0, $150_1 | 0);
       $151_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
       $269_1 = +HEAPF64[($7_1 + 208 | 0) >> 3];
       $270_1 = +HEAPF64[($7_1 + 216 | 0) >> 3];
       HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[($7_1 + 224 | 0) >> 3];
       HEAPF64[($7_1 + 40 | 0) >> 3] = $270_1;
       HEAPF64[($7_1 + 32 | 0) >> 3] = $269_1;
       $396($151_1 | 0, 9198 | 0, 16660 | 0, $7_1 + 32 | 0 | 0);
       break label$12;
      }
      $158_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
      $272_1 = +HEAPF64[($7_1 + 208 | 0) >> 3];
      $273_1 = +HEAPF64[($7_1 + 216 | 0) >> 3];
      $274_1 = +HEAPF64[($7_1 + 224 | 0) >> 3];
      HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[($7_1 + 232 | 0) >> 3];
      HEAPF64[($7_1 + 80 | 0) >> 3] = $274_1;
      HEAPF64[($7_1 + 72 | 0) >> 3] = $273_1;
      HEAPF64[($7_1 + 64 | 0) >> 3] = $272_1;
      $396($158_1 | 0, 9199 | 0, 16681 | 0, $7_1 + 64 | 0 | 0);
     }
     label$14 : {
      label$15 : {
       if (!((HEAP32[($7_1 + 188 | 0) >> 2] | 0) + (HEAP32[($7_1 + 184 | 0) >> 2] | 0) | 0)) {
        break label$15
       }
       $170_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
       HEAP32[$7_1 >> 2] = $267(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
       $396($170_1 | 0, 9200 | 0, 16708 | 0, $7_1 | 0);
       break label$14;
      }
      $176_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
      HEAP32[($7_1 + 16 | 0) >> 2] = $267(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
      $396($176_1 | 0, 9201 | 0, 16730 | 0, $7_1 + 16 | 0 | 0);
     }
     continue label$7;
    };
   }
  }
  label$16 : {
   label$17 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
     break label$17
    }
    $192_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
    $276_1 = +HEAPF64[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 3];
    $277_1 = +HEAPF64[((HEAP32[($7_1 + 300 | 0) >> 2] | 0) + 8 | 0) >> 3];
    HEAPF64[($7_1 + 112 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 300 | 0) >> 2] | 0) + 16 | 0) >> 3];
    HEAPF64[($7_1 + 104 | 0) >> 3] = $277_1;
    HEAPF64[($7_1 + 96 | 0) >> 3] = $276_1;
    $396($192_1 | 0, 9202 | 0, 14955 | 0, $7_1 + 96 | 0 | 0);
    break label$16;
   }
   label$18 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$18
    }
    if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$18
    }
    $218_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
    $279_1 = +HEAPF64[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 3];
    $280_1 = +HEAPF64[((HEAP32[($7_1 + 300 | 0) >> 2] | 0) + 8 | 0) >> 3];
    HEAPF64[($7_1 + 144 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 300 | 0) >> 2] | 0) + 16 | 0) >> 3];
    HEAPF64[($7_1 + 136 | 0) >> 3] = $280_1;
    HEAPF64[($7_1 + 128 | 0) >> 3] = $279_1;
    $396($218_1 | 0, 9203 | 0, 16745 | 0, $7_1 + 128 | 0 | 0);
   }
  }
  global$0 = $7_1 + 320 | 0;
  return;
 }
 
 function $126($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $39_1 = 0, $49_1 = 0, $71_1 = 0, $83_1 = 0, $90_1 = 0, $119_1 = 0.0, $120_1 = 0.0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 176 | 0) >> 2] = $3_1;
  $110(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, $6_1 + 128 | 0 | 0);
  $110(HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $6_1 + 96 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (Math_abs(+HEAPF64[($6_1 + 128 | 0) >> 3] - +HEAPF64[($6_1 + 96 | 0) >> 3]) > .001 & 1 | 0) {
      break label$3
     }
     if (Math_abs(+HEAPF64[($6_1 + 136 | 0) >> 3] - +HEAPF64[($6_1 + 104 | 0) >> 3]) > .001 & 1 | 0) {
      break label$3
     }
     if (!(Math_abs(+HEAPF64[($6_1 + 144 | 0) >> 3] - +HEAPF64[($6_1 + 112 | 0) >> 3]) > .001 & 1 | 0)) {
      break label$2
     }
    }
    $396(HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, 9204 | 0, 16776 | 0, 0 | 0);
    HEAP32[($6_1 + 172 | 0) >> 2] = 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
       break label$4
      }
      $39_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
      HEAPF64[$6_1 >> 3] = +HEAPF64[(($6_1 + 96 | 0) + ((HEAP32[($6_1 + 172 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $396($39_1 | 0, 9205 | 0, 15116 | 0, $6_1 | 0);
      HEAP32[($6_1 + 172 | 0) >> 2] = (HEAP32[($6_1 + 172 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
    $49_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
    HEAP32[($6_1 + 80 | 0) >> 2] = $267(HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) | 0;
    $396($49_1 | 0, 9206 | 0, 16792 | 0, $6_1 + 80 | 0 | 0);
    break label$1;
   }
   $396(HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, 9207 | 0, 16800 | 0, 0 | 0);
  }
  HEAP32[($6_1 + 172 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
     break label$6
    }
    $71_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[(($6_1 + 128 | 0) + ((HEAP32[($6_1 + 172 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    $396($71_1 | 0, 9208 | 0, 15116 | 0, $6_1 + 16 | 0 | 0);
    HEAP32[($6_1 + 172 | 0) >> 2] = (HEAP32[($6_1 + 172 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $83_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
  HEAP32[($6_1 + 32 | 0) >> 2] = $267(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0) | 0;
  $396($83_1 | 0, 9209 | 0, 16792 | 0, $6_1 + 32 | 0 | 0);
  $90_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
  $119_1 = +HEAPF64[(HEAP32[($6_1 + 176 | 0) >> 2] | 0) >> 3];
  $120_1 = +HEAPF64[((HEAP32[($6_1 + 176 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($6_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 176 | 0) >> 2] | 0) + 16 | 0) >> 3];
  HEAPF64[($6_1 + 56 | 0) >> 3] = $120_1;
  HEAPF64[($6_1 + 48 | 0) >> 3] = $119_1;
  $396($90_1 | 0, 9210 | 0, 16816 | 0, $6_1 + 48 | 0 | 0);
  global$0 = $6_1 + 192 | 0;
  return;
 }
 
 function $127($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $16_1 = 0, $27_1 = 0, $30_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $80(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  $396($12_1 | 0, 9244 | 0, 15246 | 0, $7_1 | 0);
  $16_1 = 0;
  HEAP32[($7_1 + 24 | 0) >> 2] = $16_1;
  label$1 : {
   if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) != ($16_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $27_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = $27_1 + 4 | 0;
     $30_1 = HEAP32[$27_1 >> 2] | 0;
     HEAP32[($7_1 + 24 | 0) >> 2] = $30_1;
     if (!(($30_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $96(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
     continue label$3;
    };
   }
  }
  $348($7_1 + 16 | 0 | 0);
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $128($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $47_1 = 0, $101_1 = 0, $114_1 = 0, $117_1 = 0, $172_1 = 0, $185_1 = 0, $188_1 = 0, $204_1 = 0, $139_1 = 0, $142_1 = 0, $147_1 = 0, $152_1 = 0, $278_1 = 0.0, $279_1 = 0.0, $280_1 = 0.0, $154_1 = 0, $224_1 = 0, $227_1 = 0, $232_1 = 0, $237_1 = 0, $281_1 = 0.0, $282_1 = 0.0, $283_1 = 0.0, $239_1 = 0, $241_1 = 0;
  $6_1 = global$0 - 176 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 168 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 164 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 160 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 120 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 164 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 160 | 0) >> 2] | 0) {
     break label$2
    }
    if (!($100(HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (HEAP32[(0 + 87980 | 0) >> 2] | 0) {
      break label$4
     }
     if (!(((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
      break label$3
     }
     if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
      break label$3
     }
    }
    break label$1;
   }
   label$5 : {
    if ((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    break label$1;
   }
   label$6 : {
    if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($6_1 + 124 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
       break label$7
      }
      $47_1 = $6_1 + 128 | 0;
      HEAPF64[($47_1 + ((HEAP32[($6_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + 1.0) / 2.0;
      label$9 : {
       if (!(+HEAPF64[($47_1 + ((HEAP32[($6_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < -1.0 & 1 | 0)) {
        break label$9
       }
       HEAPF64[(($6_1 + 128 | 0) + ((HEAP32[($6_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0;
      }
      label$10 : {
       if (!(+HEAPF64[(($6_1 + 128 | 0) + ((HEAP32[($6_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > 1.0 & 1 | 0)) {
        break label$10
       }
       HEAPF64[(($6_1 + 128 | 0) + ((HEAP32[($6_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
      }
      HEAP32[($6_1 + 124 | 0) >> 2] = (HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
   }
   HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
   label$11 : {
    label$12 : {
     if (!(((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
      break label$12
     }
     $101_1 = 0;
     HEAP32[($6_1 + 116 | 0) >> 2] = $101_1;
     label$13 : {
      if (!((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($101_1 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[($6_1 + 112 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      label$14 : {
       label$15 : while (1) {
        $114_1 = HEAP32[($6_1 + 112 | 0) >> 2] | 0;
        HEAP32[($6_1 + 112 | 0) >> 2] = $114_1 + 4 | 0;
        $117_1 = HEAP32[$114_1 >> 2] | 0;
        HEAP32[($6_1 + 116 | 0) >> 2] = $117_1;
        if (!(($117_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$14
        }
        label$16 : {
         if (!((HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$16
         }
         label$17 : {
          if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$17
          }
          $139_1 = HEAP32[($6_1 + 172 | 0) >> 2] | 0;
          $142_1 = Math_imul(HEAP32[($6_1 + 120 | 0) >> 2] | 0, 3);
          $147_1 = Math_imul(HEAP32[($6_1 + 120 | 0) >> 2] | 0, 3) + 1 | 0;
          $152_1 = Math_imul(HEAP32[($6_1 + 120 | 0) >> 2] | 0, 3) + 2 | 0;
          $278_1 = +HEAPF64[($6_1 + 128 | 0) >> 3];
          $279_1 = +HEAPF64[($6_1 + 136 | 0) >> 3];
          $280_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
          $154_1 = HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($6_1 + 40 | 0) >> 2] = $154_1;
          HEAPF64[($6_1 + 32 | 0) >> 3] = $280_1;
          HEAPF64[($6_1 + 24 | 0) >> 3] = $279_1;
          HEAPF64[($6_1 + 16 | 0) >> 3] = $278_1;
          HEAP32[($6_1 + 8 | 0) >> 2] = $152_1;
          HEAP32[($6_1 + 4 | 0) >> 2] = $147_1;
          HEAP32[$6_1 >> 2] = $142_1;
          $396($139_1 | 0, 9084 | 0, 14721 | 0, $6_1 | 0);
         }
         HEAP32[($6_1 + 120 | 0) >> 2] = (HEAP32[($6_1 + 120 | 0) >> 2] | 0) + 1 | 0;
        }
        continue label$15;
       };
      }
     }
     break label$11;
    }
    $172_1 = 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = $172_1;
    label$18 : {
     if (!((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($172_1 | 0) & 1 | 0)) {
      break label$18
     }
     HEAP32[($6_1 + 104 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
     label$19 : {
      label$20 : while (1) {
       $185_1 = HEAP32[($6_1 + 104 | 0) >> 2] | 0;
       HEAP32[($6_1 + 104 | 0) >> 2] = $185_1 + 4 | 0;
       $188_1 = HEAP32[$185_1 >> 2] | 0;
       HEAP32[($6_1 + 108 | 0) >> 2] = $188_1;
       if (!(($188_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$19
       }
       label$21 : {
        label$22 : {
         if (!((HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$22
         }
         $204_1 = HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         break label$21;
        }
        $204_1 = HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       }
       HEAP32[($6_1 + 116 | 0) >> 2] = $204_1;
       label$23 : {
        if (!((HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$23
        }
        label$24 : {
         if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$24
         }
         $224_1 = HEAP32[($6_1 + 172 | 0) >> 2] | 0;
         $227_1 = Math_imul(HEAP32[($6_1 + 120 | 0) >> 2] | 0, 3);
         $232_1 = Math_imul(HEAP32[($6_1 + 120 | 0) >> 2] | 0, 3) + 1 | 0;
         $237_1 = Math_imul(HEAP32[($6_1 + 120 | 0) >> 2] | 0, 3) + 2 | 0;
         $281_1 = +HEAPF64[($6_1 + 128 | 0) >> 3];
         $282_1 = +HEAPF64[($6_1 + 136 | 0) >> 3];
         $283_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
         $239_1 = HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         $241_1 = HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[($6_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[($6_1 + 92 | 0) >> 2] = $241_1;
         HEAP32[($6_1 + 88 | 0) >> 2] = $239_1;
         HEAPF64[($6_1 + 80 | 0) >> 3] = $283_1;
         HEAPF64[($6_1 + 72 | 0) >> 3] = $282_1;
         HEAPF64[($6_1 + 64 | 0) >> 3] = $281_1;
         HEAP32[($6_1 + 56 | 0) >> 2] = $237_1;
         HEAP32[($6_1 + 52 | 0) >> 2] = $232_1;
         HEAP32[($6_1 + 48 | 0) >> 2] = $227_1;
         $396($224_1 | 0, 9085 | 0, 14763 | 0, $6_1 + 48 | 0 | 0);
        }
        HEAP32[($6_1 + 120 | 0) >> 2] = (HEAP32[($6_1 + 120 | 0) >> 2] | 0) + 1 | 0;
       }
       continue label$20;
      };
     }
    }
   }
   HEAP32[(HEAP32[($6_1 + 164 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 120 | 0) >> 2] | 0;
  }
  global$0 = $6_1 + 176 | 0;
  return;
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  $110(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, $4_1 + 32 | 0 | 0);
  HEAP32[($4_1 + 68 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
     break label$1
    }
    $20_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
    HEAPF64[$4_1 >> 3] = +HEAPF64[(($4_1 + 32 | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    $396($20_1 | 0, 9216 | 0, 15116 | 0, $4_1 | 0);
    HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $30_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $267(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0;
  $396($30_1 | 0, 9217 | 0, 16792 | 0, $4_1 + 16 | 0 | 0);
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $15_1 = 0, $26_1 = 0, $29_1 = 0, $35_1 = 0, $57_1 = 0.0, $37_1 = 0, $58_1 = 0.0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 48 | 0) >> 3] = $2_1;
  HEAP32[(0 + 90224 | 0) >> 2] = (HEAP32[(0 + 90224 | 0) >> 2] | 0) + 1 | 0;
  $396(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 9227 | 0, 17052 | 0, 0 | 0);
  $15_1 = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $15_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) != ($15_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $26_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     HEAP32[($5_1 + 40 | 0) >> 2] = $26_1 + 4 | 0;
     $29_1 = HEAP32[$26_1 >> 2] | 0;
     HEAP32[($5_1 + 44 | 0) >> 2] = $29_1;
     if (!(($29_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $35_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
     $57_1 = +HEAPF64[($5_1 + 48 | 0) >> 3];
     $37_1 = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $58_1 = +HEAPF64[($5_1 + 48 | 0) >> 3];
     HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3];
     HEAPF64[($5_1 + 16 | 0) >> 3] = $58_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $37_1;
     HEAPF64[$5_1 >> 3] = $57_1;
     $396($35_1 | 0, 9228 | 0, 17755 | 0, $5_1 | 0);
     $129(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
     $396(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 9229 | 0, 17799 | 0, 0 | 0);
     continue label$3;
    };
   }
  }
  $396(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 9230 | 0, 17802 | 0, 0 | 0);
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $131($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $67_1 = 0, $74_1 = 0, $78_1 = 0, $85_1 = 0, $92_1 = 0, $96_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  $11_1 = $7_1 + 32 | 0;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAPF64[($7_1 + 56 | 0) >> 3] = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16880 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16884 | 0) >> 2] | 0;
  $67_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $11_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $67_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16872 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16876 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $11_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $74_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16864 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16868 | 0) >> 2] | 0;
  $78_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $11_1;
  HEAP32[i64toi32_i32$0 >> 2] = $78_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16912 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16916 | 0) >> 2] | 0;
  $85_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $7_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $85_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16904 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16908 | 0) >> 2] | 0;
  $92_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $7_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $92_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16896 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16900 | 0) >> 2] | 0;
  $96_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $7_1;
  HEAP32[$7_1 >> 2] = $96_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $133(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 56 | 0) >> 3]), $11_1 | 0);
  $133(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, +-+HEAPF64[($7_1 + 56 | 0) >> 3], $7_1 | 0);
  global$0 = $7_1 + 80 | 0;
  return;
 }
 
 function $132($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $130_1 = 0, $76_1 = 0, $196_1 = 0.0, $127_1 = 0, $133_1 = 0, $230_1 = 0, $237_1 = 0, $241_1 = 0, $32_1 = 0, $47_1 = 0, $54_1 = 0, $146_1 = 0, $197_1 = 0.0, $198_1 = 0.0, $151_1 = 0, $200_1 = 0.0, $201_1 = 0.0, $158_1 = 0, $203_1 = 0.0, $204_1 = 0.0;
  $5_1 = global$0 - 288 | 0;
  global$0 = $5_1;
  $9_1 = $5_1 + 128 | 0;
  HEAP32[($5_1 + 284 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 280 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 272 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 260 | 0) >> 2] = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14288 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14292 | 0) >> 2] | 0;
  $230_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $230_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14280 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14284 | 0) >> 2] | 0;
  $237_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $9_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $237_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14272 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14276 | 0) >> 2] | 0;
  $241_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[i64toi32_i32$0 >> 2] = $241_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$3
     }
     $32_1 = $12(HEAP32[($5_1 + 280 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 40 | 0) >> 2] = $32_1;
    }
    HEAP32[($5_1 + 268 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($5_1 + 268 | 0) >> 2] = $12(HEAP32[($5_1 + 280 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 260 | 0) >> 2] = 1;
  }
  $396(HEAP32[($5_1 + 284 | 0) >> 2] | 0 | 0, 9072 | 0, 14296 | 0, 0 | 0);
  label$4 : {
   label$5 : {
    if (!(HEAP32[(0 + 90324 | 0) >> 2] | 0)) {
     break label$5
    }
    HEAP32[(0 + 90324 | 0) >> 2] = 0;
    $47_1 = HEAP32[($5_1 + 284 | 0) >> 2] | 0;
    HEAP32[($5_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($47_1 | 0, 9073 | 0, 14337 | 0, $5_1 + 96 | 0 | 0);
    break label$4;
   }
   $54_1 = HEAP32[($5_1 + 284 | 0) >> 2] | 0;
   HEAP32[($5_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($54_1 | 0, 9074 | 0, 14510 | 0, $5_1 + 112 | 0 | 0);
  }
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $4(HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 280 | 0) >> 2] | 0 | 0, $5_1 + 152 | 0 | 0);
  HEAP32[($5_1 + 264 | 0) >> 2] = $13(HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 280 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 152 | 0) >> 3])) | 0;
  HEAP32[($5_1 + 120 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$6 : {
   label$7 : while (1) {
    $76_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
    HEAP32[($5_1 + 120 | 0) >> 2] = $76_1 + -1 | 0;
    if (!$76_1) {
     break label$6
    }
    HEAPF64[(($5_1 + 224 | 0) + ((HEAP32[($5_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 264 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($5_1 + 268 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[(($5_1 + 160 | 0) + ((HEAP32[($5_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    continue label$7;
   };
  }
  label$8 : {
   label$9 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$9
    }
    $196_1 = +(0 | 0);
    HEAPF64[($5_1 + 240 | 0) >> 3] = $196_1;
    HEAPF64[($5_1 + 176 | 0) >> 3] = $196_1;
    break label$8;
   }
   label$10 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$10
    }
    $127_1 = 0;
    $130_1 = $5_1 + 160 | 0;
    $133_1 = $5_1 + 224 | 0;
    $110($133_1 | 0, $133_1 | 0);
    $110($130_1 | 0, $130_1 | 0);
    $16($130_1 | 0, HEAP32[(0 + 87960 | 0) >> 2] | 0 | 0, 1 | 0, $127_1 | 0, $127_1 | 0);
   }
  }
  $21(3 | 0, $5_1 + 224 | 0 | 0, $5_1 + 160 | 0 | 0, $5_1 + 192 | 0 | 0);
  $146_1 = HEAP32[($5_1 + 284 | 0) >> 2] | 0;
  $197_1 = +HEAPF64[($5_1 + 224 | 0) >> 3];
  $198_1 = +HEAPF64[($5_1 + 232 | 0) >> 3];
  HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 240 | 0) >> 3];
  HEAPF64[($5_1 + 8 | 0) >> 3] = $198_1;
  HEAPF64[$5_1 >> 3] = $197_1;
  $396($146_1 | 0, 9075 | 0, 14554 | 0, $5_1 | 0);
  $151_1 = HEAP32[($5_1 + 284 | 0) >> 2] | 0;
  $200_1 = +HEAPF64[($5_1 + 192 | 0) >> 3];
  $201_1 = +HEAPF64[($5_1 + 200 | 0) >> 3];
  HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 208 | 0) >> 3];
  HEAPF64[($5_1 + 40 | 0) >> 3] = $201_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $200_1;
  $396($151_1 | 0, 9076 | 0, 14554 | 0, $5_1 + 32 | 0 | 0);
  $158_1 = HEAP32[($5_1 + 284 | 0) >> 2] | 0;
  $203_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
  $204_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
  HEAPF64[($5_1 + 80 | 0) >> 3] = +HEAPF64[($5_1 + 176 | 0) >> 3];
  HEAPF64[($5_1 + 72 | 0) >> 3] = $204_1;
  HEAPF64[($5_1 + 64 | 0) >> 3] = $203_1;
  $396($158_1 | 0, 9077 | 0, 14554 | 0, $5_1 + 64 | 0 | 0);
  $129(HEAP32[($5_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 268 | 0) >> 2] | 0 | 0);
  $396(HEAP32[($5_1 + 284 | 0) >> 2] | 0 | 0, 9078 | 0, 14575 | 0, 0 | 0);
  $158(HEAP32[($5_1 + 264 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  $133(HEAP32[($5_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 268 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 280 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, 0 | 0, +(+HEAPF64[($5_1 + 272 | 0) >> 3]), $5_1 + 128 | 0 | 0);
  label$11 : {
   if (!(HEAP32[($5_1 + 260 | 0) >> 2] | 0)) {
    break label$11
   }
   $158(HEAP32[($5_1 + 268 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 288 | 0;
  return;
 }
 
 function $133($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $11_1 = 0, $73_1 = 0, $81_1 = 0;
  $8_1 = global$0 - 112 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 96 | 0) >> 2] = $3_1;
  HEAPF64[($8_1 + 88 | 0) >> 3] = $4_1;
  HEAP32[($8_1 + 84 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $11_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[($8_1 + 12 | 0) >> 2] = $11_1 + -1 | 0;
    if (!$11_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!((HEAP32[($8_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAPF64[(($8_1 + 48 | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($8_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      break label$3;
     }
     label$5 : {
      label$6 : {
       if (!((HEAP32[($8_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAPF64[(($8_1 + 48 | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$5;
      }
      HEAPF64[(($8_1 + 48 | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     }
    }
    continue label$2;
   };
  }
  label$7 : {
   if (!((HEAP32[($8_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$7
   }
   $73_1 = 0;
   $16($8_1 + 48 | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, 1 | 0, $73_1 | 0, $73_1 | 0);
  }
  HEAP32[($8_1 + 12 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$8 : {
   label$9 : while (1) {
    $81_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    HEAP32[($8_1 + 12 | 0) >> 2] = $81_1 + -1 | 0;
    if (!$81_1) {
     break label$8
    }
    HEAPF64[(($8_1 + 16 | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[(($8_1 + 48 | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3];
    continue label$9;
   };
  }
  $126(HEAP32[($8_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 104 | 0) >> 2] | 0 | 0, $8_1 + 16 | 0 | 0, HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0);
  global$0 = $8_1 + 112 | 0;
  return;
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $5_1 = 0, $107_1 = 0, $110_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  $396($5_1 | 0, 9222 | 0, 16920 | 0, $4_1 + 16 | 0 | 0);
  $14_1 = 1;
  label$1 : {
   if (!((((HEAPU8[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> $14_1 | 0) & $14_1 | 0) & 255 | 0)) {
    break label$1
   }
   $396(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 9223 | 0, 15510 | 0, 0 | 0);
  }
  label$2 : {
   if (!((((HEAPU8[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
    break label$2
   }
   $396(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 9224 | 0, 16931 | 0, 0 | 0);
  }
  label$3 : {
   if (!((((HEAPU8[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 3 | 0) & 1 | 0) & 255 | 0)) {
    break label$3
   }
   $396(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 9421 | 0, 16942 | 0, 0 | 0);
  }
  label$4 : {
   if (!((((HEAPU8[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0)) {
    break label$4
   }
   $396(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 9422 | 0, 16955 | 0, 0 | 0);
  }
  label$5 : {
   if (!((((HEAPU8[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 5 | 0) & 1 | 0) & 255 | 0)) {
    break label$5
   }
   $396(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 9425 | 0, 16969 | 0, 0 | 0);
  }
  label$6 : {
   if (!((((HEAPU8[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 6 | 0) & 1 | 0) & 255 | 0)) {
    break label$6
   }
   $396(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 9423 | 0, 16984 | 0, 0 | 0);
  }
  $396(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 9225 | 0, 13226 | 0, 0 | 0);
  $122(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 16999 | 0, HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0);
  label$7 : {
   if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$7
   }
   if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$7
   }
   $107_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   $110_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $110_1;
   $396($107_1 | 0, 9226 | 0, 17020 | 0, $4_1 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $135($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $23_1 = 0, $34_1 = 0, $37_1 = 0, $8_1 = 0, $12_1 = 0, $15_1 = 0, $43_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
  $12_1 = ($337(HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) | 0) + 2 | 0;
  $15_1 = $267(HEAP32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 24 | 0) >> 2] = $267(HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = $15_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $12_1;
  $396($8_1 | 0, 9275 | 0, 18130 | 0, $7_1 + 16 | 0 | 0);
  $23_1 = 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = $23_1;
  label$1 : {
   if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) != ($23_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $34_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
     HEAP32[($7_1 + 36 | 0) >> 2] = $34_1 + 4 | 0;
     $37_1 = HEAP32[$34_1 >> 2] | 0;
     HEAP32[($7_1 + 40 | 0) >> 2] = $37_1;
     if (!(($37_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $43_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
     HEAP32[$7_1 >> 2] = HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
     $396($43_1 | 0, 9276 | 0, 13234 | 0, $7_1 | 0);
     continue label$3;
    };
   }
  }
  $396(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 9277 | 0, 13226 | 0, 0 | 0);
  global$0 = $7_1 + 64 | 0;
  return;
 }
 
 function $136($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $15_1 = 0, $19_1 = 0, $22_1 = 0, $41_1 = 0, $52_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $101(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
  $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
  $19_1 = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 2 | 0;
  $22_1 = $267(HEAP32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = $267(HEAP32[((HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 36 | 0) >> 2] = $22_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $19_1;
  $396($15_1 | 0, 9271 | 0, 18120 | 0, $7_1 + 32 | 0 | 0);
  HEAP32[($7_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < ((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $41_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    HEAPF64[$7_1 >> 3] = +HEAPF64[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    $396($41_1 | 0, 9272 | 0, 13218 | 0, $7_1 | 0);
    HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $52_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
  HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[($7_1 + 48 | 0) >> 3];
  $396($52_1 | 0, 9273 | 0, 13218 | 0, $7_1 + 16 | 0 | 0);
  $396(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, 9274 | 0, 13226 | 0, 0 | 0);
  global$0 = $7_1 + 80 | 0;
  return;
 }
 
 function $137($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $19_1 = 0, $29_1 = 0, $35_1 = 0, $95_1 = 0, $87_1 = 0, $92_1 = 0, $100_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
  label$1 : while (1) {
   $19_1 = 0;
   label$2 : {
    if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $19_1 = (HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($19_1 & 1 | 0)) {
     break label$3
    }
    $29_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    HEAP8[($29_1 + 24 | 0) >> 0] = (HEAPU8[($29_1 + 24 | 0) >> 0] | 0) & -2 | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  $35_1 = 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = $35_1;
  label$4 : {
   if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) != ($35_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = 0;
   HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = $337(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$8
       }
       label$9 : {
        if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
         break label$9
        }
        if (!((($267(HEAP32[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) != (HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
        break label$7;
       }
       $87_1 = $104(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + $87_1 | 0;
      }
     }
     $92_1 = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 4 | 0;
     $95_1 = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = $95_1;
     HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[($92_1 + ($95_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$6;
    };
   }
  }
  $100_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  global$0 = $7_1 + 48 | 0;
  return $100_1 | 0;
 }
 
 function $138($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $56_1 = 0, $69_1 = 0, $72_1 = 0, $105_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($7_1 + 40 | 0) >> 2] | 0) {
     break label$2
    }
    break label$1;
   }
   $297(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($7_1 + 32 | 0) >> 2] = 0;
   }
   HEAP32[($7_1 + 12 | 0) >> 2] = $347((($337(HEAP32[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0) + 1 | 0) << 1 | 0 | 0) | 0;
   HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      if (!((HEAP32[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
      $325($7_1 + 12 | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
     }
     $56_1 = 0;
     HEAP32[($7_1 + 24 | 0) >> 2] = $56_1;
     label$7 : {
      if (!((HEAP32[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($56_1 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      label$8 : {
       label$9 : while (1) {
        $69_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
        HEAP32[($7_1 + 20 | 0) >> 2] = $69_1 + 4 | 0;
        $72_1 = HEAP32[$69_1 >> 2] | 0;
        HEAP32[($7_1 + 24 | 0) >> 2] = $72_1;
        if (!(($72_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$8
        }
        label$10 : {
         if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$10
         }
         continue label$9;
        }
        HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
        label$11 : {
         label$12 : {
          if (HEAP32[($7_1 + 28 | 0) >> 2] | 0) {
           break label$12
          }
          if ($100(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
           break label$11
          }
         }
         $325($7_1 + 12 | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
        }
        continue label$9;
       };
      }
     }
     label$13 : {
      label$14 : {
       if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       $105_1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
       break label$13;
      }
      $105_1 = 0;
     }
     HEAP32[($7_1 + 16 | 0) >> 2] = $105_1;
     continue label$5;
    };
   }
   $79(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
   $348($7_1 + 12 | 0 | 0);
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $139() {
  var $2_1 = 0, $91_1 = 0, $62_1 = 0, $92_1 = 0, $99_1 = 0, $129_1 = 0, $150_1 = 0, $151_1 = 0, $174_1 = 0.0, $175_1 = 0.0, $143_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[(0 + 90092 | 0) >> 2] = fimport$1() | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[(0 + 88180 | 0) >> 2] | 0) {
      break label$3
     }
     if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$2
     }
    }
    $140();
    break label$1;
   }
   $302();
   $141();
  }
  label$4 : {
   if (HEAP32[(0 + 88212 | 0) >> 2] | 0) {
    break label$4
   }
   if (HEAP32[(0 + 88216 | 0) >> 2] | 0) {
    break label$4
   }
   if (HEAP32[(0 + 88220 | 0) >> 2] | 0) {
    break label$4
   }
   label$5 : {
    if (!(HEAP32[(0 + 90268 | 0) >> 2] | 0)) {
     break label$5
    }
    if (HEAP32[(0 + 88228 | 0) >> 2] | 0) {
     break label$5
    }
    if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
     break label$5
    }
    $167(1 | 0) | 0;
   }
   label$6 : {
    label$7 : {
     if (!(HEAP32[(0 + 90268 | 0) >> 2] | 0)) {
      break label$7
     }
     if (HEAP32[(0 + 88228 | 0) >> 2] | 0) {
      break label$7
     }
     if (HEAP32[(0 + 90264 | 0) >> 2] | 0) {
      break label$7
     }
     label$8 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
       break label$8
      }
      $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2055 | 0, 18139 | 0, 0 | 0);
     }
     HEAP32[(0 + 88296 | 0) >> 2] = 0;
     break label$6;
    }
    $236();
    label$9 : {
     label$10 : {
      label$11 : {
       if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
        break label$11
       }
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (5 | 0) & 1 | 0)) {
        break label$10
       }
       if (!(HEAP32[(0 + 87948 | 0) >> 2] | 0)) {
        break label$10
       }
      }
      $174_1 = +HEAPF64[(0 + 87888 | 0) >> 3];
      $175_1 = +HEAPF64[(0 + 87768 | 0) >> 3];
      label$12 : {
       label$13 : {
        if (!(HEAP32[(0 + 87944 | 0) >> 2] | 0)) {
         break label$13
        }
        $62_1 = 0;
        break label$12;
       }
       $62_1 = HEAP32[(0 + 88228 | 0) >> 2] | 0;
      }
      $191(18250 | 0, +$174_1, +$175_1, $62_1 | 0);
      break label$9;
     }
     label$14 : {
      if (HEAP32[(0 + 87944 | 0) >> 2] | 0) {
       break label$14
      }
      if (!(HEAP32[(0 + 88228 | 0) >> 2] | 0)) {
       break label$14
      }
      $191(18267 | 0, +(+HEAPF64[(0 + 87888 | 0) >> 3]), +(+HEAPF64[(0 + 87768 | 0) >> 3]), 1 | 0);
     }
    }
    label$15 : {
     if (!(HEAP32[(0 + 87944 | 0) >> 2] | 0)) {
      break label$15
     }
     $191(18296 | 0, +(+HEAPF64[(0 + 87896 | 0) >> 3]), +(+HEAPF64[(0 + 87776 | 0) >> 3]), HEAP32[(0 + 88228 | 0) >> 2] | 0 | 0);
    }
    label$16 : {
     if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$16
     }
     $91_1 = 0;
     $92_1 = 1;
     HEAP32[(0 + 90184 | 0) >> 2] = $92_1;
     $142($91_1 | 0, $2_1 + 12 | 0 | 0);
     HEAP32[(0 + 90184 | 0) >> 2] = $91_1;
     $253();
     $306($91_1 | 0, $92_1 | 0);
    }
    $99_1 = 0;
    $197(-1 | 0, $99_1 | 0, $99_1 | 0);
    $231();
   }
   label$17 : {
    if (!((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$17
    }
    if (!((HEAP32[(0 + 88232 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$17
    }
    HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[(0 + 88232 | 0) >> 2] | 0;
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2112 | 0, 18313 | 0, 0 | 0);
   }
   label$18 : {
    if (!(HEAP32[(0 + 88296 | 0) >> 2] | 0)) {
     break label$18
    }
    label$19 : {
     if (!(HEAP32[(0 + 88172 | 0) >> 2] | 0)) {
      break label$19
     }
     $129_1 = 0;
     $143($129_1 | 0, $129_1 | 0);
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8115 | 0, 18385 | 0, 0 | 0);
    }
    $275();
   }
   label$20 : {
    if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
     break label$20
    }
    if (HEAP32[(0 + 90144 | 0) >> 2] | 0) {
     break label$20
    }
    $277();
   }
  }
  label$21 : {
   if (!($337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0)) {
    break label$21
   }
   $143_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
   $396($143_1 | 0, 6164 | 0, 18416 | 0, $2_1 | 0);
   $150_1 = 0;
   $382(5 | 0, $150_1 | 0, $150_1 | 0);
  }
  $151_1 = 1;
  HEAP32[(0 + 90092 | 0) >> 2] = (fimport$1() | 0) - (HEAP32[(0 + 90092 | 0) >> 2] | 0) | 0;
  HEAP32[(0 + 90236 | 0) >> 2] = $151_1;
  label$22 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($151_1 | 0) & 1 | 0)) {
    break label$22
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1036 | 0, 18495 | 0, 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $140() {
  var $2_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $140_1 = 0, $169_1 = 0, $242_1 = 0, $397_1 = 0, $207_1 = 0, $314_1 = 0, $339_1 = 0, $364_1 = 0, $106_1 = 0, $108_1 = 0, $114_1 = 0, $145_1 = 0, $151_1 = 0, $175_1 = 0, $181_1 = 0, $215_1 = 0, $221_1 = 0, $250_1 = 0, $256_1 = 0, $318_1 = 0, $324_1 = 0, $343_1 = 0, $349_1 = 0, $368_1 = 0, $374_1 = 0, $393_1 = 0, $394_1 = 0, $403_1 = 0, $409_1 = 0, $4_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $38_1 = 0, $53_1 = 0, $56_1 = 0, $78_1 = 0, $133_1 = 0, $135_1 = 0, $159_1 = 0, $161_1 = 0, $193_1 = 0, $195_1 = 0, $234_1 = 0, $236_1 = 0, $264_1 = 0, $266_1 = 0, $301_1 = 0, $332_1 = 0, $334_1 = 0, $357_1 = 0, $359_1 = 0, $382_1 = 0, $384_1 = 0, $417_1 = 0, $419_1 = 0, $98_1 = 0, $100_1 = 0, $431_1 = 0.0, $213_1 = 0, $400_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $4_1 = 0;
  $6_1 = $502(40 | 0) | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[(0 + 90096 | 0) >> 2] = 1;
  $10_1 = $4_1 + 4 | 0;
  $11_1 = $6_1;
  label$1 : while (1) {
   $19_1 = $499(87704 + 2072 | 0 | 0, 1 | 0, $11_1 | 0, $10_1 | 0) | 0;
   $20_1 = fimport$2() | 0;
   $21_1 = 0;
   label$2 : {
    label$3 : while (1) {
     HEAP32[($2_1 + 28 | 0) >> 2] = $21_1;
     label$4 : {
      if (!(HEAP32[($2_1 + 28 | 0) >> 2] | 0)) {
       break label$4
      }
      HEAP32[(0 + 90112 | 0) >> 2] = 0;
      HEAP32[(0 + 92080 | 0) >> 2] = (HEAP32[(0 + 92080 | 0) >> 2] | 0) + 1 | 0;
      label$5 : {
       if (!(+HEAPF64[(0 + 92088 | 0) >> 3] < +HEAPF64[(0 + 90136 | 0) >> 3] & 1 | 0)) {
        break label$5
       }
       HEAPF64[(0 + 92088 | 0) >> 3] = +HEAPF64[(0 + 90136 | 0) >> 3];
      }
      $38_1 = 0;
      HEAP32[(0 + 88216 | 0) >> 2] = -1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $38_1;
      label$6 : {
       if (!((HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) != ($38_1 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[(0 + 90292 | 0) >> 2] | 0) + 4 | 0;
       label$7 : {
        label$8 : while (1) {
         $53_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         HEAP32[($2_1 + 20 | 0) >> 2] = $53_1 + 4 | 0;
         $56_1 = HEAP32[$53_1 >> 2] | 0;
         HEAP32[($2_1 + 24 | 0) >> 2] = $56_1;
         if (!(($56_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$7
         }
         label$9 : {
          if (!((HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$9
          }
          if ((((HEAPU8[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 5 | 0) & 1 | 0) & 255 | 0) {
           break label$9
          }
          $78_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
          HEAP8[($78_1 + 24 | 0) >> 0] = HEAPU8[($78_1 + 24 | 0) >> 0] | 0 | 32 | 0;
         }
         continue label$8;
        };
       }
      }
     }
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           label$16 : {
            label$17 : {
             label$18 : {
              label$19 : {
               label$20 : {
                label$21 : {
                 label$22 : {
                  label$23 : {
                   if (HEAP32[(0 + 88180 | 0) >> 2] | 0) {
                    break label$23
                   }
                   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
                    break label$23
                   }
                   if (!((HEAP32[(0 + 90100 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0)) {
                    break label$17
                   }
                   $98_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                   $100_1 = HEAP32[(0 + 90100 | 0) >> 2] | 0;
                   $431_1 = +HEAPF64[(0 + 90136 | 0) >> 3];
                   HEAP32[(0 + 97096 | 0) >> 2] = 0;
                   HEAPF64[($2_1 + 8 | 0) >> 3] = $431_1;
                   HEAP32[$2_1 >> 2] = $100_1;
                   fimport$3(6 | 0, $98_1 | 0, 6229 | 0, 18823 | 0, $2_1 | 0);
                   $106_1 = 0;
                   $108_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
                   HEAP32[(0 + 97096 | 0) >> 2] = $106_1;
                   $114_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
                   if ((($108_1 | 0) != ($106_1 | 0) & ($114_1 | 0) != ($106_1 | 0) | 0) & 1 | 0) {
                    break label$22
                   }
                   break label$21;
                  }
                  label$24 : {
                   if (!(HEAP32[(0 + 90100 | 0) >> 2] | 0)) {
                    break label$24
                   }
                   if (!((HEAP32[(0 + 90100 | 0) >> 2] | 0 | 0) >= (HEAP32[(0 + 88180 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                    break label$24
                   }
                   break label$15;
                  }
                  break label$16;
                 }
                 $133_1 = $500(HEAP32[$108_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
                 if (!$133_1) {
                  break label$20
                 }
                 break label$19;
                }
                $135_1 = -1;
                break label$18;
               }
               fimport$4($108_1 | 0, $114_1 | 0);
               abort();
              }
              fimport$5($114_1 | 0);
              $135_1 = $133_1;
             }
             $21_1 = fimport$2() | 0;
             if (($135_1 | 0) == (1 | 0)) {
              continue label$3
             }
             $140_1 = 0;
             HEAP32[(0 + 97096 | 0) >> 2] = $140_1;
             fimport$6(7 | 0, 1 | 0, $140_1 | 0, $140_1 | 0);
             $145_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
             HEAP32[(0 + 97096 | 0) >> 2] = $140_1;
             $151_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
             label$25 : {
              label$26 : {
               label$27 : {
                label$28 : {
                 if (!((($145_1 | 0) != ($140_1 | 0) & ($151_1 | 0) != ($140_1 | 0) | 0) & 1 | 0)) {
                  break label$28
                 }
                 $159_1 = $500(HEAP32[$145_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
                 if (!$159_1) {
                  break label$27
                 }
                 break label$26;
                }
                $161_1 = -1;
                break label$25;
               }
               fimport$4($145_1 | 0, $151_1 | 0);
               abort();
              }
              fimport$5($151_1 | 0);
              $161_1 = $159_1;
             }
             $21_1 = fimport$2() | 0;
             if (($161_1 | 0) == (1 | 0)) {
              continue label$3
             }
            }
            label$29 : {
             if (!(HEAP32[(0 + 90100 | 0) >> 2] | 0)) {
              break label$29
             }
             if (HEAP32[($2_1 + 28 | 0) >> 2] | 0) {
              break label$29
             }
             break label$15;
            }
           }
           $169_1 = 0;
           HEAP32[(0 + 88216 | 0) >> 2] = $169_1;
           HEAP32[(0 + 97096 | 0) >> 2] = $169_1;
           fimport$7(8 | 0, 1 | 0);
           $175_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
           HEAP32[(0 + 97096 | 0) >> 2] = $169_1;
           $181_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
           if ((($175_1 | 0) != ($169_1 | 0) & ($181_1 | 0) != ($169_1 | 0) | 0) & 1 | 0) {
            break label$14
           }
           break label$13;
          }
          HEAP32[(0 + 90096 | 0) >> 2] = 0;
          $503($19_1 | 0);
          global$0 = $2_1 + 32 | 0;
          return;
         }
         $193_1 = $500(HEAP32[$175_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
         if (!$193_1) {
          break label$12
         }
         break label$11;
        }
        $195_1 = -1;
        break label$10;
       }
       fimport$4($175_1 | 0, $181_1 | 0);
       abort();
      }
      fimport$5($181_1 | 0);
      $195_1 = $193_1;
     }
     $21_1 = fimport$2() | 0;
     if (($195_1 | 0) == (1 | 0)) {
      continue label$3
     }
     HEAP32[(0 + 90100 | 0) >> 2] = (HEAP32[(0 + 90100 | 0) >> 2] | 0) + 1 | 0;
     label$30 : {
      label$31 : {
       label$32 : {
        label$33 : {
         label$34 : {
          label$35 : {
           label$36 : {
            if (HEAP32[(0 + 89376 | 0) >> 2] | 0) {
             break label$36
            }
            $207_1 = 0;
            HEAP32[(0 + 97096 | 0) >> 2] = $207_1;
            $213_1 = fimport$8(9 | 0, 87704 + 1156 | 0 | 0) | 0;
            $215_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
            HEAP32[(0 + 97096 | 0) >> 2] = $207_1;
            $221_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
            if ((($215_1 | 0) != ($207_1 | 0) & ($221_1 | 0) != ($207_1 | 0) | 0) & 1 | 0) {
             break label$35
            }
            break label$34;
           }
           HEAP8[((HEAP32[(0 + 89376 | 0) >> 2] | 0) + 88860 | 0) >> 0] = 0;
           HEAP32[(0 + 89372 | 0) >> 2] = 80;
           break label$30;
          }
          $234_1 = $500(HEAP32[$215_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
          if (!$234_1) {
           break label$33
          }
          break label$32;
         }
         $236_1 = -1;
         break label$31;
        }
        fimport$4($215_1 | 0, $221_1 | 0);
        abort();
       }
       fimport$5($221_1 | 0);
       $236_1 = $234_1;
      }
      $21_1 = fimport$2() | 0;
      if (($236_1 | 0) == (1 | 0)) {
       continue label$3
      }
      HEAP32[(0 + 89376 | 0) >> 2] = $213_1;
     }
     $242_1 = 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $242_1;
     fimport$6(10 | 0, 18979 | 0, 87704 + 2396 | 0 | 0, $242_1 | 0);
     $250_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $242_1;
     $256_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
     label$37 : {
      label$38 : {
       label$39 : {
        label$40 : {
         if (!((($250_1 | 0) != ($242_1 | 0) & ($256_1 | 0) != ($242_1 | 0) | 0) & 1 | 0)) {
          break label$40
         }
         $264_1 = $500(HEAP32[$250_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
         if (!$264_1) {
          break label$39
         }
         break label$38;
        }
        $266_1 = -1;
        break label$37;
       }
       fimport$4($250_1 | 0, $256_1 | 0);
       abort();
      }
      fimport$5($256_1 | 0);
      $266_1 = $264_1;
     }
     $21_1 = fimport$2() | 0;
     if (($266_1 | 0) == (1 | 0)) {
      continue label$3
     }
     label$41 : {
      if (!((HEAP32[(0 + 90100 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 88180 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$41
      }
      HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[(0 + 88236 | 0) >> 2] | 0;
      label$42 : {
       label$43 : {
        if ((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) != (-3 | 0) & 1 | 0) {
         break label$43
        }
        if (+HEAPF64[(0 + 88248 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0) {
         break label$43
        }
        if (!(HEAP32[(0 + 88256 | 0) >> 2] | 0)) {
         break label$42
        }
       }
       label$44 : {
        label$45 : {
         if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
          break label$45
         }
         $301_1 = HEAP32[(0 + 87832 | 0) >> 2] | 0;
         break label$44;
        }
        $301_1 = 3;
       }
       HEAP32[(0 + 88232 | 0) >> 2] = $301_1;
       HEAP32[(0 + 87832 | 0) >> 2] = 0;
      }
      HEAP32[(0 + 90464 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
     }
     label$46 : {
      if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
       break label$46
      }
      $314_1 = 0;
      HEAP32[(0 + 97096 | 0) >> 2] = $314_1;
      fimport$9(11 | 0);
      $318_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
      HEAP32[(0 + 97096 | 0) >> 2] = $314_1;
      $324_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
      label$47 : {
       label$48 : {
        label$49 : {
         label$50 : {
          if (!((($318_1 | 0) != ($314_1 | 0) & ($324_1 | 0) != ($314_1 | 0) | 0) & 1 | 0)) {
           break label$50
          }
          $332_1 = $500(HEAP32[$318_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
          if (!$332_1) {
           break label$49
          }
          break label$48;
         }
         $334_1 = -1;
         break label$47;
        }
        fimport$4($318_1 | 0, $324_1 | 0);
        abort();
       }
       fimport$5($324_1 | 0);
       $334_1 = $332_1;
      }
      $21_1 = fimport$2() | 0;
      if (($334_1 | 0) == (1 | 0)) {
       continue label$3
      }
     }
     $339_1 = 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $339_1;
     fimport$9(12 | 0);
     $343_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $339_1;
     $349_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
     label$51 : {
      label$52 : {
       label$53 : {
        label$54 : {
         if (!((($343_1 | 0) != ($339_1 | 0) & ($349_1 | 0) != ($339_1 | 0) | 0) & 1 | 0)) {
          break label$54
         }
         $357_1 = $500(HEAP32[$343_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
         if (!$357_1) {
          break label$53
         }
         break label$52;
        }
        $359_1 = -1;
        break label$51;
       }
       fimport$4($343_1 | 0, $349_1 | 0);
       abort();
      }
      fimport$5($349_1 | 0);
      $359_1 = $357_1;
     }
     $21_1 = fimport$2() | 0;
     if (($359_1 | 0) == (1 | 0)) {
      continue label$3
     }
     $364_1 = 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $364_1;
     fimport$9(13 | 0);
     $368_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $364_1;
     $374_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
     label$55 : {
      label$56 : {
       label$57 : {
        label$58 : {
         if (!((($368_1 | 0) != ($364_1 | 0) & ($374_1 | 0) != ($364_1 | 0) | 0) & 1 | 0)) {
          break label$58
         }
         $382_1 = $500(HEAP32[$368_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
         if (!$382_1) {
          break label$57
         }
         break label$56;
        }
        $384_1 = -1;
        break label$55;
       }
       fimport$4($368_1 | 0, $374_1 | 0);
       abort();
      }
      fimport$5($374_1 | 0);
      $384_1 = $382_1;
     }
     $21_1 = fimport$2() | 0;
     if (($384_1 | 0) == (1 | 0)) {
      continue label$3
     }
     $393_1 = $20_1;
     $394_1 = $19_1;
     if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$2
     }
     $393_1 = $20_1;
     $394_1 = $19_1;
     if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
      break label$2
     }
     $397_1 = 0;
     $400_1 = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $397_1;
     fimport$10(14 | 0, $400_1 | 0, $397_1 | 0);
     $403_1 = HEAP32[(0 + 97096 | 0) >> 2] | 0;
     HEAP32[(0 + 97096 | 0) >> 2] = $397_1;
     $409_1 = HEAP32[(0 + 97100 | 0) >> 2] | 0;
     label$59 : {
      label$60 : {
       label$61 : {
        label$62 : {
         if (!((($403_1 | 0) != ($397_1 | 0) & ($409_1 | 0) != ($397_1 | 0) | 0) & 1 | 0)) {
          break label$62
         }
         $417_1 = $500(HEAP32[$403_1 >> 2] | 0 | 0, $19_1 | 0, $20_1 | 0) | 0;
         if (!$417_1) {
          break label$61
         }
         break label$60;
        }
        $419_1 = -1;
        break label$59;
       }
       fimport$4($403_1 | 0, $409_1 | 0);
       abort();
      }
      fimport$5($409_1 | 0);
      $419_1 = $417_1;
     }
     $21_1 = fimport$2() | 0;
     if (($419_1 | 0) == (1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $393_1 = $20_1;
    $394_1 = $19_1;
   }
   $10_1 = $393_1;
   $11_1 = $394_1;
   continue label$1;
  };
 }
 
 function $141() {
  var $2_1 = 0, $96_1 = 0, $26_1 = 0, $69_1 = 0, $182_1 = 0, $260_1 = 0, $49_1 = 0, $88_1 = 0, $167_1 = 0, $226_1 = 0, $252_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1037 | 0, 19057 | 0, 0 | 0);
  }
  HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$2 : while (1) {
   $26_1 = 0;
   label$3 : {
    if (!((HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $26_1 = (HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$4 : {
    if (!($26_1 & 1 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (((HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
       break label$6
      }
      if (!(((HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
       break label$5
      }
     }
     $49_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $396($49_1 | 0, 6165 | 0, 19089 | 0, $2_1 | 0);
     $382(5 | 0, HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$2;
   }
   break label$2;
  };
  HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
  label$7 : {
   label$8 : while (1) {
    $69_1 = 0;
    label$9 : {
     if (!((HEAP32[($2_1 + 84 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     $69_1 = (HEAP32[(HEAP32[($2_1 + 84 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$10 : {
     if (!($69_1 & 1 | 0)) {
      break label$10
     }
     label$11 : {
      if (!((((HEAPU8[((HEAP32[($2_1 + 84 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0)) {
       break label$11
      }
      $88_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $396($88_1 | 0, 6166 | 0, 19166 | 0, $2_1 + 32 | 0 | 0);
      $96_1 = 0;
      $383(19234 | 0, $96_1 | 0, $96_1 | 0, $96_1 | 0, HEAP32[($2_1 + 84 | 0) >> 2] | 0 | 0);
      $382(5 | 0, $96_1 | 0, $96_1 | 0);
     }
     HEAP32[($2_1 + 80 | 0) >> 2] = $267(HEAP32[((HEAP32[($2_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     label$12 : {
      label$13 : {
       label$14 : {
        if (!((HEAP32[(0 + 88220 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
         break label$14
        }
        if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) == ((HEAP32[(0 + 88220 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0) {
         break label$13
        }
       }
       label$15 : {
        if (!((HEAP32[(0 + 88220 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
         break label$15
        }
        if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) == ((0 - (HEAP32[(0 + 88220 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) & 1 | 0) {
         break label$13
        }
       }
       if (!((HEAP32[(0 + 88216 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$12
       }
       if (!((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) == ((HEAP32[(0 + 88216 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$12
       }
      }
      label$16 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
        break label$16
       }
       $167_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
       $396($167_1 | 0, 1038 | 0, 19244 | 0, $2_1 + 16 | 0 | 0);
      }
      break label$7;
     }
     HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 84 | 0) >> 2] | 0) >> 2] | 0;
     continue label$8;
    }
    break label$8;
   };
   HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$17 : {
    label$18 : while (1) {
     $182_1 = $144($2_1 + 92 | 0 | 0) | 0;
     HEAP32[($2_1 + 88 | 0) >> 2] = $182_1;
     if (!(($182_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$17
     }
     HEAP32[(0 + 90068 | 0) >> 2] = (HEAP32[(0 + 90068 | 0) >> 2] | 0) + -1 | 0;
     label$19 : {
      if (!((HEAP32[(0 + 88212 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$19
      }
      if (!((((HEAP32[(0 + 90064 | 0) >> 2] | 0) - (HEAP32[(0 + 88316 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) >= ((HEAP32[(0 + 88212 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$19
      }
      label$20 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
        break label$20
       }
       $226_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       HEAP32[($2_1 + 48 | 0) >> 2] = (HEAP32[(0 + 88212 | 0) >> 2] | 0) - 1 | 0;
       $396($226_1 | 0, 1059 | 0, 19298 | 0, $2_1 + 48 | 0 | 0);
      }
      break label$7;
     }
     label$21 : {
      if ($145(HEAP32[($2_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[(0 + 87936 | 0) >> 2] | 0 | 0) | 0) {
       break label$21
      }
      break label$17;
     }
     continue label$18;
    };
   }
   label$22 : {
    if (!(HEAP32[(0 + 89568 | 0) >> 2] | 0)) {
     break label$22
    }
    $310();
   }
   label$23 : {
    if (!(HEAP32[(0 + 90068 | 0) >> 2] | 0)) {
     break label$23
    }
    if ((HEAP32[($2_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$23
    }
    $252_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($2_1 + 64 | 0) >> 2] = HEAP32[(0 + 90068 | 0) >> 2] | 0;
    $396($252_1 | 0, 6167 | 0, 19343 | 0, $2_1 + 64 | 0 | 0);
    $260_1 = 0;
    $382(5 | 0, $260_1 | 0, $260_1 | 0);
   }
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$7
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1039 | 0, 19421 | 0, 0 | 0);
  }
  global$0 = $2_1 + 96 | 0;
  return;
 }
 
 function $142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $47_1 = 0, $102_1 = 0, $111_1 = 0, $116_1 = 0, $136_1 = 0, $139_1 = 0, $163_1 = 0, $182_1 = 0, $185_1 = 0, $238_1 = 0, $251_1 = 0, $254_1 = 0, $300_1 = 0, $312_1 = 0, $15_1 = 0, $18_1 = 0, $221_1 = 0, $222_1 = 0, $230_1 = 0, $294_1 = 0, $325_1 = 0, $327_1 = 0, $328_1 = 0;
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 80 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $18_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 48 | 0) >> 2] = $18_1;
   $396($15_1 | 0, 3042 | 0, 22887 | 0, $4_1 + 48 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[(0 + 87936 | 0) >> 2] | 0)) {
    break label$2
   }
   label$3 : {
    if (!(+HEAPF64[(0 + 87728 | 0) >> 3] < +HEAPF64[(0 + 90160 | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    HEAPF64[(0 + 87728 | 0) >> 3] = +HEAPF64[(0 + 90160 | 0) >> 3];
   }
  }
  HEAP32[(HEAP32[($4_1 + 104 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
  label$4 : while (1) {
   $47_1 = 0;
   label$5 : {
    if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $47_1 = (((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$6 : {
    if (!($47_1 & 1 | 0)) {
     break label$6
    }
    label$7 : {
     label$8 : {
      if ((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$8
      }
      if ((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$8
      }
      break label$7;
     }
     HEAP32[($4_1 + 96 | 0) >> 2] = $256(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) | 0;
     label$9 : {
      if ((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$9
      }
      HEAP32[($4_1 + 96 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
     }
     label$10 : {
      if ((HEAP32[((HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$10
      }
      $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6170 | 0, 23e3 | 0, 0 | 0);
      $102_1 = 0;
      $382(7 | 0, $102_1 | 0, $102_1 | 0);
     }
     label$11 : {
      if (!((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$11
      }
      $111_1 = 0;
      HEAP32[($4_1 + 76 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0;
      $116_1 = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
      HEAP32[$116_1 >> 2] = (HEAP32[$116_1 >> 2] | 0) + (HEAP32[($4_1 + 76 | 0) >> 2] | 0) | 0;
      HEAP32[(0 + 90068 | 0) >> 2] = (HEAP32[(0 + 90068 | 0) >> 2] | 0) - (HEAP32[($4_1 + 76 | 0) >> 2] | 0) | 0;
      HEAP32[($4_1 + 92 | 0) >> 2] = $111_1;
      label$12 : {
       if (!((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != ($111_1 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[($4_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0;
       label$13 : {
        label$14 : while (1) {
         $136_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
         HEAP32[($4_1 + 88 | 0) >> 2] = $136_1 + 4 | 0;
         $139_1 = HEAP32[$136_1 >> 2] | 0;
         HEAP32[($4_1 + 92 | 0) >> 2] = $139_1;
         if (!(($139_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$13
         }
         $146(HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0);
         continue label$14;
        };
       }
      }
     }
     label$15 : {
      if (!((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$15
      }
      if (!(((HEAP32[(0 + 87840 | 0) >> 2] | 0) + (HEAP32[(0 + 87844 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 88312 | 0) >> 2] | 0) | 0)) {
       break label$15
      }
      $163_1 = 0;
      HEAP32[($4_1 + 76 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[($4_1 + 80 | 0) >> 2] | 0) + (HEAP32[($4_1 + 76 | 0) >> 2] | 0) | 0;
      HEAP32[($4_1 + 92 | 0) >> 2] = $163_1;
      label$16 : {
       if (!((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($163_1 | 0) & 1 | 0)) {
        break label$16
       }
       HEAP32[($4_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
       label$17 : {
        label$18 : while (1) {
         $182_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
         HEAP32[($4_1 + 88 | 0) >> 2] = $182_1 + 4 | 0;
         $185_1 = HEAP32[$182_1 >> 2] | 0;
         HEAP32[($4_1 + 92 | 0) >> 2] = $185_1;
         if (!(($185_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$17
         }
         label$19 : {
          label$20 : {
           if (!(HEAP32[($4_1 + 108 | 0) >> 2] | 0)) {
            break label$20
           }
           $146(HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0);
           break label$19;
          }
          $147(HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[(0 + 90184 | 0) >> 2] | 0 | 0);
         }
         continue label$18;
        };
       }
      }
     }
    }
    HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$4;
   }
   break label$4;
  };
  HEAP32[($4_1 + 84 | 0) >> 2] = $337(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) | 0;
  label$21 : {
   if (!((HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$21
   }
   label$22 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$22
    }
    $221_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $222_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
    $230_1 = ((HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0;
    HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $230_1;
    HEAP32[($4_1 + 32 | 0) >> 2] = $222_1;
    $396($221_1 | 0, 3049 | 0, 23115 | 0, $4_1 + 32 | 0 | 0);
   }
   $238_1 = 0;
   HEAP32[($4_1 + 72 | 0) >> 2] = $238_1;
   label$23 : {
    if (!((HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) != ($238_1 | 0) & 1 | 0)) {
     break label$23
    }
    HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[(0 + 90292 | 0) >> 2] | 0) + 4 | 0;
    label$24 : {
     label$25 : while (1) {
      $251_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
      HEAP32[($4_1 + 68 | 0) >> 2] = $251_1 + 4 | 0;
      $254_1 = HEAP32[$251_1 >> 2] | 0;
      HEAP32[($4_1 + 72 | 0) >> 2] = $254_1;
      if (!(($254_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$24
      }
      label$26 : {
       if (!((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$26
       }
       if ((((HEAPU8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 5 | 0) & 1 | 0) & 255 | 0) {
        break label$26
       }
       label$27 : {
        label$28 : {
         if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$28
         }
         if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$27
         }
        }
        $294_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $396($294_1 | 0, 6284 | 0, 23210 | 0, $4_1 | 0);
        $300_1 = 0;
        $382(5 | 0, $300_1 | 0, $300_1 | 0);
       }
       label$29 : {
        label$30 : {
         if (!(HEAP32[($4_1 + 108 | 0) >> 2] | 0)) {
          break label$30
         }
         $146(HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
         break label$29;
        }
        $147(HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0);
       }
       $312_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
       HEAP8[($312_1 + 24 | 0) >> 0] = HEAPU8[($312_1 + 24 | 0) >> 0] | 0 | 32 | 0;
      }
      continue label$25;
     };
    }
   }
  }
  label$31 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$31
   }
   $325_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $327_1 = HEAP32[(HEAP32[($4_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
   $328_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = $328_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $327_1;
   $396($325_1 | 0, 1043 | 0, 23327 | 0, $4_1 + 16 | 0 | 0);
  }
  global$0 = $4_1 + 112 | 0;
  return;
 }
 
 function $143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $137_1 = 0, $114_1 = 0, $195_1 = 0, $252_1 = 0, $376_1 = 0, $389_1 = 0, $444_1 = 0, $457_1 = 0, $33_1 = 0, $35_1 = 0, $37_1 = 0, $39_1 = 0, $485_1 = 0.0, $43_1 = 0, $44_1 = 0, $46_1 = 0, $48_1 = 0, $86_1 = 0, $88_1 = 0, $89_1 = 0, $164_1 = 0, $166_1 = 0, $168_1 = 0, $170_1 = 0, $494_1 = 0.0, $174_1 = 0, $175_1 = 0, $177_1 = 0, $179_1 = 0, $183_1 = 0, $184_1 = 0, $186_1 = 0, $495_1 = 0.0, $240_1 = 0, $241_1 = 0, $243_1 = 0, $502_1 = 0.0, $256_1 = 0, $258_1 = 0, $262_1 = 0, $503_1 = 0.0, $264_1 = 0, $268_1 = 0, $506_1 = 0.0, $274_1 = 0, $279_1 = 0, $284_1 = 0, $289_1 = 0, $368_1 = 0, $438_1 = 0;
  $4_1 = global$0 - 304 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 300 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 296 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 288 | 0) >> 3] = +($5_1 | 0);
  HEAP32[(0 + 90328 | 0) >> 2] = HEAP32[(0 + 88140 | 0) >> 2] | 0;
  HEAP32[(0 + 88140 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0) {
     break label$2
    }
    fimport$0($4_1 + 268 | 0 | 0) | 0;
    HEAP32[($4_1 + 264 | 0) >> 2] = $476($4_1 + 268 | 0 | 0) | 0;
    HEAPF64[($4_1 + 280 | 0) >> 3] = +((fimport$1() | 0) >>> 0) - +((HEAP32[(0 + 90092 | 0) >> 2] | 0) >>> 0);
    HEAPF64[($4_1 + 280 | 0) >> 3] = +HEAPF64[($4_1 + 280 | 0) >> 3] / 1.0e6;
    HEAP32[($4_1 + 276 | 0) >> 2] = ((HEAP32[(0 + 92256 | 0) >> 2] | 0) - (HEAP32[(0 + 90888 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90880 | 0) >> 2] | 0) | 0;
    $33_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $35_1 = HEAP32[((HEAP32[($4_1 + 264 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    $37_1 = HEAP32[((HEAP32[($4_1 + 264 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    $39_1 = HEAP32[(HEAP32[($4_1 + 264 | 0) >> 2] | 0) >> 2] | 0;
    $485_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
    $43_1 = (HEAP32[(0 + 90076 | 0) >> 2] | 0) - 1 | 0;
    $44_1 = HEAP32[($4_1 + 276 | 0) >> 2] | 0;
    $46_1 = HEAP32[(0 + 90060 | 0) >> 2] | 0;
    $48_1 = HEAP32[(0 + 90064 | 0) >> 2] | 0;
    HEAP32[($4_1 + 248 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
    HEAP32[($4_1 + 244 | 0) >> 2] = $48_1;
    HEAP32[($4_1 + 240 | 0) >> 2] = $46_1;
    HEAP32[($4_1 + 236 | 0) >> 2] = $44_1;
    HEAP32[($4_1 + 232 | 0) >> 2] = $43_1;
    HEAPF64[($4_1 + 224 | 0) >> 3] = $485_1;
    HEAP32[($4_1 + 216 | 0) >> 2] = $39_1;
    HEAP32[($4_1 + 212 | 0) >> 2] = $37_1;
    HEAP32[($4_1 + 208 | 0) >> 2] = $35_1;
    $396($33_1 | 0, 8118 | 0, 19468 | 0, $4_1 + 208 | 0 | 0);
    break label$1;
   }
   HEAP32[($4_1 + 272 | 0) >> 2] = $267(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 272 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     label$5 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
       break label$5
      }
      $86_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $88_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
      $89_1 = HEAP32[($4_1 + 272 | 0) >> 2] | 0;
      HEAP32[($4_1 + 200 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($4_1 + 196 | 0) >> 2] = $89_1;
      HEAP32[($4_1 + 192 | 0) >> 2] = $88_1;
      $396($86_1 | 0, 1053 | 0, 19623 | 0, $4_1 + 192 | 0 | 0);
     }
     HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[(0 + 88232 | 0) >> 2] | 0;
     HEAP32[(0 + 90464 | 0) >> 2] = HEAP32[(0 + 88232 | 0) >> 2] | 0;
     break label$3;
    }
    label$6 : {
     if (!((HEAP32[(0 + 88240 | 0) >> 2] | 0 | 0) != (-3 | 0) & 1 | 0)) {
      break label$6
     }
     if (!(+HEAPF64[(0 + 88248 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$6
     }
     $114_1 = 0;
     HEAP32[(0 + 87832 | 0) >> 2] = $114_1;
     HEAP32[(0 + 90464 | 0) >> 2] = $114_1;
    }
   }
   label$7 : {
    label$8 : {
     if (!(HEAP32[(0 + 88172 | 0) >> 2] | 0)) {
      break label$8
     }
     if (!(((HEAP32[(0 + 90076 | 0) >> 2] | 0) - 1 | 0) >>> 0 > ((HEAP32[(0 + 90384 | 0) >> 2] | 0) + (HEAP32[(0 + 88172 | 0) >> 2] | 0) | 0) >>> 0 & 1 | 0)) {
      break label$8
     }
     $137_1 = 0;
     HEAP32[($137_1 + 90384 | 0) >> 2] = (HEAP32[($137_1 + 90076 | 0) >> 2] | 0) + -1 | 0;
     fimport$0($4_1 + 268 | 0 | 0) | 0;
     HEAP32[($4_1 + 264 | 0) >> 2] = $476($4_1 + 268 | 0 | 0) | 0;
     HEAPF64[($4_1 + 280 | 0) >> 3] = +((fimport$1() | 0) >>> 0) - +((HEAP32[($137_1 + 90092 | 0) >> 2] | 0) >>> 0);
     HEAPF64[($4_1 + 280 | 0) >> 3] = +HEAPF64[($4_1 + 280 | 0) >> 3] / 1.0e6;
     HEAP32[($4_1 + 276 | 0) >> 2] = ((HEAP32[(0 + 92256 | 0) >> 2] | 0) - (HEAP32[(0 + 90888 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90880 | 0) >> 2] | 0) | 0;
     HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
     $4(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0, $4_1 + 288 | 0 | 0);
     $164_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $166_1 = HEAP32[((HEAP32[($4_1 + 264 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     $168_1 = HEAP32[((HEAP32[($4_1 + 264 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     $170_1 = HEAP32[(HEAP32[($4_1 + 264 | 0) >> 2] | 0) >> 2] | 0;
     $494_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
     $174_1 = (HEAP32[(0 + 90076 | 0) >> 2] | 0) - 1 | 0;
     $175_1 = HEAP32[($4_1 + 276 | 0) >> 2] | 0;
     $177_1 = HEAP32[(0 + 90060 | 0) >> 2] | 0;
     $179_1 = HEAP32[(0 + 90064 | 0) >> 2] | 0;
     $183_1 = (HEAP32[(0 + 90068 | 0) >> 2] | 0) + 1 | 0;
     $184_1 = HEAP32[($4_1 + 272 | 0) >> 2] | 0;
     $186_1 = HEAP32[(0 + 90084 | 0) >> 2] | 0;
     $495_1 = +HEAPF64[($4_1 + 288 | 0) >> 3];
     label$9 : {
      label$10 : {
       if (!((HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       $195_1 = HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       break label$9;
      }
      $195_1 = -1;
     }
     HEAP32[($4_1 + 96 | 0) >> 2] = $195_1;
     HEAPF64[($4_1 + 88 | 0) >> 3] = $495_1;
     HEAP32[($4_1 + 80 | 0) >> 2] = $186_1;
     HEAP32[($4_1 + 76 | 0) >> 2] = $184_1;
     HEAP32[($4_1 + 72 | 0) >> 2] = $183_1;
     HEAP32[($4_1 + 68 | 0) >> 2] = $179_1;
     HEAP32[($4_1 + 64 | 0) >> 2] = $177_1;
     HEAP32[($4_1 + 60 | 0) >> 2] = $175_1;
     HEAP32[($4_1 + 56 | 0) >> 2] = $174_1;
     HEAPF64[($4_1 + 48 | 0) >> 3] = $494_1;
     HEAP32[($4_1 + 40 | 0) >> 2] = $170_1;
     HEAP32[($4_1 + 36 | 0) >> 2] = $168_1;
     HEAP32[($4_1 + 32 | 0) >> 2] = $166_1;
     $396($164_1 | 0, 8119 | 0, 19688 | 0, $4_1 + 32 | 0 | 0);
     break label$7;
    }
    label$11 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$11
     }
     HEAPF64[($4_1 + 280 | 0) >> 3] = +((fimport$1() | 0) >>> 0) - +((HEAP32[(0 + 90092 | 0) >> 2] | 0) >>> 0);
     HEAPF64[($4_1 + 280 | 0) >> 3] = +HEAPF64[($4_1 + 280 | 0) >> 3] / 1.0e6;
     $4(HEAP32[($4_1 + 300 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0, $4_1 + 288 | 0 | 0);
     $240_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $241_1 = HEAP32[($4_1 + 272 | 0) >> 2] | 0;
     $243_1 = HEAP32[(0 + 90084 | 0) >> 2] | 0;
     $502_1 = +HEAPF64[($4_1 + 288 | 0) >> 3];
     label$12 : {
      label$13 : {
       if (!((HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       $252_1 = HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       break label$12;
      }
      $252_1 = -1;
     }
     $256_1 = HEAP32[(0 + 90060 | 0) >> 2] | 0;
     $258_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
     $262_1 = (HEAP32[(0 + 90068 | 0) >> 2] | 0) + 1 | 0;
     $503_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
     $264_1 = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     $268_1 = (HEAP32[(0 + 90084 | 0) >> 2] | 0) - 1 | 0;
     $506_1 = +HEAPF64[($4_1 + 280 | 0) >> 3] - +HEAPF64[(0 + 90360 | 0) >> 3];
     $274_1 = (HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90368 | 0) >> 2] | 0) | 0;
     $279_1 = (HEAP32[(0 + 92256 | 0) >> 2] | 0) - (HEAP32[(0 + 90372 | 0) >> 2] | 0) | 0;
     $284_1 = (HEAP32[(0 + 92224 | 0) >> 2] | 0) - (HEAP32[(0 + 90376 | 0) >> 2] | 0) | 0;
     $289_1 = (HEAP32[(0 + 91016 | 0) >> 2] | 0) - (HEAP32[(0 + 90380 | 0) >> 2] | 0) | 0;
     HEAP32[($4_1 + 184 | 0) >> 2] = HEAP32[(0 + 90232 | 0) >> 2] | 0;
     HEAP32[($4_1 + 180 | 0) >> 2] = $289_1;
     HEAP32[($4_1 + 176 | 0) >> 2] = $284_1;
     HEAP32[($4_1 + 172 | 0) >> 2] = $279_1;
     HEAP32[($4_1 + 168 | 0) >> 2] = $274_1;
     HEAPF64[($4_1 + 160 | 0) >> 3] = $506_1;
     HEAP32[($4_1 + 156 | 0) >> 2] = $268_1;
     HEAP32[($4_1 + 152 | 0) >> 2] = $264_1;
     HEAPF64[($4_1 + 144 | 0) >> 3] = $503_1;
     HEAP32[($4_1 + 140 | 0) >> 2] = $262_1;
     HEAP32[($4_1 + 136 | 0) >> 2] = $258_1;
     HEAP32[($4_1 + 132 | 0) >> 2] = $256_1;
     HEAP32[($4_1 + 128 | 0) >> 2] = $252_1;
     HEAPF64[($4_1 + 120 | 0) >> 3] = $502_1;
     HEAP32[($4_1 + 116 | 0) >> 2] = $243_1;
     HEAP32[($4_1 + 112 | 0) >> 2] = $241_1;
     $396($240_1 | 0, 1049 | 0, 19896 | 0, $4_1 + 112 | 0 | 0);
     HEAPF64[(0 + 90360 | 0) >> 3] = +HEAPF64[($4_1 + 280 | 0) >> 3];
     HEAP32[(0 + 90368 | 0) >> 2] = HEAP32[(0 + 90060 | 0) >> 2] | 0;
     HEAP32[(0 + 90372 | 0) >> 2] = HEAP32[(0 + 92256 | 0) >> 2] | 0;
     HEAP32[(0 + 90376 | 0) >> 2] = HEAP32[(0 + 92224 | 0) >> 2] | 0;
     HEAP32[(0 + 90380 | 0) >> 2] = HEAP32[(0 + 91016 | 0) >> 2] | 0;
    }
   }
   label$14 : {
    if (!((HEAP32[(0 + 92464 | 0) >> 2] | 0 | 0) < ((HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) & 1 | 0)) {
     break label$14
    }
    HEAP32[(0 + 92464 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
   }
   label$15 : {
    if (!((HEAP32[(0 + 90256 | 0) >> 2] | 0) >>> 0 > 2147483647 >>> 0 & 1 | 0)) {
     break label$15
    }
    HEAP32[(0 + 92456 | 0) >> 2] = (HEAP32[(0 + 92456 | 0) >> 2] | 0) + 1 | 0;
    label$16 : {
     if ($280(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) | 0) {
      break label$16
     }
     $368_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     $396($368_1 | 0, 6370 | 0, 20102 | 0, $4_1 + 16 | 0 | 0);
     $376_1 = 0;
     $382(5 | 0, $376_1 | 0, $376_1 | 0);
    }
    HEAP32[(0 + 90256 | 0) >> 2] = 0;
    HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
    label$17 : while (1) {
     $389_1 = 0;
     label$18 : {
      if (!((HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$18
      }
      $389_1 = (HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$19 : {
      if (!($389_1 & 1 | 0)) {
       break label$19
      }
      HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 72 | 0) >> 2] = 0;
      HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$17;
     }
     break label$17;
    };
   }
   label$20 : {
    if (!((HEAP32[(0 + 92496 | 0) >> 2] | 0 | 0) < ((HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) & 1 | 0)) {
     break label$20
    }
    HEAP32[(0 + 92496 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
   }
   label$21 : {
    if (!((HEAP32[(0 + 90260 | 0) >> 2] | 0) >>> 0 > 2147483647 >>> 0 & 1 | 0)) {
     break label$21
    }
    HEAP32[(0 + 92488 | 0) >> 2] = (HEAP32[(0 + 92488 | 0) >> 2] | 0) + 1 | 0;
    label$22 : {
     if (!(HEAP32[(0 + 90256 | 0) >> 2] | 0)) {
      break label$22
     }
     if ($280(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) | 0) {
      break label$22
     }
     $438_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[$4_1 >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
     $396($438_1 | 0, 6371 | 0, 20173 | 0, $4_1 | 0);
     $444_1 = 0;
     $382(5 | 0, $444_1 | 0, $444_1 | 0);
    }
    HEAP32[(0 + 90260 | 0) >> 2] = 0;
    HEAP32[($4_1 + 260 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
    label$23 : while (1) {
     $457_1 = 0;
     label$24 : {
      if (!((HEAP32[($4_1 + 260 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$24
      }
      $457_1 = (HEAP32[(HEAP32[($4_1 + 260 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$25 : {
      if (!($457_1 & 1 | 0)) {
       break label$25
      }
      HEAP32[((HEAP32[($4_1 + 260 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
      HEAP32[($4_1 + 260 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 260 | 0) >> 2] | 0) >> 2] | 0;
      continue label$23;
     }
     break label$23;
    };
   }
   HEAP32[(0 + 90108 | 0) >> 2] = HEAP32[($4_1 + 272 | 0) >> 2] | 0;
   HEAP32[(0 + 88140 | 0) >> 2] = HEAP32[(0 + 90328 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 304 | 0;
  return;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $21_1 = 0, $42_1 = 0, $56_1 = 0, $88_1 = 0, $150_1 = 0, $326_1 = 0.0, $192_1 = 0, $212_1 = 0, $240_1 = 0, $279_1 = 0, $286_1 = 0, $33_1 = 0, $44_1 = 0, $178_1 = 0, $183_1 = 0, $270_1 = 0, $272_1 = 0, $275_1 = 0, $312_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     $6_1 = HEAP32[(0 + 90008 | 0) >> 2] | 0;
     HEAP32[($3_1 + 68 | 0) >> 2] = $6_1;
     if (!(($6_1 | 0) != (HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $21_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
       HEAP32[($3_1 + 56 | 0) >> 2] = $21_1 + 1 | 0;
       if (!(($21_1 | 0) > (HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
      }
      $33_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        $42_1 = HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$6;
       }
       $42_1 = -1;
      }
      $44_1 = $42_1;
      label$8 : {
       label$9 : {
        if (!((HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$9
        }
        $56_1 = HEAP32[((HEAP32[(0 + 90004 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$8;
       }
       $56_1 = -1;
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $56_1;
      HEAP32[($3_1 + 16 | 0) >> 2] = $44_1;
      $396($33_1 | 0, 6406 | 0, 20831 | 0, $3_1 + 16 | 0 | 0);
      $281();
      $150(5 | 0, HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0);
     }
     label$10 : {
      if ((HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$10
      }
      HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$3;
     }
     $88_1 = HEAP32[(((HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[($3_1 + 64 | 0) >> 2] = $88_1;
     label$11 : {
      label$12 : {
       if (!$88_1) {
        break label$12
       }
       HEAP32[($3_1 + 64 | 0) >> 2] = (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + -1 | 0;
       break label$11;
      }
      HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) >> 2] | 0;
     }
     label$13 : {
      if (HEAP32[($3_1 + 64 | 0) >> 2] | 0) {
       break label$13
      }
      $324((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0 | 0);
      HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$3;
     }
     label$14 : {
      if (!(HEAP32[(0 + 89568 | 0) >> 2] | 0)) {
       break label$14
      }
      label$15 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 18 | 0) & 1 | 0)) {
        break label$15
       }
       $300(HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($3_1 + 36 | 0) >> 2] = $344(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0;
      HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($3_1 + 68 | 0) >> 2] | 0) >> 3];
      label$16 : {
       if (!(+HEAPF64[($3_1 + 40 | 0) >> 3] < +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
        break label$16
       }
       HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       continue label$3;
      }
     }
     label$17 : {
      if (HEAP32[(0 + 88168 | 0) >> 2] | 0) {
       break label$17
      }
      if (HEAP32[(0 + 88280 | 0) >> 2] | 0) {
       break label$17
      }
      label$18 : {
       if (!(HEAP32[(0 + 87940 | 0) >> 2] | 0)) {
        break label$18
       }
       $298();
       HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[(0 + 90008 | 0) >> 2] | 0;
      }
      HEAP32[(HEAP32[($3_1 + 72 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
      HEAP32[($3_1 + 76 | 0) >> 2] = $333(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
     }
     label$19 : {
      label$20 : {
       if (!(HEAP32[(0 + 88168 | 0) >> 2] | 0)) {
        break label$20
       }
       HEAP32[($3_1 + 32 | 0) >> 2] = 0;
       label$21 : {
        if (!(HEAP32[(0 + 89568 | 0) >> 2] | 0)) {
         break label$21
        }
        HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
        label$22 : while (1) {
         $150_1 = 0;
         label$23 : {
          if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$23
          }
          $150_1 = (HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
         }
         label$24 : {
          if (!($150_1 & 1 | 0)) {
           break label$24
          }
          label$25 : {
           if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$25
           }
           break label$24;
          }
          label$26 : {
           if (!((HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$26
           }
           $178_1 = $337(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + $178_1 | 0;
          }
          HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
          continue label$22;
         }
         break label$22;
        };
       }
       $183_1 = 0;
       HEAPF64[($3_1 + 48 | 0) >> 3] = +($355() | 0 | 0);
       HEAPF64[($3_1 + 48 | 0) >> 3] = +HEAPF64[($3_1 + 48 | 0) >> 3] / 2147483647.0;
       HEAPF64[($3_1 + 48 | 0) >> 3] = Math_floor(+((HEAP32[(0 + 90068 | 0) >> 2] | 0) - (HEAP32[($3_1 + 32 | 0) >> 2] | 0) | 0 | 0) * +HEAPF64[($3_1 + 48 | 0) >> 3]);
       $326_1 = +HEAPF64[($3_1 + 48 | 0) >> 3];
       label$27 : {
        label$28 : {
         if (!(Math_abs($326_1) < 2147483648.0)) {
          break label$28
         }
         $192_1 = ~~$326_1;
         break label$27;
        }
        $192_1 = -2147483648;
       }
       HEAP32[($3_1 + 60 | 0) >> 2] = $192_1;
       label$29 : {
        if (!((HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) != ($183_1 | 0) & 1 | 0)) {
         break label$29
        }
        HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[(0 + 90008 | 0) >> 2] | 0;
        label$30 : while (1) {
         $212_1 = 0;
         label$31 : {
          if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$31
          }
          $212_1 = (HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
         }
         label$32 : {
          if (!($212_1 & 1 | 0)) {
           break label$32
          }
          label$33 : {
           if (!((HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$33
           }
           $240_1 = HEAP32[(((HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
           HEAP32[($3_1 + 64 | 0) >> 2] = $240_1;
           label$34 : {
            label$35 : {
             if (!$240_1) {
              break label$35
             }
             HEAP32[($3_1 + 64 | 0) >> 2] = (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + -1 | 0;
             break label$34;
            }
            HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) >> 2] | 0;
           }
           label$36 : {
            label$37 : {
             if (HEAP32[($3_1 + 64 | 0) >> 2] | 0) {
              break label$37
             }
             $324((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0 | 0);
             break label$36;
            }
            label$38 : {
             if (!((HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0) > (HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$38
             }
             HEAP32[(HEAP32[($3_1 + 72 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
             HEAP32[($3_1 + 76 | 0) >> 2] = $334(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0;
             break label$1;
            }
            HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) - (HEAP32[($3_1 + 64 | 0) >> 2] | 0) | 0;
           }
          }
          HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
          continue label$30;
         }
         break label$30;
        };
       }
       $270_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $272_1 = HEAP32[(0 + 90068 | 0) >> 2] | 0;
       $275_1 = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
       HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 48 | 0) >> 3];
       HEAP32[($3_1 + 4 | 0) >> 2] = $275_1;
       HEAP32[$3_1 >> 2] = $272_1;
       $396($270_1 | 0, 6169 | 0, 20946 | 0, $3_1 | 0);
       $279_1 = 0;
       $382(5 | 0, $279_1 | 0, $279_1 | 0);
       break label$19;
      }
      HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90004 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
      $286_1 = $333(HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($3_1 + 36 | 0) >> 2] = $286_1;
      label$39 : {
       if (($286_1 | 0) != (0 | 0) & 1 | 0) {
        break label$39
       }
       label$40 : {
        if (!((HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$40
        }
        $324((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 64 | 0 | 0);
       }
       $252(HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0);
       $299(HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0, 87704 + 2296 | 0 | 0);
       continue label$3;
      }
      HEAP32[(HEAP32[($3_1 + 72 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
      HEAP32[($3_1 + 76 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
      break label$1;
     }
     continue label$3;
    };
   }
   HEAP32[($3_1 + 76 | 0) >> 2] = 0;
  }
  $312_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  global$0 = $3_1 + 80 | 0;
  return $312_1 | 0;
 }
 
 function $145($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $35_1 = 0, $315_1 = 0, $7_1 = 0, $33_1 = 0, $63_1 = 0, $97_1 = 0, $124_1 = 0, $131_1 = 0, $162_1 = 0, $246_1 = 0, $281_1 = 0, $420_1 = 0, $428_1 = 0, $174_1 = 0, $176_1 = 0, $178_1 = 0, $180_1 = 0, $459_1 = 0, $461_1 = 0, $465_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  $7_1 = 0;
  HEAP32[($5_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $7_1;
  HEAP32[(0 + 90144 | 0) >> 2] = $7_1;
  label$1 : {
   if (!(($267(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0) & 1 | 0)) {
    break label$1
   }
   $325(87704 + 2584 | 0 | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if ((HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6213 | 0, 18523 | 0, 0 | 0);
   $33_1 = 0;
   $382(5 | 0, $33_1 | 0, $33_1 | 0);
  }
  $25();
  label$3 : {
   label$4 : {
    if (!(HEAP32[($5_1 + 96 | 0) >> 2] | 0)) {
     break label$4
    }
    $35_1 = 0;
    HEAP32[($5_1 + 100 | 0) >> 2] = $5(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, $35_1 | 0, $35_1 | 0, $35_1 | 0, $5_1 + 88 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 60 | 0 | 0) | 0;
    HEAP32[(0 + 91928 | 0) >> 2] = (HEAP32[(0 + 91928 | 0) >> 2] | 0) + (HEAP32[($5_1 + 60 | 0) >> 2] | 0) | 0;
    label$5 : {
     if (HEAP32[($5_1 + 64 | 0) >> 2] | 0) {
      break label$5
     }
     HEAP32[(0 + 91808 | 0) >> 2] = (HEAP32[(0 + 91808 | 0) >> 2] | 0) + 1 | 0;
     $63_1 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
     HEAP32[($63_1 + 80 | 0) >> 2] = (HEAP32[($63_1 + 80 | 0) >> 2] | 0) & -262145 | 0 | 262144 | 0;
     $147(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, $5_1 + 88 | 0 | 0, HEAP32[(0 + 90184 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 108 | 0) >> 2] = 1;
     break label$3;
    }
   }
   $143(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0);
   label$6 : {
    if (!((HEAP32[(0 + 88220 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[(0 + 90108 | 0) >> 2] | 0 | 0) == ((0 - (HEAP32[(0 + 88220 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$6
    }
    $97_1 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
    HEAP32[($97_1 + 80 | 0) >> 2] = (HEAP32[($97_1 + 80 | 0) >> 2] | 0) & -262145 | 0 | 262144 | 0;
    HEAP32[($5_1 + 108 | 0) >> 2] = 0;
    break label$3;
   }
   $148(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, $5_1 + 52 | 0 | 0, $5_1 + 48 | 0 | 0);
   label$7 : {
    if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
     break label$7
    }
    if ((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$7
    }
    if ((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0) {
     break label$7
    }
    $124_1 = 1;
    HEAP32[(0 + 91792 | 0) >> 2] = (HEAP32[(0 + 91792 | 0) >> 2] | 0) + 1 | 0;
    $131_1 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
    HEAP32[($131_1 + 80 | 0) >> 2] = (HEAP32[($131_1 + 80 | 0) >> 2] | 0) & -262145 | 0 | 262144 | 0;
    $306(0 | 0, $124_1 | 0);
    HEAP32[($5_1 + 108 | 0) >> 2] = $124_1;
    break label$3;
   }
   HEAP32[($5_1 + 68 | 0) >> 2] = $149(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0, $5_1 + 76 | 0 | 0) | 0;
   label$8 : {
    if ((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$8
    }
    label$9 : {
     if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
      break label$9
     }
     HEAP32[($5_1 + 108 | 0) >> 2] = 1;
     break label$3;
    }
    label$10 : {
     if (!((HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$10
     }
     $162_1 = HEAP32[(0 + 90232 | 0) >> 2] | 0;
     HEAP32[(0 + 90232 | 0) >> 2] = $162_1 + 1 | 0;
     label$11 : {
      if (!(($162_1 | 0) >= (HEAP32[(0 + 90064 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      $174_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $176_1 = HEAP32[(0 + 90232 | 0) >> 2] | 0;
      $178_1 = $267(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) | 0;
      $180_1 = HEAP32[((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(0 + 90064 | 0) >> 2] | 0;
      HEAP32[($5_1 + 24 | 0) >> 2] = $180_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = $178_1;
      HEAP32[($5_1 + 16 | 0) >> 2] = $176_1;
      $396($174_1 | 0, 6296 | 0, 18609 | 0, $5_1 + 16 | 0 | 0);
      $382(5 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     HEAP32[($5_1 + 108 | 0) >> 2] = $145(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
     break label$3;
    }
    HEAP32[(0 + 90232 | 0) >> 2] = 0;
    HEAP32[($5_1 + 108 | 0) >> 2] = 1;
    break label$3;
   }
   label$12 : {
    if (!(HEAP32[(0 + 90232 | 0) >> 2] | 0)) {
     break label$12
    }
    HEAP32[(0 + 92096 | 0) >> 2] = (HEAP32[(0 + 92096 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 92112 | 0) >> 2] = (HEAP32[(0 + 92112 | 0) >> 2] | 0) + (HEAP32[(0 + 90232 | 0) >> 2] | 0) | 0;
    label$13 : {
     if (!((HEAP32[(0 + 92104 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 90232 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[(0 + 92104 | 0) >> 2] = HEAP32[(0 + 90232 | 0) >> 2] | 0;
    }
    HEAP32[(0 + 90232 | 0) >> 2] = 0;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = $267(HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(0 + 92024 | 0) >> 2] = (HEAP32[(0 + 92024 | 0) >> 2] | 0) + 1 | 0;
   label$14 : {
    if (!(HEAP32[(0 + 88216 | 0) >> 2] | 0)) {
     break label$14
    }
    if (!((HEAP32[(0 + 90108 | 0) >> 2] | 0 | 0) == ((HEAP32[(0 + 88216 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$14
    }
    $246_1 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
    HEAP32[($246_1 + 80 | 0) >> 2] = (HEAP32[($246_1 + 80 | 0) >> 2] | 0) & -262145 | 0 | 262144 | 0;
    HEAP32[($5_1 + 108 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[(0 + 90184 | 0) >> 2] = 0;
   label$15 : {
    label$16 : {
     label$17 : {
      if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
       break label$17
      }
      if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
       break label$16
      }
     }
     $236();
     $166(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 87888 | 0) >> 3]), +(+HEAPF64[(0 + 87768 | 0) >> 3]));
     label$18 : {
      label$19 : {
       if (!((HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0)) {
        break label$19
       }
       HEAP32[(0 + 90184 | 0) >> 2] = 1;
       break label$18;
      }
      HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
      label$20 : while (1) {
       $281_1 = 0;
       label$21 : {
        if (!((HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$21
        }
        $281_1 = (HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
       }
       label$22 : {
        if (!($281_1 & 1 | 0)) {
         break label$22
        }
        label$23 : {
         if (((HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
          break label$23
         }
         HEAP32[(0 + 90184 | 0) >> 2] = 1;
         break label$22;
        }
        HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
        continue label$20;
       }
       break label$20;
      };
     }
     break label$15;
    }
    label$24 : {
     if (!(HEAP32[(0 + 87748 | 0) >> 2] | 0)) {
      break label$24
     }
     HEAP32[(0 + 90184 | 0) >> 2] = 1;
    }
   }
   label$25 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$25
    }
    $278(HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0);
   }
   $315_1 = 0;
   $142($315_1 | 0, $5_1 + 56 | 0 | 0);
   HEAP32[(0 + 90184 | 0) >> 2] = $315_1;
   HEAP32[(0 + 90188 | 0) >> 2] = $315_1;
   HEAP32[(0 + 91960 | 0) >> 2] = (HEAP32[(0 + 91960 | 0) >> 2] | 0) + 1 | 0;
   HEAPF64[($5_1 + 80 | 0) >> 3] = +(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) - +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) * +((HEAP32[(0 + 88324 | 0) >> 2] | 0) - (HEAP32[(0 + 90064 | 0) >> 2] | 0) | 0 | 0) / +(HEAP32[(0 + 90064 | 0) >> 2] | 0 | 0);
   HEAPF64[(0 + 91968 | 0) >> 3] = +HEAPF64[(0 + 91968 | 0) >> 3] + +HEAPF64[($5_1 + 80 | 0) >> 3];
   HEAPF64[(0 + 91976 | 0) >> 3] = +HEAPF64[(0 + 91976 | 0) >> 3] + +HEAPF64[($5_1 + 80 | 0) >> 3] * +HEAPF64[($5_1 + 80 | 0) >> 3];
   $253();
   label$26 : {
    if (!((HEAP32[(0 + 91488 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 90064 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$26
    }
    HEAP32[(0 + 91488 | 0) >> 2] = HEAP32[(0 + 90064 | 0) >> 2] | 0;
   }
   HEAP32[(0 + 90176 | 0) >> 2] = 0;
   label$27 : {
    label$28 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$28
     }
     label$29 : {
      if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (200 | 0) & 1 | 0)) {
       break label$29
      }
      $281();
     }
     $389(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0);
     $278(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
     break label$27;
    }
    label$30 : {
     if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
      break label$30
     }
     label$31 : {
      label$32 : {
       if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
        break label$32
       }
       $278(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
       break label$31;
      }
      $278(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
     }
    }
   }
   label$33 : {
    if (!((HEAP32[(0 + 88220 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$33
    }
    if (!((HEAP32[(0 + 90108 | 0) >> 2] | 0 | 0) == ((HEAP32[(0 + 88220 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$33
    }
    if (!(($337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$33
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = 0;
    break label$3;
   }
   $420_1 = 1;
   $306($420_1 | 0, $420_1 | 0);
   label$34 : {
    if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$34
    }
    $428_1 = 0;
    $197(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, $428_1 | 0, $428_1 | 0);
    $231();
   }
   label$35 : {
    if (!((HEAP32[(0 + 88220 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$35
    }
    if (!((HEAP32[(0 + 90108 | 0) >> 2] | 0 | 0) == ((HEAP32[(0 + 88220 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$35
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = 0;
    break label$3;
   }
   label$36 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$36
    }
    $459_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $461_1 = $267(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) | 0;
    HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 80 | 0) >> 3];
    HEAP32[$5_1 >> 2] = $461_1;
    $396($459_1 | 0, 2056 | 0, 18759 | 0, $5_1 | 0);
   }
   HEAP32[($5_1 + 108 | 0) >> 2] = 1;
  }
  $465_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
  global$0 = $5_1 + 112 | 0;
  return $465_1 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $180_1 = 0, $55_1 = 0, $57_1 = 0, $59_1 = 0, $200_1 = 0, $202_1 = 0, $204_1 = 0, $210_1 = 0, $253_1 = 0, $255_1 = 0, $294_1 = 0, $296_1 = 0, $298_1 = 0;
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 80 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 90184 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 76 | 0) >> 2] = $6(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0, $4_1 + 96 | 0 | 0, HEAP32[(0 + 87748 | 0) >> 2] | 0 | 0, $4_1 + 84 | 0 | 0, $4_1 + 72 | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 76 | 0) >> 2] = $5(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[(0 + 87748 | 0) >> 2] | 0 | 0, 1 | 0, 0 | 0, $4_1 + 96 | 0 | 0, $4_1 + 84 | 0 | 0, $4_1 + 72 | 0 | 0) | 0;
  }
  HEAP32[(0 + 92272 | 0) >> 2] = (HEAP32[(0 + 92272 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 91928 | 0) >> 2] = (HEAP32[(0 + 91928 | 0) >> 2] | 0) + (HEAP32[($4_1 + 72 | 0) >> 2] | 0) | 0;
  label$3 : {
   if (!(((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
    break label$3
   }
   $55_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $57_1 = $267(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0;
   $59_1 = HEAP32[((HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = $59_1;
   HEAP32[($4_1 + 48 | 0) >> 2] = $57_1;
   $396($55_1 | 0, 6293 | 0, 22496 | 0, $4_1 + 48 | 0 | 0);
   $150(5 | 0, HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   if (!(HEAP32[(0 + 89568 | 0) >> 2] | 0)) {
    break label$4
   }
   label$5 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 84 | 0) >> 2] | 0) {
     break label$5
    }
    if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
     break label$5
    }
    $151(22590 | 0);
   }
   label$6 : {
    label$7 : {
     if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
      break label$7
     }
     label$8 : {
      if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] >= -+HEAPF64[(0 + 89536 | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      HEAP32[($4_1 + 84 | 0) >> 2] = 1;
     }
     break label$6;
    }
    label$9 : {
     if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
      break label$9
     }
     HEAP32[($4_1 + 84 | 0) >> 2] = 1;
    }
   }
  }
  label$10 : {
   label$11 : {
    if (!(HEAP32[($4_1 + 84 | 0) >> 2] | 0)) {
     break label$11
    }
    label$12 : {
     label$13 : {
      label$14 : {
       if (!((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$14
       }
       if (($344(HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$13
       }
      }
      $325((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0);
      label$15 : {
       label$16 : {
        if (!(HEAP32[(0 + 89568 | 0) >> 2] | 0)) {
         break label$16
        }
        if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] > +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
         break label$15
        }
       }
       HEAP32[($4_1 + 80 | 0) >> 2] = 1;
      }
      HEAPF64[(HEAP32[($4_1 + 76 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3];
      break label$12;
     }
     HEAPF64[($4_1 + 88 | 0) >> 3] = +HEAPF64[(HEAP32[($4_1 + 76 | 0) >> 2] | 0) >> 3];
     label$17 : {
      label$18 : {
       if (!(+HEAPF64[($4_1 + 88 | 0) >> 3] < +HEAPF64[($4_1 + 96 | 0) >> 3] & 1 | 0)) {
        break label$18
       }
       $325((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0);
       HEAPF64[(HEAP32[($4_1 + 76 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3];
       label$19 : {
        if (!(HEAP32[(0 + 89568 | 0) >> 2] | 0)) {
         break label$19
        }
        if (!(+HEAPF64[($4_1 + 88 | 0) >> 3] < +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
         break label$19
        }
        if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] >= +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
         break label$19
        }
        HEAP32[($4_1 + 80 | 0) >> 2] = 1;
       }
       break label$17;
      }
      $328((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0);
     }
    }
    label$20 : {
     if (!(HEAP32[($4_1 + 80 | 0) >> 2] | 0)) {
      break label$20
     }
     if (!((HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$20
     }
     label$21 : {
      label$22 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
        break label$22
       }
       label$23 : {
        if (!(((HEAP32[((HEAP32[(0 + 90008 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
       }
       break label$21;
      }
      $252(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0);
      $247(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0);
      label$24 : {
       if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$24
       }
       $180_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
       HEAP32[($180_1 + 80 | 0) >> 2] = (HEAP32[($180_1 + 80 | 0) >> 2] | 0) & -1025 | 0 | 1024 | 0;
      }
     }
    }
    HEAP32[(0 + 90068 | 0) >> 2] = (HEAP32[(0 + 90068 | 0) >> 2] | 0) + 1 | 0;
    label$25 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$25
     }
     $200_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $202_1 = $267(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0;
     $204_1 = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $210_1 = ((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $210_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = $204_1;
     HEAP32[$4_1 >> 2] = $202_1;
     $396($200_1 | 0, 4065 | 0, 22626 | 0, $4_1 | 0);
    }
    break label$10;
   }
   label$26 : {
    label$27 : {
     label$28 : {
      if (HEAP32[(0 + 87784 | 0) >> 2] | 0) {
       break label$28
      }
      if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
       break label$27
      }
     }
     label$29 : {
      if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
       break label$29
      }
      $151(22722 | 0);
     }
     HEAP32[(0 + 90848 | 0) >> 2] = (HEAP32[(0 + 90848 | 0) >> 2] | 0) + 1 | 0;
     label$30 : {
      label$31 : {
       label$32 : {
        if ((HEAP32[(0 + 87840 | 0) >> 2] | 0) + (HEAP32[(0 + 88312 | 0) >> 2] | 0) | 0) {
         break label$32
        }
        if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] > +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
         break label$31
        }
       }
       $147(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, $4_1 + 96 | 0 | 0, HEAP32[(0 + 90184 | 0) >> 2] | 0 | 0);
       break label$30;
      }
      label$33 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
        break label$33
       }
       $253_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $255_1 = $267(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($4_1 + 16 | 0) >> 2] = $255_1;
       $396($253_1 | 0, 4066 | 0, 22744 | 0, $4_1 + 16 | 0 | 0);
      }
     }
     break label$26;
    }
    label$34 : {
     label$35 : {
      if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
       break label$35
      }
      if (!(+HEAPF64[($4_1 + 96 | 0) >> 3] >= -+HEAPF64[(0 + 89536 | 0) >> 3] & 1 | 0)) {
       break label$35
      }
      HEAP32[(0 + 91944 | 0) >> 2] = (HEAP32[(0 + 91944 | 0) >> 2] | 0) + 1 | 0;
      $147(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, $4_1 + 96 | 0 | 0, HEAP32[(0 + 90184 | 0) >> 2] | 0 | 0);
      break label$34;
     }
     HEAP32[(0 + 91920 | 0) >> 2] = (HEAP32[(0 + 91920 | 0) >> 2] | 0) + 1 | 0;
     label$36 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
       break label$36
      }
      $294_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $296_1 = $267(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0;
      $298_1 = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3];
      HEAP32[($4_1 + 36 | 0) >> 2] = $298_1;
      HEAP32[($4_1 + 32 | 0) >> 2] = $296_1;
      $396($294_1 | 0, 4067 | 0, 22809 | 0, $4_1 + 32 | 0 | 0);
     }
     label$37 : {
      if (!(HEAP32[(0 + 87844 | 0) >> 2] | 0)) {
       break label$37
      }
      $147(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, $4_1 + 96 | 0 | 0, HEAP32[(0 + 90184 | 0) >> 2] | 0 | 0);
     }
    }
   }
  }
  global$0 = $4_1 + 112 | 0;
  return;
 }
 
 function $147($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $477_1 = 0.0, $365_1 = 0, $408_1 = 0, $18_1 = 0, $20_1 = 0, $22_1 = 0, $31_1 = 0, $115_1 = 0, $117_1 = 0, $119_1 = 0, $483_1 = 0.0, $142_1 = 0, $144_1 = 0, $146_1 = 0, $487_1 = 0.0, $170_1 = 0, $172_1 = 0, $174_1 = 0, $231_1 = 0, $233_1 = 0, $235_1 = 0, $237_1 = 0, $495_1 = 0.0, $273_1 = 0, $275_1 = 0, $277_1 = 0, $502_1 = 0.0, $299_1 = 0, $301_1 = 0, $303_1 = 0, $305_1 = 0, $504_1 = 0.0, $327_1 = 0, $329_1 = 0, $331_1 = 0, $333_1 = 0, $512_1 = 0.0, $348_1 = 0, $350_1 = 0, $352_1 = 0, $354_1 = 0, $514_1 = 0.0, $390_1 = 0, $392_1 = 0, $394_1 = 0, $519_1 = 0.0, $396_1 = 0, $466_1 = 0, $468_1 = 0, $470_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  $8_1 = 0;
  HEAP32[($6_1 + 380 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 372 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 368 | 0) >> 2] = $3_1;
  HEAPF64[($6_1 + 328 | 0) >> 3] = +($8_1 | 0);
  HEAP32[($6_1 + 324 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 312 | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $18_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $20_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
   $22_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[($6_1 + 372 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $477_1 = +HEAPF64[(HEAP32[($6_1 + 372 | 0) >> 2] | 0) >> 3];
     break label$2;
    }
    $477_1 = +(0 | 0);
   }
   $31_1 = HEAP32[($6_1 + 368 | 0) >> 2] | 0;
   HEAP32[($6_1 + 308 | 0) >> 2] = HEAP32[(0 + 90228 | 0) >> 2] | 0;
   HEAP32[($6_1 + 304 | 0) >> 2] = $31_1;
   HEAPF64[($6_1 + 296 | 0) >> 3] = $477_1;
   HEAP32[($6_1 + 292 | 0) >> 2] = $22_1;
   HEAP32[($6_1 + 288 | 0) >> 2] = $20_1;
   $396($18_1 | 0, 4090 | 0, 21113 | 0, $6_1 + 288 | 0 | 0);
  }
  HEAP32[(0 + 90264 | 0) >> 2] = 1;
  label$4 : {
   label$5 : {
    label$6 : {
     if ((HEAP32[($6_1 + 372 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if (!(HEAP32[($6_1 + 368 | 0) >> 2] | 0)) {
        break label$8
       }
       HEAP32[($6_1 + 364 | 0) >> 2] = $6(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0, $6_1 + 352 | 0 | 0, 1 | 0, $6_1 + 320 | 0 | 0, $6_1 + 324 | 0 | 0) | 0;
       break label$7;
      }
      HEAP32[($6_1 + 364 | 0) >> 2] = $5(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0, 1 | 0, 0 | 0, HEAP32[(0 + 87784 | 0) >> 2] | 0 | 0, $6_1 + 352 | 0 | 0, $6_1 + 320 | 0 | 0, $6_1 + 324 | 0 | 0) | 0;
     }
     HEAP32[(0 + 92264 | 0) >> 2] = (HEAP32[(0 + 92264 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 91896 | 0) >> 2] = (HEAP32[(0 + 91896 | 0) >> 2] | 0) + (HEAP32[($6_1 + 324 | 0) >> 2] | 0) | 0;
     label$9 : {
      if (HEAP32[(0 + 87784 | 0) >> 2] | 0) {
       break label$9
      }
      if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
       break label$9
      }
      label$10 : {
       label$11 : {
        if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
         break label$11
        }
        label$12 : {
         if (!(+HEAPF64[($6_1 + 352 | 0) >> 3] < -+HEAPF64[(0 + 89536 | 0) >> 3] & 1 | 0)) {
          break label$12
         }
         HEAP32[(0 + 90840 | 0) >> 2] = (HEAP32[(0 + 90840 | 0) >> 2] | 0) + 1 | 0;
         label$13 : {
          if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
           break label$13
          }
          $115_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $117_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
          $119_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          $483_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
          HEAP32[($6_1 + 240 | 0) >> 2] = HEAP32[($6_1 + 368 | 0) >> 2] | 0;
          HEAPF64[($6_1 + 232 | 0) >> 3] = $483_1;
          HEAP32[($6_1 + 228 | 0) >> 2] = $119_1;
          HEAP32[($6_1 + 224 | 0) >> 2] = $117_1;
          $396($115_1 | 0, 4062 | 0, 21230 | 0, $6_1 + 224 | 0 | 0);
         }
         HEAP32[(0 + 90228 | 0) >> 2] = 0;
         break label$4;
        }
        break label$10;
       }
       label$14 : {
        if (!(+HEAPF64[($6_1 + 352 | 0) >> 3] < -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
         break label$14
        }
        label$15 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
          break label$15
         }
         $142_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $144_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
         $146_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $487_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
         HEAP32[($6_1 + 272 | 0) >> 2] = HEAP32[($6_1 + 368 | 0) >> 2] | 0;
         HEAPF64[($6_1 + 264 | 0) >> 3] = $487_1;
         HEAP32[($6_1 + 260 | 0) >> 2] = $146_1;
         HEAP32[($6_1 + 256 | 0) >> 2] = $144_1;
         $396($142_1 | 0, 4063 | 0, 21320 | 0, $6_1 + 256 | 0 | 0);
        }
        HEAP32[(0 + 90840 | 0) >> 2] = (HEAP32[(0 + 90840 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[(0 + 90228 | 0) >> 2] = 0;
        break label$4;
       }
      }
     }
     break label$5;
    }
    HEAP32[($6_1 + 364 | 0) >> 2] = HEAP32[($6_1 + 376 | 0) >> 2] | 0;
    HEAPF64[($6_1 + 352 | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 372 | 0) >> 2] | 0) >> 3];
   }
   label$16 : {
    if (!(((HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$16
    }
    $170_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $172_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
    $174_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 216 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 212 | 0) >> 2] = $174_1;
    HEAP32[($6_1 + 208 | 0) >> 2] = $172_1;
    $396($170_1 | 0, 6405 | 0, 21395 | 0, $6_1 + 208 | 0 | 0);
    $150(5 | 0, HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0);
   }
   label$17 : {
    if (!(+HEAPF64[($6_1 + 352 | 0) >> 3] > +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
     break label$17
    }
    label$18 : {
     if ((HEAP32[($6_1 + 372 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$18
     }
     if (!((HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$18
     }
     HEAP32[(0 + 91888 | 0) >> 2] = (HEAP32[(0 + 91888 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($6_1 + 344 | 0) >> 3] = +$10(HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
     label$19 : {
      if (!(+HEAPF64[($6_1 + 344 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$19
      }
      HEAPF64[($6_1 + 336 | 0) >> 3] = +$58(HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
      HEAP32[(0 + 91904 | 0) >> 2] = (HEAP32[(0 + 91904 | 0) >> 2] | 0) + 1 | 0;
      label$20 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$20
       }
       $231_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $233_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
       $235_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $237_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $495_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
       HEAPF64[($6_1 + 200 | 0) >> 3] = +HEAPF64[($6_1 + 344 | 0) >> 3];
       HEAPF64[($6_1 + 192 | 0) >> 3] = $495_1;
       HEAP32[($6_1 + 184 | 0) >> 2] = $237_1;
       HEAP32[($6_1 + 180 | 0) >> 2] = $235_1;
       HEAP32[($6_1 + 176 | 0) >> 2] = $233_1;
       $396($231_1 | 0, 2058 | 0, 21501 | 0, $6_1 + 176 | 0 | 0);
      }
      HEAP32[($6_1 + 312 | 0) >> 2] = 1;
     }
    }
    label$21 : {
     if (HEAP32[($6_1 + 312 | 0) >> 2] | 0) {
      break label$21
     }
     label$22 : {
      if (!(+HEAPF64[($6_1 + 352 | 0) >> 3] > +HEAPF64[(0 + 89464 | 0) >> 3] * 30.0 & 1 | 0)) {
       break label$22
      }
      HEAPF64[($6_1 + 336 | 0) >> 3] = +$58(HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
      label$23 : {
       if (!((HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       label$24 : {
        if (!((HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$24
        }
        $273_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $275_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
        $277_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $502_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
        HEAPF64[($6_1 + 160 | 0) >> 3] = +HEAPF64[($6_1 + 336 | 0) >> 3];
        HEAPF64[($6_1 + 152 | 0) >> 3] = $502_1;
        HEAP32[($6_1 + 148 | 0) >> 2] = $277_1;
        HEAP32[($6_1 + 144 | 0) >> 2] = $275_1;
        $396($273_1 | 0, 6404 | 0, 21635 | 0, $6_1 + 144 | 0 | 0);
        $382(5 | 0, HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0, 0 | 0);
       }
       HEAP32[(0 + 90228 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      }
      label$25 : {
       if (!((HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$25
       }
       $299_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $301_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
       $303_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $305_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $504_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
       HEAPF64[($6_1 + 136 | 0) >> 3] = +HEAPF64[($6_1 + 336 | 0) >> 3];
       HEAPF64[($6_1 + 128 | 0) >> 3] = $504_1;
       HEAP32[($6_1 + 120 | 0) >> 2] = $305_1;
       HEAP32[($6_1 + 116 | 0) >> 2] = $303_1;
       HEAP32[($6_1 + 112 | 0) >> 2] = $301_1;
       $396($299_1 | 0, 6425 | 0, 21824 | 0, $6_1 + 112 | 0 | 0);
       $382(7 | 0, HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0, 0 | 0);
      }
      label$26 : {
       label$27 : {
        if (!(+HEAPF64[($6_1 + 336 | 0) >> 3] < 2.0 * +HEAPF64[(0 + 89464 | 0) >> 3] * 30.0 & 1 | 0)) {
         break label$27
        }
        HEAP32[(0 + 91952 | 0) >> 2] = (HEAP32[(0 + 91952 | 0) >> 2] | 0) + 1 | 0;
        $327_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $329_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
        $331_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $333_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $512_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
        HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 336 | 0) >> 3];
        HEAPF64[($6_1 + 64 | 0) >> 3] = $512_1;
        HEAP32[($6_1 + 56 | 0) >> 2] = $333_1;
        HEAP32[($6_1 + 52 | 0) >> 2] = $331_1;
        HEAP32[($6_1 + 48 | 0) >> 2] = $329_1;
        $396($327_1 | 0, 7085 | 0, 22029 | 0, $6_1 + 48 | 0 | 0);
        break label$26;
       }
       HEAP32[(0 + 91912 | 0) >> 2] = (HEAP32[(0 + 91912 | 0) >> 2] | 0) + 1 | 0;
       $348_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $350_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
       $352_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $354_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $514_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
       HEAPF64[($6_1 + 104 | 0) >> 3] = +HEAPF64[($6_1 + 336 | 0) >> 3];
       HEAPF64[($6_1 + 96 | 0) >> 3] = $514_1;
       HEAP32[($6_1 + 88 | 0) >> 2] = $354_1;
       HEAP32[($6_1 + 84 | 0) >> 2] = $352_1;
       HEAP32[($6_1 + 80 | 0) >> 2] = $350_1;
       $396($348_1 | 0, 7086 | 0, 22173 | 0, $6_1 + 80 | 0 | 0);
      }
      HEAP32[($6_1 + 312 | 0) >> 2] = 1;
     }
    }
    label$28 : {
     if (!(HEAP32[($6_1 + 312 | 0) >> 2] | 0)) {
      break label$28
     }
     $365_1 = 0;
     HEAP32[($6_1 + 316 | 0) >> 2] = HEAP32[(0 + 90184 | 0) >> 2] | 0;
     HEAP32[(0 + 90184 | 0) >> 2] = $365_1;
     $146(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0);
     HEAP32[(0 + 90184 | 0) >> 2] = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
     HEAP32[(0 + 90228 | 0) >> 2] = $365_1;
     break label$4;
    }
    HEAP32[(0 + 90228 | 0) >> 2] = 0;
    HEAPF64[(0 + 90152 | 0) >> 3] = +HEAPF64[($6_1 + 352 | 0) >> 3];
    label$29 : {
     label$30 : {
      if (+HEAPF64[($6_1 + 352 | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0) {
       break label$30
      }
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
       break label$29
      }
     }
     $390_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $392_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
     $394_1 = HEAP32[((HEAP32[($6_1 + 376 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $519_1 = +HEAPF64[($6_1 + 352 | 0) >> 3];
     $396_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = $396_1;
     HEAPF64[($6_1 + 24 | 0) >> 3] = $519_1;
     HEAP32[($6_1 + 20 | 0) >> 2] = $394_1;
     HEAP32[($6_1 + 16 | 0) >> 2] = $392_1;
     $396($390_1 | 0, 3041 | 0, 22316 | 0, $6_1 + 16 | 0 | 0);
     $408_1 = 0;
     $383(22405 | 0, HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, $408_1 | 0, $408_1 | 0);
    }
   }
   label$31 : {
    if (!(((HEAP32[(0 + 87840 | 0) >> 2] | 0) + (HEAP32[(0 + 87844 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 88312 | 0) >> 2] | 0) | 0)) {
     break label$31
    }
    HEAP32[($6_1 + 360 | 0) >> 2] = $344(HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
    label$32 : {
     if (!((HEAP32[($6_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$32
     }
     HEAP32[(0 + 90712 | 0) >> 2] = (HEAP32[(0 + 90712 | 0) >> 2] | 0) + 1 | 0;
     $4(HEAP32[($6_1 + 360 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, $6_1 + 328 | 0 | 0);
    }
    label$33 : {
     label$34 : {
      label$35 : {
       if (!((HEAP32[($6_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$35
       }
       if (!(+HEAPF64[($6_1 + 328 | 0) >> 3] < +HEAPF64[($6_1 + 352 | 0) >> 3] & 1 | 0)) {
        break label$34
       }
      }
      $325((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 68 | 0 | 0, HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0);
      break label$33;
     }
     $328((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 68 | 0 | 0, HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0);
    }
   }
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$4
   }
   $466_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $468_1 = $267(HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) | 0;
   $470_1 = HEAP32[((HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[($6_1 + 352 | 0) >> 3];
   HEAP32[($6_1 + 4 | 0) >> 2] = $470_1;
   HEAP32[$6_1 >> 2] = $468_1;
   $396($466_1 | 0, 4064 | 0, 22413 | 0, $6_1 | 0);
  }
  global$0 = $6_1 + 384 | 0;
  return;
 }
 
 function $148($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $67_1 = 0, $218_1 = 0, $315_1 = 0, $8_1 = 0, $27_1 = 0, $44_1 = 0, $52_1 = 0, $84_1 = 0, $128_1 = 0, $144_1 = 0, $147_1 = 0, $187_1 = 0, $205_1 = 0, $225_1 = 0, $284_1 = 0, $302_1 = 0, $342_1 = 0, $17_1 = 0, $19_1 = 0, $118_1 = 0, $274_1 = 0, $276_1 = 0, $278_1 = 0, $404_1 = 0.0, $322_1 = 0, $352_1 = 0, $353_1 = 0, $355_1 = 0, $357_1 = 0, $359_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  $8_1 = 0;
  HEAP32[($6_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 148 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 144 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 128 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 124 | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $19_1 = $267(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 96 | 0) >> 2] = $19_1;
   $396($17_1 | 0, 1040 | 0, 20248 | 0, $6_1 + 96 | 0 | 0);
  }
  $27_1 = 0;
  HEAP32[(HEAP32[($6_1 + 144 | 0) >> 2] | 0) >> 2] = $27_1;
  HEAP32[(HEAP32[($6_1 + 148 | 0) >> 2] | 0) >> 2] = $27_1;
  HEAP32[(0 + 92296 | 0) >> 2] = (HEAP32[(0 + 92296 | 0) >> 2] | 0) + 1 | 0;
  $252(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0);
  $247(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 90020 | 0) >> 2] = 1;
  label$2 : {
   if (!(((HEAP32[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
    break label$2
   }
   $44_1 = HEAP32[($6_1 + 148 | 0) >> 2] | 0;
   HEAP32[$44_1 >> 2] = (HEAP32[$44_1 >> 2] | 0) + 1 | 0;
  }
  HEAP32[(0 + 90016 | 0) >> 2] = HEAP32[($6_1 + 152 | 0) >> 2] | 0;
  $52_1 = HEAP32[($6_1 + 152 | 0) >> 2] | 0;
  HEAP32[($52_1 + 80 | 0) >> 2] = (HEAP32[($52_1 + 80 | 0) >> 2] | 0) & -2049 | 0 | 2048 | 0;
  HEAP32[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
  label$3 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$3
   }
   $67_1 = 0;
   $383(20302 | 0, HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0, $67_1 | 0, $67_1 | 0, $67_1 | 0);
  }
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($6_1 + 132 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
  label$4 : while (1) {
   $84_1 = 0;
   label$5 : {
    if (!((HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $84_1 = (((HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$6 : {
    if (!($84_1 & 1 | 0)) {
     break label$6
    }
    label$7 : {
     if (!(((HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
      break label$7
     }
     if (HEAP32[(0 + 88264 | 0) >> 2] | 0) {
      break label$7
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6230 | 0, 20310 | 0, 0 | 0);
     $382(5 | 0, HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    label$8 : {
     if ($337(HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0) {
      break label$8
     }
     $118_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $396($118_1 | 0, 6295 | 0, 20406 | 0, $6_1 + 32 | 0 | 0);
     $382(5 | 0, HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    $128_1 = 0;
    HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
    HEAP32[($6_1 + 140 | 0) >> 2] = $128_1;
    label$9 : {
     if (!((HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($128_1 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($6_1 + 136 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$10 : {
      label$11 : while (1) {
       $144_1 = HEAP32[($6_1 + 136 | 0) >> 2] | 0;
       HEAP32[($6_1 + 136 | 0) >> 2] = $144_1 + 4 | 0;
       $147_1 = HEAP32[$144_1 >> 2] | 0;
       HEAP32[($6_1 + 140 | 0) >> 2] = $147_1;
       if (!(($147_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       label$12 : {
        if (!((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        continue label$11;
       }
       HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
       HEAP32[(0 + 91864 | 0) >> 2] = (HEAP32[(0 + 91864 | 0) >> 2] | 0) + 1 | 0;
       $4(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0, $6_1 + 112 | 0 | 0);
       label$13 : {
        label$14 : {
         if (!(+HEAPF64[($6_1 + 112 | 0) >> 3] > +HEAPF64[(0 + 87912 | 0) >> 3] & 1 | 0)) {
          break label$14
         }
         HEAP32[(0 + 92296 | 0) >> 2] = (HEAP32[(0 + 92296 | 0) >> 2] | 0) + 1 | 0;
         $252(HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0);
         $247(HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0);
         $187_1 = HEAP32[($6_1 + 140 | 0) >> 2] | 0;
         HEAP32[($187_1 + 80 | 0) >> 2] = (HEAP32[($187_1 + 80 | 0) >> 2] | 0) & -2049 | 0 | 2048 | 0;
         HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
         HEAP32[(0 + 90020 | 0) >> 2] = (HEAP32[(0 + 90020 | 0) >> 2] | 0) + 1 | 0;
         label$15 : {
          if (!(((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
           break label$15
          }
          $205_1 = HEAP32[($6_1 + 148 | 0) >> 2] | 0;
          HEAP32[$205_1 >> 2] = (HEAP32[$205_1 >> 2] | 0) + 1 | 0;
         }
         label$16 : {
          if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
           break label$16
          }
          $218_1 = 0;
          $383(20302 | 0, HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0, $218_1 | 0, $218_1 | 0, $218_1 | 0);
         }
         break label$13;
        }
        label$17 : {
         label$18 : {
          if (!(+HEAPF64[($6_1 + 112 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
           break label$18
          }
          $225_1 = HEAP32[($6_1 + 140 | 0) >> 2] | 0;
          HEAP32[($225_1 + 80 | 0) >> 2] = (HEAP32[($225_1 + 80 | 0) >> 2] | 0) & -16777217 | 0 | 16777216 | 0;
          HEAP32[(0 + 90832 | 0) >> 2] = (HEAP32[(0 + 90832 | 0) >> 2] | 0) + 1 | 0;
          $151(20488 | 0);
          HEAP32[($6_1 + 124 | 0) >> 2] = (HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 1 | 0;
          label$19 : {
           if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
            break label$19
           }
           label$20 : {
            label$21 : {
             if (!(+HEAPF64[($6_1 + 112 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
              break label$21
             }
             label$22 : {
              if (!(+HEAPF64[(0 + 90152 | 0) >> 3] < +HEAPF64[($6_1 + 112 | 0) >> 3] & 1 | 0)) {
               break label$22
              }
              HEAPF64[(0 + 90152 | 0) >> 3] = +HEAPF64[($6_1 + 112 | 0) >> 3];
             }
             label$23 : {
              if (!(+HEAPF64[(0 + 90160 | 0) >> 3] < +HEAPF64[($6_1 + 112 | 0) >> 3] & 1 | 0)) {
               break label$23
              }
              HEAPF64[(0 + 90160 | 0) >> 3] = +HEAPF64[($6_1 + 112 | 0) >> 3];
             }
             label$24 : {
              if (!(+HEAPF64[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($6_1 + 112 | 0) >> 3] & 1 | 0)) {
               break label$24
              }
              HEAPF64[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($6_1 + 112 | 0) >> 3];
             }
             break label$20;
            }
            label$25 : {
             if (!(+HEAPF64[(0 + 90168 | 0) >> 3] > +HEAPF64[($6_1 + 112 | 0) >> 3] & 1 | 0)) {
              break label$25
             }
             HEAPF64[(0 + 90168 | 0) >> 3] = +HEAPF64[($6_1 + 112 | 0) >> 3];
            }
           }
          }
          label$26 : {
           if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
            break label$26
           }
           $274_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
           $276_1 = $267(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) | 0;
           $278_1 = HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           $404_1 = +HEAPF64[($6_1 + 112 | 0) >> 3];
           HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[(0 + 87912 | 0) >> 3];
           HEAPF64[($6_1 + 8 | 0) >> 3] = $404_1;
           HEAP32[($6_1 + 4 | 0) >> 2] = $278_1;
           HEAP32[$6_1 >> 2] = $276_1;
           $396($274_1 | 0, 2057 | 0, 20505 | 0, $6_1 | 0);
          }
          break label$17;
         }
         $284_1 = HEAP32[($6_1 + 140 | 0) >> 2] | 0;
         HEAP32[($284_1 + 80 | 0) >> 2] = (HEAP32[($284_1 + 80 | 0) >> 2] | 0) & -16777217 | 0;
        }
        HEAP32[(0 + 92248 | 0) >> 2] = (HEAP32[(0 + 92248 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($6_1 + 128 | 0) >> 2] = (HEAP32[($6_1 + 128 | 0) >> 2] | 0) + 1 | 0;
        label$27 : {
         if (!(((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
          break label$27
         }
         $302_1 = HEAP32[($6_1 + 144 | 0) >> 2] | 0;
         HEAP32[$302_1 >> 2] = (HEAP32[$302_1 >> 2] | 0) + 1 | 0;
        }
        label$28 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
          break label$28
         }
         $315_1 = 0;
         $383(20594 | 0, HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0, $315_1 | 0, $315_1 | 0, $315_1 | 0);
        }
       }
       continue label$11;
      };
     }
    }
    HEAP32[($6_1 + 132 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 132 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$4;
   }
   break label$4;
  };
  label$29 : {
   if (HEAP32[($6_1 + 128 | 0) >> 2] | 0) {
    break label$29
   }
   $151(20602 | 0);
   $322_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = $267(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) | 0;
   $396($322_1 | 0, 6168 | 0, 20616 | 0, $6_1 + 80 | 0 | 0);
   label$30 : {
    if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (100 | 0) & 1 | 0)) {
     break label$30
    }
    $389(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0);
   }
   $342_1 = 0;
   $382(7 | 0, $342_1 | 0, $342_1 | 0);
  }
  label$31 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$31
   }
   $352_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $353_1 = HEAP32[($6_1 + 128 | 0) >> 2] | 0;
   $355_1 = HEAP32[(HEAP32[($6_1 + 144 | 0) >> 2] | 0) >> 2] | 0;
   $357_1 = HEAP32[(0 + 90020 | 0) >> 2] | 0;
   $359_1 = HEAP32[(HEAP32[($6_1 + 148 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($6_1 + 64 | 0) >> 2] = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
   HEAP32[($6_1 + 60 | 0) >> 2] = $359_1;
   HEAP32[($6_1 + 56 | 0) >> 2] = $357_1;
   HEAP32[($6_1 + 52 | 0) >> 2] = $355_1;
   HEAP32[($6_1 + 48 | 0) >> 2] = $353_1;
   $396($352_1 | 0, 1041 | 0, 20705 | 0, $6_1 + 48 | 0 | 0);
  }
  label$32 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$32
   }
   if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (100 | 0) & 1 | 0)) {
    break label$32
   }
   $281();
  }
  global$0 = $6_1 + 160 | 0;
  return;
 }
 
 function $149($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $49_1 = 0, $75_1 = 0, $76_1 = 0, $78_1 = 0, $80_1 = 0, $86_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[(0 + 90088 | 0) >> 2] = HEAP32[(0 + 90076 | 0) >> 2] | 0;
  $15_1 = 1;
  label$1 : {
   if (HEAP32[(0 + 87904 | 0) >> 2] | 0) {
    break label$1
   }
   $15_1 = (HEAP32[(0 + 87932 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  HEAP32[(0 + 90180 | 0) >> 2] = $15_1 & 1 | 0;
  HEAP32[($6_1 + 40 | 0) >> 2] = $307(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[(0 + 90076 | 0) >> 2] | 0) - (HEAP32[(0 + 90088 | 0) >> 2] | 0) | 0;
  HEAPF64[($6_1 + 32 | 0) >> 3] = +(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) - +((HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0 | 0) * +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) / +(HEAP32[(0 + 90064 | 0) >> 2] | 0 | 0);
  label$2 : {
   label$3 : {
    label$4 : {
     if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
      break label$4
     }
     label$5 : {
      if ($152(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) | 0) {
       break label$5
      }
      $49_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
      HEAP32[($49_1 + 80 | 0) >> 2] = (HEAP32[($49_1 + 80 | 0) >> 2] | 0) & -262145 | 0 | 262144 | 0;
      HEAP32[($6_1 + 60 | 0) >> 2] = 0;
      break label$2;
     }
     break label$3;
    }
    label$6 : {
     label$7 : {
      if (!(HEAP32[(0 + 87904 | 0) >> 2] | 0)) {
       break label$7
      }
      label$8 : {
       if (!($153(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[($6_1 + 60 | 0) >> 2] = 0;
       break label$2;
      }
      break label$6;
     }
     +$265();
     $260();
     $269();
    }
   }
   HEAPF64[(0 + 91696 | 0) >> 3] = +HEAPF64[(0 + 91696 | 0) >> 3] + +HEAPF64[($6_1 + 32 | 0) >> 3];
   HEAPF64[(0 + 91704 | 0) >> 3] = +HEAPF64[(0 + 91704 | 0) >> 3] + +HEAPF64[($6_1 + 32 | 0) >> 3] * +HEAPF64[($6_1 + 32 | 0) >> 3];
   label$9 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$9
    }
    $75_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $76_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    $78_1 = $267(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
    $80_1 = HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3];
    HEAP32[($6_1 + 8 | 0) >> 2] = $80_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = $78_1;
    HEAP32[$6_1 >> 2] = $76_1;
    $396($75_1 | 0, 2067 | 0, 18984 | 0, $6_1 | 0);
   }
   HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
  }
  $86_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  global$0 = $6_1 + 64 | 0;
  return $86_1 | 0;
 }
 
 function $150($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(0 + 90028 | 0) >> 2] = $6_1;
  HEAP32[(0 + 90036 | 0) >> 2] = $6_1;
  HEAP32[(0 + 90044 | 0) >> 2] = $6_1;
  $383(19234 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $6_1 | 0, $6_1 | 0);
  $382(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $6_1 | 0, $6_1 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!(HEAP32[(0 + 90096 | 0) >> 2] | 0)) {
     break label$2
    }
    if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
     break label$2
    }
    label$3 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$3
     }
     $17_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     $396($17_1 | 0, 26 | 0, 20783 | 0, $3_1 | 0);
    }
    fimport$4(87704 + 2072 | 0 | 0, 3 | 0);
    abort();
   }
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $27_1 = 0, $41_1 = 0, $50_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $260();
  label$1 : {
   label$2 : {
    if ($295(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$3
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
     label$4 : while (1) {
      $27_1 = 0;
      label$5 : {
       if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $27_1 = (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$6 : {
       if (!($27_1 & 1 | 0)) {
        break label$6
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       $251(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
       HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       continue label$4;
      }
      break label$4;
     };
     $41_1 = 0;
     $288(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
     $306($41_1 | 0, 1 | 0);
     HEAP32[(0 + 91800 | 0) >> 2] = (HEAP32[(0 + 91800 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $41_1;
     break label$1;
    }
   }
   $249();
   +$265();
   $269();
   HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  }
  $50_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $50_1 | 0;
 }
 
 function $153($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $41_1 = 0, $69_1 = 0, $84_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] = 0;
  HEAPF64[($5_1 + 8 | 0) >> 3] = +$265();
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] > 4.0 * +HEAPF64[(0 + 89544 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
      break label$3
     }
     $281();
    }
    $236();
    label$4 : {
     if (!($234(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 8 | 0) >> 3]), $5_1 | 0) | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
     label$5 : while (1) {
      $41_1 = 0;
      label$6 : {
       if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       $41_1 = (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$7 : {
       if (!($41_1 & 1 | 0)) {
        break label$7
       }
       HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       $251(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
       continue label$5;
      }
      break label$5;
     };
     HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $267(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     $288(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0);
     $306(0 | 0, 1 | 0);
     label$8 : {
      label$9 : {
       if (!(HEAP32[$5_1 >> 2] | 0)) {
        break label$9
       }
       HEAP32[(0 + 91992 | 0) >> 2] = (HEAP32[(0 + 91992 | 0) >> 2] | 0) + 1 | 0;
       $69_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
       HEAP32[($69_1 + 80 | 0) >> 2] = (HEAP32[($69_1 + 80 | 0) >> 2] | 0) & -262145 | 0 | 262144 | 0;
       $147(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[(0 + 90184 | 0) >> 2] | 0 | 0);
       break label$8;
      }
      $197(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
     }
     $231();
     HEAP32[($5_1 + 44 | 0) >> 2] = 1;
     break label$1;
    }
    $231();
   }
   $249();
   $260();
   $269();
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  $84_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $84_1 | 0;
 }
 
 function $154($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $208_1 = 0, $28_1 = 0, $32_1 = 0, $41_1 = 0, $54_1 = 0, $57_1 = 0, $66_1 = 0, $135_1 = 0, $151_1 = 0, $152_1 = 0, $406_1 = 0.0, $198_1 = 0, $210_1 = 0, $261_1 = 0, $297_1 = 0, $331_1 = 0, $367_1 = 0, $31_1 = 0, $400_1 = 0.0, $209_1 = 0, $217_1 = 0, $257_1 = 0, $260_1 = 0, $294_1 = 0, $364_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = -1797693134862315708145274.0e284;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1042 | 0, 21056 | 0, 0 | 0);
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = $347(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90068 | 0) >> 2] = 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = (HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
  label$2 : {
   label$3 : while (1) {
    $28_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    HEAP32[($5_1 + 36 | 0) >> 2] = $28_1 + -1 | 0;
    if (!$28_1) {
     break label$2
    }
    $31_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
    $32_1 = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
    HEAP32[($5_1 + 64 | 0) >> 2] = $32_1 + 4 | 0;
    HEAP32[$32_1 >> 2] = $31_1;
    HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
    continue label$3;
   };
  }
  $41_1 = 0;
  $331(HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 76 | 0) >> 2] = $41_1;
  label$4 : {
   if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) != ($41_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($5_1 + 72 | 0) >> 2] = (HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     $54_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = $54_1 + 4 | 0;
     $57_1 = HEAP32[$54_1 >> 2] | 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = $57_1;
     if (!(($57_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $66_1 = $267(HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = $66_1;
     label$7 : {
      if (!(($66_1 | 0) >= (0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[(((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
     }
     continue label$6;
    };
   }
  }
  HEAP32[($5_1 + 32 | 0) >> 2] = $267(HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) | 0;
  label$8 : {
   if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$8
   }
   if (!(((HEAP32[(0 + 88216 | 0) >> 2] | 0) - 1 | 0 | 0) != (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$8
   }
   if (!(((0 - (HEAP32[(0 + 88220 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) != (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[(((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
  }
  label$9 : {
   if (!((HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
    break label$9
   }
   if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
    break label$9
   }
   $135_1 = $267(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = $135_1;
   label$10 : {
    if (!(($135_1 | 0) >= (0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[(((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
   }
  }
  label$11 : {
   if (HEAP32[(0 + 87748 | 0) >> 2] | 0) {
    break label$11
   }
   $151_1 = 2;
   $152_1 = 1;
   $400_1 = +(((HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0 ? $151_1 : $152_1) | 0);
   label$12 : {
    label$13 : {
     if (!(+((HEAP32[(0 + 87884 | 0) >> 2] | 0 ? $151_1 : $152_1) | 0) * +HEAPF64[(0 + 87728 | 0) >> 3] < +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
      break label$13
     }
     $406_1 = +HEAPF64[(0 + 90152 | 0) >> 3];
     break label$12;
    }
    $406_1 = +((HEAP32[(0 + 87884 | 0) >> 2] | 0 ? 2 : 1) | 0) * +HEAPF64[(0 + 87728 | 0) >> 3];
   }
   HEAPF64[$5_1 >> 3] = $400_1 * $406_1;
   HEAP32[(0 + 92272 | 0) >> 2] = ((HEAP32[(0 + 88324 | 0) >> 2] | 0) - (HEAP32[(0 + 88316 | 0) >> 2] | 0) | 0) - 1 | 0;
   HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[(0 + 90060 | 0) >> 2] | 0;
   HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$14 : while (1) {
    $198_1 = 0;
    label$15 : {
     if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$15
     }
     $198_1 = (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$16 : {
     if (!($198_1 & 1 | 0)) {
      break label$16
     }
     $208_1 = 0;
     $209_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     $210_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     HEAP32[($5_1 + 40 | 0) >> 2] = $210_1 + -1 | 0;
     HEAP32[($5_1 + 56 | 0) >> 2] = (($209_1 | 0) / ($210_1 | 0) | 0) + 100 | 0;
     $217_1 = $323(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 64 | 0) >> 2] = $217_1;
     HEAP32[($5_1 + 60 | 0) >> 2] = $208_1;
     HEAP32[($5_1 + 44 | 0) >> 2] = $208_1;
     HEAP32[($5_1 + 68 | 0) >> 2] = $208_1;
     label$17 : {
      if (!((HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) != ($208_1 | 0) & 1 | 0)) {
       break label$17
      }
      HEAP32[($5_1 + 52 | 0) >> 2] = 0;
      HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP32[($5_1 + 48 | 0) >> 2] = $337(HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) | 0;
      label$18 : {
       label$19 : while (1) {
        if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$18
        }
        label$20 : {
         if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$20
         }
         HEAP32[(0 + 91936 | 0) >> 2] = (HEAP32[(0 + 91936 | 0) >> 2] | 0) + 1 | 0;
         $4(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, $5_1 + 8 | 0 | 0);
         label$21 : {
          label$22 : {
           if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] < +HEAPF64[$5_1 >> 3] & 1 | 0)) {
            break label$22
           }
           $257_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
           $260_1 = (HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0;
           $261_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
           HEAP32[($5_1 + 44 | 0) >> 2] = $261_1 + 1 | 0;
           HEAP32[($260_1 + ($261_1 << 2 | 0) | 0) >> 2] = $257_1;
           break label$21;
          }
          HEAP32[(0 + 90068 | 0) >> 2] = (HEAP32[(0 + 90068 | 0) >> 2] | 0) + 1 | 0;
          label$23 : {
           label$24 : {
            if ((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
             break label$24
            }
            HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
            HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3];
            break label$23;
           }
           label$25 : {
            label$26 : {
             if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] > +HEAPF64[($5_1 + 16 | 0) >> 3] & 1 | 0)) {
              break label$26
             }
             $325((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
             HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
             HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3];
             break label$25;
            }
            $325((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0);
           }
          }
         }
        }
        $294_1 = (HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0;
        $297_1 = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($5_1 + 52 | 0) >> 2] = $297_1;
        HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[($294_1 + ($297_1 << 2 | 0) | 0) >> 2] | 0;
        continue label$19;
       };
      }
     }
     label$27 : {
      label$28 : {
       if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$28
       }
       $325((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
       HEAPF64[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3];
       break label$27;
      }
      $324((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 64 | 0 | 0);
     }
     $331(HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$14;
    }
    break label$14;
   };
  }
  label$29 : {
   label$30 : {
    if (HEAP32[(0 + 87748 | 0) >> 2] | 0) {
     break label$30
    }
    if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
     break label$30
    }
    if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
     break label$30
    }
    if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
     break label$30
    }
    if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
     break label$29
    }
   }
   $331_1 = 0;
   HEAP32[(0 + 90184 | 0) >> 2] = 1;
   HEAP32[($5_1 + 68 | 0) >> 2] = $331_1;
   label$31 : {
    if (!((HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) != ($331_1 | 0) & 1 | 0)) {
     break label$31
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = 0;
    HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 48 | 0) >> 2] = $337(HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) | 0;
    label$32 : {
     label$33 : while (1) {
      if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$32
      }
      label$34 : {
       if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$34
       }
       $146(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
      }
      $364_1 = (HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0;
      $367_1 = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($5_1 + 52 | 0) >> 2] = $367_1;
      HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[($364_1 + ($367_1 << 2 | 0) | 0) >> 2] | 0;
      continue label$33;
     };
    }
   }
   HEAP32[(0 + 90184 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 91936 | 0) >> 2] = (HEAP32[(0 + 91936 | 0) >> 2] | 0) + (HEAP32[(0 + 91928 | 0) >> 2] | 0) | 0;
  HEAP32[(0 + 91928 | 0) >> 2] = 0;
  $348($5_1 + 80 | 0 | 0);
  label$35 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$35
   }
   $389(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0);
  }
  global$0 = $5_1 + 96 | 0;
  return;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $40_1 = 0, $55_1 = 0, $71_1 = 0, $93_1 = 0, $114_1 = 0, $134_1 = 0, $265_1 = 0, $266_1 = 0, $273_1 = 0, $274_1 = 0, $283_1 = 0, $286_1 = 0, $293_1 = 0, $308_1 = 0, $327_1 = 0, $339_1 = 0, $341_1 = 0, $351_1 = 0, $353_1 = 0, $363_1 = 0, $364_1 = 0, $371_1 = 0, $372_1 = 0, $381_1 = 0, $384_1 = 0, $391_1 = 0, $406_1 = 0, $425_1 = 0, $437_1 = 0, $439_1 = 0, $449_1 = 0, $451_1 = 0, $459_1 = 0, $460_1 = 0, $467_1 = 0, $473_1 = 0, $489_1 = 0, $490_1 = 0, $496_1 = 0, $507_1 = 0, $517_1 = 0, $519_1 = 0, $525 = 0, $526 = 0, $533 = 0, $549 = 0, $550 = 0, $556 = 0, $567 = 0, $577 = 0, $579 = 0, $586 = 0, $592 = 0, $607 = 0, $618 = 0, $625 = 0, $634 = 0, $644 = 0, $661 = 0, $680 = 0, $690 = 0, $702 = 0, $715 = 0, $726 = 0, $741 = 0, $743 = 0, $749 = 0, $762 = 0, $765 = 0, $778 = 0, $781 = 0, $800 = 0, $819 = 0, $832 = 0, $846 = 0;
  $3_1 = global$0 - 880 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 876 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 816 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 812 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 808 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 796 | 0) >> 2] = HEAP32[(0 + 90952 | 0) >> 2] | 0;
  HEAP32[($3_1 + 792 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 836 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($3_1 + 820 | 0) >> 2] = (HEAP32[(0 + 90064 | 0) >> 2] | 0) - ($337(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($3_1 + 832 | 0) >> 2] = $267(HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ($280(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) | 0) {
    break label$1
   }
   if (HEAP32[(0 + 90320 | 0) >> 2] | 0) {
    break label$1
   }
   $396(HEAP32[($3_1 + 876 | 0) >> 2] | 0 | 0, 6372 | 0, 23442 | 0, 0 | 0);
   label$2 : {
    if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (4e3 | 0) & 1 | 0)) {
     break label$2
    }
    $281();
   }
   $40_1 = 0;
   $382(5 | 0, $40_1 | 0, $40_1 | 0);
  }
  label$3 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$3
   }
   if (!(HEAP32[(0 + 90320 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 804 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$4 : while (1) {
    $55_1 = 0;
    label$5 : {
     if (!((HEAP32[($3_1 + 804 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $55_1 = (HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$6 : {
     if (!($55_1 & 1 | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$8
       }
       $71_1 = HEAP32[($3_1 + 804 | 0) >> 2] | 0;
       HEAP32[($71_1 + 80 | 0) >> 2] = (HEAP32[($71_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
       break label$7;
      }
      label$9 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
        break label$9
       }
       label$10 : {
        label$11 : {
         if (!((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$11
         }
         if ($42(HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
          break label$11
         }
         $93_1 = HEAP32[($3_1 + 804 | 0) >> 2] | 0;
         HEAP32[($93_1 + 80 | 0) >> 2] = (HEAP32[($93_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
         break label$10;
        }
        HEAP32[($3_1 + 808 | 0) >> 2] = (HEAP32[($3_1 + 808 | 0) >> 2] | 0) + 1 | 0;
       }
      }
     }
     HEAP32[($3_1 + 804 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$4;
    }
    break label$4;
   };
   HEAP32[(0 + 90072 | 0) >> 2] = HEAP32[($3_1 + 808 | 0) >> 2] | 0;
  }
  HEAP32[($3_1 + 804 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$12 : while (1) {
   $114_1 = 0;
   label$13 : {
    if (!((HEAP32[($3_1 + 804 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$13
    }
    $114_1 = (HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$14 : {
    if (!($114_1 & 1 | 0)) {
     break label$14
    }
    label$15 : {
     if (!((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$15
     }
     $134_1 = $337(HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 816 | 0) >> 2] = (HEAP32[($3_1 + 816 | 0) >> 2] | 0) + $134_1 | 0;
    }
    label$16 : {
     if (!(((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
      break label$16
     }
     label$17 : {
      label$18 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
        break label$18
       }
       label$19 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0)) {
         break label$19
        }
        if (!(((HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
         break label$19
        }
        HEAP32[($3_1 + 792 | 0) >> 2] = (HEAP32[($3_1 + 792 | 0) >> 2] | 0) + 1 | 0;
       }
       break label$17;
      }
      label$20 : {
       if (!(($337(HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       HEAP32[($3_1 + 812 | 0) >> 2] = (HEAP32[($3_1 + 812 | 0) >> 2] | 0) + 1 | 0;
      }
     }
    }
    HEAP32[($3_1 + 804 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 804 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$12;
   }
   break label$12;
  };
  label$21 : {
   if (!((HEAP32[($3_1 + 832 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$21
   }
   if (!(((HEAP32[(0 + 88216 | 0) >> 2] | 0) - 1 | 0 | 0) != (HEAP32[($3_1 + 832 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$21
   }
   if (!(((0 - (HEAP32[(0 + 88220 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) != (HEAP32[($3_1 + 832 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$21
   }
   HEAP32[($3_1 + 836 | 0) >> 2] = (HEAP32[($3_1 + 836 | 0) >> 2] | 0) + -1 | 0;
  }
  label$22 : {
   label$23 : {
    if (HEAP32[(0 + 88212 | 0) >> 2] | 0) {
     break label$23
    }
    if (HEAP32[(0 + 88216 | 0) >> 2] | 0) {
     break label$23
    }
    if (!(HEAP32[(0 + 88220 | 0) >> 2] | 0)) {
     break label$22
    }
   }
   $396(HEAP32[($3_1 + 876 | 0) >> 2] | 0 | 0, 9288 | 0, 23505 | 0, 0 | 0);
  }
  HEAP32[($3_1 + 788 | 0) >> 2] = 0;
  label$24 : {
   label$25 : {
    if (!(HEAP32[(0 + 90320 | 0) >> 2] | 0)) {
     break label$25
    }
    break label$24;
   }
   label$26 : {
    label$27 : {
     if (!(HEAP32[(0 + 88268 | 0) >> 2] | 0)) {
      break label$27
     }
     label$28 : {
      label$29 : {
       if (HEAP32[(0 + 87816 | 0) >> 2] | 0) {
        break label$29
       }
       if (HEAP32[(0 + 87804 | 0) >> 2] | 0) {
        break label$29
       }
       if (!(HEAP32[(0 + 88208 | 0) >> 2] | 0)) {
        break label$28
       }
      }
      HEAP32[($3_1 + 788 | 0) >> 2] = 1;
     }
     break label$26;
    }
    label$30 : {
     label$31 : {
      if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
       break label$31
      }
      label$32 : {
       label$33 : {
        if (HEAP32[(0 + 87816 | 0) >> 2] | 0) {
         break label$33
        }
        if (HEAP32[(0 + 87804 | 0) >> 2] | 0) {
         break label$33
        }
        if (!(HEAP32[(0 + 87812 | 0) >> 2] | 0)) {
         break label$32
        }
       }
       HEAP32[($3_1 + 788 | 0) >> 2] = 1;
      }
      break label$30;
     }
     label$34 : {
      label$35 : {
       if ((HEAP32[(0 + 90072 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0) {
        break label$35
       }
       if (!(HEAP32[(0 + 87812 | 0) >> 2] | 0)) {
        break label$34
       }
      }
      HEAP32[($3_1 + 788 | 0) >> 2] = 1;
     }
    }
   }
  }
  HEAP32[($3_1 + 828 | 0) >> 2] = ((HEAP32[(0 + 92256 | 0) >> 2] | 0) - (HEAP32[(0 + 90888 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90880 | 0) >> 2] | 0) | 0;
  label$36 : {
   label$37 : {
    if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
     break label$37
    }
    label$38 : {
     label$39 : {
      if (!(HEAP32[(0 + 88268 | 0) >> 2] | 0)) {
       break label$39
      }
      $265_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      $266_1 = HEAP32[($3_1 + 836 | 0) >> 2] | 0;
      HEAP32[($3_1 + 436 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      HEAP32[($3_1 + 432 | 0) >> 2] = $266_1;
      $396($265_1 | 0, 9289 | 0, 23583 | 0, $3_1 + 432 | 0 | 0);
      break label$38;
     }
     $273_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     $274_1 = HEAP32[($3_1 + 836 | 0) >> 2] | 0;
     HEAP32[($3_1 + 452 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
     HEAP32[($3_1 + 448 | 0) >> 2] = $274_1;
     $396($273_1 | 0, 9290 | 0, 23658 | 0, $3_1 + 448 | 0 | 0);
    }
    $283_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
    $286_1 = HEAP32[(0 + 87740 | 0) >> 2] | 0 ? 23753 : 23770;
    HEAP32[($3_1 + 420 | 0) >> 2] = HEAP32[($3_1 + 820 | 0) >> 2] | 0;
    HEAP32[($3_1 + 416 | 0) >> 2] = $286_1;
    $396($283_1 | 0, 9291 | 0, 23718 | 0, $3_1 + 416 | 0 | 0);
    label$40 : {
     if (!(HEAP32[($3_1 + 796 | 0) >> 2] | 0)) {
      break label$40
     }
     $293_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     HEAP32[($3_1 + 400 | 0) >> 2] = HEAP32[($3_1 + 796 | 0) >> 2] | 0;
     $396($293_1 | 0, 9292 | 0, 23771 | 0, $3_1 + 400 | 0 | 0);
    }
    label$41 : {
     label$42 : {
      if (!(((HEAP32[($3_1 + 816 | 0) >> 2] | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$42
      }
      $308_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAP32[($3_1 + 368 | 0) >> 2] = (HEAP32[($3_1 + 816 | 0) >> 2] | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0;
      $396($308_1 | 0, 9293 | 0, 23824 | 0, $3_1 + 368 | 0 | 0);
      break label$41;
     }
     label$43 : {
      if (!((((HEAP32[($3_1 + 836 | 0) >> 2] | 0) - (HEAP32[($3_1 + 820 | 0) >> 2] | 0) | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$43
      }
      $327_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAP32[($3_1 + 384 | 0) >> 2] = ((HEAP32[($3_1 + 836 | 0) >> 2] | 0) - (HEAP32[($3_1 + 820 | 0) >> 2] | 0) | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0;
      $396($327_1 | 0, 9294 | 0, 23864 | 0, $3_1 + 384 | 0 | 0);
     }
    }
    $339_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
    $341_1 = HEAP32[($3_1 + 788 | 0) >> 2] | 0 ? 23946 : 23770;
    HEAP32[($3_1 + 356 | 0) >> 2] = HEAP32[(0 + 90072 | 0) >> 2] | 0;
    HEAP32[($3_1 + 352 | 0) >> 2] = $341_1;
    $396($339_1 | 0, 9295 | 0, 23910 | 0, $3_1 + 352 | 0 | 0);
    label$44 : {
     if (!(HEAP32[($3_1 + 812 | 0) >> 2] | 0)) {
      break label$44
     }
     $351_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     $353_1 = HEAP32[($3_1 + 788 | 0) >> 2] | 0 ? 23946 : 23770;
     HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[($3_1 + 812 | 0) >> 2] | 0;
     HEAP32[($3_1 + 336 | 0) >> 2] = $353_1;
     $396($351_1 | 0, 9296 | 0, 23954 | 0, $3_1 + 336 | 0 | 0);
    }
    break label$36;
   }
   label$45 : {
    label$46 : {
     if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
      break label$46
     }
     label$47 : {
      label$48 : {
       if (!(HEAP32[(0 + 88268 | 0) >> 2] | 0)) {
        break label$48
       }
       $363_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
       $364_1 = HEAP32[($3_1 + 836 | 0) >> 2] | 0;
       HEAP32[($3_1 + 564 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
       HEAP32[($3_1 + 560 | 0) >> 2] = $364_1;
       $396($363_1 | 0, 9297 | 0, 24005 | 0, $3_1 + 560 | 0 | 0);
       break label$47;
      }
      $371_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      $372_1 = HEAP32[($3_1 + 836 | 0) >> 2] | 0;
      HEAP32[($3_1 + 580 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      HEAP32[($3_1 + 576 | 0) >> 2] = $372_1;
      $396($371_1 | 0, 9298 | 0, 24086 | 0, $3_1 + 576 | 0 | 0);
     }
     $381_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     $384_1 = HEAP32[(0 + 87740 | 0) >> 2] | 0 ? 23753 : 23770;
     HEAP32[($3_1 + 548 | 0) >> 2] = HEAP32[($3_1 + 820 | 0) >> 2] | 0;
     HEAP32[($3_1 + 544 | 0) >> 2] = $384_1;
     $396($381_1 | 0, 9299 | 0, 24153 | 0, $3_1 + 544 | 0 | 0);
     label$49 : {
      if (!(HEAP32[($3_1 + 796 | 0) >> 2] | 0)) {
       break label$49
      }
      $391_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAP32[($3_1 + 528 | 0) >> 2] = HEAP32[($3_1 + 796 | 0) >> 2] | 0;
      $396($391_1 | 0, 9300 | 0, 23771 | 0, $3_1 + 528 | 0 | 0);
     }
     label$50 : {
      label$51 : {
       if (!(((HEAP32[($3_1 + 816 | 0) >> 2] | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$51
       }
       $406_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
       HEAP32[($3_1 + 496 | 0) >> 2] = (HEAP32[($3_1 + 816 | 0) >> 2] | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0;
       $396($406_1 | 0, 9301 | 0, 23824 | 0, $3_1 + 496 | 0 | 0);
       break label$50;
      }
      label$52 : {
       if (!((((HEAP32[($3_1 + 836 | 0) >> 2] | 0) - (HEAP32[($3_1 + 820 | 0) >> 2] | 0) | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$52
       }
       $425_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
       HEAP32[($3_1 + 512 | 0) >> 2] = ((HEAP32[($3_1 + 836 | 0) >> 2] | 0) - (HEAP32[($3_1 + 820 | 0) >> 2] | 0) | 0) - (HEAP32[($3_1 + 796 | 0) >> 2] | 0) | 0;
       $396($425_1 | 0, 9302 | 0, 23864 | 0, $3_1 + 512 | 0 | 0);
      }
     }
     $437_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     $439_1 = HEAP32[($3_1 + 788 | 0) >> 2] | 0 ? 23946 : 23770;
     HEAP32[($3_1 + 484 | 0) >> 2] = HEAP32[(0 + 90072 | 0) >> 2] | 0;
     HEAP32[($3_1 + 480 | 0) >> 2] = $439_1;
     $396($437_1 | 0, 9303 | 0, 24184 | 0, $3_1 + 480 | 0 | 0);
     label$53 : {
      if (!(HEAP32[($3_1 + 812 | 0) >> 2] | 0)) {
       break label$53
      }
      $449_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      $451_1 = HEAP32[($3_1 + 788 | 0) >> 2] | 0 ? 23946 : 23770;
      HEAP32[($3_1 + 468 | 0) >> 2] = HEAP32[($3_1 + 812 | 0) >> 2] | 0;
      HEAP32[($3_1 + 464 | 0) >> 2] = $451_1;
      $396($449_1 | 0, 9304 | 0, 24220 | 0, $3_1 + 464 | 0 | 0);
     }
     break label$45;
    }
    label$54 : {
     label$55 : {
      if (!(HEAP32[(0 + 87824 | 0) >> 2] | 0)) {
       break label$55
      }
      $459_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      $460_1 = HEAP32[($3_1 + 836 | 0) >> 2] | 0;
      HEAP32[($3_1 + 660 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
      HEAP32[($3_1 + 656 | 0) >> 2] = $460_1;
      $396($459_1 | 0, 9305 | 0, 24271 | 0, $3_1 + 656 | 0 | 0);
      $467_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAP32[($3_1 + 672 | 0) >> 2] = HEAP32[($3_1 + 836 | 0) >> 2] | 0;
      $396($467_1 | 0, 9306 | 0, 24338 | 0, $3_1 + 672 | 0 | 0);
      $473_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAP32[($3_1 + 688 | 0) >> 2] = HEAP32[($3_1 + 820 | 0) >> 2] | 0;
      $396($473_1 | 0, 9307 | 0, 24366 | 0, $3_1 + 688 | 0 | 0);
      label$56 : {
       if (!(HEAP32[($3_1 + 816 | 0) >> 2] | 0)) {
        break label$56
       }
       label$57 : {
        label$58 : {
         if (!(HEAP32[(0 + 87844 | 0) >> 2] | 0)) {
          break label$58
         }
         if (!(HEAP32[(0 + 87840 | 0) >> 2] | 0)) {
          break label$58
         }
         HEAP32[($3_1 + 800 | 0) >> 2] = 24408;
         break label$57;
        }
        label$59 : {
         label$60 : {
          if (!(HEAP32[(0 + 87844 | 0) >> 2] | 0)) {
           break label$60
          }
          HEAP32[($3_1 + 800 | 0) >> 2] = 24430;
          break label$59;
         }
         HEAP32[($3_1 + 800 | 0) >> 2] = 24440;
        }
       }
       $489_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
       $490_1 = HEAP32[($3_1 + 800 | 0) >> 2] | 0;
       HEAP32[($3_1 + 644 | 0) >> 2] = HEAP32[($3_1 + 816 | 0) >> 2] | 0;
       HEAP32[($3_1 + 640 | 0) >> 2] = $490_1;
       $396($489_1 | 0, 9308 | 0, 24448 | 0, $3_1 + 640 | 0 | 0);
      }
      $496_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAP32[($3_1 + 624 | 0) >> 2] = (HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0;
      $396($496_1 | 0, 9309 | 0, 24479 | 0, $3_1 + 624 | 0 | 0);
      label$61 : {
       if (!(HEAP32[($3_1 + 788 | 0) >> 2] | 0)) {
        break label$61
       }
       $507_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
       HEAP32[($3_1 + 608 | 0) >> 2] = HEAP32[(0 + 90072 | 0) >> 2] | 0;
       $396($507_1 | 0, 9310 | 0, 24516 | 0, $3_1 + 608 | 0 | 0);
      }
      label$62 : {
       if (!(HEAP32[($3_1 + 812 | 0) >> 2] | 0)) {
        break label$62
       }
       $517_1 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
       $519_1 = HEAP32[($3_1 + 788 | 0) >> 2] | 0 ? 23946 : 23770;
       HEAP32[($3_1 + 596 | 0) >> 2] = HEAP32[($3_1 + 812 | 0) >> 2] | 0;
       HEAP32[($3_1 + 592 | 0) >> 2] = $519_1;
       $396($517_1 | 0, 9311 | 0, 24560 | 0, $3_1 + 592 | 0 | 0);
      }
      break label$54;
     }
     $525 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     $526 = HEAP32[($3_1 + 836 | 0) >> 2] | 0;
     HEAP32[($3_1 + 772 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
     HEAP32[($3_1 + 768 | 0) >> 2] = $526;
     $396($525 | 0, 9312 | 0, 24614 | 0, $3_1 + 768 | 0 | 0);
     $533 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     HEAP32[($3_1 + 784 | 0) >> 2] = HEAP32[($3_1 + 820 | 0) >> 2] | 0;
     $396($533 | 0, 9313 | 0, 24651 | 0, $3_1 + 784 | 0 | 0);
     label$63 : {
      if (!(HEAP32[($3_1 + 816 | 0) >> 2] | 0)) {
       break label$63
      }
      label$64 : {
       label$65 : {
        if (!(HEAP32[(0 + 87844 | 0) >> 2] | 0)) {
         break label$65
        }
        if (!(HEAP32[(0 + 87840 | 0) >> 2] | 0)) {
         break label$65
        }
        HEAP32[($3_1 + 800 | 0) >> 2] = 24677;
        break label$64;
       }
       label$66 : {
        label$67 : {
         if (!(HEAP32[(0 + 87844 | 0) >> 2] | 0)) {
          break label$67
         }
         HEAP32[($3_1 + 800 | 0) >> 2] = 24699;
         break label$66;
        }
        HEAP32[($3_1 + 800 | 0) >> 2] = 24708;
       }
      }
      $549 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      $550 = HEAP32[($3_1 + 800 | 0) >> 2] | 0;
      HEAP32[($3_1 + 756 | 0) >> 2] = HEAP32[($3_1 + 816 | 0) >> 2] | 0;
      HEAP32[($3_1 + 752 | 0) >> 2] = $550;
      $396($549 | 0, 9314 | 0, 24717 | 0, $3_1 + 752 | 0 | 0);
     }
     $556 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     HEAP32[($3_1 + 736 | 0) >> 2] = (HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0;
     $396($556 | 0, 9315 | 0, 24744 | 0, $3_1 + 736 | 0 | 0);
     label$68 : {
      if (!(HEAP32[($3_1 + 788 | 0) >> 2] | 0)) {
       break label$68
      }
      $567 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAP32[($3_1 + 720 | 0) >> 2] = HEAP32[(0 + 90072 | 0) >> 2] | 0;
      $396($567 | 0, 9316 | 0, 24768 | 0, $3_1 + 720 | 0 | 0);
     }
     label$69 : {
      if (!(HEAP32[($3_1 + 812 | 0) >> 2] | 0)) {
       break label$69
      }
      $577 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      $579 = HEAP32[($3_1 + 788 | 0) >> 2] | 0 ? 23946 : 23770;
      HEAP32[($3_1 + 708 | 0) >> 2] = HEAP32[($3_1 + 812 | 0) >> 2] | 0;
      HEAP32[($3_1 + 704 | 0) >> 2] = $579;
      $396($577 | 0, 9317 | 0, 24799 | 0, $3_1 + 704 | 0 | 0);
     }
    }
   }
  }
  label$70 : {
   if (!(HEAP32[($3_1 + 792 | 0) >> 2] | 0)) {
    break label$70
   }
   $586 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   HEAP32[($3_1 + 320 | 0) >> 2] = HEAP32[($3_1 + 792 | 0) >> 2] | 0;
   $396($586 | 0, 9318 | 0, 24840 | 0, $3_1 + 320 | 0 | 0);
  }
  $592 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
  HEAP32[($3_1 + 308 | 0) >> 2] = 88344;
  HEAP32[($3_1 + 304 | 0) >> 2] = 88604;
  $396($592 | 0, 9319 | 0, 24877 | 0, $3_1 + 304 | 0 | 0);
  label$71 : {
   label$72 : {
    if (!((HEAP32[(0 + 88184 | 0) >> 2] | 0 | 0) != (-2147483648 | 0) & 1 | 0)) {
     break label$72
    }
    $607 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
    HEAP32[($3_1 + 288 | 0) >> 2] = HEAP32[(0 + 88184 | 0) >> 2] | 0;
    $396($607 | 0, 9320 | 0, 24902 | 0, $3_1 + 288 | 0 | 0);
    break label$71;
   }
   $396(HEAP32[($3_1 + 876 | 0) >> 2] | 0 | 0, 9321 | 0, 24910 | 0, 0 | 0);
  }
  $618 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
  HEAP32[($3_1 + 256 | 0) >> 2] = HEAP32[(0 + 92024 | 0) >> 2] | 0;
  $396($618 | 0, 9322 | 0, 24913 | 0, $3_1 + 256 | 0 | 0);
  $625 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
  HEAP32[($3_1 + 272 | 0) >> 2] = HEAP32[(0 + 92224 | 0) >> 2] | 0;
  $396($625 | 0, 9323 | 0, 24947 | 0, $3_1 + 272 | 0 | 0);
  label$73 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$73
   }
   $634 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   HEAP32[($3_1 + 240 | 0) >> 2] = (HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0;
   $396($634 | 0, 9324 | 0, 24984 | 0, $3_1 + 240 | 0 | 0);
  }
  $644 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
  HEAP32[($3_1 + 224 | 0) >> 2] = (((HEAP32[(0 + 91928 | 0) >> 2] | 0) + (HEAP32[(0 + 91936 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 91864 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 91896 | 0) >> 2] | 0) | 0;
  $396($644 | 0, 9325 | 0, 25016 | 0, $3_1 + 224 | 0 | 0);
  label$74 : {
   if (!(HEAP32[($3_1 + 828 | 0) >> 2] | 0)) {
    break label$74
   }
   $661 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   HEAP32[($3_1 + 176 | 0) >> 2] = ((((HEAP32[(0 + 90656 | 0) >> 2] | 0) + (HEAP32[(0 + 90696 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 92384 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90984 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 91040 | 0) >> 2] | 0) | 0;
   $396($661 | 0, 9330 | 0, 25058 | 0, $3_1 + 176 | 0 | 0);
   $680 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   HEAP32[($3_1 + 192 | 0) >> 2] = (HEAP32[(0 + 90704 | 0) >> 2] | 0) + (HEAP32[(0 + 90992 | 0) >> 2] | 0) | 0;
   $396($680 | 0, 9331 | 0, 25102 | 0, $3_1 + 192 | 0 | 0);
   $690 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   HEAP32[($3_1 + 208 | 0) >> 2] = HEAP32[($3_1 + 828 | 0) >> 2] | 0;
   $396($690 | 0, 9332 | 0, 25147 | 0, $3_1 + 208 | 0 | 0);
  }
  HEAP32[($3_1 + 824 | 0) >> 2] = (HEAP32[(0 + 91984 | 0) >> 2] | 0) + (HEAP32[(0 + 92e3 | 0) >> 2] | 0) | 0;
  label$75 : {
   if (!(HEAP32[($3_1 + 824 | 0) >> 2] | 0)) {
    break label$75
   }
   $702 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   HEAP32[($3_1 + 160 | 0) >> 2] = HEAP32[($3_1 + 824 | 0) >> 2] | 0;
   $396($702 | 0, 9375 | 0, 25178 | 0, $3_1 + 160 | 0 | 0);
  }
  label$76 : {
   if (HEAP32[(0 + 88168 | 0) >> 2] | 0) {
    break label$76
   }
   if (!(HEAP32[(0 + 90236 | 0) >> 2] | 0)) {
    break label$76
   }
   HEAPF64[($3_1 + 840 | 0) >> 3] = +((HEAP32[(0 + 90092 | 0) >> 2] | 0) >>> 0);
   HEAPF64[($3_1 + 840 | 0) >> 3] = +HEAPF64[($3_1 + 840 | 0) >> 3] / 1.0e6;
   HEAPF64[(0 + 90864 | 0) >> 3] = +HEAPF64[($3_1 + 840 | 0) >> 3];
   $715 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   HEAPF64[($3_1 + 144 | 0) >> 3] = +HEAPF64[($3_1 + 840 | 0) >> 3];
   $396($715 | 0, 9333 | 0, 25219 | 0, $3_1 + 144 | 0 | 0);
  }
  label$77 : {
   label$78 : {
    if (!(HEAP32[(0 + 88180 | 0) >> 2] | 0)) {
     break label$78
    }
    label$79 : {
     if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
      break label$79
     }
     if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
      break label$79
     }
     $726 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     HEAPF64[($3_1 + 96 | 0) >> 3] = +(HEAP32[(0 + 92080 | 0) >> 2] | 0 | 0) * 100.0 / +(HEAP32[(0 + 90100 | 0) >> 2] | 0 | 0);
     $396($726 | 0, 9334 | 0, 25271 | 0, $3_1 + 96 | 0 | 0);
    }
    break label$77;
   }
   label$80 : {
    if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$80
    }
    label$81 : {
     label$82 : {
      if (!(HEAP32[(0 + 92080 | 0) >> 2] | 0)) {
       break label$82
      }
      $741 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      $743 = HEAP32[(0 + 92080 | 0) >> 2] | 0;
      HEAPF64[($3_1 + 120 | 0) >> 3] = +HEAPF64[(0 + 90136 | 0) >> 3];
      HEAP32[($3_1 + 112 | 0) >> 2] = $743;
      $396($741 | 0, 9335 | 0, 25322 | 0, $3_1 + 112 | 0 | 0);
      break label$81;
     }
     $749 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
     HEAPF64[($3_1 + 128 | 0) >> 3] = +HEAPF64[(0 + 90136 | 0) >> 3];
     $396($749 | 0, 9336 | 0, 25367 | 0, $3_1 + 128 | 0 | 0);
    }
   }
  }
  label$83 : {
   if (!(+HEAPF64[(0 + 90240 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$83
   }
   $762 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   $765 = HEAP32[(0 + 92256 | 0) >> 2] | 0 ? 25420 : 25432;
   HEAPF64[($3_1 + 88 | 0) >> 3] = +HEAPF64[(0 + 90240 | 0) >> 3];
   HEAP32[($3_1 + 80 | 0) >> 2] = $765;
   $396($762 | 0, 9337 | 0, 25394 | 0, $3_1 + 80 | 0 | 0);
  }
  label$84 : {
   if (!(+HEAPF64[(0 + 90248 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$84
   }
   $778 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
   $781 = HEAP32[(0 + 92256 | 0) >> 2] | 0 ? 25420 : 25432;
   HEAPF64[($3_1 + 72 | 0) >> 3] = +HEAPF64[(0 + 90248 | 0) >> 3];
   HEAP32[($3_1 + 64 | 0) >> 2] = $781;
   $396($778 | 0, 9338 | 0, 25438 | 0, $3_1 + 64 | 0 | 0);
  }
  label$85 : {
   if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
    break label$85
   }
   $50(0 | 0, $3_1 + 856 | 0 | 0, $3_1 + 848 | 0 | 0);
   label$86 : {
    if (!(+HEAPF64[($3_1 + 856 | 0) >> 3] > 2.0 * +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$86
    }
    $800 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 48 | 0) >> 3] = +HEAPF64[($3_1 + 856 | 0) >> 3];
    $396($800 | 0, 9339 | 0, 25464 | 0, $3_1 + 48 | 0 | 0);
    HEAPF64[($3_1 + 864 | 0) >> 3] = +HEAPF64[($3_1 + 856 | 0) >> 3] / (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]);
    label$87 : {
     label$88 : {
      if (!(+HEAPF64[($3_1 + 864 | 0) >> 3] > .05 & 1 | 0)) {
       break label$88
      }
      if (!(2.0 * +HEAPF64[(0 + 89544 | 0) >> 3] > +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
       break label$88
      }
      if (!(+HEAPF64[(0 + 90136 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
       break label$88
      }
      $819 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAPF64[($3_1 + 32 | 0) >> 3] = +HEAPF64[($3_1 + 864 | 0) >> 3];
      $396($819 | 0, 9340 | 0, 25511 | 0, $3_1 + 32 | 0 | 0);
      break label$87;
     }
     $396(HEAP32[($3_1 + 876 | 0) >> 2] | 0 | 0, 9341 | 0, 25521 | 0, 0 | 0);
    }
   }
   label$89 : {
    if (!(+HEAPF64[($3_1 + 848 | 0) >> 3] < -2.0 * +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$89
    }
    $832 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[($3_1 + 848 | 0) >> 3];
    $396($832 | 0, 9342 | 0, 25523 | 0, $3_1 + 16 | 0 | 0);
    HEAPF64[($3_1 + 864 | 0) >> 3] = -+HEAPF64[($3_1 + 848 | 0) >> 3] / (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]);
    label$90 : {
     label$91 : {
      if (!(+HEAPF64[($3_1 + 864 | 0) >> 3] > .05 & 1 | 0)) {
       break label$91
      }
      if (!(+HEAPF64[(0 + 90136 | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
       break label$91
      }
      $846 = HEAP32[($3_1 + 876 | 0) >> 2] | 0;
      HEAPF64[$3_1 >> 3] = +HEAPF64[($3_1 + 864 | 0) >> 3];
      $396($846 | 0, 9343 | 0, 25511 | 0, $3_1 | 0);
      break label$90;
     }
     $396(HEAP32[($3_1 + 876 | 0) >> 2] | 0 | 0, 9344 | 0, 25521 | 0, 0 | 0);
    }
   }
  }
  $396(HEAP32[($3_1 + 876 | 0) >> 2] | 0 | 0, 9345 | 0, 25521 | 0, 0 | 0);
  global$0 = $3_1 + 880 | 0;
  return;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $62_1 = 0, $151_1 = 0, $165_1 = 0, $226_1 = 0, $298_1 = 0, $324_1 = 0, $338_1 = 0, $12_1 = 0, $99_1 = 0, $100_1 = 0, $101_1 = 0, $102_1 = 0, $104_1 = 0, $158_1 = 0, $217_1 = 0, $219_1 = 0, $263_1 = 0, $264_1 = 0, $265_1 = 0, $266_1 = 0, $268_1 = 0, $331_1 = 0, $348_1 = 0, $349_1 = 0, $354_1 = 0, $355_1 = 0, $357_1 = 0, $370_1 = 0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 184 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 184 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   $12_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[($3_1 + 144 | 0) >> 2] = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
   $396($12_1 | 0, 6235 | 0, 25571 | 0, $3_1 + 144 | 0 | 0);
   $19_1 = 0;
   $382(4 | 0, $19_1 | 0, $19_1 | 0);
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($3_1 + 184 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[($3_1 + 184 | 0) >> 2] | 0 | 0) <= (HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 172 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90440 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 184 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 160 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[(0 + 90508 | 0) >> 2] = (HEAP32[(0 + 90508 | 0) >> 2] | 0) + (HEAP32[($3_1 + 160 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 180 | 0) >> 2] = (HEAP32[(0 + 90432 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0;
    $62_1 = HEAP32[(HEAP32[($3_1 + 180 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($3_1 + 152 | 0) >> 2] = $62_1;
    label$4 : {
     if (!(($62_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[(0 + 90468 | 0) >> 2] = (HEAP32[(0 + 90468 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 90496 | 0) >> 2] = (HEAP32[(0 + 90496 | 0) >> 2] | 0) - (HEAP32[($3_1 + 160 | 0) >> 2] | 0) | 0;
     HEAP32[(HEAP32[($3_1 + 180 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[(HEAP32[($3_1 + 180 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($3_1 + 164 | 0) >> 2] = ((HEAP32[(0 + 90472 | 0) >> 2] | 0) + (HEAP32[(0 + 90468 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90480 | 0) >> 2] | 0) | 0;
     label$5 : {
      if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
       break label$5
      }
      $99_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
      $100_1 = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
      $101_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
      $102_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
      $104_1 = HEAP32[(0 + 90508 | 0) >> 2] | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = ((HEAP32[(0 + 90472 | 0) >> 2] | 0) + (HEAP32[(0 + 90468 | 0) >> 2] | 0) | 0) - (HEAP32[(0 + 90480 | 0) >> 2] | 0) | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $104_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $102_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $101_1;
      HEAP32[$3_1 >> 2] = $100_1;
      $396($99_1 | 0, 8141 | 0, 25660 | 0, $3_1 | 0);
     }
     HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
     break label$2;
    }
    HEAP32[(0 + 90472 | 0) >> 2] = (HEAP32[(0 + 90472 | 0) >> 2] | 0) + 1 | 0;
    label$6 : {
     if (!((HEAP32[($3_1 + 160 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 90452 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[(0 + 90492 | 0) >> 2] = (HEAP32[(0 + 90492 | 0) >> 2] | 0) + (HEAP32[(0 + 90452 | 0) >> 2] | 0) | 0;
     label$7 : {
      label$8 : {
       if ((HEAP32[(0 + 90444 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$8
       }
       HEAP32[($3_1 + 156 | 0) >> 2] = HEAP32[(0 + 90412 | 0) >> 2] | 0;
       break label$7;
      }
      HEAP32[($3_1 + 156 | 0) >> 2] = HEAP32[(0 + 90408 | 0) >> 2] | 0;
     }
     $151_1 = $395(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 176 | 0) >> 2] = $151_1;
     label$9 : {
      if (($151_1 | 0) != (0 | 0) & 1 | 0) {
       break label$9
      }
      $158_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
      HEAP32[($3_1 + 80 | 0) >> 2] = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
      $396($158_1 | 0, 6080 | 0, 25715 | 0, $3_1 + 80 | 0 | 0);
      $165_1 = 0;
      $382(4 | 0, $165_1 | 0, $165_1 | 0);
     }
     HEAP32[(HEAP32[($3_1 + 176 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 90444 | 0) >> 2] | 0;
     HEAP32[(0 + 90444 | 0) >> 2] = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
     HEAP32[($3_1 + 168 | 0) >> 2] = ((HEAP32[(0 + 90428 | 0) >> 2] | 0) + 4 | 0) & ((HEAP32[(0 + 90428 | 0) >> 2] | 0) ^ -1 | 0) | 0;
     HEAP32[(0 + 90448 | 0) >> 2] = (HEAP32[($3_1 + 176 | 0) >> 2] | 0) + (HEAP32[($3_1 + 168 | 0) >> 2] | 0) | 0;
     HEAP32[(0 + 90452 | 0) >> 2] = (HEAP32[($3_1 + 156 | 0) >> 2] | 0) - (HEAP32[($3_1 + 168 | 0) >> 2] | 0) | 0;
     HEAP32[(0 + 90488 | 0) >> 2] = (HEAP32[(0 + 90488 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 156 | 0) >> 2] | 0) - (HEAP32[($3_1 + 168 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($3_1 + 164 | 0) >> 2] = ((((HEAP32[(0 + 90508 | 0) >> 2] | 0) + (HEAP32[(0 + 90496 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90492 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90452 | 0) >> 2] | 0) | 0) - (HEAP32[($3_1 + 160 | 0) >> 2] | 0) | 0;
     label$10 : {
      if (!((HEAP32[(0 + 90488 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      $217_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
      $219_1 = HEAP32[(0 + 90488 | 0) >> 2] | 0;
      HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
      HEAP32[($3_1 + 64 | 0) >> 2] = $219_1;
      $396($217_1 | 0, 6212 | 0, 25806 | 0, $3_1 + 64 | 0 | 0);
      $226_1 = 0;
      $382(4 | 0, $226_1 | 0, $226_1 | 0);
     }
    }
    HEAP32[($3_1 + 152 | 0) >> 2] = HEAP32[(0 + 90448 | 0) >> 2] | 0;
    HEAP32[(0 + 90448 | 0) >> 2] = (HEAP32[(0 + 90448 | 0) >> 2] | 0) + (HEAP32[($3_1 + 160 | 0) >> 2] | 0) | 0;
    HEAP32[(0 + 90452 | 0) >> 2] = (HEAP32[(0 + 90452 | 0) >> 2] | 0) - (HEAP32[($3_1 + 160 | 0) >> 2] | 0) | 0;
    HEAP32[(0 + 90512 | 0) >> 2] = (HEAP32[(0 + 90512 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 160 | 0) >> 2] | 0) - (HEAP32[($3_1 + 184 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($3_1 + 164 | 0) >> 2] = ((HEAP32[(0 + 90472 | 0) >> 2] | 0) + (HEAP32[(0 + 90468 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90480 | 0) >> 2] | 0) | 0;
    label$11 : {
     if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
      break label$11
     }
     $263_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
     $264_1 = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
     $265_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
     $266_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
     $268_1 = HEAP32[(0 + 90508 | 0) >> 2] | 0;
     HEAP32[($3_1 + 48 | 0) >> 2] = ((HEAP32[(0 + 90472 | 0) >> 2] | 0) + (HEAP32[(0 + 90468 | 0) >> 2] | 0) | 0) - (HEAP32[(0 + 90480 | 0) >> 2] | 0) | 0;
     HEAP32[($3_1 + 44 | 0) >> 2] = $268_1;
     HEAP32[($3_1 + 40 | 0) >> 2] = $266_1;
     HEAP32[($3_1 + 36 | 0) >> 2] = $265_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $264_1;
     $396($263_1 | 0, 8140 | 0, 25888 | 0, $3_1 + 32 | 0 | 0);
    }
    HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
    break label$2;
   }
   label$12 : {
    if ((HEAP32[(0 + 90440 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$12
    }
    $396(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 6081 | 0, 25943 | 0, 0 | 0);
    $298_1 = 0;
    $382(5 | 0, $298_1 | 0, $298_1 | 0);
   }
   HEAP32[($3_1 + 160 | 0) >> 2] = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
   HEAP32[(0 + 90476 | 0) >> 2] = (HEAP32[(0 + 90476 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(0 + 90500 | 0) >> 2] = (HEAP32[(0 + 90500 | 0) >> 2] | 0) + (HEAP32[($3_1 + 160 | 0) >> 2] | 0) | 0;
   label$13 : {
    if (!((HEAP32[(0 + 90504 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 90500 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[(0 + 90504 | 0) >> 2] = HEAP32[(0 + 90500 | 0) >> 2] | 0;
   }
   $324_1 = $395(HEAP32[($3_1 + 160 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 152 | 0) >> 2] = $324_1;
   label$14 : {
    if (($324_1 | 0) != (0 | 0) & 1 | 0) {
     break label$14
    }
    $331_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
    HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
    $396($331_1 | 0, 6082 | 0, 26012 | 0, $3_1 + 128 | 0 | 0);
    $338_1 = 0;
    $382(4 | 0, $338_1 | 0, $338_1 | 0);
   }
   label$15 : {
    if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
     break label$15
    }
    $348_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
    $349_1 = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
    $354_1 = (HEAP32[(0 + 90476 | 0) >> 2] | 0) + (HEAP32[(0 + 90484 | 0) >> 2] | 0) | 0;
    $355_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
    $357_1 = HEAP32[(0 + 90500 | 0) >> 2] | 0;
    HEAP32[($3_1 + 112 | 0) >> 2] = (HEAP32[(0 + 90476 | 0) >> 2] | 0) - (HEAP32[(0 + 90484 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 108 | 0) >> 2] = $357_1;
    HEAP32[($3_1 + 104 | 0) >> 2] = $355_1;
    HEAP32[($3_1 + 100 | 0) >> 2] = $354_1;
    HEAP32[($3_1 + 96 | 0) >> 2] = $349_1;
    $396($348_1 | 0, 8057 | 0, 26081 | 0, $3_1 + 96 | 0 | 0);
   }
   HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
  }
  $370_1 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
  global$0 = $3_1 + 192 | 0;
  return $370_1 | 0;
 }
 
 function $157() {
  var $2_1 = 0, $3_1 = 0, $113_1 = 0, $35_1 = 0, $37_1 = 0, $104_1 = 0, $106_1 = 0, $117_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 52 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0) == ($3_1 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) > (10 | 0) & 1 | 0) {
     break label$2
    }
    if (!(((HEAP32[(0 + 90428 | 0) >> 2] | 0) + 1 | 0) & (HEAP32[(0 + 90428 | 0) >> 2] | 0) | 0)) {
     break label$1
    }
   }
   $35_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   $37_1 = HEAP32[(0 + 90464 | 0) >> 2] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[(0 + 90428 | 0) >> 2] | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $37_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $35_1;
   $393(6244 | 0, 26135 | 0, $2_1 + 32 | 0 | 0);
   $392(5 | 0);
  }
  label$3 : {
   if (!(HEAP32[(0 + 90464 | 0) >> 2] | 0)) {
    break label$3
   }
   $396(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 8143 | 0, 26335 | 0, 0 | 0);
  }
  HEAP32[($2_1 + 60 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 90416 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 56 | 0) >> 2] = 0;
    HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90432 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($2_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($2_1 + 56 | 0) >> 2] = (HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 48 | 0) >> 2] | 0) >> 2] | 0;
      continue label$7;
     };
    }
    HEAP32[($2_1 + 52 | 0) >> 2] = (HEAP32[($2_1 + 52 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0) | 0;
    HEAP32[($2_1 + 60 | 0) >> 2] = (HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  label$8 : {
   if (!((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90496 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$8
   }
   $104_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   $106_1 = HEAP32[(0 + 90496 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $106_1;
   $396($104_1 | 0, 6211 | 0, 26448 | 0, $2_1 + 16 | 0 | 0);
   $113_1 = 0;
   $382(5 | 0, $113_1 | 0, $113_1 | 0);
  }
  label$9 : {
   if (!(HEAP32[(0 + 90464 | 0) >> 2] | 0)) {
    break label$9
   }
   $117_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
   $396($117_1 | 0, 8144 | 0, 26527 | 0, $2_1 | 0);
  }
  global$0 = $2_1 + 64 | 0;
  return;
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $82_1 = 0, $114_1 = 0, $115_1 = 0, $120_1 = 0, $121_1 = 0, $123_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) <= (HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(0 + 90480 | 0) >> 2] = (HEAP32[(0 + 90480 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90440 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 72 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[(0 + 90496 | 0) >> 2] = (HEAP32[(0 + 90496 | 0) >> 2] | 0) + (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0;
    HEAP32[(0 + 90508 | 0) >> 2] = (HEAP32[(0 + 90508 | 0) >> 2] | 0) - (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0;
    HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[(0 + 90432 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAP32[(HEAP32[($4_1 + 76 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
    HEAP32[($4_1 + 64 | 0) >> 2] = ((HEAP32[(0 + 90472 | 0) >> 2] | 0) + (HEAP32[(0 + 90468 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90480 | 0) >> 2] | 0) | 0;
    label$4 : {
     if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
      break label$4
     }
     $77_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
     $78_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
     $79_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
     $80_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
     $82_1 = HEAP32[(0 + 90508 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = ((HEAP32[(0 + 90472 | 0) >> 2] | 0) + (HEAP32[(0 + 90468 | 0) >> 2] | 0) | 0) - (HEAP32[(0 + 90480 | 0) >> 2] | 0) | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $82_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $80_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = $79_1;
     HEAP32[$4_1 >> 2] = $78_1;
     $396($77_1 | 0, 8142 | 0, 26602 | 0, $4_1 | 0);
    }
    break label$1;
   }
   HEAP32[(0 + 90484 | 0) >> 2] = (HEAP32[(0 + 90484 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(0 + 90500 | 0) >> 2] = (HEAP32[(0 + 90500 | 0) >> 2] | 0) - (HEAP32[($4_1 + 72 | 0) >> 2] | 0) | 0;
   label$5 : {
    if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
     break label$5
    }
    $114_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
    $115_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
    $120_1 = (HEAP32[(0 + 90476 | 0) >> 2] | 0) + (HEAP32[(0 + 90484 | 0) >> 2] | 0) | 0;
    $121_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
    $123_1 = HEAP32[(0 + 90500 | 0) >> 2] | 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[(0 + 90476 | 0) >> 2] | 0) - (HEAP32[(0 + 90484 | 0) >> 2] | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = $123_1;
    HEAP32[($4_1 + 40 | 0) >> 2] = $121_1;
    HEAP32[($4_1 + 36 | 0) >> 2] = $120_1;
    HEAP32[($4_1 + 32 | 0) >> 2] = $115_1;
    $396($114_1 | 0, 8058 | 0, 26656 | 0, $4_1 + 32 | 0 | 0);
   }
   $394(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] = (HEAP32[(0 + 90476 | 0) >> 2] | 0) - (HEAP32[(0 + 90484 | 0) >> 2] | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 90500 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(0 + 90444 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    $394(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  HEAP32[(0 + 90444 | 0) >> 2] = 0;
  label$3 : {
   if (!(HEAP32[(0 + 90424 | 0) >> 2] | 0)) {
    break label$3
   }
   $394(HEAP32[(0 + 90440 | 0) >> 2] | 0 | 0);
   $394(HEAP32[(0 + 90432 | 0) >> 2] | 0 | 0);
   $394(HEAP32[(0 + 90436 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(0 + 90460 | 0) >> 2] | 0;
  $513(90408 | 0, 0 | 0, 116 | 0) | 0;
  HEAP32[(0 + 90460 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $513(90408 | 0, 0 | 0, 116 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 90460 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[(0 + 90460 | 0) >> 2] = HEAP32[(0 + 85872 | 0) >> 2] | 0;
  }
  $157();
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $161($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $35_1 = 0, $37_1 = 0, $65_1 = 0, $28_1 = 0, $75_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[(0 + 90464 | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  HEAP32[(0 + 90420 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  HEAP32[(0 + 90408 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
  HEAP32[(0 + 90412 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAP32[(0 + 90428 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) - 1 | 0;
  label$1 : {
   if (!((HEAP32[(0 + 90428 | 0) >> 2] | 0) & ((HEAP32[(0 + 90428 | 0) >> 2] | 0) ^ -1 | 0) | 0)) {
    break label$1
   }
   $28_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
   $396($28_1 | 0, 6085 | 0, 26709 | 0, $7_1 + 16 | 0 | 0);
   $35_1 = 0;
   $382(5 | 0, $35_1 | 0, $35_1 | 0);
  }
  $37_1 = 4;
  HEAP32[(0 + 90436 | 0) >> 2] = $504(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, $37_1 | 0) | 0;
  HEAP32[(0 + 90432 | 0) >> 2] = $504(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, $37_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[(0 + 90436 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    if ((HEAP32[(0 + 90432 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
   }
   $396(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 6086 | 0, 26785 | 0, 0 | 0);
   $65_1 = 0;
   $382(4 | 0, $65_1 | 0, $65_1 | 0);
  }
  label$4 : {
   if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$4
   }
   $75_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$7_1 >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
   $396($75_1 | 0, 8059 | 0, 26832 | 0, $7_1 | 0);
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $162() {
  var $2_1 = 0, $49_1 = 0, $57_1 = 0, $70_1 = 0, $75_1 = 0, $85_1 = 0, $122_1 = 0, $39_1 = 0, $41_1 = 0, $43_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $440(HEAP32[(0 + 90436 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90416 | 0) >> 2] | 0 | 0, 4 | 0, 15 | 0);
  HEAP32[(0 + 90424 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + (((HEAP32[(0 + 90416 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) >= (HEAP32[(0 + 90408 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) >= (HEAP32[(0 + 90412 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $39_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   $41_1 = HEAP32[(0 + 90424 | 0) >> 2] | 0;
   $43_1 = HEAP32[(0 + 90408 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[(0 + 90412 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $43_1;
   HEAP32[$2_1 >> 2] = $41_1;
   $396($39_1 | 0, 6087 | 0, 26889 | 0, $2_1 | 0);
   $49_1 = 0;
   $382(4 | 0, $49_1 | 0, $49_1 | 0);
  }
  $57_1 = $395(((HEAP32[(0 + 90424 | 0) >> 2] | 0) + 1 | 0) << 2 | 0 | 0) | 0;
  HEAP32[(0 + 90440 | 0) >> 2] = $57_1;
  label$3 : {
   if (($57_1 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   $396(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 6088 | 0, 26984 | 0, 0 | 0);
   $70_1 = 0;
   $382(4 | 0, $70_1 | 0, $70_1 | 0);
  }
  HEAP32[($2_1 + 28 | 0) >> 2] = (HEAP32[(0 + 90424 | 0) >> 2] | 0) + 1 | 0;
  label$4 : {
   label$5 : while (1) {
    $75_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = $75_1 + -1 | 0;
    if (!$75_1) {
     break label$4
    }
    HEAP32[((HEAP32[(0 + 90440 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
    continue label$5;
   };
  }
  $85_1 = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $85_1;
  HEAP32[($2_1 + 28 | 0) >> 2] = $85_1;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) <= (HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    label$8 : {
     label$9 : {
      if (!((HEAP32[((HEAP32[(0 + 90440 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[((HEAP32[(0 + 90440 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      break label$8;
     }
     $122_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = $122_1;
     HEAP32[((HEAP32[(0 + 90440 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $122_1;
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = (HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  global$0 = $2_1 + 32 | 0;
  return;
 }
 
 function $163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $39_1 = 0, $68_1 = 0, $31_1 = 0, $64_1 = 0, $66_1 = 0, $76_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$1 : {
   if (!(HEAP32[(0 + 90424 | 0) >> 2] | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 6089 | 0, 27032 | 0, 0 | 0);
   $12_1 = 0;
   $382(5 | 0, $12_1 | 0, $12_1 | 0);
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + (HEAP32[(0 + 90428 | 0) >> 2] | 0) | 0) & ((HEAP32[(0 + 90428 | 0) >> 2] | 0) ^ -1 | 0) | 0;
  label$2 : {
   if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$2
   }
   $31_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
   $396($31_1 | 0, 3078 | 0, 27104 | 0, $3_1 + 16 | 0 | 0);
  }
  HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[(0 + 90416 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     $39_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $39_1 + -1 | 0;
     if (!$39_1) {
      break label$4
     }
     label$6 : {
      if (!((HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      break label$3;
     }
     continue label$5;
    };
   }
   label$7 : {
    if (!((HEAP32[(0 + 90416 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 90420 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $64_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
    $66_1 = HEAP32[(0 + 90436 | 0) >> 2] | 0;
    $68_1 = HEAP32[(0 + 90416 | 0) >> 2] | 0;
    HEAP32[(0 + 90416 | 0) >> 2] = $68_1 + 1 | 0;
    HEAP32[($66_1 + ($68_1 << 2 | 0) | 0) >> 2] = $64_1;
    break label$3;
   }
   $76_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[(0 + 90420 | 0) >> 2] | 0;
   $396($76_1 | 0, 7060 | 0, 27142 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $23_1 = 0, $25_1 = 0, $27_1 = 0, $29_1 = 0, $34_1 = 0, $36_1 = 0, $38_1 = 0, $69_1 = 0, $71_1 = 0, $113_1 = 0, $120_1 = 0;
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 108 | 0) >> 2] = $0_1;
  $157();
  $4_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  $6_1 = HEAP32[(0 + 90468 | 0) >> 2] | 0;
  $8_1 = HEAP32[(0 + 90472 | 0) >> 2] | 0;
  $10_1 = HEAP32[(0 + 90476 | 0) >> 2] | 0;
  $12_1 = HEAP32[(0 + 90480 | 0) >> 2] | 0;
  $14_1 = HEAP32[(0 + 90484 | 0) >> 2] | 0;
  $16_1 = HEAP32[(0 + 90508 | 0) >> 2] | 0;
  $18_1 = HEAP32[(0 + 90496 | 0) >> 2] | 0;
  $23_1 = (HEAP32[(0 + 90492 | 0) >> 2] | 0) + (HEAP32[(0 + 90452 | 0) >> 2] | 0) | 0;
  $25_1 = HEAP32[(0 + 90512 | 0) >> 2] | 0;
  $27_1 = HEAP32[(0 + 90504 | 0) >> 2] | 0;
  $29_1 = HEAP32[(0 + 90500 | 0) >> 2] | 0;
  $34_1 = (HEAP32[(0 + 90476 | 0) >> 2] | 0) - (HEAP32[(0 + 90484 | 0) >> 2] | 0) | 0;
  $36_1 = HEAP32[(0 + 90488 | 0) >> 2] | 0;
  $38_1 = HEAP32[(0 + 90408 | 0) >> 2] | 0;
  HEAP32[($3_1 + 88 | 0) >> 2] = HEAP32[(0 + 90412 | 0) >> 2] | 0;
  HEAP32[($3_1 + 84 | 0) >> 2] = $38_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = $36_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $34_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = $29_1;
  HEAP32[($3_1 + 68 | 0) >> 2] = $27_1;
  HEAP32[($3_1 + 64 | 0) >> 2] = $25_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $23_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = $18_1;
  HEAP32[($3_1 + 52 | 0) >> 2] = $16_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = $14_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $12_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $10_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = $8_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $6_1;
  $396($4_1 | 0, 9278 | 0, 27214 | 0, $3_1 + 32 | 0 | 0);
  label$1 : {
   if (!(HEAP32[(0 + 90516 | 0) >> 2] | 0)) {
    break label$1
   }
   $69_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
   $71_1 = HEAP32[(0 + 90516 | 0) >> 2] | 0;
   HEAPF64[($3_1 + 24 | 0) >> 3] = +(HEAP32[(0 + 90520 | 0) >> 2] | 0 | 0) / +(HEAP32[(0 + 90516 | 0) >> 2] | 0 | 0);
   HEAP32[($3_1 + 16 | 0) >> 2] = $71_1;
   $396($69_1 | 0, 9279 | 0, 27691 | 0, $3_1 + 16 | 0 | 0);
   $396(HEAP32[($3_1 + 108 | 0) >> 2] | 0 | 0, 9280 | 0, 27746 | 0, 0 | 0);
  }
  HEAP32[($3_1 + 104 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 90416 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 100 | 0) >> 2] = 0;
    HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90432 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($3_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($3_1 + 100 | 0) >> 2] = (HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 96 | 0) >> 2] | 0) >> 2] | 0;
      continue label$5;
     };
    }
    $113_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
    $120_1 = HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $120_1;
    $396($113_1 | 0, 9281 | 0, 27773 | 0, $3_1 | 0);
    HEAP32[($3_1 + 104 | 0) >> 2] = (HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  $396(HEAP32[($3_1 + 108 | 0) >> 2] | 0 | 0, 9282 | 0, 27781 | 0, 0 | 0);
  global$0 = $3_1 + 112 | 0;
  return;
 }
 
 function $166($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $33_1 = 0, $70_1 = 0, $90_1 = 0, $21_1 = 0, $102_1 = 0.0, $103_1 = 0.0, $22_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 48 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 89392 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!($167(0 | 0) | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$3
    }
    $21_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $102_1 = +HEAPF64[($5_1 + 48 | 0) >> 3];
    $103_1 = +HEAPF64[($5_1 + 40 | 0) >> 3];
    $22_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
    label$4 : {
     label$5 : {
      if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      $33_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$4;
     }
     $33_1 = -1;
    }
    HEAP32[($5_1 + 20 | 0) >> 2] = $33_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $22_1;
    HEAPF64[($5_1 + 8 | 0) >> 3] = $103_1;
    HEAPF64[$5_1 >> 3] = $102_1;
    $396($21_1 | 0, 2008 | 0, 27915 | 0, $5_1 | 0);
   }
   label$6 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (100 | 0) & 1 | 0)) {
     break label$6
    }
    $281();
   }
   HEAPF64[(0 + 89424 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3];
   HEAPF64[(0 + 89432 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
   label$7 : {
    label$8 : {
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$8
     }
     $70_1 = $5_1 + 36 | 0;
     $168(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, 1 | 0);
     $169(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, $70_1 | 0);
     $170($70_1 | 0);
     break label$7;
    }
    $169(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, $5_1 + 36 | 0 | 0);
   }
   $171(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, $5_1 + 36 | 0 | 0);
   label$9 : {
    if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
     break label$9
    }
    if (!(HEAP32[(0 + 92256 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   $90_1 = 0;
   HEAP32[(0 + 92016 | 0) >> 2] = (HEAP32[(0 + 92016 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(0 + 90216 | 0) >> 2] = $90_1;
   $172(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
   $173(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, $90_1 | 0);
  }
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $110_1 = 0, $25_1 = 0, $100_1 = 0, $182_1 = 0, $195_1 = 0, $208_1 = 0, $211_1 = 0, $265_1 = 0, $179_1 = 0, $261_1 = 0, $262_1 = 0, $295_1 = 0, $297_1 = 0, $314_1 = 0, $316_1 = 0, $318_1 = 0, $320_1 = 0, $335_1 = 0, $337_1 = 0, $339_1 = 0, $341_1 = 0, $349_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 136 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!(HEAP32[($3_1 + 136 | 0) >> 2] | 0)) {
         break label$6
        }
        HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
        break label$5;
       }
       HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
       label$7 : {
        if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
        label$8 : while (1) {
         $25_1 = 0;
         label$9 : {
          if (!((HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$9
          }
          $25_1 = (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
         }
         label$10 : {
          if (!($25_1 & 1 | 0)) {
           break label$10
          }
          HEAP32[($3_1 + 124 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          label$11 : {
           if (((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
            break label$11
           }
           break label$4;
          }
          label$12 : {
           label$13 : {
            if (((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
             break label$13
            }
            if (((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0) {
             break label$13
            }
            if ((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
             break label$12
            }
           }
           break label$4;
          }
          HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
          continue label$8;
         }
         break label$8;
        };
       }
       label$14 : {
        if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
         break label$14
        }
        if (!(HEAP32[(0 + 90268 | 0) >> 2] | 0)) {
         break label$14
        }
        label$15 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
          break label$15
         }
         $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2011 | 0, 31337 | 0, 0 | 0);
        }
        HEAP32[($3_1 + 140 | 0) >> 2] = 1;
        break label$1;
       }
      }
      label$16 : {
       if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$16
       }
       HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
       label$17 : while (1) {
        $100_1 = 0;
        label$18 : {
         if (!((HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$18
         }
         $100_1 = (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
        }
        label$19 : {
         if (!($100_1 & 1 | 0)) {
          break label$19
         }
         $110_1 = 0;
         HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($3_1 + 124 | 0) >> 2] = $110_1;
         HEAP32[($3_1 + 128 | 0) >> 2] = $110_1;
         label$20 : {
          if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($110_1 | 0) & 1 | 0)) {
           break label$20
          }
          HEAP32[($3_1 + 116 | 0) >> 2] = 0;
          HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          HEAP32[($3_1 + 112 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
          label$21 : {
           label$22 : while (1) {
            if (!((HEAP32[($3_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$21
            }
            label$23 : {
             label$24 : {
              if (HEAP32[($3_1 + 116 | 0) >> 2] | 0) {
               break label$24
              }
              if (HEAP32[($3_1 + 136 | 0) >> 2] | 0) {
               break label$24
              }
              HEAP32[($3_1 + 124 | 0) >> 2] = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
              break label$23;
             }
             HEAP32[($3_1 + 108 | 0) >> 2] = HEAP32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
             HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
             HEAP32[(0 + 91040 | 0) >> 2] = (HEAP32[(0 + 91040 | 0) >> 2] | 0) + 1 | 0;
             $4(HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0, $3_1 + 96 | 0 | 0);
             label$25 : {
              if (!(+HEAPF64[($3_1 + 96 | 0) >> 3] >= -2.0 * +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
               break label$25
              }
              HEAP32[(0 + 90268 | 0) >> 2] = 0;
              label$26 : {
               label$27 : {
                if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
                 break label$27
                }
                if (HEAP32[($3_1 + 136 | 0) >> 2] | 0) {
                 break label$27
                }
                if (!(+HEAPF64[($3_1 + 96 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
                 break label$26
                }
               }
               break label$3;
              }
             }
            }
            $179_1 = (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
            $182_1 = (HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 1 | 0;
            HEAP32[($3_1 + 116 | 0) >> 2] = $182_1;
            HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[($179_1 + ($182_1 << 2 | 0) | 0) >> 2] | 0;
            continue label$22;
           };
          }
         }
         label$28 : {
          if (HEAP32[($3_1 + 136 | 0) >> 2] | 0) {
           break label$28
          }
          if (!((HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$28
          }
          $195_1 = 0;
          HEAP32[($3_1 + 108 | 0) >> 2] = $195_1;
          label$29 : {
           if (!((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($195_1 | 0) & 1 | 0)) {
            break label$29
           }
           HEAP32[($3_1 + 104 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
           label$30 : {
            label$31 : while (1) {
             $208_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
             HEAP32[($3_1 + 104 | 0) >> 2] = $208_1 + 4 | 0;
             $211_1 = HEAP32[$208_1 >> 2] | 0;
             HEAP32[($3_1 + 108 | 0) >> 2] = $211_1;
             if (!(($211_1 | 0) != (0 | 0) & 1 | 0)) {
              break label$30
             }
             label$32 : {
              if (!((HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$32
              }
              HEAP32[(0 + 91040 | 0) >> 2] = (HEAP32[(0 + 91040 | 0) >> 2] | 0) + 1 | 0;
              $4(HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, $3_1 + 96 | 0 | 0);
              label$33 : {
               if (!(+HEAPF64[($3_1 + 96 | 0) >> 3] >= -2.0 * +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
                break label$33
               }
               HEAP32[(0 + 90268 | 0) >> 2] = 0;
               label$34 : {
                label$35 : {
                 if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
                  break label$35
                 }
                 if (!(+HEAPF64[($3_1 + 96 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
                  break label$34
                 }
                }
                break label$2;
               }
              }
              break label$30;
             }
             continue label$31;
            };
           }
          }
         }
         HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
         continue label$17;
        }
        break label$17;
       };
      }
      label$36 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$36
       }
       $261_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $262_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
       $265_1 = 0;
       label$37 : {
        if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
         break label$37
        }
        $265_1 = (HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0;
       }
       HEAP32[($3_1 + 68 | 0) >> 2] = $265_1 & 1 | 0 ? 31436 : 31470;
       HEAP32[($3_1 + 64 | 0) >> 2] = $262_1;
       $396($261_1 | 0, 2012 | 0, 31395 | 0, $3_1 + 64 | 0 | 0);
      }
      HEAP32[($3_1 + 140 | 0) >> 2] = 1;
      break label$1;
     }
     HEAP32[(0 + 90268 | 0) >> 2] = 0;
     label$38 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
       break label$38
      }
      $295_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $297_1 = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 80 | 0) >> 2] = $297_1;
      $396($295_1 | 0, 2013 | 0, 31485 | 0, $3_1 + 80 | 0 | 0);
     }
     HEAP32[($3_1 + 140 | 0) >> 2] = 0;
     break label$1;
    }
    label$39 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$39
     }
     $314_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $316_1 = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $318_1 = HEAP32[((HEAP32[($3_1 + 128 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $320_1 = HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[($3_1 + 96 | 0) >> 3];
     HEAP32[($3_1 + 8 | 0) >> 2] = $320_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = $318_1;
     HEAP32[$3_1 >> 2] = $316_1;
     $396($314_1 | 0, 2014 | 0, 31611 | 0, $3_1 | 0);
    }
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   label$40 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$40
    }
    $335_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $337_1 = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $339_1 = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $341_1 = HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 48 | 0) >> 3] = +HEAPF64[($3_1 + 96 | 0) >> 3];
    HEAP32[($3_1 + 40 | 0) >> 2] = $341_1;
    HEAP32[($3_1 + 36 | 0) >> 2] = $339_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = $337_1;
    $396($335_1 | 0, 2060 | 0, 31683 | 0, $3_1 + 32 | 0 | 0);
   }
   HEAP32[($3_1 + 140 | 0) >> 2] = 0;
  }
  $349_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
  global$0 = $3_1 + 144 | 0;
  return $349_1 | 0;
 }
 
 function $168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $39_1 = 0, $49_1 = 0, $53_1 = 0, $75_1 = 0, $91_1 = 0, $104_1 = 0, $107_1 = 0, $120_1 = 0, $140_1 = 0, $146_1 = 0, $180_1 = 0, $186_1 = 0, $245_1 = 0, $283_1 = 0, $296_1 = 0, $299_1 = 0, $15_1 = 0, $17_1 = 0, $169_1 = 0, $171_1 = 0, $208_1 = 0, $223_1 = 0, $327_1 = 0, $330_1 = 0;
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $17_1 = HEAP32[((HEAP32[($4_1 + 108 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
   HEAP32[($4_1 + 64 | 0) >> 2] = $17_1;
   $396($15_1 | 0, 4028 | 0, 36082 | 0, $4_1 + 64 | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
   label$3 : while (1) {
    $39_1 = 0;
    label$4 : {
     if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $39_1 = (HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($39_1 & 1 | 0)) {
      break label$5
     }
     $49_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
     HEAP32[($49_1 + 80 | 0) >> 2] = (HEAP32[($49_1 + 80 | 0) >> 2] | 0) & -8388609 | 0;
     $53_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
     HEAP32[($53_1 + 80 | 0) >> 2] = (HEAP32[($53_1 + 80 | 0) >> 2] | 0) & -4194305 | 0;
     HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$3;
    }
    break label$3;
   };
  }
  label$6 : {
   if (!((HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
   label$7 : while (1) {
    $75_1 = 0;
    label$8 : {
     if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     $75_1 = (HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$9 : {
     if (!($75_1 & 1 | 0)) {
      break label$9
     }
     label$10 : {
      if (!(((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
       break label$10
      }
      $91_1 = 0;
      HEAP32[($4_1 + 96 | 0) >> 2] = $91_1;
      label$11 : {
       if (!((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($91_1 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($4_1 + 92 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
       label$12 : {
        label$13 : while (1) {
         $104_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
         HEAP32[($4_1 + 92 | 0) >> 2] = $104_1 + 4 | 0;
         $107_1 = HEAP32[$104_1 >> 2] | 0;
         HEAP32[($4_1 + 96 | 0) >> 2] = $107_1;
         if (!(($107_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$12
         }
         label$14 : {
          if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
           break label$14
          }
          $120_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
          HEAP32[($120_1 + 80 | 0) >> 2] = (HEAP32[($120_1 + 80 | 0) >> 2] | 0) & -4194305 | 0 | 4194304 | 0;
          continue label$13;
         }
         label$15 : {
          if (!(((HEAP32[((HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
           break label$15
          }
          label$16 : {
           label$17 : {
            if ($342(HEAP32[((HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) | 0) {
             break label$17
            }
            $174(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0, 7 | 0, +(+(0 | 0)), +(1.0));
            $140_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
            HEAP32[($140_1 + 80 | 0) >> 2] = (HEAP32[($140_1 + 80 | 0) >> 2] | 0) & -8388609 | 0 | 8388608 | 0;
            $146_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
            HEAP32[($146_1 + 80 | 0) >> 2] = (HEAP32[($146_1 + 80 | 0) >> 2] | 0) & -4194305 | 0 | 4194304 | 0;
            HEAP32[($4_1 + 88 | 0) >> 2] = (HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 1 | 0;
            break label$16;
           }
           label$18 : {
            if (!($338(HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0)) {
             break label$18
            }
            label$19 : {
             if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
              break label$19
             }
             $169_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
             $171_1 = HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             HEAP32[$4_1 >> 2] = $171_1;
             $396($169_1 | 0, 3043 | 0, 36153 | 0, $4_1 | 0);
            }
            $174(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0, 7 | 0, +(+(0 | 0)), +(1.0));
            $180_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
            HEAP32[($180_1 + 80 | 0) >> 2] = (HEAP32[($180_1 + 80 | 0) >> 2] | 0) & -8388609 | 0 | 8388608 | 0;
            $186_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
            HEAP32[($186_1 + 80 | 0) >> 2] = (HEAP32[($186_1 + 80 | 0) >> 2] | 0) & -4194305 | 0 | 4194304 | 0;
            HEAP32[($4_1 + 88 | 0) >> 2] = (HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 1 | 0;
            break label$12;
           }
          }
         }
         continue label$13;
        };
       }
      }
     }
     HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$7;
    }
    break label$7;
   };
  }
  label$20 : {
   label$21 : {
    if (HEAP32[($4_1 + 88 | 0) >> 2] | 0) {
     break label$21
    }
    break label$20;
   }
   label$22 : {
    if (HEAP32[($4_1 + 104 | 0) >> 2] | 0) {
     break label$22
    }
    label$23 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$23
     }
     $208_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
     $396($208_1 | 0, 1012 | 0, 36235 | 0, $4_1 + 48 | 0 | 0);
    }
    break label$20;
   }
   label$24 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$24
    }
    $223_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
    $396($223_1 | 0, 1048 | 0, 36320 | 0, $4_1 + 32 | 0 | 0);
   }
   label$25 : {
    if (!((HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$25
    }
    HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
    label$26 : while (1) {
     $245_1 = 0;
     label$27 : {
      if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$27
      }
      $245_1 = (HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$28 : {
      if (!($245_1 & 1 | 0)) {
       break label$28
      }
      label$29 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 22 | 0) & 1 | 0)) {
        break label$29
       }
       if (((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 23 | 0) & 1 | 0) {
        break label$29
       }
       $175(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$26;
     }
     break label$26;
    };
   }
   label$30 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$30
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 3075 | 0, 36426 | 0, 0 | 0);
   }
   $283_1 = 0;
   HEAP32[($4_1 + 84 | 0) >> 2] = $283_1;
   if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != ($283_1 | 0) & 1 | 0)) {
    break label$20
   }
   HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0;
   label$31 : {
    label$32 : while (1) {
     $296_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
     HEAP32[($4_1 + 80 | 0) >> 2] = $296_1 + 4 | 0;
     $299_1 = HEAP32[$296_1 >> 2] | 0;
     HEAP32[($4_1 + 84 | 0) >> 2] = $299_1;
     if (!(($299_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$31
     }
     label$33 : {
      if (!((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
       break label$33
      }
      label$34 : {
       label$35 : {
        if (!(((HEAP32[((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 23 | 0) & 1 | 0)) {
         break label$35
        }
        if (!($342(HEAP32[((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0)) {
         break label$35
        }
        $327_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $330_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($4_1 + 16 | 0) >> 2] = $330_1;
        $396($327_1 | 0, 6361 | 0, 36504 | 0, $4_1 + 16 | 0 | 0);
        $150(7 | 0, HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
        break label$34;
       }
       $325((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
      }
      $175(HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
     }
     continue label$32;
    };
   }
  }
  global$0 = $4_1 + 112 | 0;
  return;
 }
 
 function $169($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $129_1 = 0, $28_1 = 0, $31_1 = 0, $84_1 = 0, $87_1 = 0, $108_1 = 0, $111_1 = 0, $124_1 = 0, $162_1 = 0, $192_1 = 0, $203_1 = 0, $236_1 = 0, $245_1 = 0, $290_1 = 0, $308_1 = 0, $314_1 = 0, $53_1 = 0, $315_1 = 0, $327_1 = 0, $328_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  $6_1 = 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 64 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2031 | 0, 39554 | 0, 0 | 0);
  }
  HEAP32[($4_1 + 84 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
  label$2 : while (1) {
   $28_1 = 0;
   label$3 : {
    if (!((HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $31_1 = HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    HEAP32[($4_1 + 60 | 0) >> 2] = $31_1;
    $28_1 = ($31_1 | 0) != (0 | 0);
   }
   label$4 : {
    if (!($28_1 & 1 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      break label$5;
     }
     label$7 : {
      if (((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0) {
       break label$7
      }
      $53_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $396($53_1 | 0, 6225 | 0, 39679 | 0, $4_1 | 0);
      $382(5 | 0, HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       if (!((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       label$10 : {
        if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$10
        }
        $84_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
        HEAP32[(0 + 87832 | 0) >> 2] = $84_1;
        HEAP32[(0 + 90464 | 0) >> 2] = $84_1;
       }
       $87_1 = 0;
       HEAP32[(0 + 91880 | 0) >> 2] = (HEAP32[(0 + 91880 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP32[($4_1 + 48 | 0) >> 2] = $87_1;
       label$11 : {
        if (!((HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($87_1 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
        label$12 : {
         label$13 : while (1) {
          $108_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
          HEAP32[($4_1 + 44 | 0) >> 2] = $108_1 + 4 | 0;
          $111_1 = HEAP32[$108_1 >> 2] | 0;
          HEAP32[($4_1 + 48 | 0) >> 2] = $111_1;
          if (!(($111_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$12
          }
          label$14 : {
           if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$14
           }
           $124_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
           HEAP8[($124_1 + 24 | 0) >> 0] = HEAPU8[($124_1 + 24 | 0) >> 0] | 0 | 8 | 0;
          }
          continue label$13;
         };
        }
       }
       $129_1 = 0;
       HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] = $129_1;
       $176(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, 13 | 0, $129_1 | 0, $129_1 | 0, 1 | 0);
       break label$8;
      }
      HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
      HEAP32[($4_1 + 32 | 0) >> 2] = 0;
      HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
      HEAP32[($4_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
      label$15 : {
       label$16 : while (1) {
        if (!((HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
        label$17 : {
         label$18 : {
          if (((HEAP32[((HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 26 | 0) & 1 | 0) {
           break label$18
          }
          if (!(((HEAP32[((HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
           break label$17
          }
         }
         $301(HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0);
        }
        $162_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
        HEAP32[($162_1 + 80 | 0) >> 2] = (HEAP32[($162_1 + 80 | 0) >> 2] | 0) & -67108865 | 0 | 67108864 | 0;
        label$19 : {
         label$20 : {
          if (!((HEAP32[((HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$20
          }
          HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
          HEAP32[((HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
          break label$19;
         }
         HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
         HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        }
        label$21 : {
         label$22 : {
          if (!((HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$22
          }
          $192_1 = 0;
          break label$21;
         }
         $192_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
        }
        HEAP32[($4_1 + 80 | 0) >> 2] = $192_1;
        continue label$16;
       };
      }
      label$23 : while (1) {
       $203_1 = 0;
       label$24 : {
        if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$24
        }
        $203_1 = (((HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 26 | 0) & 1 | 0 | 0) != (0 | 0);
       }
       label$25 : {
        if (!($203_1 & 1 | 0)) {
         break label$25
        }
        HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
        continue label$23;
       }
       break label$23;
      };
      HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
      $177(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
      HEAP32[($4_1 + 28 | 0) >> 2] = ((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0) + (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0;
      label$26 : {
       label$27 : {
        if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) > (511 | 0) & 1 | 0)) {
         break label$27
        }
        $236_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
        HEAP32[($236_1 + 80 | 0) >> 2] = (HEAP32[($236_1 + 80 | 0) >> 2] | 0) & -512 | 0 | 511 | 0;
        break label$26;
       }
       $245_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
       HEAP32[($245_1 + 80 | 0) >> 2] = (HEAP32[($245_1 + 80 | 0) >> 2] | 0) & -512 | 0 | (((HEAP32[($4_1 + 28 | 0) >> 2] | 0) & 65535 | 0) & 511 | 0) | 0;
      }
      HEAP32[(0 + 90888 | 0) >> 2] = (HEAP32[(0 + 90888 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0;
      HEAP32[(0 + 90880 | 0) >> 2] = (HEAP32[(0 + 90880 | 0) >> 2] | 0) + (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0;
      label$28 : {
       if (!((HEAP32[(0 + 90872 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$28
       }
       HEAP32[(0 + 90872 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
      }
     }
     HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    }
    HEAP32[($4_1 + 84 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
    continue label$2;
   }
   break label$2;
  };
  label$29 : {
   if (!(HEAP32[($4_1 + 40 | 0) >> 2] | 0)) {
    break label$29
   }
   HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
   label$30 : while (1) {
    $290_1 = 0;
    label$31 : {
     if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$31
     }
     $290_1 = (HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$32 : {
     if (!($290_1 & 1 | 0)) {
      break label$32
     }
     label$33 : {
      if (!(((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 24 | 0) & 1 | 0)) {
       break label$33
      }
      $178(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
      $179(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
      $308_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
      HEAP32[($308_1 + 80 | 0) >> 2] = (HEAP32[($308_1 + 80 | 0) >> 2] | 0) & -16777217 | 0;
     }
     HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$30;
    }
    break label$30;
   };
   $314_1 = 1;
   $315_1 = $180() | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + $315_1 | 0;
   HEAP32[(HEAP32[($4_1 + 88 | 0) >> 2] | 0) >> 2] = $314_1;
   label$34 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($314_1 | 0) & 1 | 0)) {
     break label$34
    }
    $327_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $328_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = $328_1;
    $396($327_1 | 0, 1013 | 0, 39741 | 0, $4_1 + 16 | 0 | 0);
   }
  }
  global$0 = $4_1 + 96 | 0;
  return;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0, $54_1 = 0, $55_1 = 0, $71_1 = 0, $74_1 = 0, $101_1 = 0, $246_1 = 0, $257_1 = 0, $260_1 = 0, $294_1 = 0, $310_1 = 0, $314_1 = 0, $318_1 = 0, $361_1 = 0, $43_1 = 0, $45_1 = 0, $122_1 = 0, $125_1 = 0, $128_1 = 0, $130_1 = 0, $212_1 = 0, $345_1 = 0, $347_1 = 0, $356_1 = 0, $371_1 = 0, $372_1 = 0, $373_1 = 0;
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 68 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 64 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $4_1;
  label$1 : {
   if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
   HEAP32[(0 + 87832 | 0) >> 2] = $17_1;
   HEAP32[(0 + 90464 | 0) >> 2] = $17_1;
  }
  label$2 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$2
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 3054 | 0, 34011 | 0, 0 | 0);
  }
  HEAP32[($3_1 + 76 | 0) >> 2] = $349() | 0;
  label$3 : {
   if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   $43_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $45_1 = $337(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $45_1;
   $396($43_1 | 0, 6279 | 0, 34045 | 0, $3_1 + 48 | 0 | 0);
   $54_1 = 0;
   $382(5 | 0, $54_1 | 0, $54_1 | 0);
  }
  $55_1 = 0;
  HEAP32[(0 + 90272 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  $350(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 132 | 0) >> 2] = $55_1;
  label$4 : {
   if (!((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) != ($55_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($3_1 + 128 | 0) >> 2] = (HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     $71_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
     HEAP32[($3_1 + 128 | 0) >> 2] = $71_1 + 4 | 0;
     $74_1 = HEAP32[$71_1 >> 2] | 0;
     HEAP32[($3_1 + 132 | 0) >> 2] = $74_1;
     if (!(($74_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (7 | 0) & 1 | 0)) {
       break label$7
      }
      continue label$6;
     }
     HEAP32[($3_1 + 60 | 0) >> 2] = 1;
     label$8 : {
      if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      $101_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
      HEAP32[(0 + 87832 | 0) >> 2] = $101_1;
      HEAP32[(0 + 90464 | 0) >> 2] = $101_1;
     }
     HEAP32[($3_1 + 152 | 0) >> 2] = $256(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 148 | 0) >> 2] = $256(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) | 0;
     label$9 : {
      if (!((HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      continue label$6;
     }
     label$10 : {
      if ($342(HEAP32[((HEAP32[($3_1 + 148 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0) | 0) {
       break label$10
      }
      $122_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $125_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $128_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $130_1 = HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 148 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = $130_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $128_1;
      HEAP32[$3_1 >> 2] = $125_1;
      $396($122_1 | 0, 6096 | 0, 34145 | 0, $3_1 | 0);
      $150(5 | 0, HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0);
     }
     HEAPF64[($3_1 + 120 | 0) >> 3] = +$14(HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0, $3_1 + 112 | 0 | 0, $3_1 + 104 | 0 | 0);
     HEAPF64[($3_1 + 96 | 0) >> 3] = +$14(HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0, $3_1 + 88 | 0 | 0, $3_1 + 80 | 0 | 0);
     $181(HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3_1 + 120 | 0) >> 3]), HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3_1 + 96 | 0) >> 3]));
     label$11 : {
      label$12 : {
       if (!(+HEAPF64[($3_1 + 120 | 0) >> 3] < +HEAPF64[($3_1 + 96 | 0) >> 3] & 1 | 0)) {
        break label$12
       }
       label$13 : {
        label$14 : {
         if (!(((HEAP32[((HEAP32[($3_1 + 148 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
          break label$14
         }
         if (((HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
          break label$14
         }
         if (!(+HEAPF64[($3_1 + 96 | 0) >> 3] < 50.0 * (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]) & 1 | 0)) {
          break label$14
         }
         HEAP32[($3_1 + 144 | 0) >> 2] = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
         HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
         HEAPF64[($3_1 + 120 | 0) >> 3] = +HEAPF64[($3_1 + 96 | 0) >> 3];
         HEAPF64[($3_1 + 112 | 0) >> 3] = +HEAPF64[($3_1 + 88 | 0) >> 3];
         HEAPF64[($3_1 + 104 | 0) >> 3] = +HEAPF64[($3_1 + 80 | 0) >> 3];
         break label$13;
        }
        HEAP32[($3_1 + 144 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
        HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
       }
       break label$11;
      }
      label$15 : {
       label$16 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
         break label$16
        }
        if (((HEAP32[((HEAP32[($3_1 + 148 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
         break label$16
        }
        if (!(+HEAPF64[($3_1 + 120 | 0) >> 3] < 50.0 * (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]) & 1 | 0)) {
         break label$16
        }
        HEAP32[($3_1 + 144 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
        HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
        break label$15;
       }
       HEAP32[($3_1 + 144 | 0) >> 2] = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
       HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
       HEAPF64[($3_1 + 120 | 0) >> 3] = +HEAPF64[($3_1 + 96 | 0) >> 3];
       HEAPF64[($3_1 + 112 | 0) >> 3] = +HEAPF64[($3_1 + 88 | 0) >> 3];
       HEAPF64[($3_1 + 104 | 0) >> 3] = +HEAPF64[($3_1 + 80 | 0) >> 3];
      }
     }
     $176(HEAP32[($3_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, $3_1 + 112 | 0 | 0, $3_1 + 104 | 0 | 0, 0 | 0);
     $212_1 = $180() | 0;
     HEAP32[($3_1 + 64 | 0) >> 2] = (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + $212_1 | 0;
     label$17 : {
      label$18 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
        break label$18
       }
       HEAP32[(0 + 91544 | 0) >> 2] = (HEAP32[(0 + 91544 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       break label$17;
      }
      HEAP32[($3_1 + 72 | 0) >> 2] = (HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 1 | 0;
     }
     label$19 : {
      if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
       break label$19
      }
      HEAP32[(0 + 91168 | 0) >> 2] = (HEAP32[(0 + 91168 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[(0 + 91184 | 0) >> 3] = +HEAPF64[(0 + 91184 | 0) >> 3] + +HEAPF64[($3_1 + 120 | 0) >> 3];
      label$20 : {
       if (!(+HEAPF64[(0 + 91176 | 0) >> 3] < +HEAPF64[($3_1 + 120 | 0) >> 3] & 1 | 0)) {
        break label$20
       }
       HEAPF64[(0 + 91176 | 0) >> 3] = +HEAPF64[($3_1 + 120 | 0) >> 3];
      }
     }
     continue label$6;
    };
   }
  }
  $246_1 = 0;
  HEAP32[($3_1 + 132 | 0) >> 2] = $246_1;
  label$21 : {
   if (!((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) != ($246_1 | 0) & 1 | 0)) {
    break label$21
   }
   HEAP32[($3_1 + 128 | 0) >> 2] = (HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 4 | 0;
   label$22 : {
    label$23 : while (1) {
     $257_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
     HEAP32[($3_1 + 128 | 0) >> 2] = $257_1 + 4 | 0;
     $260_1 = HEAP32[$257_1 >> 2] | 0;
     HEAP32[($3_1 + 132 | 0) >> 2] = $260_1;
     if (!(($260_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$22
     }
     label$24 : {
      label$25 : {
       if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
        break label$25
       }
       $158(HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, 48 | 0);
       break label$24;
      }
      $325(87704 + 2568 | 0 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0);
     }
     continue label$23;
    };
   }
  }
  $348($3_1 + 76 | 0 | 0);
  label$26 : {
   if (!(HEAP32[($3_1 + 60 | 0) >> 2] | 0)) {
    break label$26
   }
   HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
   label$27 : while (1) {
    $294_1 = 0;
    label$28 : {
     if (!((HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$28
     }
     $294_1 = (HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$29 : {
     if (!($294_1 & 1 | 0)) {
      break label$29
     }
     label$30 : {
      if (!(((HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
       break label$30
      }
      $310_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
      HEAP32[($310_1 + 80 | 0) >> 2] = (HEAP32[($310_1 + 80 | 0) >> 2] | 0) & -2097153 | 0;
      $314_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
      HEAP32[($314_1 + 80 | 0) >> 2] = (HEAP32[($314_1 + 80 | 0) >> 2] | 0) & -4194305 | 0;
      $318_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
      HEAP32[($318_1 + 80 | 0) >> 2] = (HEAP32[($318_1 + 80 | 0) >> 2] | 0) & -8388609 | 0;
      label$31 : {
       if (!(($337(HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$31
       }
       $174(HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0, 10 | 0, +(+(0 | 0)), +(1.0));
       label$32 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$32
        }
        $345_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $347_1 = HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $347_1;
        $396($345_1 | 0, 2107 | 0, 34261 | 0, $3_1 + 16 | 0 | 0);
       }
      }
     }
     HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$27;
    }
    break label$27;
   };
   $356_1 = $180() | 0;
   HEAP32[($3_1 + 64 | 0) >> 2] = (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + $356_1 | 0;
  }
  label$33 : {
   label$34 : {
    if (HEAP32[($3_1 + 72 | 0) >> 2] | 0) {
     break label$34
    }
    if (!(HEAP32[($3_1 + 68 | 0) >> 2] | 0)) {
     break label$33
    }
   }
   $361_1 = 1;
   HEAP32[(HEAP32[($3_1 + 156 | 0) >> 2] | 0) >> 2] = $361_1;
   label$35 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($361_1 | 0) & 1 | 0)) {
     break label$35
    }
    $371_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $372_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
    $373_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
    HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
    HEAP32[($3_1 + 36 | 0) >> 2] = $373_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = $372_1;
    $396($371_1 | 0, 1011 | 0, 34335 | 0, $3_1 + 32 | 0 | 0);
   }
  }
  global$0 = $3_1 + 160 | 0;
  return;
 }
 
 function $171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $35_1 = 0, $84_1 = 0, $85_1 = 0, $101_1 = 0, $104_1 = 0, $138_1 = 0, $194_1 = 0, $205_1 = 0, $208_1 = 0, $73_1 = 0, $76_1 = 0, $155_1 = 0, $157_1 = 0, $159_1 = 0, $263_1 = 0.0, $237_1 = 0, $252_1 = 0, $253_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  $6_1 = 0;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 64 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4024 | 0, 33726 | 0, 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[($4_1 + 124 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 116 | 0) >> 2] = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
   label$3 : while (1) {
    $35_1 = 0;
    label$4 : {
     if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $35_1 = (HEAP32[((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($35_1 & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!(((HEAP32[((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
       break label$6
      }
      if (((HEAP32[((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
       break label$6
      }
      $174(HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0, 6 | 0, +(+(0 | 0)), +(1.0));
     }
     HEAP32[($4_1 + 116 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$3;
    }
    break label$3;
   };
  }
  HEAP32[($4_1 + 68 | 0) >> 2] = $349() | 0;
  label$7 : {
   if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$7
   }
   $73_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $76_1 = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = $337(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 48 | 0) >> 2] = $76_1;
   $396($73_1 | 0, 6392 | 0, 33751 | 0, $4_1 + 48 | 0 | 0);
   $84_1 = 0;
   $382(5 | 0, $84_1 | 0, $84_1 | 0);
  }
  $85_1 = 0;
  HEAP32[(0 + 90272 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  $350(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 76 | 0) >> 2] = $85_1;
  label$8 : {
   if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != ($85_1 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[($4_1 + 72 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 4 | 0;
   label$9 : {
    label$10 : while (1) {
     $101_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
     HEAP32[($4_1 + 72 | 0) >> 2] = $101_1 + 4 | 0;
     $104_1 = HEAP32[$101_1 >> 2] | 0;
     HEAP32[($4_1 + 76 | 0) >> 2] = $104_1;
     if (!(($104_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     label$11 : {
      label$12 : {
       if ((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (6 | 0) & 1 | 0) {
        break label$12
       }
       if (!(((HEAP32[((HEAP32[($4_1 + 108 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$11
       }
      }
      continue label$10;
     }
     label$13 : {
      if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      $138_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
      HEAP32[(0 + 87832 | 0) >> 2] = $138_1;
      HEAP32[(0 + 90464 | 0) >> 2] = $138_1;
     }
     HEAP32[($4_1 + 112 | 0) >> 2] = $182(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, $4_1 + 96 | 0 | 0, $4_1 + 88 | 0 | 0, $4_1 + 80 | 0 | 0) | 0;
     label$14 : {
      if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
       break label$14
      }
      $155_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $157_1 = HEAP32[((HEAP32[($4_1 + 108 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $159_1 = HEAP32[((HEAP32[($4_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $263_1 = +HEAPF64[($4_1 + 96 | 0) >> 3];
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
      HEAPF64[($4_1 + 8 | 0) >> 3] = $263_1;
      HEAP32[($4_1 + 4 | 0) >> 2] = $159_1;
      HEAP32[$4_1 >> 2] = $157_1;
      $396($155_1 | 0, 15 | 0, 33856 | 0, $4_1 | 0);
     }
     $176(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, $4_1 + 88 | 0 | 0, $4_1 + 80 | 0 | 0, 0 | 0);
     HEAP32[($4_1 + 64 | 0) >> 2] = (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 1 | 0;
     label$15 : {
      if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
       break label$15
      }
      HEAP32[(0 + 91200 | 0) >> 2] = (HEAP32[(0 + 91200 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[(0 + 91216 | 0) >> 3] = +HEAPF64[(0 + 91216 | 0) >> 3] + +HEAPF64[($4_1 + 96 | 0) >> 3];
      label$16 : {
       if (!(+HEAPF64[(0 + 91208 | 0) >> 3] < +HEAPF64[($4_1 + 96 | 0) >> 3] & 1 | 0)) {
        break label$16
       }
       HEAPF64[(0 + 91208 | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3];
      }
     }
     continue label$10;
    };
   }
  }
  $194_1 = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $194_1;
  label$17 : {
   if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != ($194_1 | 0) & 1 | 0)) {
    break label$17
   }
   HEAP32[($4_1 + 72 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 4 | 0;
   label$18 : {
    label$19 : while (1) {
     $205_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
     HEAP32[($4_1 + 72 | 0) >> 2] = $205_1 + 4 | 0;
     $208_1 = HEAP32[$205_1 >> 2] | 0;
     HEAP32[($4_1 + 76 | 0) >> 2] = $208_1;
     if (!(($208_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$18
     }
     label$20 : {
      label$21 : {
       label$22 : {
        if (((HEAP32[((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
         break label$22
        }
        if (!(((HEAP32[((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
         break label$21
        }
       }
       $158(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 48 | 0);
       break label$20;
      }
      $325(87704 + 2568 | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0);
     }
     continue label$19;
    };
   }
  }
  $348($4_1 + 68 | 0 | 0);
  $237_1 = $180() | 0;
  HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + $237_1 | 0;
  label$23 : {
   if (!(HEAP32[($4_1 + 64 | 0) >> 2] | 0)) {
    break label$23
   }
   HEAP32[(HEAP32[($4_1 + 120 | 0) >> 2] | 0) >> 2] = 1;
  }
  label$24 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$24
   }
   $252_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $253_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
   HEAP32[($4_1 + 32 | 0) >> 2] = $253_1;
   $396($252_1 | 0, 1010 | 0, 33924 | 0, $4_1 + 32 | 0 | 0);
  }
  global$0 = $4_1 + 128 | 0;
  return;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $25_1 = 0, $35_1 = 0, $51_1 = 0, $54_1 = 0, $87_1 = 0, $100_1 = 0, $103_1 = 0, $120_1 = 0, $129_1 = 0, $133_1 = 0, $134_1 = 0, $152_1 = 0, $155_1 = 0, $161_1 = 0, $109_1 = 0, $188_1 = 0, $222_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
   label$2 : while (1) {
    $25_1 = 0;
    label$3 : {
     if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $25_1 = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$4 : {
     if (!($25_1 & 1 | 0)) {
      break label$4
     }
     $35_1 = 0;
     HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     HEAP32[($3_1 + 36 | 0) >> 2] = $35_1;
     label$5 : {
      if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($35_1 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      label$6 : {
       label$7 : while (1) {
        $51_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
        HEAP32[($3_1 + 32 | 0) >> 2] = $51_1 + 4 | 0;
        $54_1 = HEAP32[$51_1 >> 2] | 0;
        HEAP32[($3_1 + 36 | 0) >> 2] = $54_1;
        if (!(($54_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        label$8 : {
         if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$8
         }
         HEAP32[($3_1 + 16 | 0) >> 2] = 0;
         label$9 : {
          if (!(((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
           break label$9
          }
          if (!(((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
           break label$9
          }
          HEAP32[($3_1 + 16 | 0) >> 2] = 1;
         }
         label$10 : {
          if (!($183(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
          $87_1 = 0;
          HEAP32[($3_1 + 28 | 0) >> 2] = $87_1;
          label$11 : {
           if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($87_1 | 0) & 1 | 0)) {
            break label$11
           }
           HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
           label$12 : {
            label$13 : while (1) {
             $100_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
             HEAP32[($3_1 + 24 | 0) >> 2] = $100_1 + 4 | 0;
             $103_1 = HEAP32[$100_1 >> 2] | 0;
             HEAP32[($3_1 + 28 | 0) >> 2] = $103_1;
             if (!(($103_1 | 0) != (0 | 0) & 1 | 0)) {
              break label$12
             }
             $109_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
             label$14 : {
              label$15 : {
               if (!((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$15
               }
               $120_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
               break label$14;
              }
              $120_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
             }
             label$16 : {
              if (!(($109_1 | 0) == ($120_1 | 0) & 1 | 0)) {
               break label$16
              }
              $129_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
              HEAP8[($129_1 + 16 | 0) >> 0] = HEAPU8[($129_1 + 16 | 0) >> 0] | 0 | 4 | 0;
              break label$12;
             }
             continue label$13;
            };
           }
          }
         }
        }
        continue label$7;
       };
      }
     }
     $133_1 = 0;
     $134_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
     HEAP32[($134_1 + 80 | 0) >> 2] = (HEAP32[($134_1 + 80 | 0) >> 2] | 0) & -134217729 | 0 | 134217728 | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $133_1;
     label$17 : {
      if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($133_1 | 0) & 1 | 0)) {
       break label$17
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
      label$18 : {
       label$19 : while (1) {
        $152_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
        HEAP32[($3_1 + 24 | 0) >> 2] = $152_1 + 4 | 0;
        $155_1 = HEAP32[$152_1 >> 2] | 0;
        HEAP32[($3_1 + 28 | 0) >> 2] = $155_1;
        if (!(($155_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$18
        }
        $161_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        HEAP8[($161_1 + 16 | 0) >> 0] = HEAPU8[($161_1 + 16 | 0) >> 0] | 0 | 2 | 0;
        continue label$19;
       };
      }
     }
     HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
  label$20 : {
   label$21 : {
    if (!(HEAP32[(0 + 87720 | 0) >> 2] | 0)) {
     break label$21
    }
    $440((HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 4 | 0, 16 | 0);
    break label$20;
   }
   $440((HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 4 | 0, 17 | 0);
  }
  $188_1 = $337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + $188_1 | 0;
  label$22 : {
   label$23 : {
    if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
     break label$23
    }
    HEAP32[(0 + 91576 | 0) >> 2] = (HEAP32[(0 + 91576 | 0) >> 2] | 0) + (HEAP32[($3_1 + 20 | 0) >> 2] | 0) | 0;
    break label$22;
   }
   HEAP32[(0 + 91560 | 0) >> 2] = (HEAP32[(0 + 91560 | 0) >> 2] | 0) + (HEAP32[($3_1 + 20 | 0) >> 2] | 0) | 0;
   label$24 : {
    if (!((HEAP32[(0 + 91568 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$24
    }
    HEAP32[(0 + 91568 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   }
  }
  label$25 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$25
   }
   $222_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   $396($222_1 | 0, 2022 | 0, 34825 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 48 | 0;
  return;
 }
 
 function $173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $373_1 = 0, $33_1 = 0, $52_1 = 0, $79_1 = 0, $321_1 = 0, $333_1 = 0, $345_1 = 0, $414_1 = 0, $451_1 = 0, $461_1 = 0, $471_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $73_1 = 0, $118_1 = 0, $120_1 = 0, $126_1 = 0, $128_1 = 0, $134_1 = 0, $135_1 = 0, $522_1 = 0.0, $193_1 = 0, $195_1 = 0, $201_1 = 0, $203_1 = 0, $209_1 = 0, $210_1 = 0, $524_1 = 0.0, $230_1 = 0, $232_1 = 0, $234_1 = 0, $235_1 = 0, $526 = 0.0, $261_1 = 0, $312_1 = 0, $323_1 = 0, $335_1 = 0, $431_1 = 0, $433_1 = 0, $435_1 = 0, $490_1 = 0, $491_1 = 0, $492_1 = 0, $493_1 = 0, $494_1 = 0;
  $4_1 = global$0 - 304 | 0;
  global$0 = $4_1;
  $6_1 = 0;
  HEAP32[($4_1 + 300 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 296 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 276 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 240 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 236 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 232 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 228 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 224 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 220 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $19_1 = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
   $22_1 = $337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $33_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$2;
    }
    $33_1 = -1;
   }
   HEAP32[($4_1 + 204 | 0) >> 2] = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
   HEAP32[($4_1 + 200 | 0) >> 2] = $33_1;
   HEAP32[($4_1 + 196 | 0) >> 2] = $22_1;
   HEAP32[($4_1 + 192 | 0) >> 2] = $19_1;
   $396($16_1 | 0, 2010 | 0, 28079 | 0, $4_1 + 192 | 0 | 0);
  }
  label$4 : while (1) {
   HEAP32[($4_1 + 276 | 0) >> 2] = 0;
   label$5 : while (1) {
    $52_1 = 1;
    label$6 : {
     if (($337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0) {
      break label$6
     }
     $52_1 = ($337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0);
    }
    label$7 : {
     if (!($52_1 & 1 | 0)) {
      break label$7
     }
     label$8 : {
      if (!(($337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$8
      }
      $73_1 = $180() | 0;
      HEAP32[($4_1 + 228 | 0) >> 2] = (HEAP32[($4_1 + 228 | 0) >> 2] | 0) + $73_1 | 0;
      HEAP32[($4_1 + 276 | 0) >> 2] = 1;
     }
     label$9 : {
      label$10 : while (1) {
       $79_1 = $333(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($4_1 + 280 | 0) >> 2] = $79_1;
       if (!(($79_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($4_1 + 292 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 280 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       HEAP32[($4_1 + 288 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 280 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
       HEAP32[($4_1 + 264 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 280 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
       HEAP32[($4_1 + 244 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 280 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
       HEAPF64[($4_1 + 256 | 0) >> 3] = +HEAPF64[(HEAP32[($4_1 + 280 | 0) >> 2] | 0) >> 3];
       HEAPF64[($4_1 + 248 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 280 | 0) >> 2] | 0) + 8 | 0) >> 3];
       $158(HEAP32[($4_1 + 280 | 0) >> 2] | 0 | 0, 48 | 0);
       label$11 : {
        label$12 : {
         if (((HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
          break label$12
         }
         if (!(((HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
          break label$11
         }
        }
        label$13 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
          break label$13
         }
         $118_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $120_1 = HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $126_1 = ((HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0;
         $128_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $134_1 = ((HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0;
         $135_1 = HEAP32[($4_1 + 244 | 0) >> 2] | 0;
         $522_1 = +HEAPF64[($4_1 + 248 | 0) >> 3];
         HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 256 | 0) >> 3];
         HEAPF64[($4_1 + 24 | 0) >> 3] = $522_1;
         HEAP32[($4_1 + 16 | 0) >> 2] = $135_1;
         HEAP32[($4_1 + 12 | 0) >> 2] = $134_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $128_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $126_1;
         HEAP32[$4_1 >> 2] = $120_1;
         $396($118_1 | 0, 3045 | 0, 28182 | 0, $4_1 | 0);
        }
        continue label$10;
       }
       label$14 : {
        label$15 : {
         if ((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
          break label$15
         }
         if (!((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
          break label$14
         }
        }
        label$16 : {
         if (!(HEAP32[(0 + 87880 | 0) >> 2] | 0)) {
          break label$16
         }
         label$17 : {
          label$18 : {
           label$19 : {
            if (((HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 27 | 0) & 1 | 0) {
             break label$19
            }
            if (((HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
             break label$18
            }
           }
           if (((HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 27 | 0) & 1 | 0) {
            break label$17
           }
           if (!(((HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
            break label$17
           }
          }
          label$20 : {
           if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
            break label$20
           }
           $193_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
           $195_1 = HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           $201_1 = ((HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0;
           $203_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           $209_1 = ((HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0;
           $210_1 = HEAP32[($4_1 + 244 | 0) >> 2] | 0;
           $524_1 = +HEAPF64[($4_1 + 248 | 0) >> 3];
           HEAPF64[($4_1 + 128 | 0) >> 3] = +HEAPF64[($4_1 + 256 | 0) >> 3];
           HEAPF64[($4_1 + 120 | 0) >> 3] = $524_1;
           HEAP32[($4_1 + 112 | 0) >> 2] = $210_1;
           HEAP32[($4_1 + 108 | 0) >> 2] = $209_1;
           HEAP32[($4_1 + 104 | 0) >> 2] = $203_1;
           HEAP32[($4_1 + 100 | 0) >> 2] = $201_1;
           HEAP32[($4_1 + 96 | 0) >> 2] = $195_1;
           $396($193_1 | 0, 3064 | 0, 28315 | 0, $4_1 + 96 | 0 | 0);
          }
          continue label$10;
         }
        }
       }
       label$21 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
         break label$21
        }
        $230_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $232_1 = HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $234_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $235_1 = HEAP32[($4_1 + 244 | 0) >> 2] | 0;
        $526 = +HEAPF64[($4_1 + 248 | 0) >> 3];
        HEAPF64[($4_1 + 88 | 0) >> 3] = +HEAPF64[($4_1 + 256 | 0) >> 3];
        HEAPF64[($4_1 + 80 | 0) >> 3] = $526;
        HEAP32[($4_1 + 72 | 0) >> 2] = $235_1;
        HEAP32[($4_1 + 68 | 0) >> 2] = $234_1;
        HEAP32[($4_1 + 64 | 0) >> 2] = $232_1;
        $396($230_1 | 0, 3047 | 0, 28466 | 0, $4_1 + 64 | 0 | 0);
       }
       label$22 : {
        label$23 : {
         if (!((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
          break label$23
         }
         $186(HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 288 | 0) >> 2] | 0 | 0);
         break label$22;
        }
        $187(HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 288 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($4_1 + 224 | 0) >> 2] = (HEAP32[($4_1 + 224 | 0) >> 2] | 0) + 1 | 0;
       $261_1 = $180() | 0;
       HEAP32[($4_1 + 228 | 0) >> 2] = (HEAP32[($4_1 + 228 | 0) >> 2] | 0) + $261_1 | 0;
       HEAP32[($4_1 + 276 | 0) >> 2] = 1;
       label$24 : {
        label$25 : {
         if (!((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
          break label$25
         }
         HEAP32[($4_1 + 236 | 0) >> 2] = (HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 1 | 0;
         break label$24;
        }
        label$26 : {
         label$27 : {
          if (!((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break label$27
          }
          HEAP32[($4_1 + 232 | 0) >> 2] = (HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 1 | 0;
          break label$26;
         }
         label$28 : {
          label$29 : {
           if (!((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
            break label$29
           }
           HEAP32[($4_1 + 220 | 0) >> 2] = (HEAP32[($4_1 + 220 | 0) >> 2] | 0) + 1 | 0;
           break label$28;
          }
          label$30 : {
           label$31 : {
            label$32 : {
             if ((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
              break label$32
             }
             if (!((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
              break label$31
             }
            }
            HEAP32[($4_1 + 240 | 0) >> 2] = (HEAP32[($4_1 + 240 | 0) >> 2] | 0) + 1 | 0;
            break label$30;
           }
           $312_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
           label$33 : {
            label$34 : {
             if (!((HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break label$34
             }
             $321_1 = HEAP32[((HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             break label$33;
            }
            $321_1 = -1;
           }
           $323_1 = $321_1;
           label$35 : {
            label$36 : {
             if (!((HEAP32[($4_1 + 288 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break label$36
             }
             $333_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             break label$35;
            }
            $333_1 = -1;
           }
           $335_1 = $333_1;
           label$37 : {
            label$38 : {
             if (!((HEAP32[($4_1 + 264 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break label$38
             }
             $345_1 = HEAP32[((HEAP32[($4_1 + 264 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
             break label$37;
            }
            $345_1 = -1;
           }
           HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 244 | 0) >> 2] | 0;
           HEAP32[($4_1 + 56 | 0) >> 2] = $345_1;
           HEAP32[($4_1 + 52 | 0) >> 2] = $335_1;
           HEAP32[($4_1 + 48 | 0) >> 2] = $323_1;
           $396($312_1 | 0, 6394 | 0, 28531 | 0, $4_1 + 48 | 0 | 0);
           $150(5 | 0, HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 288 | 0) >> 2] | 0 | 0);
          }
         }
        }
       }
       continue label$10;
      };
     }
     label$39 : {
      if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
       break label$39
      }
      if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (5 | 0) & 1 | 0)) {
       break label$39
      }
      if (!((HEAP32[($4_1 + 224 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
       break label$39
      }
      $373_1 = 0;
      HEAP32[($4_1 + 224 | 0) >> 2] = $373_1;
      HEAP32[($4_1 + 300 | 0) >> 2] = $373_1;
      HEAP32[($4_1 + 276 | 0) >> 2] = $373_1;
      $188() | 0;
     }
     $189(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
     continue label$5;
    }
    break label$5;
   };
   label$40 : {
    if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
     break label$40
    }
    HEAP32[($4_1 + 272 | 0) >> 2] = 0;
    label$41 : {
     label$42 : {
      if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
       break label$42
      }
      if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
       break label$42
      }
      HEAP32[($4_1 + 272 | 0) >> 2] = 1;
      break label$41;
     }
     label$43 : {
      label$44 : {
       if (HEAP32[(0 + 90216 | 0) >> 2] | 0) {
        break label$44
       }
       if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
        break label$43
       }
      }
      label$45 : {
       label$46 : {
        if (HEAP32[($4_1 + 276 | 0) >> 2] | 0) {
         break label$46
        }
        if (!(HEAP32[($4_1 + 300 | 0) >> 2] | 0)) {
         break label$45
        }
       }
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
        break label$45
       }
       if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (5 | 0) & 1 | 0)) {
        break label$45
       }
       HEAP32[($4_1 + 272 | 0) >> 2] = 1;
      }
     }
    }
    label$47 : {
     if (!(HEAP32[($4_1 + 272 | 0) >> 2] | 0)) {
      break label$47
     }
     $414_1 = 0;
     HEAP32[($4_1 + 300 | 0) >> 2] = $414_1;
     HEAP32[($4_1 + 276 | 0) >> 2] = $414_1;
     label$48 : {
      if (!($188() | 0)) {
       break label$48
      }
      $189(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
      continue label$4;
     }
    }
   }
   label$49 : {
    if (!(HEAP32[($4_1 + 296 | 0) >> 2] | 0)) {
     break label$49
    }
    if (!($190() | 0)) {
     break label$49
    }
    continue label$4;
   }
   break label$4;
  };
  label$50 : {
   label$51 : {
    if (HEAP32[($4_1 + 276 | 0) >> 2] | 0) {
     break label$51
    }
    if (!(HEAP32[($4_1 + 300 | 0) >> 2] | 0)) {
     break label$50
    }
   }
   label$52 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$52
    }
    $431_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $433_1 = HEAP32[(0 + 89388 | 0) >> 2] | 0;
    $435_1 = HEAP32[(0 + 88316 | 0) >> 2] | 0;
    HEAP32[($4_1 + 184 | 0) >> 2] = 5;
    HEAP32[($4_1 + 180 | 0) >> 2] = $435_1;
    HEAP32[($4_1 + 176 | 0) >> 2] = $433_1;
    $396($431_1 | 0, 3033 | 0, 28653 | 0, $4_1 + 176 | 0 | 0);
   }
   HEAP32[($4_1 + 284 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
   label$53 : while (1) {
    $451_1 = 0;
    label$54 : {
     if (!((HEAP32[($4_1 + 284 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$54
     }
     $451_1 = (HEAP32[((HEAP32[($4_1 + 284 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$55 : {
     if (!($451_1 & 1 | 0)) {
      break label$55
     }
     $461_1 = HEAP32[($4_1 + 284 | 0) >> 2] | 0;
     HEAP32[($461_1 + 80 | 0) >> 2] = (HEAP32[($461_1 + 80 | 0) >> 2] | 0) & -536870913 | 0;
     HEAP32[($4_1 + 284 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 284 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$53;
    }
    break label$53;
   };
  }
  label$56 : {
   if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
    break label$56
   }
   if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
    break label$56
   }
   $471_1 = 0;
   HEAP32[(0 + 90328 | 0) >> 2] = HEAP32[(0 + 88140 | 0) >> 2] | 0;
   HEAP32[(0 + 88140 | 0) >> 2] = $471_1;
   $279(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, $471_1 | 0);
   HEAP32[(0 + 88140 | 0) >> 2] = HEAP32[(0 + 90328 | 0) >> 2] | 0;
  }
  label$57 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$57
   }
   $490_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $491_1 = HEAP32[($4_1 + 240 | 0) >> 2] | 0;
   $492_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
   $493_1 = HEAP32[($4_1 + 232 | 0) >> 2] | 0;
   $494_1 = HEAP32[($4_1 + 220 | 0) >> 2] | 0;
   HEAP32[($4_1 + 160 | 0) >> 2] = HEAP32[($4_1 + 228 | 0) >> 2] | 0;
   HEAP32[($4_1 + 156 | 0) >> 2] = $494_1;
   HEAP32[($4_1 + 152 | 0) >> 2] = $493_1;
   HEAP32[($4_1 + 148 | 0) >> 2] = $492_1;
   HEAP32[($4_1 + 144 | 0) >> 2] = $491_1;
   $396($490_1 | 0, 1009 | 0, 28767 | 0, $4_1 + 144 | 0 | 0);
  }
  label$58 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$58
   }
   if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (500 | 0) & 1 | 0)) {
    break label$58
   }
   $281();
  }
  global$0 = $4_1 + 304 | 0;
  return;
 }
 
 function $174($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  var $7_1 = 0, $170_1 = 0, $117_1 = 0, $151_1 = 0, $225_1 = 0, $233_1 = 0, $266_1 = 0, $315_1 = 0, $321_1 = 0, $32_1 = 0, $34_1 = 0, $38_1 = 0, $40_1 = 0, $44_1 = 0, $46_1 = 0, $48_1 = 0, $80_1 = 0, $82_1 = 0, $84_1 = 0, $107_1 = 0, $109_1 = 0, $138_1 = 0, $140_1 = 0, $142_1 = 0, $143_1 = 0, $161_1 = 0, $163_1 = 0, $165_1 = 0, $282_1 = 0, $284_1 = 0, $300_1 = 0, $302_1 = 0, $345_1 = 0, $348_1 = 0, $351_1 = 0, $353_1 = 0, $354_1 = 0, $373_1 = 0, $376_1 = 0, $379_1 = 0, $381_1 = 0, $382_1 = 0, $404_1 = 0.0, $405_1 = 0.0;
  $7_1 = global$0 - 272 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 268 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 264 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 260 | 0) >> 2] = $2_1;
  HEAPF64[($7_1 + 248 | 0) >> 3] = $3_1;
  HEAPF64[($7_1 + 240 | 0) >> 3] = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!((HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
       break label$4
      }
      if ((HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0) != (12 | 0) & 1 | 0) {
       break label$3
      }
     }
     if (!((HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
      break label$2
     }
    }
    label$5 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$5
     }
     $32_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $34_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $38_1 = (HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0;
     $40_1 = HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $44_1 = (HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0;
     $46_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $48_1 = HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = $48_1;
     HEAP32[($7_1 + 16 | 0) >> 2] = $46_1;
     HEAP32[($7_1 + 12 | 0) >> 2] = $44_1;
     HEAP32[($7_1 + 8 | 0) >> 2] = $40_1;
     HEAP32[($7_1 + 4 | 0) >> 2] = $38_1;
     HEAP32[$7_1 >> 2] = $34_1;
     $396($32_1 | 0, 3051 | 0, 28964 | 0, $7_1 | 0);
    }
    break label$1;
   }
   label$6 : {
    if (!(((HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
     break label$6
    }
    label$7 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$7
     }
     $80_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $82_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $84_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($7_1 + 40 | 0) >> 2] = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     HEAP32[($7_1 + 36 | 0) >> 2] = $84_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $82_1;
     $396($80_1 | 0, 3077 | 0, 29082 | 0, $7_1 + 32 | 0 | 0);
    }
    break label$1;
   }
   label$8 : {
    label$9 : {
     if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     if ((HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$8
     }
    }
    $107_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $109_1 = HEAP32[(0 + 90272 | 0) >> 2] | 0;
    HEAP32[($7_1 + 212 | 0) >> 2] = HEAP32[(0 + 90276 | 0) >> 2] | 0;
    HEAP32[($7_1 + 208 | 0) >> 2] = $109_1;
    $396($107_1 | 0, 6403 | 0, 29166 | 0, $7_1 + 208 | 0 | 0);
    $117_1 = 0;
    $382(5 | 0, $117_1 | 0, $117_1 | 0);
   }
   label$10 : {
    if (!(((HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
     break label$10
    }
    if (((HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
     break label$10
    }
    label$11 : {
     label$12 : {
      if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0) != (7 | 0) & 1 | 0)) {
       break label$12
      }
      $138_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $140_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $142_1 = HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $143_1 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
      HEAPF64[($7_1 + 176 | 0) >> 3] = +HEAPF64[($7_1 + 248 | 0) >> 3];
      HEAP32[($7_1 + 168 | 0) >> 2] = $143_1;
      HEAP32[($7_1 + 164 | 0) >> 2] = $142_1;
      HEAP32[($7_1 + 160 | 0) >> 2] = $140_1;
      $396($138_1 | 0, 6355 | 0, 29305 | 0, $7_1 + 160 | 0 | 0);
      $151_1 = 0;
      $382(5 | 0, $151_1 | 0, $151_1 | 0);
      break label$11;
     }
     label$13 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
       break label$13
      }
      $161_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $163_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $165_1 = HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAPF64[($7_1 + 200 | 0) >> 3] = +HEAPF64[($7_1 + 248 | 0) >> 3];
      HEAP32[($7_1 + 196 | 0) >> 2] = $165_1;
      HEAP32[($7_1 + 192 | 0) >> 2] = $163_1;
      $396($161_1 | 0, 2106 | 0, 29452 | 0, $7_1 + 192 | 0 | 0);
     }
    }
   }
   $170_1 = 0;
   HEAP32[($7_1 + 236 | 0) >> 2] = $156(48 | 0) | 0;
   HEAPF64[(HEAP32[($7_1 + 236 | 0) >> 2] | 0) >> 3] = +HEAPF64[($7_1 + 240 | 0) >> 3];
   HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($7_1 + 248 | 0) >> 3];
   HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($7_1 + 264 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 24 | 0) >> 2] = $170_1;
   HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 28 | 0) >> 2] = $170_1;
   HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 32 | 0) >> 2] = $170_1;
   HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 36 | 0) >> 2] = $170_1;
   HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
   label$14 : {
    label$15 : {
     if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0) >>> 0 > $170_1 >>> 0 & 1 | 0)) {
      break label$15
     }
     if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0) >>> 0 < 14 >>> 0 & 1 | 0)) {
      break label$15
     }
     HEAP32[($7_1 + 224 | 0) >> 2] = HEAP32[(86960 + ((HEAP32[($7_1 + 260 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     break label$14;
    }
    HEAP32[($7_1 + 224 | 0) >> 2] = HEAP32[(0 + 86960 | 0) >> 2] | 0;
   }
   label$16 : {
    label$17 : {
     if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0) >>> 0 < 10 >>> 0 & 1 | 0)) {
      break label$17
     }
     $325(87704 + 2568 | 0 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
     break label$16;
    }
    label$18 : {
     label$19 : {
      if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
       break label$19
      }
      $225_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
      HEAP32[($225_1 + 80 | 0) >> 2] = (HEAP32[($225_1 + 80 | 0) >> 2] | 0) & -1073741825 | 0 | 1073741824 | 0;
      $233_1 = $344(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($7_1 + 232 | 0) >> 2] = $233_1;
      label$20 : {
       label$21 : {
        label$22 : {
         if (!(($233_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$22
         }
         if (!((HEAP32[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
          break label$21
         }
        }
        $325(87704 + 2572 | 0 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
        break label$20;
       }
       $319(87704 + 2572 | 0 | 0, 0 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
      }
      break label$18;
     }
     label$23 : {
      label$24 : {
       if (!((HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0) == (11 | 0) & 1 | 0)) {
        break label$24
       }
       $266_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
       HEAP32[($266_1 + 80 | 0) >> 2] = (HEAP32[($266_1 + 80 | 0) >> 2] | 0) & 2147483647 | 0 | -2147483648 | 0;
       $325(87704 + 2572 | 0 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
       break label$23;
      }
      label$25 : {
       label$26 : {
        if ((HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
         break label$26
        }
        if (!((HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
         break label$25
        }
       }
       $282_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $284_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($7_1 + 148 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($7_1 + 144 | 0) >> 2] = $284_1;
       $396($282_1 | 0, 6092 | 0, 29545 | 0, $7_1 + 144 | 0 | 0);
       $150(5 | 0, HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0);
      }
      label$27 : {
       if ($338(HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0) {
        break label$27
       }
       $300_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $302_1 = HEAP32[((HEAP32[($7_1 + 268 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($7_1 + 132 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($7_1 + 128 | 0) >> 2] = $302_1;
       $396($300_1 | 0, 6093 | 0, 29653 | 0, $7_1 + 128 | 0 | 0);
       $150(5 | 0, HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0);
      }
      $315_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
      HEAP32[($315_1 + 80 | 0) >> 2] = (HEAP32[($315_1 + 80 | 0) >> 2] | 0) & 2147483647 | 0 | -2147483648 | 0;
      $321_1 = HEAP32[($7_1 + 264 | 0) >> 2] | 0;
      HEAP32[($321_1 + 80 | 0) >> 2] = (HEAP32[($321_1 + 80 | 0) >> 2] | 0) & 2147483647 | 0 | -2147483648 | 0;
      $325(87704 + 2572 | 0 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
     }
    }
   }
   label$28 : {
    if (!((HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0 >= 10 >>> 0 & 1 | 0)) {
     break label$28
    }
    label$29 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$29
     }
     $345_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $348_1 = HEAP32[((HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $351_1 = HEAP32[((HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $353_1 = HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
     $354_1 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     HEAP32[($7_1 + 64 | 0) >> 2] = $337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 60 | 0) >> 2] = $354_1;
     HEAP32[($7_1 + 56 | 0) >> 2] = $353_1;
     HEAP32[($7_1 + 52 | 0) >> 2] = $351_1;
     HEAP32[($7_1 + 48 | 0) >> 2] = $348_1;
     $396($345_1 | 0, 3044 | 0, 29754 | 0, $7_1 + 48 | 0 | 0);
    }
    break label$1;
   }
   label$30 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$30
    }
    $373_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $376_1 = HEAP32[((HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $379_1 = HEAP32[((HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $381_1 = HEAP32[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    $382_1 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
    $404_1 = +HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 3];
    $405_1 = +HEAPF64[(HEAP32[($7_1 + 236 | 0) >> 2] | 0) >> 3];
    HEAP32[($7_1 + 112 | 0) >> 2] = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
    HEAPF64[($7_1 + 104 | 0) >> 3] = $405_1;
    HEAPF64[($7_1 + 96 | 0) >> 3] = $404_1;
    HEAP32[($7_1 + 92 | 0) >> 2] = $382_1;
    HEAP32[($7_1 + 88 | 0) >> 2] = $381_1;
    HEAP32[($7_1 + 84 | 0) >> 2] = $379_1;
    HEAP32[($7_1 + 80 | 0) >> 2] = $376_1;
    $396($373_1 | 0, 3027 | 0, 29843 | 0, $7_1 + 80 | 0 | 0);
   }
  }
  global$0 = $7_1 + 272 | 0;
  return;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $27_1 = 0, $28_1 = 0, $44_1 = 0, $47_1 = 0, $61_1 = 0, $65_1 = 0, $78_1 = 0, $81_1 = 0, $97_1 = 0, $100_1 = 0, $106_1 = 0, $165_1 = 0, $171_1 = 0, $186_1 = 0, $195_1 = 0, $206_1 = 0, $253_1 = 0, $20_1 = 0, $148_1 = 0, $223_1 = 0, $225_1 = 0, $227_1 = 0, $250_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$3
    }
    $20_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($20_1 | 0, 4027 | 0, 35968 | 0, $3_1 + 16 | 0 | 0);
   }
   $27_1 = 0;
   $28_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
   HEAP32[($28_1 + 80 | 0) >> 2] = (HEAP32[($28_1 + 80 | 0) >> 2] | 0) & -8193 | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = $27_1;
   label$4 : {
    if (!((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($27_1 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$5 : {
     label$6 : while (1) {
      $44_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
      HEAP32[($3_1 + 52 | 0) >> 2] = $44_1 + 4 | 0;
      $47_1 = HEAP32[$44_1 >> 2] | 0;
      HEAP32[($3_1 + 56 | 0) >> 2] = $47_1;
      if (!(($47_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      label$7 : {
       label$8 : {
        if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$8
        }
        HEAP32[($3_1 + 28 | 0) >> 2] = 1;
        break label$7;
       }
       $61_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
       HEAP32[($61_1 + 80 | 0) >> 2] = (HEAP32[($61_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
      }
      continue label$6;
     };
    }
   }
   $65_1 = 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $65_1;
   label$9 : {
    if (!((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($65_1 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($3_1 + 44 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$10 : {
     label$11 : while (1) {
      $78_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
      HEAP32[($3_1 + 44 | 0) >> 2] = $78_1 + 4 | 0;
      $81_1 = HEAP32[$78_1 >> 2] | 0;
      HEAP32[($3_1 + 48 | 0) >> 2] = $81_1;
      if (!(($81_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$10
      }
      label$12 : {
       label$13 : {
        if (!((HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$13
        }
        $97_1 = HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        break label$12;
       }
       $97_1 = HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      }
      $100_1 = $97_1;
      HEAP32[($100_1 + 80 | 0) >> 2] = (HEAP32[($100_1 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
      continue label$11;
     };
    }
   }
   $106_1 = 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = $106_1;
   label$14 : {
    if (!((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($106_1 | 0) & 1 | 0)) {
     break label$14
    }
    HEAP32[($3_1 + 40 | 0) >> 2] = 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 36 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      label$17 : {
       label$18 : {
        if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$18
        }
        break label$17;
       }
       label$19 : {
        if (((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0) {
         break label$19
        }
        HEAP32[($3_1 + 48 | 0) >> 2] = $266() | 0;
        $148_1 = $345(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
        HEAP32[(HEAP32[($3_1 + 48 | 0) >> 2] | 0) >> 2] = $148_1;
        HEAP32[($3_1 + 32 | 0) >> 2] = (((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ ((HEAP32[($3_1 + 40 | 0) >> 2] | 0) & 1 | 0) | 0;
        label$20 : {
         label$21 : {
          if (!(HEAP32[($3_1 + 32 | 0) >> 2] | 0)) {
           break label$21
          }
          HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
          HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
          $165_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
          HEAP8[($165_1 + 16 | 0) >> 0] = HEAPU8[($165_1 + 16 | 0) >> 0] | 0 | 32 | 0;
          $171_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
          HEAP8[($171_1 + 16 | 0) >> 0] = (HEAPU8[($171_1 + 16 | 0) >> 0] | 0) & -65 | 0 | (((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 7 | 0) & 64 | 0) | 0;
          break label$20;
         }
         HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
         HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
         $186_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
         HEAP8[($186_1 + 16 | 0) >> 0] = (HEAPU8[($186_1 + 16 | 0) >> 0] | 0) & 223 | 0 | (((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 8 | 0) & 32 | 0) | 0;
         $195_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
         HEAP8[($195_1 + 16 | 0) >> 0] = HEAPU8[($195_1 + 16 | 0) >> 0] | 0 | 64 | 0;
        }
        label$22 : {
         if (!(((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 27 | 0) & 1 | 0)) {
          break label$22
         }
         if (HEAP32[($3_1 + 28 | 0) >> 2] | 0) {
          break label$22
         }
         $206_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
         HEAP8[($206_1 + 16 | 0) >> 0] = HEAPU8[($206_1 + 16 | 0) >> 0] | 0 | 2 | 0;
        }
        $325((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0);
        label$23 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
          break label$23
         }
         $223_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $225_1 = HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         $227_1 = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[($3_1 + 4 | 0) >> 2] = $227_1;
         HEAP32[$3_1 >> 2] = $225_1;
         $396($223_1 | 0, 5005 | 0, 36004 | 0, $3_1 | 0);
        }
        $325((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0);
        label$24 : {
         if (!((HEAP32[(0 + 90080 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90032 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$24
         }
         HEAP32[(0 + 90036 | 0) >> 2] = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
        }
       }
      }
      $250_1 = (HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      $253_1 = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($3_1 + 40 | 0) >> 2] = $253_1;
      HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($250_1 + ($253_1 << 2 | 0) | 0) >> 2] | 0;
      continue label$16;
     };
    }
   }
   if (!(HEAP32[($3_1 + 28 | 0) >> 2] | 0)) {
    break label$1
   }
   label$25 : {
    label$26 : while (1) {
     if (!(($332(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, 2 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$25
     }
     continue label$26;
    };
   }
  }
  global$0 = $3_1 + 64 | 0;
  return;
 }
 
 function $176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $66_1 = 0, $70_1 = 0, $716 = 0.0, $720 = 0.0, $404_1 = 0, $418_1 = 0, $472_1 = 0, $501_1 = 0, $510_1 = 0, $518_1 = 0, $524_1 = 0, $550 = 0, $568 = 0, $571 = 0, $655 = 0, $661 = 0, $46_1 = 0, $48_1 = 0, $50_1 = 0, $51_1 = 0, $127_1 = 0, $129_1 = 0, $138_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $181_1 = 0, $183_1 = 0, $185_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $218_1 = 0, $220_1 = 0, $222_1 = 0, $224_1 = 0, $225_1 = 0, $226_1 = 0, $723 = 0.0, $724 = 0.0, $276_1 = 0, $278_1 = 0, $280_1 = 0, $281_1 = 0, $282_1 = 0, $746 = 0.0, $749 = 0.0, $750 = 0.0, $754 = 0.0, $302_1 = 0, $304_1 = 0, $306_1 = 0, $307_1 = 0, $308_1 = 0, $756 = 0.0, $759 = 0.0, $760 = 0.0, $764 = 0.0, $350_1 = 0, $352_1 = 0, $354_1 = 0, $355_1 = 0, $379_1 = 0, $692 = 0, $694 = 0;
  $8_1 = global$0 - 416 | 0;
  global$0 = $8_1;
  $9_1 = 0;
  HEAP32[($8_1 + 412 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 408 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 404 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 400 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 396 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 392 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 388 | 0) >> 2] = $9_1;
  HEAP32[($8_1 + 348 | 0) >> 2] = $9_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 404 | 0) >> 2] | 0) >>> 0 > $9_1 >>> 0 & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($8_1 + 404 | 0) >> 2] | 0) >>> 0 < 14 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 340 | 0) >> 2] = HEAP32[(86960 + ((HEAP32[($8_1 + 404 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($8_1 + 340 | 0) >> 2] = HEAP32[(0 + 86960 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : {
    if (((HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0) {
     break label$4
    }
    if (!(((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
     break label$3
    }
   }
   label$5 : {
    if (HEAP32[(0 + 88264 | 0) >> 2] | 0) {
     break label$5
    }
    $46_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $48_1 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $50_1 = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $51_1 = HEAP32[($8_1 + 404 | 0) >> 2] | 0;
    HEAP32[($8_1 + 316 | 0) >> 2] = HEAP32[($8_1 + 340 | 0) >> 2] | 0;
    HEAP32[($8_1 + 312 | 0) >> 2] = $51_1;
    HEAP32[($8_1 + 308 | 0) >> 2] = $50_1;
    HEAP32[($8_1 + 304 | 0) >> 2] = $48_1;
    $396($46_1 | 0, 6226 | 0, 40561 | 0, $8_1 + 304 | 0 | 0);
    $150(5 | 0, HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
   }
   label$6 : {
    if (!(((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
     break label$6
    }
    $66_1 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
    HEAP32[($66_1 + 80 | 0) >> 2] = (HEAP32[($66_1 + 80 | 0) >> 2] | 0) & -513 | 0;
    $70_1 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
    HEAP32[($70_1 + 80 | 0) >> 2] = (HEAP32[($70_1 + 80 | 0) >> 2] | 0) & -268435457 | 0;
   }
  }
  HEAP32[(0 + 92256 | 0) >> 2] = (HEAP32[(0 + 92256 | 0) >> 2] | 0) + 1 | 0;
  label$7 : {
   if (!(HEAP32[(0 + 88176 | 0) >> 2] | 0)) {
    break label$7
   }
   if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
    break label$7
   }
   label$8 : {
    if (!((HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) > ((HEAP32[(0 + 90388 | 0) >> 2] | 0) + (HEAP32[(0 + 88176 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$8
    }
    $220();
   }
  }
  label$9 : {
   if (!((HEAP32[(0 + 90100 | 0) >> 2] | 0 | 0) >= (HEAP32[(0 + 88180 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$9
   }
   label$10 : {
    label$11 : {
     if (!((HEAP32[($8_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     label$12 : {
      if (-+HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0) {
       break label$12
      }
      if (!(+HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0)) {
       break label$11
      }
     }
     HEAP32[($8_1 + 348 | 0) >> 2] = 0;
     HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[(0 + 88232 | 0) >> 2] | 0;
     HEAP32[($8_1 + 388 | 0) >> 2] = 1;
     $127_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $129_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
     label$13 : {
      label$14 : {
       if (!(-+HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
        break label$14
       }
       $716 = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3];
       break label$13;
      }
      $716 = -+HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3];
     }
     $138_1 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $140_1 = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $141_1 = HEAP32[($8_1 + 404 | 0) >> 2] | 0;
     $142_1 = HEAP32[($8_1 + 340 | 0) >> 2] | 0;
     HEAP32[($8_1 + 256 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     HEAP32[($8_1 + 252 | 0) >> 2] = $142_1;
     HEAP32[($8_1 + 248 | 0) >> 2] = $141_1;
     HEAP32[($8_1 + 244 | 0) >> 2] = $140_1;
     HEAP32[($8_1 + 240 | 0) >> 2] = $138_1;
     HEAPF64[($8_1 + 232 | 0) >> 3] = $716;
     HEAP32[($8_1 + 224 | 0) >> 2] = $129_1;
     $396($127_1 | 0, 8075 | 0, 40697 | 0, $8_1 + 224 | 0 | 0);
     break label$10;
    }
    label$15 : {
     label$16 : {
      if ((HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$16
      }
      if (!((HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
     }
     HEAP32[($8_1 + 348 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
     HEAP32[(0 + 87832 | 0) >> 2] = 4;
     HEAP32[($8_1 + 388 | 0) >> 2] = 1;
     $181_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $183_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
     $185_1 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $187_1 = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $188_1 = HEAP32[($8_1 + 404 | 0) >> 2] | 0;
     $189_1 = HEAP32[($8_1 + 340 | 0) >> 2] | 0;
     HEAP32[($8_1 + 292 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     HEAP32[($8_1 + 288 | 0) >> 2] = $189_1;
     HEAP32[($8_1 + 284 | 0) >> 2] = $188_1;
     HEAP32[($8_1 + 280 | 0) >> 2] = $187_1;
     HEAP32[($8_1 + 276 | 0) >> 2] = $185_1;
     HEAP32[($8_1 + 272 | 0) >> 2] = $183_1;
     $396($181_1 | 0, 8076 | 0, 40810 | 0, $8_1 + 272 | 0 | 0);
    }
   }
  }
  label$17 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$17
   }
   $720 = -2.0;
   HEAPF64[($8_1 + 328 | 0) >> 3] = $720;
   HEAPF64[($8_1 + 320 | 0) >> 3] = $720;
   label$18 : {
    if (!((HEAP32[($8_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$18
    }
    HEAPF64[($8_1 + 328 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3];
    HEAPF64[($8_1 + 320 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3];
   }
   $218_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $220_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
   $222_1 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $224_1 = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $225_1 = HEAP32[($8_1 + 404 | 0) >> 2] | 0;
   $226_1 = HEAP32[($8_1 + 340 | 0) >> 2] | 0;
   $723 = +HEAPF64[($8_1 + 328 | 0) >> 3];
   $724 = +HEAPF64[($8_1 + 320 | 0) >> 3];
   HEAPF64[($8_1 + 216 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
   HEAPF64[($8_1 + 208 | 0) >> 3] = $724;
   HEAPF64[($8_1 + 200 | 0) >> 3] = $723;
   HEAP32[($8_1 + 192 | 0) >> 2] = $226_1;
   HEAP32[($8_1 + 188 | 0) >> 2] = $225_1;
   HEAP32[($8_1 + 184 | 0) >> 2] = $224_1;
   HEAP32[($8_1 + 180 | 0) >> 2] = $222_1;
   HEAP32[($8_1 + 176 | 0) >> 2] = $220_1;
   $396($218_1 | 0, 2081 | 0, 40908 | 0, $8_1 + 176 | 0 | 0);
  }
  label$19 : {
   if (HEAP32[(0 + 87716 | 0) >> 2] | 0) {
    break label$19
   }
   if (!((HEAP32[($8_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$19
   }
   HEAPF64[($8_1 + 368 | 0) >> 3] = 100.0 * +HEAPF64[(0 + 89544 | 0) >> 3];
   label$20 : {
    if (!(+HEAPF64[($8_1 + 368 | 0) >> 3] < +HEAPF64[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
     break label$20
    }
    HEAPF64[($8_1 + 368 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 8 | 0) >> 3];
   }
   label$21 : {
    if (!(+HEAPF64[($8_1 + 368 | 0) >> 3] < +HEAPF64[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
     break label$21
    }
    HEAPF64[($8_1 + 368 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 8 | 0) >> 3];
   }
   label$22 : {
    label$23 : {
     if (+HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] > +HEAPF64[($8_1 + 368 | 0) >> 3] & 1 | 0) {
      break label$23
     }
     if (!(-+HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3] > +HEAPF64[($8_1 + 368 | 0) >> 3] & 1 | 0)) {
      break label$22
     }
    }
    HEAPF64[($8_1 + 360 | 0) >> 3] = +$58(HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
    HEAPF64[($8_1 + 352 | 0) >> 3] = +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
    label$24 : {
     label$25 : {
      if (!(+HEAPF64[($8_1 + 360 | 0) >> 3] > +HEAPF64[($8_1 + 368 | 0) >> 3] & 1 | 0)) {
       break label$25
      }
      $276_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $278_1 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $280_1 = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $281_1 = HEAP32[($8_1 + 404 | 0) >> 2] | 0;
      $282_1 = HEAP32[($8_1 + 340 | 0) >> 2] | 0;
      $746 = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3];
      $749 = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] / +HEAPF64[($8_1 + 352 | 0) >> 3];
      $750 = +HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3];
      $754 = -+HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3] / +HEAPF64[($8_1 + 352 | 0) >> 3];
      HEAPF64[($8_1 + 96 | 0) >> 3] = +HEAPF64[($8_1 + 360 | 0) >> 3];
      HEAPF64[($8_1 + 88 | 0) >> 3] = $754;
      HEAPF64[($8_1 + 80 | 0) >> 3] = $750;
      HEAPF64[($8_1 + 72 | 0) >> 3] = $749;
      HEAPF64[($8_1 + 64 | 0) >> 3] = $746;
      HEAP32[($8_1 + 60 | 0) >> 2] = $282_1;
      HEAP32[($8_1 + 56 | 0) >> 2] = $281_1;
      HEAP32[($8_1 + 52 | 0) >> 2] = $280_1;
      HEAP32[($8_1 + 48 | 0) >> 2] = $278_1;
      $396($276_1 | 0, 6347 | 0, 41030 | 0, $8_1 + 48 | 0 | 0);
      break label$24;
     }
     $302_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $304_1 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $306_1 = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $307_1 = HEAP32[($8_1 + 404 | 0) >> 2] | 0;
     $308_1 = HEAP32[($8_1 + 340 | 0) >> 2] | 0;
     $756 = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3];
     $759 = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] / +HEAPF64[($8_1 + 352 | 0) >> 3];
     $760 = +HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3];
     $764 = -+HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3] / +HEAPF64[($8_1 + 352 | 0) >> 3];
     HEAPF64[($8_1 + 160 | 0) >> 3] = +HEAPF64[($8_1 + 360 | 0) >> 3];
     HEAPF64[($8_1 + 152 | 0) >> 3] = $764;
     HEAPF64[($8_1 + 144 | 0) >> 3] = $760;
     HEAPF64[($8_1 + 136 | 0) >> 3] = $759;
     HEAPF64[($8_1 + 128 | 0) >> 3] = $756;
     HEAP32[($8_1 + 124 | 0) >> 2] = $308_1;
     HEAP32[($8_1 + 120 | 0) >> 2] = $307_1;
     HEAP32[($8_1 + 116 | 0) >> 2] = $306_1;
     HEAP32[($8_1 + 112 | 0) >> 2] = $304_1;
     $396($302_1 | 0, 6348 | 0, 41220 | 0, $8_1 + 112 | 0 | 0);
    }
    $150(8 | 0, HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
   }
  }
  label$26 : {
   label$27 : {
    if ((HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$27
    }
    if (((HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
     break label$27
    }
    if (!(((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
     break label$26
    }
   }
   $350_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $352_1 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $354_1 = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $355_1 = HEAP32[($8_1 + 404 | 0) >> 2] | 0;
   HEAP32[($8_1 + 44 | 0) >> 2] = HEAP32[($8_1 + 340 | 0) >> 2] | 0;
   HEAP32[($8_1 + 40 | 0) >> 2] = $355_1;
   HEAP32[($8_1 + 36 | 0) >> 2] = $354_1;
   HEAP32[($8_1 + 32 | 0) >> 2] = $352_1;
   $396($350_1 | 0, 6099 | 0, 41417 | 0, $8_1 + 32 | 0 | 0);
   $150(5 | 0, HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
  }
  label$28 : {
   if (!(((HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0 | 0) <= ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
    break label$28
   }
   $379_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($8_1 + 16 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0;
   $396($379_1 | 0, 6227 | 0, 41533 | 0, $8_1 + 16 | 0 | 0);
   label$29 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
     break label$29
    }
    if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
     break label$29
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8079 | 0, 41653 | 0, 0 | 0);
   }
   $404_1 = 0;
   $382(7 | 0, $404_1 | 0, $404_1 | 0);
  }
  label$30 : {
   if (HEAP32[(0 + 89388 | 0) >> 2] | 0) {
    break label$30
   }
   $294();
  }
  $175(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0);
  $175(HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
  label$31 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$31
   }
   $418_1 = 0;
   $383(41694 | 0, HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0, $418_1 | 0, $418_1 | 0);
  }
  label$32 : {
   if (!((HEAP32[($8_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$32
   }
   label$33 : {
    if (!(+HEAPF64[(0 + 90152 | 0) >> 3] < +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$33
    }
    HEAPF64[(0 + 90152 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3];
   }
   label$34 : {
    if (!(+HEAPF64[(0 + 90160 | 0) >> 3] < +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$34
    }
    HEAPF64[(0 + 90160 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3];
   }
   label$35 : {
    if (!(+HEAPF64[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$35
    }
    HEAPF64[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3];
   }
   label$36 : {
    if (!(+HEAPF64[(0 + 90168 | 0) >> 3] > +HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$36
    }
    HEAPF64[(0 + 90168 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3];
   }
   label$37 : {
    if (((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0) {
     break label$37
    }
    label$38 : {
     if (+HEAPF64[(HEAP32[($8_1 + 396 | 0) >> 2] | 0) >> 3] > +HEAPF64[(0 + 89560 | 0) >> 3] & 1 | 0) {
      break label$38
     }
     if (!(+HEAPF64[(HEAP32[($8_1 + 400 | 0) >> 2] | 0) >> 3] < -+HEAPF64[(0 + 89560 | 0) >> 3] & 1 | 0)) {
      break label$37
     }
    }
    $472_1 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
    HEAP32[($472_1 + 80 | 0) >> 2] = (HEAP32[($472_1 + 80 | 0) >> 2] | 0) & -268435457 | 0 | 268435456 | 0;
    HEAP32[(0 + 92504 | 0) >> 2] = (HEAP32[(0 + 92504 | 0) >> 2] | 0) + 1 | 0;
   }
  }
  HEAP32[($8_1 + 344 | 0) >> 2] = (((HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0) + ((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0) | 0) + 1 | 0;
  label$39 : {
   label$40 : {
    if (!((HEAP32[($8_1 + 344 | 0) >> 2] | 0 | 0) >= (511 | 0) & 1 | 0)) {
     break label$40
    }
    $501_1 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
    HEAP32[($501_1 + 80 | 0) >> 2] = (HEAP32[($501_1 + 80 | 0) >> 2] | 0) & -512 | 0 | 511 | 0;
    break label$39;
   }
   $510_1 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
   HEAP32[($510_1 + 80 | 0) >> 2] = (HEAP32[($510_1 + 80 | 0) >> 2] | 0) & -512 | 0 | (((HEAP32[($8_1 + 344 | 0) >> 2] | 0) & 65535 | 0) & 511 | 0) | 0;
  }
  $518_1 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
  HEAP32[($518_1 + 80 | 0) >> 2] = (HEAP32[($518_1 + 80 | 0) >> 2] | 0) & -536870913 | 0 | 536870912 | 0;
  $524_1 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
  HEAP32[($524_1 + 80 | 0) >> 2] = (HEAP32[($524_1 + 80 | 0) >> 2] | 0) & -2097153 | 0;
  $221(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
  label$41 : {
   label$42 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
     break label$42
    }
    if (!(($337(HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$42
    }
    $222(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 392 | 0) >> 2] | 0 | 0);
    break label$41;
   }
   $550 = 0;
   HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($8_1 + 384 | 0) >> 2] = $550;
   label$43 : {
    if (!((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($550 | 0) & 1 | 0)) {
     break label$43
    }
    HEAP32[($8_1 + 380 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$44 : {
     label$45 : while (1) {
      $568 = HEAP32[($8_1 + 380 | 0) >> 2] | 0;
      HEAP32[($8_1 + 380 | 0) >> 2] = $568 + 4 | 0;
      $571 = HEAP32[$568 >> 2] | 0;
      HEAP32[($8_1 + 384 | 0) >> 2] = $571;
      if (!(($571 | 0) != (0 | 0) & 1 | 0)) {
       break label$44
      }
      HEAP32[((HEAP32[($8_1 + 384 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
      continue label$45;
     };
    }
   }
   label$46 : {
    label$47 : {
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$47
     }
     $223(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
     break label$46;
    }
    $224(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
    $225(HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 52 | 0 | 0);
   }
   $226(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
   $227(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
   label$48 : {
    if (((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
     break label$48
    }
    $228(HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
   }
  }
  label$49 : {
   label$50 : {
    if (!(((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 24 | 0) & 1 | 0)) {
     break label$50
    }
    HEAP32[(0 + 91584 | 0) >> 2] = (HEAP32[(0 + 91584 | 0) >> 2] | 0) + 1 | 0;
    break label$49;
   }
   label$51 : {
    label$52 : {
     if (((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
      break label$52
     }
     HEAP32[(0 + 91592 | 0) >> 2] = (HEAP32[(0 + 91592 | 0) >> 2] | 0) + 1 | 0;
     break label$51;
    }
    label$53 : {
     label$54 : {
      if (((HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
       break label$54
      }
      if (!(((HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
       break label$54
      }
      HEAP32[(0 + 91552 | 0) >> 2] = (HEAP32[(0 + 91552 | 0) >> 2] | 0) + 1 | 0;
      break label$53;
     }
     HEAP32[(0 + 91600 | 0) >> 2] = (HEAP32[(0 + 91600 | 0) >> 2] | 0) + 1 | 0;
    }
   }
  }
  $252(HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
  $247(HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
  $655 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
  HEAP32[($655 + 80 | 0) >> 2] = (HEAP32[($655 + 80 | 0) >> 2] | 0) & -1025 | 0 | 1024 | 0;
  $661 = HEAP32[($8_1 + 408 | 0) >> 2] | 0;
  HEAP32[($661 + 80 | 0) >> 2] = (HEAP32[($661 + 80 | 0) >> 2] | 0) & -134217729 | 0;
  $229(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 404 | 0) >> 2] | 0 | 0);
  label$55 : {
   if (!(HEAP32[($8_1 + 388 | 0) >> 2] | 0)) {
    break label$55
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8080 | 0, 41702 | 0, 0 | 0);
   HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[($8_1 + 348 | 0) >> 2] | 0;
  }
  label$56 : {
   if (!((HEAP32[($8_1 + 404 | 0) >> 2] | 0 | 0) != (13 | 0) & 1 | 0)) {
    break label$56
   }
   label$57 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$57
    }
    $692 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $694 = HEAP32[((HEAP32[($8_1 + 412 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($8_1 + 408 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[$8_1 >> 2] = $694;
    $396($692 | 0, 3076 | 0, 41738 | 0, $8_1 | 0);
   }
   $178(HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
   $230(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0);
   $193(HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
   $179(HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
  }
  $196(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0);
  global$0 = $8_1 + 416 | 0;
  return;
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $37_1 = 0, $123_1 = 0, $141_1 = 0, $160_1 = 0, $164_1 = 0, $49_1 = 0, $51_1 = 0, $53_1 = 0, $73_1 = 0, $75_1 = 0, $77_1 = 0, $79_1 = 0, $110_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 64 | 0) >> 2] = $5_1;
  HEAP32[(0 + 92256 | 0) >> 2] = (HEAP32[(0 + 92256 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!(HEAP32[(0 + 88176 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) > ((HEAP32[(0 + 90388 | 0) >> 2] | 0) + (HEAP32[(0 + 88176 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $220();
   }
  }
  label$3 : {
   if (!((HEAP32[(0 + 88256 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   $37_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
   HEAP32[(0 + 87832 | 0) >> 2] = $37_1;
   HEAP32[(0 + 90464 | 0) >> 2] = $37_1;
  }
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$4
   }
   $49_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $51_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
   $53_1 = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = $53_1;
   HEAP32[($4_1 + 32 | 0) >> 2] = $51_1;
   $396($49_1 | 0, 2030 | 0, 39224 | 0, $4_1 + 32 | 0 | 0);
  }
  label$5 : {
   if (!((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(0 + 87832 | 0) >> 2] | 0;
   HEAP32[(0 + 87832 | 0) >> 2] = 4;
   $73_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $75_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
   $77_1 = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $79_1 = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = $79_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $77_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $75_1;
   $396($73_1 | 0, 8068 | 0, 39302 | 0, $4_1 + 16 | 0 | 0);
   HEAP32[($4_1 + 68 | 0) >> 2] = 1;
  }
  label$6 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$6
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8069 | 0, 39391 | 0, 0 | 0);
   HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     $110_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $396($110_1 | 0, 8070 | 0, 39405 | 0, $4_1 | 0);
     label$9 : {
      label$10 : {
       if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       $123_1 = 0;
       break label$9;
      }
      $123_1 = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
     }
     HEAP32[($4_1 + 56 | 0) >> 2] = $123_1;
     continue label$8;
    };
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8071 | 0, 32505 | 0, 0 | 0);
  }
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$11
   }
   $141_1 = 0;
   $383(39410 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, $141_1 | 0, $141_1 | 0);
  }
  label$12 : {
   if (!(((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
    break label$12
   }
   label$13 : {
    if (HEAP32[(0 + 88264 | 0) >> 2] | 0) {
     break label$13
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6224 | 0, 39424 | 0, 0 | 0);
    $382(5 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, 0 | 0);
   }
   $160_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
   HEAP32[($160_1 + 80 | 0) >> 2] = (HEAP32[($160_1 + 80 | 0) >> 2] | 0) & -513 | 0;
   $164_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
   HEAP32[($164_1 + 80 | 0) >> 2] = (HEAP32[($164_1 + 80 | 0) >> 2] | 0) & -268435457 | 0;
  }
  label$14 : {
   if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
    break label$14
   }
   $205();
  }
  label$15 : {
   if (HEAP32[(0 + 89388 | 0) >> 2] | 0) {
    break label$15
   }
   $294();
  }
  HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $175(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
  $240(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
  $241(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
  $242(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
  label$16 : {
   if (!((HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$16
   }
   $319((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0 | 0, 0 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
  }
  label$17 : {
   if (((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
    break label$17
   }
   $228(HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
  }
  $243(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
  $229(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, 13 | 0);
  label$18 : {
   if (!(HEAP32[($4_1 + 68 | 0) >> 2] | 0)) {
    break label$18
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8072 | 0, 39519 | 0, 0 | 0);
   HEAP32[(0 + 87832 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $53_1 = 0, $71_1 = 0, $74_1 = 0, $83_1 = 0, $96_1 = 0, $99_1 = 0, $152_1 = 0, $165_1 = 0, $168_1 = 0, $13_1 = 0, $15_1 = 0, $47_1 = 0, $49_1 = 0, $112_1 = 0, $114_1 = 0, $203_1 = 0, $205_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $15_1 = HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $15_1;
   $396($13_1 | 0, 4022 | 0, 46907 | 0, $3_1 + 48 | 0 | 0);
  }
  $26_1 = $337(HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 56 | 0) >> 2] = $26_1;
  label$2 : {
   label$3 : {
    if (!(($26_1 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $174(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, 10 | 0, +(+(0 | 0)), +(1.0));
    label$4 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$4
     }
     $47_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $49_1 = HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $49_1;
     $396($47_1 | 0, 2017 | 0, 46975 | 0, $3_1 | 0);
    }
    break label$2;
   }
   $53_1 = 0;
   HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($3_1 + 72 | 0) >> 2] = $53_1;
   label$5 : {
    if (!((HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($53_1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$6 : {
     label$7 : while (1) {
      $71_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
      HEAP32[($3_1 + 68 | 0) >> 2] = $71_1 + 4 | 0;
      $74_1 = HEAP32[$71_1 >> 2] | 0;
      HEAP32[($3_1 + 72 | 0) >> 2] = $74_1;
      if (!(($74_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
      continue label$7;
     };
    }
   }
   $83_1 = 0;
   HEAP32[($3_1 + 64 | 0) >> 2] = $83_1;
   label$8 : {
    if (!((HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($83_1 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$9 : {
     label$10 : while (1) {
      $96_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
      HEAP32[($3_1 + 60 | 0) >> 2] = $96_1 + 4 | 0;
      $99_1 = HEAP32[$96_1 >> 2] | 0;
      HEAP32[($3_1 + 64 | 0) >> 2] = $99_1;
      if (!(($99_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      label$11 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$11
       }
       $112_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $114_1 = HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 32 | 0) >> 2] = $114_1;
       $396($112_1 | 0, 6360 | 0, 47042 | 0, $3_1 + 32 | 0 | 0);
       $150(5 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0);
      }
      label$12 : {
       label$13 : {
        if (((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
         break label$13
        }
        if ((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
         break label$13
        }
        if (!(((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
         break label$12
        }
       }
       continue label$10;
      }
      label$14 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
        break label$14
       }
       if (((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
        break label$14
       }
       continue label$10;
      }
      $152_1 = 0;
      HEAP32[($3_1 + 72 | 0) >> 2] = $152_1;
      label$15 : {
       if (!((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($152_1 | 0) & 1 | 0)) {
        break label$15
       }
       HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$16 : {
        label$17 : while (1) {
         $165_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
         HEAP32[($3_1 + 68 | 0) >> 2] = $165_1 + 4 | 0;
         $168_1 = HEAP32[$165_1 >> 2] | 0;
         HEAP32[($3_1 + 72 | 0) >> 2] = $168_1;
         if (!(($168_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$16
         }
         label$18 : {
          if (!((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$18
          }
          break label$16;
         }
         continue label$17;
        };
       }
      }
      label$19 : {
       if ((HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$19
       }
       $174(HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, 11 | 0, +(+(0 | 0)), +(1.0));
       label$20 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$20
        }
        $203_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $205_1 = HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $205_1;
        $396($203_1 | 0, 2018 | 0, 47148 | 0, $3_1 + 16 | 0 | 0);
       }
      }
      continue label$10;
     };
    }
   }
  }
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $18_1 = 0, $50_1 = 0, $105_1 = 0, $301_1 = 0, $303_1 = 0, $305_1 = 0, $317_1 = 0, $241_1 = 0, $243_1 = 0, $245_1 = 0, $324_1 = 0.0, $247_1 = 0, $249_1 = 0, $252_1 = 0, $275_1 = 0, $277_1 = 0, $279_1 = 0, $325_1 = 0.0, $281_1 = 0, $283_1 = 0, $314_1 = 0;
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0) {
      break label$3
     }
     if (HEAP32[(0 + 87760 | 0) >> 2] | 0) {
      break label$2
     }
    }
    break label$1;
   }
   $18_1 = 0;
   HEAP32[($3_1 + 116 | 0) >> 2] = $18_1;
   if (!((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($18_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 92 | 0) >> 2] = 0;
   HEAP32[($3_1 + 116 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 88 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      label$7 : {
       if (!((HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       $50_1 = HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$6;
      }
      $50_1 = HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 120 | 0) >> 2] = $50_1;
     label$8 : {
      label$9 : {
       label$10 : {
        if (((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
         break label$10
        }
        if ((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
         break label$10
        }
        if (((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0) {
         break label$10
        }
        if (!(((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
         break label$9
        }
       }
       break label$8;
      }
      HEAP32[($3_1 + 84 | 0) >> 2] = (HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 1 | 0;
      label$11 : {
       label$12 : while (1) {
        if (!((HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[($3_1 + 112 | 0) >> 2] = HEAP32[(((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 84 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        label$13 : {
         label$14 : {
          if (!((HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$14
          }
          $105_1 = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
          break label$13;
         }
         $105_1 = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 120 | 0) >> 2] = $105_1;
        label$15 : {
         label$16 : {
          label$17 : {
           if (((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
            break label$17
           }
           if ((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
            break label$17
           }
           if (((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0) {
            break label$17
           }
           if (!(((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
            break label$16
           }
          }
          break label$15;
         }
         label$18 : {
          if (!((HEAP32[(((HEAP32[(HEAP32[($3_1 + 116 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(((HEAP32[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$18
          }
          label$19 : {
           if (!((HEAP32[((HEAP32[(HEAP32[($3_1 + 116 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$19
           }
           HEAP32[($3_1 + 80 | 0) >> 2] = 1;
           label$20 : {
            label$21 : while (1) {
             if (!((HEAP32[($3_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$20
             }
             label$22 : {
              if (!((HEAP32[(((HEAP32[(HEAP32[($3_1 + 116 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[(((HEAP32[(HEAP32[($3_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$22
              }
              break label$20;
             }
             HEAP32[($3_1 + 80 | 0) >> 2] = (HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 1 | 0;
             continue label$21;
            };
           }
           label$23 : {
            if (!((HEAP32[($3_1 + 80 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$23
            }
            HEAP32[($3_1 + 108 | 0) >> 2] = $218(HEAP32[($3_1 + 116 | 0) >> 2] | 0 | 0, $3_1 + 104 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
            label$24 : {
             label$25 : {
              if (!((HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$25
              }
              if (!((HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$25
              }
              label$26 : {
               if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
                break label$26
               }
               $241_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
               $243_1 = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
               $245_1 = HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
               $324_1 = +HEAPF64[($3_1 + 96 | 0) >> 3];
               $247_1 = HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
               $249_1 = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
               $252_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
               HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
               HEAP32[($3_1 + 24 | 0) >> 2] = $252_1;
               HEAP32[($3_1 + 20 | 0) >> 2] = $249_1;
               HEAP32[($3_1 + 16 | 0) >> 2] = $247_1;
               HEAPF64[($3_1 + 8 | 0) >> 3] = $324_1;
               HEAP32[($3_1 + 4 | 0) >> 2] = $245_1;
               HEAP32[$3_1 >> 2] = $243_1;
               $396($241_1 | 0, 2088 | 0, 36740 | 0, $3_1 | 0);
              }
              break label$24;
             }
             label$27 : {
              if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
               break label$27
              }
              $275_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
              $277_1 = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $279_1 = HEAP32[((HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $325_1 = +HEAPF64[($3_1 + 96 | 0) >> 3];
              $281_1 = HEAP32[((HEAP32[($3_1 + 116 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
              $283_1 = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
              HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAP32[($3_1 + 52 | 0) >> 2] = $283_1;
              HEAP32[($3_1 + 48 | 0) >> 2] = $281_1;
              HEAPF64[($3_1 + 40 | 0) >> 3] = $325_1;
              HEAP32[($3_1 + 36 | 0) >> 2] = $279_1;
              HEAP32[($3_1 + 32 | 0) >> 2] = $277_1;
              $396($275_1 | 0, 2083 | 0, 36860 | 0, $3_1 + 32 | 0 | 0);
             }
            }
            $202(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 108 | 0) >> 2] | 0 | 0, 9 | 0, +(+HEAPF64[($3_1 + 96 | 0) >> 3]), HEAP32[($3_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0);
            $301_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
            $303_1 = 8;
            HEAP8[($301_1 + 16 | 0) >> 0] = HEAPU8[($301_1 + 16 | 0) >> 0] | 0 | $303_1 | 0;
            $305_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
            HEAP8[($305_1 + 16 | 0) >> 0] = HEAPU8[($305_1 + 16 | 0) >> 0] | 0 | $303_1 | 0;
           }
          }
         }
        }
        HEAP32[($3_1 + 84 | 0) >> 2] = (HEAP32[($3_1 + 84 | 0) >> 2] | 0) + 1 | 0;
        continue label$12;
       };
      }
     }
     $314_1 = (HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
     $317_1 = (HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 92 | 0) >> 2] = $317_1;
     HEAP32[($3_1 + 116 | 0) >> 2] = HEAP32[($314_1 + ($317_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$5;
    };
   }
  }
  global$0 = $3_1 + 128 | 0;
  return;
 }
 
 function $180() {
  var $2_1 = 0, $143_1 = 0, $174_1 = 0, $27_1 = 0, $47_1 = 0, $51_1 = 0, $67_1 = 0, $104_1 = 0, $152_1 = 0, $188_1 = 0, $191_1 = 0, $235_1 = 0, $13_1 = 0, $93_1 = 0, $95_1 = 0, $134_1 = 0, $136_1 = 0, $138_1 = 0, $167_1 = 0, $223_1 = 0, $225_1 = 0, $271_1 = 0, $273_1 = 0, $274_1 = 0, $276_1 = 0, $313_1 = 0;
  $2_1 = global$0 - 176 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 116 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($2_1 + 96 | 0) >> 2] = $337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
   $396($13_1 | 0, 2095 | 0, 37499 | 0, $2_1 + 96 | 0 | 0);
  }
  HEAP32[($2_1 + 108 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   label$3 : while (1) {
    $27_1 = $333(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $27_1;
    if (!(($27_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($2_1 + 160 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 168 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($2_1 + 156 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 168 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 168 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    $158(HEAP32[($2_1 + 168 | 0) >> 2] | 0 | 0, 48 | 0);
    label$4 : {
     if (!(((HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
      break label$4
     }
     continue label$3;
    }
    $47_1 = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
    HEAP32[($47_1 + 80 | 0) >> 2] = (HEAP32[($47_1 + 80 | 0) >> 2] | 0) & -1073741825 | 0;
    $51_1 = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
    HEAP32[($51_1 + 80 | 0) >> 2] = (HEAP32[($51_1 + 80 | 0) >> 2] | 0) & 2147483647 | 0;
    label$5 : {
     if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $67_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
     HEAP32[(0 + 87832 | 0) >> 2] = $67_1;
     HEAP32[(0 + 90464 | 0) >> 2] = $67_1;
    }
    label$6 : {
     label$7 : {
      if (!((HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0) == (11 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[(0 + 91688 | 0) >> 2] = (HEAP32[(0 + 91688 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($2_1 + 152 | 0) >> 2] = $256(HEAP32[($2_1 + 156 | 0) >> 2] | 0 | 0) | 0;
      label$8 : {
       if ((HEAP32[($2_1 + 152 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$8
       }
       $93_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $95_1 = HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       label$9 : {
        label$10 : {
         if (!((HEAP32[($2_1 + 156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$10
         }
         $104_1 = HEAP32[((HEAP32[($2_1 + 156 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         break label$9;
        }
        $104_1 = -1;
       }
       HEAP32[($2_1 + 20 | 0) >> 2] = $104_1;
       HEAP32[($2_1 + 16 | 0) >> 2] = $95_1;
       $396($93_1 | 0, 6097 | 0, 37575 | 0, $2_1 + 16 | 0 | 0);
       $150(5 | 0, HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 156 | 0) >> 2] | 0 | 0);
      }
      $352($2_1 + 108 | 0 | 0, HEAP32[($2_1 + 152 | 0) >> 2] | 0 | 0) | 0;
      label$11 : {
       if (!((HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       continue label$3;
      }
      label$12 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$12
       }
       $134_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $136_1 = HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $138_1 = HEAP32[((HEAP32[($2_1 + 152 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 156 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $138_1;
       HEAP32[$2_1 >> 2] = $136_1;
       $396($134_1 | 0, 2025 | 0, 37675 | 0, $2_1 | 0);
      }
      $143_1 = 0;
      $176(HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0, $143_1 | 0, $143_1 | 0, $143_1 | 0);
      HEAP32[($2_1 + 116 | 0) >> 2] = (HEAP32[($2_1 + 116 | 0) >> 2] | 0) + 1 | 0;
      break label$6;
     }
     $152_1 = $337(HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($2_1 + 172 | 0) >> 2] = $152_1;
     label$13 : {
      label$14 : {
       if ($152_1) {
        break label$14
       }
       HEAP32[(0 + 90936 | 0) >> 2] = (HEAP32[(0 + 90936 | 0) >> 2] | 0) + 1 | 0;
       label$15 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$15
        }
        $167_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($167_1 | 0, 2026 | 0, 37740 | 0, $2_1 + 80 | 0 | 0);
       }
       $174_1 = 0;
       $196(HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0, $174_1 | 0);
       HEAP32[($2_1 + 124 | 0) >> 2] = $174_1;
       label$16 : {
        if (!((HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($174_1 | 0) & 1 | 0)) {
         break label$16
        }
        HEAP32[($2_1 + 120 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
        label$17 : {
         label$18 : while (1) {
          $188_1 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
          HEAP32[($2_1 + 120 | 0) >> 2] = $188_1 + 4 | 0;
          $191_1 = HEAP32[$188_1 >> 2] | 0;
          HEAP32[($2_1 + 124 | 0) >> 2] = $191_1;
          if (!(($191_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$17
          }
          $332(HEAP32[((HEAP32[($2_1 + 124 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) | 0;
          label$19 : {
           if ((HEAP32[((HEAP32[((HEAP32[($2_1 + 124 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
            break label$19
           }
           HEAP32[(0 + 90928 | 0) >> 2] = (HEAP32[(0 + 90928 | 0) >> 2] | 0) + 1 | 0;
           label$20 : {
            if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
             break label$20
            }
            $223_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $225_1 = HEAP32[((HEAP32[($2_1 + 124 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            HEAP32[($2_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($2_1 + 64 | 0) >> 2] = $225_1;
            $396($223_1 | 0, 2027 | 0, 37803 | 0, $2_1 + 64 | 0 | 0);
           }
           $235_1 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
           HEAP8[($235_1 + 24 | 0) >> 0] = HEAPU8[($235_1 + 24 | 0) >> 0] | 0 | 4 | 0;
           $325(87704 + 2588 | 0 | 0, HEAP32[($2_1 + 124 | 0) >> 2] | 0 | 0);
          }
          continue label$18;
         };
        }
       }
       HEAP32[($2_1 + 116 | 0) >> 2] = (HEAP32[($2_1 + 116 | 0) >> 2] | 0) + 1 | 0;
       break label$13;
      }
      label$21 : {
       if (!((HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$21
       }
       HEAP32[($2_1 + 164 | 0) >> 2] = $182(HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0, $2_1 + 144 | 0 | 0, $2_1 + 136 | 0 | 0, $2_1 + 128 | 0 | 0) | 0;
       label$22 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$22
        }
        $271_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $273_1 = HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $274_1 = HEAP32[($2_1 + 172 | 0) >> 2] | 0;
        $276_1 = HEAP32[((HEAP32[($2_1 + 164 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAPF64[($2_1 + 48 | 0) >> 3] = +HEAPF64[($2_1 + 144 | 0) >> 3];
        HEAP32[($2_1 + 40 | 0) >> 2] = $276_1;
        HEAP32[($2_1 + 36 | 0) >> 2] = $274_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $273_1;
        $396($271_1 | 0, 2028 | 0, 37870 | 0, $2_1 + 32 | 0 | 0);
       }
       $176(HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0, $2_1 + 136 | 0 | 0, $2_1 + 128 | 0 | 0, 0 | 0);
       HEAP32[($2_1 + 116 | 0) >> 2] = (HEAP32[($2_1 + 116 | 0) >> 2] | 0) + 1 | 0;
       label$23 : {
        if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
         break label$23
        }
        HEAP32[(0 + 90904 | 0) >> 2] = (HEAP32[(0 + 90904 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[(0 + 90920 | 0) >> 3] = +HEAPF64[(0 + 90920 | 0) >> 3] + +HEAPF64[($2_1 + 144 | 0) >> 3];
        label$24 : {
         if (!(+HEAPF64[(0 + 90912 | 0) >> 3] < +HEAPF64[($2_1 + 144 | 0) >> 3] & 1 | 0)) {
          break label$24
         }
         HEAPF64[(0 + 90912 | 0) >> 3] = +HEAPF64[($2_1 + 144 | 0) >> 3];
        }
       }
      }
     }
    }
    continue label$3;
   };
  }
  $348($2_1 + 108 | 0 | 0);
  $313_1 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
  global$0 = $2_1 + 176 | 0;
  return $313_1 | 0;
 }
 
 function $181($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  var $6_1 = 0, $10_1 = 0, $161_1 = 0.0, $29_1 = 0, $32_1 = 0, $38_1 = 0, $51_1 = 0, $54_1 = 0, $171_1 = 0.0, $109_1 = 0, $96_1 = 0, $98_1 = 0, $100_1 = 0, $194_1 = 0.0, $195_1 = 0.0, $196_1 = 0.0, $197_1 = 0.0, $120_1 = 0, $200_1 = 0.0, $122_1 = 0, $124_1 = 0, $201_1 = 0.0, $202_1 = 0.0;
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 204 | 0) >> 2] = $0_1;
  HEAPF64[($6_1 + 192 | 0) >> 3] = $1_1;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 176 | 0) >> 3] = $3_1;
  HEAPF64[($6_1 + 96 | 0) >> 3] = 1797693134862315708145274.0e284;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($6_1 + 192 | 0) >> 3] > +HEAPF64[($6_1 + 176 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    $161_1 = +HEAPF64[($6_1 + 176 | 0) >> 3];
    break label$1;
   }
   $161_1 = +HEAPF64[($6_1 + 192 | 0) >> 3];
  }
  $10_1 = 0;
  HEAPF64[($6_1 + 136 | 0) >> 3] = $161_1;
  $50($10_1 | 0, $6_1 + 128 | 0 | 0, $6_1 + 144 | 0 | 0);
  HEAP32[($6_1 + 172 | 0) >> 2] = $10_1;
  label$3 : {
   if (!((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($10_1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($6_1 + 168 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $29_1 = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
     HEAP32[($6_1 + 168 | 0) >> 2] = $29_1 + 4 | 0;
     $32_1 = HEAP32[$29_1 >> 2] | 0;
     HEAP32[($6_1 + 172 | 0) >> 2] = $32_1;
     if (!(($32_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $38_1 = 0;
     HEAP32[($6_1 + 164 | 0) >> 2] = $38_1;
     label$6 : {
      if (!((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($38_1 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($6_1 + 160 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
      label$7 : {
       label$8 : while (1) {
        $51_1 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
        HEAP32[($6_1 + 160 | 0) >> 2] = $51_1 + 4 | 0;
        $54_1 = HEAP32[$51_1 >> 2] | 0;
        HEAP32[($6_1 + 164 | 0) >> 2] = $54_1;
        if (!(($54_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        label$9 : {
         if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0) >>> 0 > (HEAP32[($6_1 + 164 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$9
         }
         HEAPF64[($6_1 + 152 | 0) >> 3] = +$37(HEAP32[((HEAP32[($6_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 164 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
         label$10 : {
          if (!(+HEAPF64[($6_1 + 96 | 0) >> 3] > +HEAPF64[($6_1 + 152 | 0) >> 3] & 1 | 0)) {
           break label$10
          }
          HEAPF64[($6_1 + 96 | 0) >> 3] = +HEAPF64[($6_1 + 152 | 0) >> 3];
         }
        }
        continue label$8;
       };
      }
     }
     continue label$5;
    };
   }
  }
  label$11 : {
   label$12 : {
    if (!(+HEAPF64[($6_1 + 128 | 0) >> 3] < +HEAPF64[($6_1 + 144 | 0) >> 3] & 1 | 0)) {
     break label$12
    }
    $171_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
    break label$11;
   }
   $171_1 = +HEAPF64[($6_1 + 128 | 0) >> 3];
  }
  HEAPF64[($6_1 + 120 | 0) >> 3] = $171_1;
  label$13 : {
   if (!(+HEAPF64[($6_1 + 120 | 0) >> 3] < +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
    break label$13
   }
   HEAPF64[($6_1 + 120 | 0) >> 3] = +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
  }
  label$14 : {
   if (!(+HEAPF64[($6_1 + 120 | 0) >> 3] < +HEAPF64[(0 + 87728 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
    break label$14
   }
   HEAPF64[($6_1 + 120 | 0) >> 3] = +HEAPF64[(0 + 87728 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
  }
  HEAPF64[($6_1 + 112 | 0) >> 3] = +HEAPF64[($6_1 + 136 | 0) >> 3] / +HEAPF64[($6_1 + 120 | 0) >> 3];
  HEAPF64[($6_1 + 104 | 0) >> 3] = +HEAPF64[($6_1 + 96 | 0) >> 3] / +HEAPF64[($6_1 + 120 | 0) >> 3];
  label$15 : {
   if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
    break label$15
   }
   $96_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $98_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $100_1 = HEAP32[((HEAP32[($6_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $194_1 = +HEAPF64[($6_1 + 96 | 0) >> 3];
   $195_1 = +HEAPF64[($6_1 + 192 | 0) >> 3];
   $196_1 = +HEAPF64[($6_1 + 176 | 0) >> 3];
   $197_1 = +HEAPF64[($6_1 + 112 | 0) >> 3];
   HEAP32[($6_1 + 88 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   HEAPF64[($6_1 + 80 | 0) >> 3] = $197_1;
   HEAPF64[($6_1 + 72 | 0) >> 3] = $196_1;
   $109_1 = 16;
   HEAPF64[(($6_1 + 48 | 0) + $109_1 | 0) >> 3] = $195_1;
   HEAPF64[($6_1 + 56 | 0) >> 3] = $194_1;
   HEAP32[($6_1 + 52 | 0) >> 2] = $100_1;
   HEAP32[($6_1 + 48 | 0) >> 2] = $98_1;
   $396($96_1 | 0, $109_1 | 0, 30292 | 0, $6_1 + 48 | 0 | 0);
  }
  label$16 : {
   if (!(+HEAPF64[($6_1 + 112 | 0) >> 3] > 100.0 & 1 | 0)) {
    break label$16
   }
   $120_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $200_1 = +HEAPF64[($6_1 + 112 | 0) >> 3];
   $122_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $124_1 = HEAP32[((HEAP32[($6_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $201_1 = +HEAPF64[($6_1 + 96 | 0) >> 3];
   $202_1 = +HEAPF64[($6_1 + 136 | 0) >> 3];
   HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   HEAPF64[($6_1 + 24 | 0) >> 3] = $202_1;
   HEAPF64[($6_1 + 16 | 0) >> 3] = $201_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $124_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $122_1;
   HEAPF64[$6_1 >> 3] = $200_1;
   $396($120_1 | 0, 6271 | 0, 30427 | 0, $6_1 | 0);
   label$17 : {
    if (!(+HEAPF64[($6_1 + 104 | 0) >> 3] < 100.0 & 1 | 0)) {
     break label$17
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8145 | 0, 30623 | 0, 0 | 0);
   }
   label$18 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$18
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8145 | 0, 30736 | 0, 0 | 0);
   }
   label$19 : {
    if (HEAP32[(0 + 87716 | 0) >> 2] | 0) {
     break label$19
    }
    $150(8 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0);
   }
  }
  global$0 = $6_1 + 208 | 0;
  return;
 }
 
 function $182($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $130_1 = 0, $7_1 = 0, $8_1 = 0, $70_1 = 0, $83_1 = 0, $86_1 = 0, $110_1 = 0, $143_1 = 0, $146_1 = 0, $20_1 = 0, $58_1 = 0, $169_1 = 0, $193_1 = 0, $195_1 = 0, $197_1 = 0, $198_1 = 0, $199_1 = 0, $215_1 = 0.0, $216_1 = 0.0, $211_1 = 0;
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  $7_1 = 1;
  $8_1 = 0;
  HEAP32[($6_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 112 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $337(HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   $20_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($6_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($20_1 | 0, 6272 | 0, 33450 | 0, $6_1 + 64 | 0 | 0);
   $382(5 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  HEAPF64[(HEAP32[($6_1 + 120 | 0) >> 2] | 0) >> 3] = 1797693134862315708145274.0e284;
  label$2 : {
   if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) > (((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 1 | 0) + 20 | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($6_1 + 84 | 0) >> 2] = 1;
   HEAP32[(0 + 90648 | 0) >> 2] = (HEAP32[(0 + 90648 | 0) >> 2] | 0) + 1 | 0;
   label$3 : {
    if ((HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    $58_1 = $12(HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 40 | 0) >> 2] = $58_1;
   }
  }
  label$4 : {
   if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) > ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 15 | 0 | 0) & 1 | 0)) {
    break label$4
   }
   $70_1 = 0;
   HEAP32[($6_1 + 96 | 0) >> 2] = $70_1;
   label$5 : {
    if (!((HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($70_1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 92 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$6 : {
     label$7 : while (1) {
      $83_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
      HEAP32[($6_1 + 92 | 0) >> 2] = $83_1 + 4 | 0;
      $86_1 = HEAP32[$83_1 >> 2] | 0;
      HEAP32[($6_1 + 96 | 0) >> 2] = $86_1;
      if (!(($86_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      label$8 : {
       if (!((((HEAPU8[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : {
         if (!((HEAP32[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$10
         }
         $110_1 = HEAP32[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         break label$9;
        }
        $110_1 = HEAP32[((HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       }
       HEAP32[($6_1 + 108 | 0) >> 2] = $110_1;
       $219(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, $6_1 + 100 | 0 | 0, HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0);
      }
      continue label$7;
     };
    }
   }
  }
  label$11 : {
   if ((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$11
   }
   $130_1 = 0;
   HEAP32[($6_1 + 88 | 0) >> 2] = $130_1;
   HEAP32[($6_1 + 108 | 0) >> 2] = $130_1;
   label$12 : {
    if (!((HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($130_1 | 0) & 1 | 0)) {
     break label$12
    }
    HEAP32[($6_1 + 104 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$13 : {
     label$14 : while (1) {
      $143_1 = HEAP32[($6_1 + 104 | 0) >> 2] | 0;
      HEAP32[($6_1 + 104 | 0) >> 2] = $143_1 + 4 | 0;
      $146_1 = HEAP32[$143_1 >> 2] | 0;
      HEAP32[($6_1 + 108 | 0) >> 2] = $146_1;
      if (!(($146_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$13
      }
      $219(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0, $6_1 + 100 | 0 | 0, HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0);
      continue label$14;
     };
    }
   }
  }
  label$15 : {
   if ((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$15
   }
   $169_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($169_1 | 0, 6095 | 0, 33548 | 0, $6_1 + 48 | 0 | 0);
   $382(5 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$16 : {
   if (!(HEAP32[($6_1 + 84 | 0) >> 2] | 0)) {
    break label$16
   }
   +$14(HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0);
  }
  label$17 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$17
   }
   $193_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $195_1 = HEAP32[((HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $197_1 = HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $198_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
   $199_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
   $215_1 = +HEAPF64[(HEAP32[($6_1 + 120 | 0) >> 2] | 0) >> 3];
   $216_1 = +HEAPF64[(HEAP32[($6_1 + 116 | 0) >> 2] | 0) >> 3];
   HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 112 | 0) >> 2] | 0) >> 3];
   HEAPF64[($6_1 + 24 | 0) >> 3] = $216_1;
   HEAPF64[($6_1 + 16 | 0) >> 3] = $215_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $199_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $198_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $197_1;
   HEAP32[$6_1 >> 2] = $195_1;
   $396($193_1 | 0, 3002 | 0, 33614 | 0, $6_1 | 0);
  }
  $211_1 = HEAP32[($6_1 + 100 | 0) >> 2] | 0;
  global$0 = $6_1 + 128 | 0;
  return $211_1 | 0;
 }
 
 function $183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $34_1 = 0, $51_1 = 0, $87_1 = 0.0, $53_1 = 0, $76_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 88204 | 0) >> 2] | 0)) {
     break label$2
    }
    if (HEAP32[(0 + 90216 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (!(+HEAPF64[(0 + 89432 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
      break label$4
     }
     if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
      break label$3
     }
    }
    HEAPF64[($5_1 + 24 | 0) >> 3] = +$10(HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 20 | 0) >> 2] = 1;
    HEAP32[(0 + 90584 | 0) >> 2] = (HEAP32[(0 + 90584 | 0) >> 2] | 0) + 1 | 0;
    label$5 : {
     if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] > +HEAPF64[(0 + 89432 | 0) >> 3] & 1 | 0)) {
      break label$5
     }
     $34_1 = 2;
     HEAP32[(0 + 90816 | 0) >> 2] = (HEAP32[(0 + 90816 | 0) >> 2] | 0) + 1 | 0;
     $174(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, $34_1 | 0, +(+(0 | 0)), +(+HEAPF64[($5_1 + 24 | 0) >> 3]));
     label$6 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($34_1 | 0) & 1 | 0)) {
       break label$6
      }
      $51_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $87_1 = +HEAPF64[($5_1 + 24 | 0) >> 3];
      $53_1 = HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = $53_1;
      HEAPF64[$5_1 >> 3] = $87_1;
      $396($51_1 | 0, 2039 | 0, 45696 | 0, $5_1 | 0);
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = 1;
     break label$1;
    }
   }
   label$7 : {
    label$8 : {
     if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
      break label$8
     }
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
      break label$7
     }
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = $232(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 24 | 0) >> 3]), HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = $233(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 24 | 0) >> 3]), HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  }
  $76_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $76_1 | 0;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0 ? 1 : -1;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = +HEAPF64[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 3] & 1 | 0 ? 1 : -1;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0 ? 1 : -1;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = +HEAPF64[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 3] & 1 | 0 ? 1 : -1;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = +HEAPF64[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0 ? 1 : -1;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0, $29_1 = 0, $33_1 = 0, $35_1 = 0, $93_1 = 0, $95_1 = 0, $182_1 = 0.0, $183_1 = 0.0, $184_1 = 0.0, $185_1 = 0.0, $97_1 = 0, $186_1 = 0.0, $113_1 = 0, $115_1 = 0, $188_1 = 0.0, $189_1 = 0.0, $190_1 = 0.0, $117_1 = 0, $191_1 = 0.0;
  $4_1 = global$0 - 240 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 232 | 0) >> 2] = $1_1;
  label$1 : {
   if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
   HEAP32[(0 + 87832 | 0) >> 2] = $17_1;
   HEAP32[(0 + 90464 | 0) >> 2] = $17_1;
  }
  label$2 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$2
   }
   $29_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $33_1 = (HEAP32[(0 + 92256 | 0) >> 2] | 0) + 1 | 0;
   $35_1 = HEAP32[((HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 132 | 0) >> 2] = $35_1;
   HEAP32[($4_1 + 128 | 0) >> 2] = $33_1;
   $396($29_1 | 0, 3050 | 0, 38705 | 0, $4_1 + 128 | 0 | 0);
  }
  HEAP32[($4_1 + 224 | 0) >> 2] = $182(HEAP32[($4_1 + 236 | 0) >> 2] | 0 | 0, $4_1 + 200 | 0 | 0, $4_1 + 184 | 0 | 0, $4_1 + 168 | 0 | 0) | 0;
  HEAP32[($4_1 + 228 | 0) >> 2] = $182(HEAP32[($4_1 + 232 | 0) >> 2] | 0 | 0, $4_1 + 192 | 0 | 0, $4_1 + 176 | 0 | 0, $4_1 + 160 | 0 | 0) | 0;
  HEAPF64[($4_1 + 152 | 0) >> 3] = 20.0 * +HEAPF64[(0 + 89544 | 0) >> 3];
  label$3 : {
   if (!(+HEAPF64[($4_1 + 152 | 0) >> 3] < +HEAPF64[((HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
    break label$3
   }
   HEAPF64[($4_1 + 152 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 3];
  }
  label$4 : {
   if (!(+HEAPF64[($4_1 + 152 | 0) >> 3] < +HEAPF64[((HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
    break label$4
   }
   HEAPF64[($4_1 + 152 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 3];
  }
  label$5 : {
   if (!(+HEAPF64[($4_1 + 200 | 0) >> 3] > +HEAPF64[($4_1 + 152 | 0) >> 3] & 1 | 0)) {
    break label$5
   }
   if (!(+HEAPF64[($4_1 + 192 | 0) >> 3] > +HEAPF64[($4_1 + 152 | 0) >> 3] & 1 | 0)) {
    break label$5
   }
   HEAPF64[($4_1 + 144 | 0) >> 3] = +$59(HEAP32[((HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, $4_1 + 212 | 0 | 0, $4_1 + 208 | 0 | 0);
   label$6 : {
    label$7 : {
     if (!(+HEAPF64[($4_1 + 144 | 0) >> 3] > +HEAPF64[($4_1 + 152 | 0) >> 3] & 1 | 0)) {
      break label$7
     }
     $93_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $95_1 = HEAP32[((HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $182_1 = +HEAPF64[($4_1 + 184 | 0) >> 3];
     $183_1 = +HEAPF64[($4_1 + 168 | 0) >> 3];
     $184_1 = +HEAPF64[($4_1 + 144 | 0) >> 3];
     $185_1 = +HEAPF64[($4_1 + 152 | 0) >> 3];
     $97_1 = HEAP32[((HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $186_1 = +HEAPF64[($4_1 + 176 | 0) >> 3];
     HEAPF64[($4_1 + 56 | 0) >> 3] = +HEAPF64[($4_1 + 160 | 0) >> 3];
     HEAPF64[($4_1 + 48 | 0) >> 3] = $186_1;
     HEAP32[($4_1 + 40 | 0) >> 2] = $97_1;
     HEAPF64[($4_1 + 32 | 0) >> 3] = $185_1;
     HEAPF64[($4_1 + 24 | 0) >> 3] = $184_1;
     HEAPF64[($4_1 + 16 | 0) >> 3] = $183_1;
     HEAPF64[($4_1 + 8 | 0) >> 3] = $182_1;
     HEAP32[$4_1 >> 2] = $95_1;
     $396($93_1 | 0, 6417 | 0, 38758 | 0, $4_1 | 0);
     break label$6;
    }
    $113_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $115_1 = HEAP32[((HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $188_1 = +HEAPF64[($4_1 + 184 | 0) >> 3];
    $189_1 = +HEAPF64[($4_1 + 168 | 0) >> 3];
    $190_1 = +HEAPF64[($4_1 + 144 | 0) >> 3];
    $117_1 = HEAP32[((HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $191_1 = +HEAPF64[($4_1 + 176 | 0) >> 3];
    HEAPF64[($4_1 + 112 | 0) >> 3] = +HEAPF64[($4_1 + 160 | 0) >> 3];
    HEAPF64[($4_1 + 104 | 0) >> 3] = $191_1;
    HEAP32[($4_1 + 96 | 0) >> 2] = $117_1;
    HEAPF64[($4_1 + 88 | 0) >> 3] = $190_1;
    HEAPF64[($4_1 + 80 | 0) >> 3] = $189_1;
    HEAPF64[($4_1 + 72 | 0) >> 3] = $188_1;
    HEAP32[($4_1 + 64 | 0) >> 2] = $115_1;
    $396($113_1 | 0, 6418 | 0, 38992 | 0, $4_1 + 64 | 0 | 0);
   }
   $150(8 | 0, HEAP32[($4_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 232 | 0) >> 2] | 0 | 0);
  }
  label$8 : {
   label$9 : {
    if (!(+HEAPF64[($4_1 + 200 | 0) >> 3] < +HEAPF64[($4_1 + 192 | 0) >> 3] & 1 | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 220 | 0) >> 2] = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
    HEAP32[($4_1 + 216 | 0) >> 2] = HEAP32[($4_1 + 224 | 0) >> 2] | 0;
    break label$8;
   }
   HEAP32[($4_1 + 220 | 0) >> 2] = HEAP32[($4_1 + 232 | 0) >> 2] | 0;
   HEAP32[($4_1 + 216 | 0) >> 2] = HEAP32[($4_1 + 228 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 200 | 0) >> 3] = +HEAPF64[($4_1 + 192 | 0) >> 3];
   HEAPF64[($4_1 + 184 | 0) >> 3] = +HEAPF64[($4_1 + 176 | 0) >> 3];
   HEAPF64[($4_1 + 168 | 0) >> 3] = +HEAPF64[($4_1 + 160 | 0) >> 3];
  }
  $176(HEAP32[($4_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0, 5 | 0, $4_1 + 184 | 0 | 0, $4_1 + 168 | 0 | 0, 0 | 0);
  HEAP32[(0 + 92352 | 0) >> 2] = (HEAP32[(0 + 92352 | 0) >> 2] | 0) + 1 | 0;
  HEAPF64[(0 + 92360 | 0) >> 3] = +HEAPF64[(0 + 92360 | 0) >> 3] + +HEAPF64[($4_1 + 200 | 0) >> 3];
  label$10 : {
   if (!(+HEAPF64[(0 + 92368 | 0) >> 3] < +HEAPF64[($4_1 + 200 | 0) >> 3] & 1 | 0)) {
    break label$10
   }
   HEAPF64[(0 + 92368 | 0) >> 3] = +HEAPF64[($4_1 + 200 | 0) >> 3];
  }
  global$0 = $4_1 + 240 | 0;
  return;
 }
 
 function $187($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $46_1 = 0, $21_1 = 0, $23_1 = 0, $25_1 = 0, $58_1 = 0, $62_1 = 0, $64_1 = 0, $66_1 = 0, $149_1 = 0, $151_1 = 0, $264_1 = 0.0, $153_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 132 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 132 | 0) >> 2] | 0) >>> 0 < 1 >>> 0 & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0) >>> 0 > 4 >>> 0 & 1 | 0)) {
     break label$1
    }
   }
   $21_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $23_1 = HEAP32[((HEAP32[($5_1 + 140 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $25_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
   HEAP32[($5_1 + 52 | 0) >> 2] = $25_1;
   HEAP32[($5_1 + 48 | 0) >> 2] = $23_1;
   $396($21_1 | 0, 6398 | 0, 37950 | 0, $5_1 + 48 | 0 | 0);
   $150(5 | 0, HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0);
  }
  label$3 : {
   if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   $46_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
   HEAP32[(0 + 87832 | 0) >> 2] = $46_1;
   HEAP32[(0 + 90464 | 0) >> 2] = $46_1;
  }
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$4
   }
   $58_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $62_1 = (HEAP32[(0 + 92256 | 0) >> 2] | 0) + 1 | 0;
   $64_1 = HEAP32[((HEAP32[($5_1 + 140 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $66_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
   HEAP32[($5_1 + 40 | 0) >> 2] = $66_1;
   HEAP32[($5_1 + 36 | 0) >> 2] = $64_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $62_1;
   $396($58_1 | 0, 3003 | 0, 38078 | 0, $5_1 + 32 | 0 | 0);
  }
  label$5 : {
   label$6 : {
    if (((HEAP32[((HEAP32[($5_1 + 140 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
     break label$6
    }
    HEAP32[($5_1 + 128 | 0) >> 2] = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
    HEAP32[($5_1 + 136 | 0) >> 2] = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
    HEAP32[($5_1 + 140 | 0) >> 2] = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
    break label$5;
   }
   HEAP32[($5_1 + 128 | 0) >> 2] = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
  }
  HEAP32[($5_1 + 124 | 0) >> 2] = $182(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0, $5_1 + 104 | 0 | 0, $5_1 + 88 | 0 | 0, $5_1 + 72 | 0 | 0) | 0;
  HEAP32[($5_1 + 120 | 0) >> 2] = $182(HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, $5_1 + 96 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 64 | 0 | 0) | 0;
  label$7 : {
   label$8 : {
    if (!(+HEAPF64[($5_1 + 104 | 0) >> 3] < +HEAPF64[($5_1 + 96 | 0) >> 3] & 1 | 0)) {
     break label$8
    }
    HEAP32[($5_1 + 116 | 0) >> 2] = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
    HEAP32[($5_1 + 112 | 0) >> 2] = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
    break label$7;
   }
   label$9 : {
    label$10 : {
     if (!(HEAP32[(0 + 87744 | 0) >> 2] | 0)) {
      break label$10
     }
     if (((HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
      break label$10
     }
     label$11 : {
      label$12 : {
       if (!(+HEAPF64[($5_1 + 88 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
        break label$12
       }
       if (+HEAPF64[($5_1 + 72 | 0) >> 3] <= +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0) {
        break label$11
       }
      }
      if (!(+HEAPF64[($5_1 + 104 | 0) >> 3] * 1.5 < +HEAPF64[($5_1 + 96 | 0) >> 3] & 1 | 0)) {
       break label$10
      }
     }
     HEAP32[(0 + 90616 | 0) >> 2] = (HEAP32[(0 + 90616 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[(0 + 90632 | 0) >> 3] = +HEAPF64[(0 + 90632 | 0) >> 3] + +HEAPF64[($5_1 + 104 | 0) >> 3];
     label$13 : {
      if (!(+HEAPF64[(0 + 90624 | 0) >> 3] < +HEAPF64[($5_1 + 104 | 0) >> 3] & 1 | 0)) {
       break label$13
      }
      HEAPF64[(0 + 90624 | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3];
     }
     label$14 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
       break label$14
      }
      $149_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $151_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $264_1 = +HEAPF64[($5_1 + 96 | 0) >> 3];
      $153_1 = HEAP32[((HEAP32[($5_1 + 140 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 96 | 0) >> 3];
      HEAP32[($5_1 + 16 | 0) >> 2] = $153_1;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $264_1;
      HEAP32[$5_1 >> 2] = $151_1;
      $396($149_1 | 0, 2029 | 0, 38133 | 0, $5_1 | 0);
     }
     HEAP32[($5_1 + 116 | 0) >> 2] = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
     HEAP32[($5_1 + 112 | 0) >> 2] = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
     break label$9;
    }
    HEAP32[($5_1 + 116 | 0) >> 2] = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
    HEAP32[($5_1 + 112 | 0) >> 2] = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
    HEAPF64[($5_1 + 104 | 0) >> 3] = +HEAPF64[($5_1 + 96 | 0) >> 3];
    HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[($5_1 + 80 | 0) >> 3];
    HEAPF64[($5_1 + 72 | 0) >> 3] = +HEAPF64[($5_1 + 64 | 0) >> 3];
   }
  }
  $176(HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, $5_1 + 88 | 0 | 0, $5_1 + 72 | 0 | 0, 0 | 0);
  label$15 : {
   if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
    break label$15
   }
   label$16 : {
    label$17 : {
     if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$17
     }
     HEAP32[(0 + 90528 | 0) >> 2] = (HEAP32[(0 + 90528 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[(0 + 90544 | 0) >> 3] = +HEAPF64[(0 + 90544 | 0) >> 3] + +HEAPF64[($5_1 + 104 | 0) >> 3];
     label$18 : {
      if (!(+HEAPF64[(0 + 90536 | 0) >> 3] < +HEAPF64[($5_1 + 104 | 0) >> 3] & 1 | 0)) {
       break label$18
      }
      HEAPF64[(0 + 90536 | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3];
     }
     break label$16;
    }
    label$19 : {
     label$20 : {
      if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$20
      }
      HEAP32[(0 + 90720 | 0) >> 2] = (HEAP32[(0 + 90720 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[(0 + 90736 | 0) >> 3] = +HEAPF64[(0 + 90736 | 0) >> 3] + +HEAPF64[($5_1 + 104 | 0) >> 3];
      label$21 : {
       if (!(+HEAPF64[(0 + 90728 | 0) >> 3] < +HEAPF64[($5_1 + 104 | 0) >> 3] & 1 | 0)) {
        break label$21
       }
       HEAPF64[(0 + 90728 | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3];
      }
      break label$19;
     }
     label$22 : {
      label$23 : {
       if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$23
       }
       HEAP32[(0 + 90744 | 0) >> 2] = (HEAP32[(0 + 90744 | 0) >> 2] | 0) + 1 | 0;
       HEAPF64[(0 + 90760 | 0) >> 3] = +HEAPF64[(0 + 90760 | 0) >> 3] + +HEAPF64[($5_1 + 104 | 0) >> 3];
       label$24 : {
        if (!(+HEAPF64[(0 + 90752 | 0) >> 3] < +HEAPF64[($5_1 + 104 | 0) >> 3] & 1 | 0)) {
         break label$24
        }
        HEAPF64[(0 + 90752 | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3];
       }
       break label$22;
      }
      HEAP32[(0 + 90792 | 0) >> 2] = (HEAP32[(0 + 90792 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[(0 + 90808 | 0) >> 3] = +HEAPF64[(0 + 90808 | 0) >> 3] + +HEAPF64[($5_1 + 104 | 0) >> 3];
      label$25 : {
       if (!(+HEAPF64[(0 + 90800 | 0) >> 3] < +HEAPF64[($5_1 + 104 | 0) >> 3] & 1 | 0)) {
        break label$25
       }
       HEAPF64[(0 + 90800 | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3];
      }
     }
    }
   }
  }
  global$0 = $5_1 + 144 | 0;
  return;
 }
 
 function $188() {
  var $2_1 = 0, $4_1 = 0, $38_1 = 0, $56_1 = 0, $80_1 = 0, $96_1 = 0, $97_1 = 0, $113_1 = 0, $116_1 = 0, $159_1 = 0, $186_1 = 0, $221_1 = 0, $222_1 = 0, $223_1 = 0, $228_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $4_1 = 0;
  HEAP32[($2_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($2_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$3
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2101 | 0, 43605 | 0, 0 | 0);
   }
   label$4 : {
    if (!($180() | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 32 | 0) >> 2] = 1;
   }
   label$5 : while (1) {
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
    label$6 : while (1) {
     $38_1 = 0;
     label$7 : {
      if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      $38_1 = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$8 : {
      if (!($38_1 & 1 | 0)) {
       break label$8
      }
      label$9 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 29 | 0) & 1 | 0)) {
        break label$9
       }
       label$10 : {
        if (HEAP32[(0 + 87908 | 0) >> 2] | 0) {
         break label$10
        }
        $56_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        HEAP32[($56_1 + 80 | 0) >> 2] = (HEAP32[($56_1 + 80 | 0) >> 2] | 0) & -536870913 | 0;
       }
       label$11 : {
        if (!($192(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) | 0)) {
         break label$11
        }
        $193(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0);
        label$12 : {
         if (!($180() | 0)) {
          break label$12
         }
         HEAP32[($2_1 + 32 | 0) >> 2] = 1;
         continue label$5;
        }
       }
      }
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$6;
     }
     break label$6;
    };
    label$13 : {
     if (HEAP32[(0 + 87908 | 0) >> 2] | 0) {
      break label$13
     }
     HEAP32[($2_1 + 44 | 0) >> 2] = 0;
     break label$1;
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
    label$14 : while (1) {
     $80_1 = 0;
     label$15 : {
      if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$15
      }
      $80_1 = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$16 : {
      if (!($80_1 & 1 | 0)) {
       break label$16
      }
      label$17 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 29 | 0) & 1 | 0)) {
        break label$17
       }
       $96_1 = 0;
       $97_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
       HEAP32[($97_1 + 80 | 0) >> 2] = (HEAP32[($97_1 + 80 | 0) >> 2] | 0) & -536870913 | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = $96_1;
       label$18 : {
        if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($96_1 | 0) & 1 | 0)) {
         break label$18
        }
        HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
        label$19 : {
         label$20 : while (1) {
          $113_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          HEAP32[($2_1 + 20 | 0) >> 2] = $113_1 + 4 | 0;
          $116_1 = HEAP32[$113_1 >> 2] | 0;
          HEAP32[($2_1 + 24 | 0) >> 2] = $116_1;
          if (!(($116_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$19
          }
          label$21 : {
           if (!((((HEAPU8[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 3 | 0) & 1 | 0) & 255 | 0)) {
            break label$21
           }
           label$22 : {
            if (!(($194(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$22
            }
            HEAP32[($2_1 + 40 | 0) >> 2] = (HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 1 | 0;
            label$23 : {
             if (!($180() | 0)) {
              break label$23
             }
             HEAP32[($2_1 + 32 | 0) >> 2] = 1;
             continue label$5;
            }
            HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + -4 | 0;
           }
          }
          continue label$20;
         };
        }
       }
      }
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$14;
     }
     break label$14;
    };
    HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
    label$24 : while (1) {
     $159_1 = 0;
     label$25 : {
      if (!((HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$25
      }
      $159_1 = (HEAP32[(HEAP32[($2_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$26 : {
      if (!($159_1 & 1 | 0)) {
       break label$26
      }
      label$27 : {
       if (!((((HEAPU8[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 3 | 0) & 1 | 0) & 255 | 0)) {
        break label$27
       }
       if ((((HEAPU8[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
        break label$27
       }
       $186_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
       HEAP8[($186_1 + 24 | 0) >> 0] = (HEAPU8[($186_1 + 24 | 0) >> 0] | 0) & -9 | 0;
       label$28 : {
        if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$28
        }
        if (!(($195(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$28
        }
        HEAP32[($2_1 + 36 | 0) >> 2] = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + 1 | 0;
        label$29 : {
         if (!($180() | 0)) {
          break label$29
         }
         HEAP32[($2_1 + 32 | 0) >> 2] = 1;
         continue label$5;
        }
       }
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
      continue label$24;
     }
     break label$24;
    };
    break label$5;
   };
   label$30 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$30
    }
    $221_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $222_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
    $223_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $223_1;
    HEAP32[$2_1 >> 2] = $222_1;
    $396($221_1 | 0, 1014 | 0, 43688 | 0, $2_1 | 0);
   }
   HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
  }
  $228_1 = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
  global$0 = $2_1 + 48 | 0;
  return $228_1 | 0;
 }
 
 function $189($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $41_1 = 0, $57_1 = 0, $73_1 = 0, $76_1 = 0, $82_1 = 0, $86_1 = 0, $99_1 = 0, $102_1 = 0, $110_1 = 0, $133_1 = 0, $143_1 = 0, $147_1 = 0, $160_1 = 0, $164_1 = 0, $190_1 = 0, $194_1 = 0, $198_1 = 0, $227_1 = 0, $261_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4026 | 0, 34766 | 0, 0 | 0);
  }
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  label$2 : {
   if (!((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
   label$3 : while (1) {
    $41_1 = 0;
    label$4 : {
     if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $41_1 = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($41_1 & 1 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 27 | 0) & 1 | 0)) {
        break label$7
       }
       break label$6;
      }
      $57_1 = 0;
      HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
      HEAP32[($3_1 + 36 | 0) >> 2] = $57_1;
      label$8 : {
       if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($57_1 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
       label$9 : {
        label$10 : while (1) {
         $73_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
         HEAP32[($3_1 + 32 | 0) >> 2] = $73_1 + 4 | 0;
         $76_1 = HEAP32[$73_1 >> 2] | 0;
         HEAP32[($3_1 + 36 | 0) >> 2] = $76_1;
         if (!(($76_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$9
         }
         $82_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
         HEAP32[($82_1 + 80 | 0) >> 2] = (HEAP32[($82_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
         continue label$10;
        };
       }
      }
      $86_1 = 0;
      HEAP32[($3_1 + 28 | 0) >> 2] = $86_1;
      label$11 : {
       if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($86_1 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
       label$12 : {
        label$13 : while (1) {
         $99_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
         HEAP32[($3_1 + 24 | 0) >> 2] = $99_1 + 4 | 0;
         $102_1 = HEAP32[$99_1 >> 2] | 0;
         HEAP32[($3_1 + 28 | 0) >> 2] = $102_1;
         if (!(($102_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$12
         }
         $110_1 = 1;
         label$14 : {
          if (!((((HEAPU8[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> $110_1 | 0) & $110_1 | 0) & 255 | 0)) {
           break label$14
          }
          if ((((HEAPU8[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
           break label$14
          }
          continue label$13;
         }
         label$15 : {
          label$16 : {
           if (!((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$16
           }
           $133_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
           break label$15;
          }
          $133_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         }
         HEAP32[($3_1 + 36 | 0) >> 2] = $133_1;
         label$17 : {
          label$18 : {
           if (!(((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
            break label$18
           }
           $143_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
           HEAP8[($143_1 + 16 | 0) >> 0] = HEAPU8[($143_1 + 16 | 0) >> 0] | 0 | 2 | 0;
           $147_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
           HEAP8[($147_1 + 16 | 0) >> 0] = (HEAPU8[($147_1 + 16 | 0) >> 0] | 0) & -5 | 0;
           break label$17;
          }
          label$19 : {
           if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$19
           }
           $160_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
           HEAP32[($160_1 + 80 | 0) >> 2] = HEAP32[($160_1 + 80 | 0) >> 2] | 0 | 16384 | 0;
           $164_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
           HEAP8[($164_1 + 16 | 0) >> 0] = (HEAPU8[($164_1 + 16 | 0) >> 0] | 0) & 251 | 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           label$20 : {
            if (!((((HEAPU8[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 6 | 0) & 1 | 0) & 255 | 0)) {
             break label$20
            }
            if (!((((HEAPU8[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 5 | 0) & 1 | 0) & 255 | 0)) {
             break label$20
            }
            HEAP32[($3_1 + 16 | 0) >> 2] = 1;
           }
           label$21 : {
            if (!($183(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0)) {
             break label$21
            }
            $190_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
            HEAP8[($190_1 + 16 | 0) >> 0] = HEAPU8[($190_1 + 16 | 0) >> 0] | 0 | 4 | 0;
           }
           $194_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
           HEAP8[($194_1 + 16 | 0) >> 0] = HEAPU8[($194_1 + 16 | 0) >> 0] | 0 | 2 | 0;
          }
         }
         continue label$13;
        };
       }
      }
      $198_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
      HEAP32[($198_1 + 80 | 0) >> 2] = (HEAP32[($198_1 + 80 | 0) >> 2] | 0) & -134217729 | 0 | 134217728 | 0;
     }
     HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$3;
    }
    break label$3;
   };
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
  label$22 : {
   label$23 : {
    if (!(HEAP32[(0 + 87720 | 0) >> 2] | 0)) {
     break label$23
    }
    $440((HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 4 | 0, 16 | 0);
    break label$22;
   }
   $440((HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 4 | 0, 17 | 0);
  }
  $227_1 = $337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + $227_1 | 0;
  label$24 : {
   label$25 : {
    if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
     break label$25
    }
    HEAP32[(0 + 91624 | 0) >> 2] = (HEAP32[(0 + 91624 | 0) >> 2] | 0) + (HEAP32[($3_1 + 20 | 0) >> 2] | 0) | 0;
    break label$24;
   }
   HEAP32[(0 + 91608 | 0) >> 2] = (HEAP32[(0 + 91608 | 0) >> 2] | 0) + (HEAP32[($3_1 + 20 | 0) >> 2] | 0) | 0;
   label$26 : {
    if (!((HEAP32[(0 + 91616 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$26
    }
    HEAP32[(0 + 91616 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   }
  }
  label$27 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$27
   }
   $261_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   $396($261_1 | 0, 2021 | 0, 34792 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 48 | 0;
  return;
 }
 
 function $190() {
  var $2_1 = 0, $29_1 = 0, $39_1 = 0, $55_1 = 0, $65_1 = 0, $66_1 = 0, $73_1 = 0, $90_1 = 0, $93_1 = 0, $102_1 = 0, $115_1 = 0, $118_1 = 0, $124_1 = 0, $137_1 = 0, $140_1 = 0, $184_1 = 0, $194_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1015 | 0, 47210 | 0, 0 | 0);
  }
  label$2 : {
   if (HEAP32[(0 + 89388 | 0) >> 2] | 0) {
    break label$2
   }
   $294();
  }
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$3 : while (1) {
   $29_1 = 0;
   label$4 : {
    if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    $29_1 = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$5 : {
    if (!($29_1 & 1 | 0)) {
     break label$5
    }
    $39_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
    HEAP32[($39_1 + 80 | 0) >> 2] = (HEAP32[($39_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$3;
   }
   break label$3;
  };
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$6 : while (1) {
   $55_1 = 0;
   label$7 : {
    if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    $55_1 = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$8 : {
    if (!($55_1 & 1 | 0)) {
     break label$8
    }
    $65_1 = 0;
    $66_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
    HEAP32[($66_1 + 80 | 0) >> 2] = (HEAP32[($66_1 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
    $73_1 = HEAP32[(0 + 90256 | 0) >> 2] | 0;
    HEAP32[(0 + 90256 | 0) >> 2] = $73_1 + 1 | 0;
    HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 72 | 0) >> 2] = $73_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $65_1;
    label$9 : {
     if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($65_1 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$10 : {
      label$11 : while (1) {
       $90_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $90_1 + 4 | 0;
       $93_1 = HEAP32[$90_1 >> 2] | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = $93_1;
       if (!(($93_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
       continue label$11;
      };
     }
    }
    $102_1 = 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = $102_1;
    label$12 : {
     if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($102_1 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$13 : {
      label$14 : while (1) {
       $115_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $115_1 + 4 | 0;
       $118_1 = HEAP32[$115_1 >> 2] | 0;
       HEAP32[($2_1 + 16 | 0) >> 2] = $118_1;
       if (!(($118_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       $124_1 = 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = $124_1;
       label$15 : {
        if (!((HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($124_1 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
        label$16 : {
         label$17 : while (1) {
          $137_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          HEAP32[($2_1 + 20 | 0) >> 2] = $137_1 + 4 | 0;
          $140_1 = HEAP32[$137_1 >> 2] | 0;
          HEAP32[($2_1 + 24 | 0) >> 2] = $140_1;
          if (!(($140_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$16
          }
          label$18 : {
           label$19 : {
            if (((HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0) {
             break label$19
            }
            if (!((HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$18
            }
           }
           continue label$17;
          }
          label$20 : {
           if (!($183(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
            break label$20
           }
           HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
          }
          continue label$17;
         };
        }
       }
       continue label$14;
      };
     }
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$6;
   }
   break label$6;
  };
  HEAP32[(0 + 92232 | 0) >> 2] = (HEAP32[(0 + 92232 | 0) >> 2] | 0) + (HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0;
  label$21 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$21
   }
   $184_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $396($184_1 | 0, 1016 | 0, 47270 | 0, $2_1 | 0);
  }
  $194_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0;
  global$0 = $2_1 + 32 | 0;
  return $194_1 | 0;
 }
 
 function $191($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $12_1 = 0, $58_1 = 0, $71_1 = 0, $81_1 = 0, $93_1 = 0, $119_1 = 0, $129_1 = 0, $170_1 = 0, $180_1 = 0, $21_1 = 0, $22_1 = 0, $188_1 = 0.0, $38_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAPF64[($6_1 + 64 | 0) >> 3] = $1_1;
  HEAPF64[($6_1 + 56 | 0) >> 3] = $2_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[(0 + 88172 | 0) >> 2] | 0) {
     break label$2
    }
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   $12_1 = 0;
   $143($12_1 | 0, $12_1 | 0);
   $155(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
     break label$3
    }
    $377(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 27995 | 0);
   }
   $21_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $22_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
   $188_1 = +HEAPF64[($6_1 + 64 | 0) >> 3];
   HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
   HEAPF64[($6_1 + 24 | 0) >> 3] = $188_1;
   HEAP32[($6_1 + 16 | 0) >> 2] = $22_1;
   $396($21_1 | 0, 8062 | 0, 28002 | 0, $6_1 + 16 | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$4
   }
   $38_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
   $396($38_1 | 0, 2009 | 0, 28032 | 0, $6_1 | 0);
  }
  HEAPF64[(0 + 89424 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3];
  HEAPF64[(0 + 89432 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
  HEAP32[(0 + 90216 | 0) >> 2] = 1;
  label$5 : {
   if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[(0 + 90176 | 0) >> 2] = 1;
   $58_1 = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   HEAP32[(0 + 90012 | 0) >> 2] = $58_1;
   HEAP32[(0 + 90016 | 0) >> 2] = $58_1;
   HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
   label$6 : while (1) {
    $71_1 = 0;
    label$7 : {
     if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     $71_1 = (HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$8 : {
     if (!($71_1 & 1 | 0)) {
      break label$8
     }
     $81_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
     HEAP32[($81_1 + 80 | 0) >> 2] = (HEAP32[($81_1 + 80 | 0) >> 2] | 0) & -1025 | 0 | 1024 | 0;
     label$9 : {
      if (((HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
       break label$9
      }
      $93_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
      HEAP32[($93_1 + 80 | 0) >> 2] = (HEAP32[($93_1 + 80 | 0) >> 2] | 0) & -536870913 | 0 | 536870912 | 0;
     }
     HEAP32[(0 + 92008 | 0) >> 2] = (HEAP32[(0 + 92008 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$6;
    }
    break label$6;
   };
   HEAP32[(0 + 90056 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
   HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
   label$10 : while (1) {
    $119_1 = 0;
    label$11 : {
     if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     $119_1 = (HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$12 : {
     if (!($119_1 & 1 | 0)) {
      break label$12
     }
     $129_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
     HEAP8[($129_1 + 24 | 0) >> 0] = HEAPU8[($129_1 + 24 | 0) >> 0] | 0 | 16 | 0;
     HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0;
     continue label$10;
    }
    break label$10;
   };
   label$13 : {
    if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
     break label$13
    }
    label$14 : {
     if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
      break label$14
     }
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) <= (5 | 0) & 1 | 0)) {
      break label$14
     }
     $188() | 0;
    }
   }
   label$15 : {
    if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
     break label$15
    }
    if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
     break label$15
    }
    $171(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, $6_1 + 44 | 0 | 0);
   }
  }
  $172(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
  $173(0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$16 : while (1) {
   $170_1 = 0;
   label$17 : {
    if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$17
    }
    $170_1 = (HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$18 : {
    if (!($170_1 & 1 | 0)) {
     break label$18
    }
    $180_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
    HEAP32[($180_1 + 80 | 0) >> 2] = (HEAP32[($180_1 + 80 | 0) >> 2] | 0) & -536870913 | 0;
    HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$16;
   }
   break label$16;
  };
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $28_1 = 0, $41_1 = 0, $44_1 = 0, $50_1 = 0, $54_1 = 0, $67_1 = 0, $70_1 = 0, $76_1 = 0, $89_1 = 0, $92_1 = 0, $98_1 = 0, $102_1 = 0, $115_1 = 0, $118_1 = 0, $149_1 = 0, $21_1 = 0, $167_1 = 0, $183_1 = 0, $185_1 = 0, $194_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 60 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$3
    }
    $21_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($21_1 | 0, 4043 | 0, 43843 | 0, $3_1 + 32 | 0 | 0);
   }
   $28_1 = 0;
   HEAP32[($3_1 + 44 | 0) >> 2] = $28_1;
   label$4 : {
    if (!((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($28_1 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$5 : {
     label$6 : while (1) {
      $41_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
      HEAP32[($3_1 + 40 | 0) >> 2] = $41_1 + 4 | 0;
      $44_1 = HEAP32[$41_1 >> 2] | 0;
      HEAP32[($3_1 + 44 | 0) >> 2] = $44_1;
      if (!(($44_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      $50_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
      HEAP8[($50_1 + 24 | 0) >> 0] = (HEAPU8[($50_1 + 24 | 0) >> 0] | 0) & -2 | 0;
      continue label$6;
     };
    }
   }
   $54_1 = 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = $54_1;
   label$7 : {
    if (!((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($54_1 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($3_1 + 48 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$8 : {
     label$9 : while (1) {
      $67_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
      HEAP32[($3_1 + 48 | 0) >> 2] = $67_1 + 4 | 0;
      $70_1 = HEAP32[$67_1 >> 2] | 0;
      HEAP32[($3_1 + 52 | 0) >> 2] = $70_1;
      if (!(($70_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      $76_1 = 0;
      HEAP32[($3_1 + 44 | 0) >> 2] = $76_1;
      label$10 : {
       if (!((HEAP32[(HEAP32[($3_1 + 52 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($76_1 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[(HEAP32[($3_1 + 52 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
       label$11 : {
        label$12 : while (1) {
         $89_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
         HEAP32[($3_1 + 40 | 0) >> 2] = $89_1 + 4 | 0;
         $92_1 = HEAP32[$89_1 >> 2] | 0;
         HEAP32[($3_1 + 44 | 0) >> 2] = $92_1;
         if (!(($92_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$11
         }
         $98_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
         HEAP8[($98_1 + 24 | 0) >> 0] = HEAPU8[($98_1 + 24 | 0) >> 0] | 0 | 1 | 0;
         continue label$12;
        };
       }
      }
      continue label$9;
     };
    }
   }
   $102_1 = 0;
   HEAP32[($3_1 + 44 | 0) >> 2] = $102_1;
   label$13 : {
    if (!((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($102_1 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$14 : {
     label$15 : while (1) {
      $115_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
      HEAP32[($3_1 + 40 | 0) >> 2] = $115_1 + 4 | 0;
      $118_1 = HEAP32[$115_1 >> 2] | 0;
      HEAP32[($3_1 + 44 | 0) >> 2] = $118_1;
      if (!(($118_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$14
      }
      label$16 : {
       if (((HEAPU8[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0) {
        break label$16
       }
       HEAP32[($3_1 + 36 | 0) >> 2] = 1;
       HEAP32[(0 + 92032 | 0) >> 2] = (HEAP32[(0 + 92032 | 0) >> 2] | 0) + 1 | 0;
       $336(HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0;
       $332(HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0;
       label$17 : {
        label$18 : {
         if ($337(HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0) {
          break label$18
         }
         $149_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
         HEAP8[($149_1 + 24 | 0) >> 0] = HEAPU8[($149_1 + 24 | 0) >> 0] | 0 | 4 | 0;
         $325(87704 + 2588 | 0 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0);
         HEAP32[(0 + 92040 | 0) >> 2] = (HEAP32[(0 + 92040 | 0) >> 2] | 0) + 1 | 0;
         label$19 : {
          if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
           break label$19
          }
          $167_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          $396($167_1 | 0, 2036 | 0, 43912 | 0, $3_1 + 16 | 0 | 0);
         }
         break label$17;
        }
        label$20 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
          break label$20
         }
         $183_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $185_1 = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[$3_1 >> 2] = $185_1;
         $396($183_1 | 0, 3009 | 0, 43979 | 0, $3_1 | 0);
        }
       }
       HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + -4 | 0;
      }
      continue label$15;
     };
    }
   }
   HEAP32[($3_1 + 60 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  }
  $194_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  global$0 = $3_1 + 64 | 0;
  return $194_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $40_1 = 0, $53_1 = 0, $56_1 = 0, $87_1 = 0, $105_1 = 0, $108_1 = 0, $117_1 = 0, $130_1 = 0, $133_1 = 0, $13_1 = 0, $35_1 = 0, $75_1 = 0, $77_1 = 0, $164_1 = 0, $166_1 = 0, $200_1 = 0;
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 92 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($13_1 | 0, 3028 | 0, 31839 | 0, $3_1 + 64 | 0 | 0);
  }
  label$2 : {
   label$3 : {
    if (!(((HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
     break label$3
    }
    label$4 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$4
     }
     $35_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $396($35_1 | 0, 3074 | 0, 31901 | 0, $3_1 | 0);
    }
    break label$2;
   }
   $40_1 = 0;
   HEAP32[($3_1 + 80 | 0) >> 2] = $40_1;
   label$5 : {
    if (!((HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($40_1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$6 : {
     label$7 : while (1) {
      $53_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 76 | 0) >> 2] = $53_1 + 4 | 0;
      $56_1 = HEAP32[$53_1 >> 2] | 0;
      HEAP32[($3_1 + 80 | 0) >> 2] = $56_1;
      if (!(($56_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      label$8 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
        break label$8
       }
       continue label$7;
      }
      label$9 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$9
       }
       $75_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $77_1 = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 32 | 0) >> 2] = $77_1;
       $396($75_1 | 0, 6357 | 0, 31961 | 0, $3_1 + 32 | 0 | 0);
       $150(5 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 80 | 0) >> 2] | 0 | 0);
      }
      $87_1 = 0;
      HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($3_1 + 88 | 0) >> 2] = $87_1;
      label$10 : {
       if (!((HEAP32[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($87_1 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($3_1 + 84 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$11 : {
        label$12 : while (1) {
         $105_1 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
         HEAP32[($3_1 + 84 | 0) >> 2] = $105_1 + 4 | 0;
         $108_1 = HEAP32[$105_1 >> 2] | 0;
         HEAP32[($3_1 + 88 | 0) >> 2] = $108_1;
         if (!(($108_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$11
         }
         HEAP32[((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
         continue label$12;
        };
       }
      }
      $117_1 = 0;
      HEAP32[($3_1 + 88 | 0) >> 2] = $117_1;
      label$13 : {
       if (!((HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($117_1 | 0) & 1 | 0)) {
        break label$13
       }
       HEAP32[($3_1 + 84 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$14 : {
        label$15 : while (1) {
         $130_1 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
         HEAP32[($3_1 + 84 | 0) >> 2] = $130_1 + 4 | 0;
         $133_1 = HEAP32[$130_1 >> 2] | 0;
         HEAP32[($3_1 + 88 | 0) >> 2] = $133_1;
         if (!(($133_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$14
         }
         label$16 : {
          if (!((HEAP32[((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          break label$14;
         }
         continue label$15;
        };
       }
      }
      label$17 : {
       if ((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$17
       }
       label$18 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$18
        }
        $164_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $166_1 = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $166_1;
        $396($164_1 | 0, 2015 | 0, 32064 | 0, $3_1 + 16 | 0 | 0);
       }
       $174(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 80 | 0) >> 2] | 0 | 0, 11 | 0, +(+(0 | 0)), +(1.0));
       break label$2;
      }
      continue label$7;
     };
    }
   }
   if (!(($337(HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   $174(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, 10 | 0, +(+(0 | 0)), +(1.0));
   label$19 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$19
    }
    $200_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($200_1 | 0, 2016 | 0, 32123 | 0, $3_1 + 48 | 0 | 0);
   }
  }
  global$0 = $3_1 + 96 | 0;
  return;
 }
 
 function $194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $125_1 = 0, $6_1 = 0, $37_1 = 0, $55_1 = 0, $58_1 = 0, $67_1 = 0, $80_1 = 0, $83_1 = 0, $146_1 = 0, $192_1 = 0, $115_1 = 0, $117_1 = 0, $159_1 = 0, $162_1 = 0, $164_1 = 0, $166_1 = 0, $168_1 = 0, $210_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $6_1 = 0;
  HEAP32[($4_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(($337(HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$4 : {
      if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     }
     break label$2;
    }
    label$5 : {
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 76 | 0) >> 2] = 0;
     break label$1;
    }
    $37_1 = 0;
    HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($4_1 + 64 | 0) >> 2] = $37_1;
    label$6 : {
     if (!((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($37_1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$7 : {
      label$8 : while (1) {
       $55_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
       HEAP32[($4_1 + 60 | 0) >> 2] = $55_1 + 4 | 0;
       $58_1 = HEAP32[$55_1 >> 2] | 0;
       HEAP32[($4_1 + 64 | 0) >> 2] = $58_1;
       if (!(($58_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$7
       }
       HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
       continue label$8;
      };
     }
    }
    $67_1 = 0;
    HEAP32[($4_1 + 64 | 0) >> 2] = $67_1;
    label$9 : {
     if (!((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($67_1 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
     label$10 : {
      label$11 : while (1) {
       $80_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
       HEAP32[($4_1 + 60 | 0) >> 2] = $80_1 + 4 | 0;
       $83_1 = HEAP32[$80_1 >> 2] | 0;
       HEAP32[($4_1 + 64 | 0) >> 2] = $83_1;
       if (!(($83_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       label$12 : {
        if (!((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        label$13 : {
         if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$13
         }
         HEAP32[($4_1 + 76 | 0) >> 2] = 0;
         break label$1;
        }
        HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
       }
       continue label$11;
      };
     }
    }
   }
   label$14 : {
    if ((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$14
    }
    $115_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $117_1 = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = $117_1;
    $396($115_1 | 0, 6101 | 0, 44685 | 0, $4_1 + 32 | 0 | 0);
    $125_1 = 0;
    $383(44760 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0, $125_1 | 0, $125_1 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
    $382(5 | 0, $125_1 | 0, $125_1 | 0);
   }
   label$15 : {
    if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAP32[($4_1 + 48 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
    $146_1 = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 90256 | 0) >> 2] = $146_1;
    HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 72 | 0) >> 2] = $146_1;
    $214(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0, $4_1 + 48 | 0 | 0);
    label$16 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$16
     }
     $159_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $162_1 = $267(HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     $164_1 = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $166_1 = HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $168_1 = $337(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $168_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $166_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = $164_1;
     HEAP32[$4_1 >> 2] = $162_1;
     $396($159_1 | 0, 2037 | 0, 44770 | 0, $4_1 | 0);
    }
    HEAP32[(0 + 91440 | 0) >> 2] = (HEAP32[(0 + 91440 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($4_1 + 52 | 0) >> 2] = $284(HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
    $332(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0;
    $350(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0);
    $192_1 = $210(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = $192_1;
    label$17 : {
     if (!(($192_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$17
     }
     $239(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
    }
    $348($4_1 + 52 | 0 | 0);
    $348($4_1 + 48 | 0 | 0);
   }
   HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  }
  $210_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  global$0 = $4_1 + 80 | 0;
  return $210_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $21_1 = 0, $27_1 = 0, $33_1 = 0, $39_1 = 0, $14_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $396($14_1 | 0, 3008 | 0, 43772 | 0, $3_1 | 0);
  }
  $21_1 = $245(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $21_1;
  label$2 : {
   if (!(($21_1 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $27_1 = 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = $212(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, $27_1 | 0) | 0;
   $33_1 = $210(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $33_1;
   label$3 : {
    if (!(($33_1 | 0) != ($27_1 | 0) & 1 | 0)) {
     break label$3
    }
    $39_1 = 0;
    HEAP32[(0 + 92056 | 0) >> 2] = (HEAP32[(0 + 92056 | 0) >> 2] | 0) + 1 | 0;
    $239(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0, $39_1 | 0, $39_1 | 0);
   }
   $348($3_1 + 16 | 0 | 0);
   $348($3_1 + 20 | 0 | 0);
  }
  $54_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $54_1 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $57_1 = 0, $69_1 = 0, $15_1 = 0, $17_1 = 0, $50_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $17_1 = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $26_1 = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$2;
    }
    $26_1 = -1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $26_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $17_1;
   $396($15_1 | 0, 4081 | 0, 47673 | 0, $4_1 + 16 | 0 | 0);
  }
  label$4 : {
   if ((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $50_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($50_1 | 0, 6378 | 0, 47778 | 0, $4_1 | 0);
   $57_1 = 0;
   $150(5 | 0, $57_1 | 0, $57_1 | 0);
  }
  $252(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
  $299(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 87704 + 2312 | 0 | 0);
  HEAP32[(0 + 90020 | 0) >> 2] = (HEAP32[(0 + 90020 | 0) >> 2] | 0) + 1 | 0;
  $69_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($69_1 + 80 | 0) >> 2] = (HEAP32[($69_1 + 80 | 0) >> 2] | 0) & -2049 | 0 | 2048 | 0;
  HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$5 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  }
  label$6 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $197($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $47_1 = 0, $77_1 = 0, $34_1 = 0, $37_1 = 0, $38_1 = 0, $89_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  }
  label$2 : {
   label$3 : while (1) {
    if (!(($337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    label$4 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$4
     }
     $34_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $37_1 = $337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0;
     $38_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     label$5 : {
      label$6 : {
       if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       $47_1 = HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       break label$5;
      }
      $47_1 = -1;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $47_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $38_1;
     HEAP32[$5_1 >> 2] = $37_1;
     $396($34_1 | 0, 1057 | 0, 28884 | 0, $5_1 | 0);
    }
    label$7 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$7
     }
     if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
      break label$7
     }
     $281();
    }
    $198(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
    $268();
    $189(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
    $173(1 | 0, 0 | 0);
    label$8 : {
     if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
      break label$8
     }
     $278(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
    }
    $77_1 = 0;
    $142($77_1 | 0, $5_1 + 16 | 0 | 0);
    label$9 : {
     if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != ($77_1 | 0) & 1 | 0)) {
      break label$9
     }
     $89_1 = $256(HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
     HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = $89_1;
    }
    $253();
    $306(0 | 0, 1 | 0);
    label$10 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$10
     }
     if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
      break label$10
     }
     $281();
     $278(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
    }
    continue label$3;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $42_1 = 0, $56_1 = 0, $70_1 = 0, $78_1 = 0, $81_1 = 0, $89_1 = 0, $107_1 = 0, $190_1 = 0, $203_1 = 0, $206_1 = 0, $31_1 = 0, $44_1 = 0, $58_1 = 0, $132_1 = 0, $137_1 = 0, $161_1 = 0, $166_1 = 0, $221_1 = 0, $228_1 = 0, $231_1 = 0, $234_1 = 0;
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = 1;
  $294();
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $31_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $42_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$3;
    }
    $42_1 = -1;
   }
   $44_1 = $42_1;
   label$5 : {
    label$6 : {
     if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $56_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$5;
    }
    $56_1 = -1;
   }
   $58_1 = $56_1;
   label$7 : {
    label$8 : {
     if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     $70_1 = HEAP32[((HEAP32[(0 + 90056 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     break label$7;
    }
    $70_1 = -1;
   }
   HEAP32[($3_1 + 72 | 0) >> 2] = $70_1;
   HEAP32[($3_1 + 68 | 0) >> 2] = $58_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $44_1;
   $396($31_1 | 0, 6402 | 0, 38222 | 0, $3_1 + 64 | 0 | 0);
   $78_1 = 0;
   $382(5 | 0, $78_1 | 0, $78_1 | 0);
  }
  $81_1 = HEAP32[(0 + 90004 | 0) >> 2] | 0;
  HEAP32[(0 + 90012 | 0) >> 2] = $81_1;
  HEAP32[(0 + 90016 | 0) >> 2] = $81_1;
  HEAP32[(0 + 90056 | 0) >> 2] = HEAP32[(0 + 90052 | 0) >> 2] | 0;
  HEAP32[(0 + 90132 | 0) >> 2] = 1;
  label$9 : {
   label$10 : while (1) {
    $89_1 = $199() | 0;
    HEAP32[($3_1 + 104 | 0) >> 2] = $89_1;
    if (!(($89_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$9
    }
    label$11 : {
     if (!(((HEAP32[(0 + 88256 | 0) >> 2] | 0) - 1 | 0 | 0) == (HEAP32[(0 + 92256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     $107_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
     HEAP32[(0 + 87832 | 0) >> 2] = $107_1;
     HEAP32[(0 + 90464 | 0) >> 2] = $107_1;
    }
    label$12 : {
     label$13 : {
      if (!((HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[(0 + 92e3 | 0) >> 2] = (HEAP32[(0 + 92e3 | 0) >> 2] | 0) + 1 | 0;
      label$14 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
        break label$14
       }
       $132_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $137_1 = ($337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
       HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
       HEAP32[($3_1 + 32 | 0) >> 2] = $137_1;
       $396($132_1 | 0, 1050 | 0, 38350 | 0, $3_1 + 32 | 0 | 0);
      }
      $200(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0, 8 | 0);
      break label$12;
     }
     HEAP32[(0 + 91984 | 0) >> 2] = (HEAP32[(0 + 91984 | 0) >> 2] | 0) + 1 | 0;
     label$15 : {
      if (!(HEAP32[($3_1 + 76 | 0) >> 2] | 0)) {
       break label$15
      }
      label$16 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
        break label$16
       }
       $161_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $166_1 = ($337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
       HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
       HEAP32[($3_1 + 48 | 0) >> 2] = $166_1;
       $396($161_1 | 0, 1056 | 0, 38480 | 0, $3_1 + 48 | 0 | 0);
      }
     }
     HEAP32[($3_1 + 76 | 0) >> 2] = 0;
    }
    HEAP32[($3_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
    HEAP32[($3_1 + 88 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 8 | 0) >> 3];
    $158(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, 48 | 0);
    $201(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3_1 + 80 | 0) >> 3]));
    label$17 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$17
     }
     $190_1 = 0;
     HEAP32[($3_1 + 100 | 0) >> 2] = $190_1;
     label$18 : {
      if (!((HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) != ($190_1 | 0) & 1 | 0)) {
       break label$18
      }
      HEAP32[($3_1 + 96 | 0) >> 2] = (HEAP32[(0 + 90276 | 0) >> 2] | 0) + 4 | 0;
      label$19 : {
       label$20 : while (1) {
        $203_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
        HEAP32[($3_1 + 96 | 0) >> 2] = $203_1 + 4 | 0;
        $206_1 = HEAP32[$203_1 >> 2] | 0;
        HEAP32[($3_1 + 100 | 0) >> 2] = $206_1;
        if (!(($206_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$19
        }
        label$21 : {
         label$22 : {
          if (!((HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
           break label$22
          }
          $221_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          $396($221_1 | 0, 2072 | 0, 38575 | 0, $3_1 | 0);
          break label$21;
         }
         $228_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $231_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $234_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
         HEAP32[($3_1 + 20 | 0) >> 2] = $234_1;
         HEAP32[($3_1 + 16 | 0) >> 2] = $231_1;
         $396($228_1 | 0, 2084 | 0, 38646 | 0, $3_1 + 16 | 0 | 0);
        }
        continue label$20;
       };
      }
     }
    }
    $180() | 0;
    continue label$10;
   };
  }
  HEAP32[(0 + 90132 | 0) >> 2] = 0;
  global$0 = $3_1 + 112 | 0;
  return;
 }
 
 function $199() {
  var $2_1 = 0, $3_1 = 0, $55_1 = 0, $69_1 = 0, $83_1 = 0, $123_1 = 0, $124_1 = 0, $127_1 = 0, $129_1 = 0, $131_1 = 0, $148_1 = 0, $162_1 = 0, $195_1 = 0, $200_1 = 0, $44_1 = 0, $57_1 = 0, $71_1 = 0, $122_1 = 0, $125_1 = 0, $130_1 = 0, $132_1 = 0, $137_1 = 0, $150_1 = 0, $192_1 = 0, $251_1 = 0, $254_1 = 0, $257_1 = 0, $261_1 = 0, $265_1 = 0, $268_1 = 0, $271_1 = 0, $341_1 = 0.0, $286_1 = 0, $289_1 = 0, $292_1 = 0, $295_1 = 0, $298_1 = 0, $345_1 = 0.0, $309_1 = 0, $312_1 = 0, $315_1 = 0, $349_1 = 0.0, $330_1 = 0;
  $2_1 = global$0 - 176 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 160 | 0) >> 2] = -1;
  HEAPF64[($2_1 + 152 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[($2_1 + 172 | 0) >> 2] = $3_1;
  label$1 : {
   if (!((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != ($3_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($2_1 + 168 | 0) >> 2] = 0;
   HEAP32[($2_1 + 172 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 164 | 0) >> 2] = $337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($2_1 + 168 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       if ((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$4
       }
      }
      $44_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        if (!((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        $55_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        break label$6;
       }
       $55_1 = -1;
      }
      $57_1 = $55_1;
      label$8 : {
       label$9 : {
        if (!((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$9
        }
        $69_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        break label$8;
       }
       $69_1 = -1;
      }
      $71_1 = $69_1;
      label$10 : {
       label$11 : {
        if (!((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$11
        }
        $83_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$10;
       }
       $83_1 = -1;
      }
      HEAP32[($2_1 + 40 | 0) >> 2] = $83_1;
      HEAP32[($2_1 + 36 | 0) >> 2] = $71_1;
      HEAP32[($2_1 + 32 | 0) >> 2] = $57_1;
      $396($44_1 | 0, 6299 | 0, 42918 | 0, $2_1 + 32 | 0 | 0);
      $382(5 | 0, HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     label$12 : {
      label$13 : {
       label$14 : {
        if ((((HEAPU8[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
         break label$14
        }
        if (!((((HEAPU8[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
         break label$13
        }
       }
       label$15 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
         break label$15
        }
        $122_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $123_1 = HEAP32[($2_1 + 172 | 0) >> 2] | 0;
        $124_1 = HEAP32[($123_1 + 24 | 0) >> 2] | 0;
        $125_1 = HEAP32[($124_1 + 16 | 0) >> 2] | 0;
        $127_1 = 2;
        $129_1 = 1;
        $130_1 = ((HEAPU8[($124_1 + 24 | 0) >> 0] | 0) >>> $127_1 | 0) & $129_1 | 0;
        $131_1 = HEAP32[($123_1 + 28 | 0) >> 2] | 0;
        $132_1 = HEAP32[($131_1 + 16 | 0) >> 2] | 0;
        $137_1 = (((HEAPU8[($131_1 + 24 | 0) >> 0] | 0) >>> $127_1 | 0) & $129_1 | 0) & 255 | 0;
        label$16 : {
         label$17 : {
          if (!((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$17
          }
          $148_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
          break label$16;
         }
         $148_1 = -1;
        }
        $150_1 = $148_1;
        label$18 : {
         label$19 : {
          if (!((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$19
          }
          $162_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
          break label$18;
         }
         $162_1 = -1;
        }
        HEAP32[($2_1 + 20 | 0) >> 2] = $162_1;
        HEAP32[($2_1 + 16 | 0) >> 2] = $150_1;
        HEAP32[($2_1 + 12 | 0) >> 2] = $137_1;
        HEAP32[($2_1 + 8 | 0) >> 2] = $132_1;
        HEAP32[($2_1 + 4 | 0) >> 2] = $130_1;
        HEAP32[$2_1 >> 2] = $125_1;
        $396($122_1 | 0, 3030 | 0, 43034 | 0, $2_1 | 0);
       }
       $209(HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0);
       $334(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 168 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($2_1 + 168 | 0) >> 2] = (HEAP32[($2_1 + 168 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($2_1 + 164 | 0) >> 2] = (HEAP32[($2_1 + 164 | 0) >> 2] | 0) + -1 | 0;
       $158(HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0, 48 | 0);
       break label$12;
      }
      label$20 : {
       if (!(+HEAPF64[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($2_1 + 152 | 0) >> 3] & 1 | 0)) {
        break label$20
       }
       HEAPF64[($2_1 + 152 | 0) >> 3] = +HEAPF64[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3];
       HEAP32[($2_1 + 160 | 0) >> 2] = HEAP32[($2_1 + 168 | 0) >> 2] | 0;
      }
     }
     $192_1 = (HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0;
     $195_1 = (HEAP32[($2_1 + 168 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($2_1 + 168 | 0) >> 2] = $195_1;
     HEAP32[($2_1 + 172 | 0) >> 2] = HEAP32[($192_1 + ($195_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  $200_1 = 0;
  HEAP32[($2_1 + 172 | 0) >> 2] = $200_1;
  label$21 : {
   if (!((HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) >= ($200_1 | 0) & 1 | 0)) {
    break label$21
   }
   HEAP32[($2_1 + 172 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($2_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   label$22 : {
    if (!(+HEAPF64[($2_1 + 152 | 0) >> 3] / +HEAPF64[(0 + 89544 | 0) >> 3] > 100.0 & 1 | 0)) {
     break label$22
    }
    label$23 : {
     label$24 : {
      if (!((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
       break label$24
      }
      label$25 : {
       label$26 : {
        if (!((HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        if (!((HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        $251_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $254_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $257_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $261_1 = HEAP32[((HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $265_1 = HEAP32[((HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $268_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $271_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $341_1 = +HEAPF64[($2_1 + 152 | 0) >> 3];
        HEAPF64[($2_1 + 80 | 0) >> 3] = +HEAPF64[($2_1 + 152 | 0) >> 3] / +HEAPF64[(0 + 89544 | 0) >> 3];
        HEAPF64[($2_1 + 72 | 0) >> 3] = $341_1;
        HEAP32[($2_1 + 68 | 0) >> 2] = $271_1;
        HEAP32[($2_1 + 64 | 0) >> 2] = $268_1;
        HEAP32[($2_1 + 60 | 0) >> 2] = $265_1;
        HEAP32[($2_1 + 56 | 0) >> 2] = $261_1;
        HEAP32[($2_1 + 52 | 0) >> 2] = $257_1;
        HEAP32[($2_1 + 48 | 0) >> 2] = $254_1;
        $396($251_1 | 0, 6391 | 0, 43140 | 0, $2_1 + 48 | 0 | 0);
        break label$25;
       }
       $286_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $289_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       $292_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       $295_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $298_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $345_1 = +HEAPF64[($2_1 + 152 | 0) >> 3];
       HEAPF64[($2_1 + 120 | 0) >> 3] = +HEAPF64[($2_1 + 152 | 0) >> 3] / +HEAPF64[(0 + 89544 | 0) >> 3];
       HEAPF64[($2_1 + 112 | 0) >> 3] = $345_1;
       HEAP32[($2_1 + 108 | 0) >> 2] = $298_1;
       HEAP32[($2_1 + 104 | 0) >> 2] = $295_1;
       HEAP32[($2_1 + 100 | 0) >> 2] = $292_1;
       HEAP32[($2_1 + 96 | 0) >> 2] = $289_1;
       $396($286_1 | 0, 6381 | 0, 43317 | 0, $2_1 + 96 | 0 | 0);
      }
      break label$23;
     }
     $309_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $312_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $315_1 = HEAP32[((HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $349_1 = +HEAPF64[($2_1 + 152 | 0) >> 3];
     HEAPF64[($2_1 + 144 | 0) >> 3] = +HEAPF64[($2_1 + 152 | 0) >> 3] / +HEAPF64[(0 + 89544 | 0) >> 3];
     HEAPF64[($2_1 + 136 | 0) >> 3] = $349_1;
     HEAP32[($2_1 + 132 | 0) >> 2] = $315_1;
     HEAP32[($2_1 + 128 | 0) >> 2] = $312_1;
     $396($309_1 | 0, 6208 | 0, 43471 | 0, $2_1 + 128 | 0 | 0);
    }
    $382(7 | 0, 0 | 0, HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0);
   }
   $334(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) | 0;
  }
  $330_1 = HEAP32[($2_1 + 172 | 0) >> 2] | 0;
  global$0 = $2_1 + 176 | 0;
  return $330_1 | 0;
 }
 
 function $200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $53_1 = 0, $67_1 = 0, $81_1 = 0, $95_1 = 0, $109_1 = 0, $123_1 = 0, $151_1 = 0, $42_1 = 0, $55_1 = 0, $69_1 = 0, $83_1 = 0, $97_1 = 0, $111_1 = 0, $158_1 = 0.0, $148_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 48 | 0) >> 2] = 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = $337(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      label$5 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
        break label$5
       }
       $42_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       label$6 : {
        label$7 : {
         if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$7
         }
         $53_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         break label$6;
        }
        $53_1 = -1;
       }
       $55_1 = $53_1;
       label$8 : {
        label$9 : {
         if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$9
         }
         $67_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         break label$8;
        }
        $67_1 = -1;
       }
       $69_1 = $67_1;
       label$10 : {
        label$11 : {
         if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$11
         }
         $81_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         break label$10;
        }
        $81_1 = -1;
       }
       $83_1 = $81_1;
       label$12 : {
        label$13 : {
         if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$13
         }
         $95_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         break label$12;
        }
        $95_1 = -1;
       }
       $97_1 = $95_1;
       label$14 : {
        label$15 : {
         if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$15
         }
         $109_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         break label$14;
        }
        $109_1 = -1;
       }
       $111_1 = $109_1;
       label$16 : {
        label$17 : {
         if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$17
         }
         $123_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         break label$16;
        }
        $123_1 = -1;
       }
       $158_1 = +HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 3];
       HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
       HEAPF64[($4_1 + 24 | 0) >> 3] = $158_1;
       HEAP32[($4_1 + 20 | 0) >> 2] = $123_1;
       HEAP32[($4_1 + 16 | 0) >> 2] = $111_1;
       HEAP32[($4_1 + 12 | 0) >> 2] = $97_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $83_1;
       HEAP32[($4_1 + 4 | 0) >> 2] = $69_1;
       HEAP32[$4_1 >> 2] = $55_1;
       $396($42_1 | 0, 3037 | 0, 44055 | 0, $4_1 | 0);
      }
      $334(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + -1 | 0;
     }
     $148_1 = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 4 | 0;
     $151_1 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 48 | 0) >> 2] = $151_1;
     HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($148_1 + ($151_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $201($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $7_1 = 0, $91_1 = 0, $94_1 = 0, $96_1 = 0, $98_1 = 0, $122_1 = 0, $123_1 = 0, $136_1 = 0, $139_1 = 0, $190_1 = 0, $201_1 = 0, $204_1 = 0, $213_1 = 0, $226_1 = 0, $229_1 = 0, $260_1 = 0, $269_1 = 0, $286_1 = 0, $299_1 = 0, $302_1 = 0, $350_1 = 0, $351_1 = 0, $47_1 = 0, $49_1 = 0, $51_1 = 0, $52_1 = 0, $54_1 = 0, $55_1 = 0, $90_1 = 0, $92_1 = 0, $97_1 = 0, $99_1 = 0, $110_1 = 0, $112_1 = 0, $114_1 = 0, $115_1 = 0, $165_1 = 0, $167_1 = 0, $169_1 = 0, $333_1 = 0, $336_1 = 0, $338_1 = 0, $340_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  $7_1 = 0;
  HEAP32[($5_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 184 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 176 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 160 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 148 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 144 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 140 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAPF64[($5_1 + 128 | 0) >> 3] = -1797693134862315708145274.0e284;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90040 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90040 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   HEAP32[($5_1 + 148 | 0) >> 2] = 1;
  }
  HEAP32[(0 + 92256 | 0) >> 2] = (HEAP32[(0 + 92256 | 0) >> 2] | 0) + 1 | 0;
  label$3 : {
   if (!(HEAP32[($5_1 + 148 | 0) >> 2] | 0)) {
    break label$3
   }
   $47_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $49_1 = HEAP32[(0 + 92256 | 0) >> 2] | 0;
   $51_1 = HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $52_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
   $54_1 = HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $55_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
   HEAPF64[($5_1 + 104 | 0) >> 3] = +HEAPF64[($5_1 + 176 | 0) >> 3];
   HEAP32[($5_1 + 96 | 0) >> 2] = $55_1;
   HEAP32[($5_1 + 92 | 0) >> 2] = $54_1;
   HEAP32[($5_1 + 88 | 0) >> 2] = $52_1;
   HEAP32[($5_1 + 84 | 0) >> 2] = $51_1;
   HEAP32[($5_1 + 80 | 0) >> 2] = $49_1;
   $396($47_1 | 0, 2071 | 0, 44132 | 0, $5_1 + 80 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    label$6 : {
     if ((((HEAPU8[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
      break label$6
     }
     if (!((((HEAPU8[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
      break label$5
     }
    }
    label$7 : {
     label$8 : {
      if (HEAP32[($5_1 + 148 | 0) >> 2] | 0) {
       break label$8
      }
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
       break label$7
      }
     }
     $90_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $91_1 = HEAP32[($5_1 + 188 | 0) >> 2] | 0;
     $92_1 = HEAP32[($91_1 + 16 | 0) >> 2] | 0;
     $94_1 = 2;
     $96_1 = 1;
     $97_1 = ((HEAPU8[($91_1 + 24 | 0) >> 0] | 0) >>> $94_1 | 0) & $96_1 | 0;
     $98_1 = HEAP32[($5_1 + 184 | 0) >> 2] | 0;
     $99_1 = HEAP32[($98_1 + 16 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (((HEAPU8[($98_1 + 24 | 0) >> 0] | 0) >>> $94_1 | 0) & $96_1 | 0) & 255 | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $99_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $97_1;
     HEAP32[$5_1 >> 2] = $92_1;
     $396($90_1 | 0, 2072 | 0, 44228 | 0, $5_1 | 0);
    }
    break label$4;
   }
   label$9 : {
    label$10 : {
     if (!(HEAP32[($5_1 + 144 | 0) >> 2] | 0)) {
      break label$10
     }
     if (HEAP32[($5_1 + 140 | 0) >> 2] | 0) {
      break label$9
     }
    }
    $110_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $112_1 = HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $114_1 = HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $115_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
    HEAP32[($5_1 + 72 | 0) >> 2] = $115_1;
    HEAP32[($5_1 + 68 | 0) >> 2] = $114_1;
    HEAP32[($5_1 + 64 | 0) >> 2] = $112_1;
    $396($110_1 | 0, 2072 | 0, 44310 | 0, $5_1 + 64 | 0 | 0);
    $122_1 = 0;
    $382(5 | 0, $122_1 | 0, $122_1 | 0);
   }
   $123_1 = 0;
   HEAP32[($5_1 + 168 | 0) >> 2] = $123_1;
   label$11 : {
    if (!((HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($123_1 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[($5_1 + 164 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
    label$12 : {
     label$13 : while (1) {
      $136_1 = HEAP32[($5_1 + 164 | 0) >> 2] | 0;
      HEAP32[($5_1 + 164 | 0) >> 2] = $136_1 + 4 | 0;
      $139_1 = HEAP32[$136_1 >> 2] | 0;
      HEAP32[($5_1 + 168 | 0) >> 2] = $139_1;
      if (!(($139_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$12
      }
      label$14 : {
       if (!(((HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
        break label$14
       }
       label$15 : {
        label$16 : {
         if (!($342(HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0) | 0)) {
          break label$16
         }
         label$17 : {
          label$18 : {
           if (HEAP32[($5_1 + 148 | 0) >> 2] | 0) {
            break label$18
           }
           if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
            break label$17
           }
          }
          $165_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $167_1 = HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          $169_1 = HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          HEAP32[($5_1 + 20 | 0) >> 2] = $169_1;
          HEAP32[($5_1 + 16 | 0) >> 2] = $167_1;
          $396($165_1 | 0, 2070 | 0, 44434 | 0, $5_1 + 16 | 0 | 0);
         }
         $175(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
         break label$15;
        }
        $312(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0);
        $352((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0) | 0;
        $228(HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
       }
      }
      continue label$13;
     };
    }
   }
   HEAP32[($5_1 + 172 | 0) >> 2] = $212(HEAP32[($5_1 + 188 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
   label$19 : {
    if (!(HEAP32[($5_1 + 148 | 0) >> 2] | 0)) {
     break label$19
    }
    $190_1 = 0;
    HEAP32[($5_1 + 156 | 0) >> 2] = $190_1;
    label$20 : {
     if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) != ($190_1 | 0) & 1 | 0)) {
      break label$20
     }
     HEAP32[($5_1 + 152 | 0) >> 2] = (HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 4 | 0;
     label$21 : {
      label$22 : while (1) {
       $201_1 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
       HEAP32[($5_1 + 152 | 0) >> 2] = $201_1 + 4 | 0;
       $204_1 = HEAP32[$201_1 >> 2] | 0;
       HEAP32[($5_1 + 156 | 0) >> 2] = $204_1;
       if (!(($204_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$21
       }
       $134(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0);
       continue label$22;
      };
     }
    }
   }
   $213_1 = 0;
   HEAP32[($5_1 + 168 | 0) >> 2] = $213_1;
   label$23 : {
    if (!((HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($213_1 | 0) & 1 | 0)) {
     break label$23
    }
    HEAP32[($5_1 + 164 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
    label$24 : {
     label$25 : while (1) {
      $226_1 = HEAP32[($5_1 + 164 | 0) >> 2] | 0;
      HEAP32[($5_1 + 164 | 0) >> 2] = $226_1 + 4 | 0;
      $229_1 = HEAP32[$226_1 >> 2] | 0;
      HEAP32[($5_1 + 168 | 0) >> 2] = $229_1;
      if (!(($229_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$24
      }
      label$26 : {
       if (((HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
        break label$26
       }
       $270(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0) | 0;
       $352((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0) | 0;
       $228(HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
       label$27 : {
        if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$27
        }
        $252(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
        $247(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
        $260_1 = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
        HEAP32[($260_1 + 80 | 0) >> 2] = (HEAP32[($260_1 + 80 | 0) >> 2] | 0) & -1025 | 0 | 1024 | 0;
       }
      }
      continue label$25;
     };
    }
   }
   $269_1 = 0;
   $239(HEAP32[($5_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0, $269_1 | 0, $269_1 | 0);
   label$28 : {
    if (!((((HEAPU8[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
     break label$28
    }
    if ((((HEAPU8[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 5 | 0) & 1 | 0) & 255 | 0) {
     break label$28
    }
    $286_1 = 0;
    HEAP32[($5_1 + 168 | 0) >> 2] = $286_1;
    label$29 : {
     if (!((HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($286_1 | 0) & 1 | 0)) {
      break label$29
     }
     HEAP32[($5_1 + 164 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
     label$30 : {
      label$31 : while (1) {
       $299_1 = HEAP32[($5_1 + 164 | 0) >> 2] | 0;
       HEAP32[($5_1 + 164 | 0) >> 2] = $299_1 + 4 | 0;
       $302_1 = HEAP32[$299_1 >> 2] | 0;
       HEAP32[($5_1 + 168 | 0) >> 2] = $302_1;
       if (!(($302_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$30
       }
       label$32 : {
        if (((HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
         break label$32
        }
        $4(HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0, $5_1 + 120 | 0 | 0);
        label$33 : {
         if (!(+HEAPF64[($5_1 + 120 | 0) >> 3] > +HEAPF64[($5_1 + 128 | 0) >> 3] & 1 | 0)) {
          break label$33
         }
         HEAPF64[($5_1 + 128 | 0) >> 3] = +HEAPF64[($5_1 + 120 | 0) >> 3];
         HEAP32[($5_1 + 160 | 0) >> 2] = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
        }
       }
       continue label$31;
      };
     }
    }
    label$34 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$34
     }
     $333_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $336_1 = $267(HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     $338_1 = HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $340_1 = HEAP32[((HEAP32[($5_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 128 | 0) >> 3];
     HEAP32[($5_1 + 40 | 0) >> 2] = $340_1;
     HEAP32[($5_1 + 36 | 0) >> 2] = $338_1;
     HEAP32[($5_1 + 32 | 0) >> 2] = $336_1;
     $396($333_1 | 0, 2096 | 0, 44552 | 0, $5_1 + 32 | 0 | 0);
    }
    $350_1 = 0;
    $147(HEAP32[((HEAP32[($5_1 + 188 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 160 | 0) >> 2] | 0 | 0, $350_1 | 0, $350_1 | 0);
    $351_1 = HEAP32[($5_1 + 188 | 0) >> 2] | 0;
    HEAP8[($351_1 + 24 | 0) >> 0] = HEAPU8[($351_1 + 24 | 0) >> 0] | 0 | 32 | 0;
   }
   $348($5_1 + 172 | 0 | 0);
  }
  global$0 = $5_1 + 192 | 0;
  return;
 }
 
 function $202($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $27_1 = 0, $26_1 = 0, $104_1 = 0, $116_1 = 0, $153_1 = 0, $165_1 = 0, $18_1 = 0, $95_1 = 0, $106_1 = 0, $140_1 = 0, $142_1 = 0, $144_1 = 0, $155_1 = 0, $183_1 = 0.0, $169_1 = 0;
  $8_1 = global$0 - 96 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 84 | 0) >> 2] = $2_1;
  HEAPF64[($8_1 + 72 | 0) >> 3] = $3_1;
  HEAP32[($8_1 + 68 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $5_1;
  label$1 : {
   if ((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   $18_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($8_1 + 48 | 0) >> 2] = HEAP32[(0 + 90280 | 0) >> 2] | 0;
   $396($18_1 | 0, 6387 | 0, 29955 | 0, $8_1 + 48 | 0 | 0);
   $26_1 = 0;
   $382(5 | 0, $26_1 | 0, $26_1 | 0);
  }
  $27_1 = 0;
  HEAP32[($8_1 + 60 | 0) >> 2] = $156(48 | 0) | 0;
  HEAPF64[(HEAP32[($8_1 + 60 | 0) >> 2] | 0) >> 3] = 2.0;
  HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3];
  HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 2] = $27_1;
  HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 20 | 0) >> 2] = $27_1;
  HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($8_1 + 92 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($8_1 + 88 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($8_1 + 84 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($8_1 + 84 | 0) >> 2] | 0) >>> 0 > $27_1 >>> 0 & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[($8_1 + 84 | 0) >> 2] | 0) >>> 0 < 14 >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($8_1 + 52 | 0) >> 2] = HEAP32[(86960 + ((HEAP32[($8_1 + 84 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($8_1 + 52 | 0) >> 2] = HEAP32[(0 + 86960 | 0) >> 2] | 0;
  }
  label$4 : {
   if (!((HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
    break label$4
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     if (!((HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
    }
    $95_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$7 : {
     label$8 : {
      if (!((HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      $104_1 = HEAP32[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      break label$7;
     }
     $104_1 = -1;
    }
    $106_1 = $104_1;
    label$9 : {
     label$10 : {
      if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$10
      }
      $116_1 = HEAP32[((HEAP32[($8_1 + 64 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      break label$9;
     }
     $116_1 = -1;
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = $116_1;
    HEAP32[($8_1 + 32 | 0) >> 2] = $106_1;
    $396($95_1 | 0, 6106 | 0, 30069 | 0, $8_1 + 32 | 0 | 0);
    $382(5 | 0, 0 | 0, HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0);
   }
  }
  $325(87704 + 2576 | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0);
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$11
   }
   $140_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $142_1 = HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $144_1 = HEAP32[((HEAP32[($8_1 + 88 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     if (!((HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$13
     }
     $153_1 = HEAP32[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
     break label$12;
    }
    $153_1 = -1;
   }
   $155_1 = $153_1;
   label$14 : {
    label$15 : {
     if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$15
     }
     $165_1 = HEAP32[((HEAP32[($8_1 + 64 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
     break label$14;
    }
    $165_1 = -1;
   }
   $183_1 = +HEAPF64[($8_1 + 72 | 0) >> 3];
   $169_1 = HEAP32[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
   HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
   HEAP32[($8_1 + 24 | 0) >> 2] = $169_1;
   HEAPF64[($8_1 + 16 | 0) >> 3] = $183_1;
   HEAP32[($8_1 + 12 | 0) >> 2] = $165_1;
   HEAP32[($8_1 + 8 | 0) >> 2] = $155_1;
   HEAP32[($8_1 + 4 | 0) >> 2] = $144_1;
   HEAP32[$8_1 >> 2] = $142_1;
   $396($140_1 | 0, 3034 | 0, 30175 | 0, $8_1 | 0);
  }
  global$0 = $8_1 + 96 | 0;
  return;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0, $31_1 = 0, $44_1 = 0, $47_1 = 0, $68_1 = 0, $80_1 = 0, $93_1 = 0, $98_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $13_1 = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 90260 | 0) >> 2] = $13_1;
  HEAP32[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] = $13_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!(((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 22 | 0) & 1 | 0)) {
       break label$4
      }
      break label$3;
     }
     $31_1 = 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $31_1;
     label$5 : {
      if (!((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($31_1 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
      label$6 : {
       label$7 : while (1) {
        $44_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $44_1 + 4 | 0;
        $47_1 = HEAP32[$44_1 >> 2] | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $47_1;
        if (!(($47_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        label$8 : {
         if (!((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$8
         }
         $325($3_1 + 8 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0);
         HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
         $68_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         HEAP8[($68_1 + 24 | 0) >> 0] = (HEAPU8[($68_1 + 24 | 0) >> 0] | 0) & -2 | 0;
        }
        continue label$7;
       };
      }
     }
    }
    label$9 : {
     label$10 : {
      if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      $80_1 = 0;
      break label$9;
     }
     $80_1 = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = $80_1;
    continue label$2;
   };
  }
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$11
   }
   $93_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = $337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $396($93_1 | 0, 4019 | 0, 30256 | 0, $3_1 | 0);
  }
  $98_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $98_1 | 0;
 }
 
 function $204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $19_1 = 0, $59_1 = 0, $43_1 = 0, $45_1 = 0, $48_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $16_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $16_1 + 4 | 0;
     $19_1 = HEAP32[$16_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $19_1;
     if (!(($19_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if ((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$5
       }
       if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
      }
      $43_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $45_1 = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $48_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        $59_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$6;
       }
       $59_1 = -1;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = $59_1;
      HEAP32[($4_1 + 4 | 0) >> 2] = $48_1;
      HEAP32[$4_1 >> 2] = $45_1;
      $396($43_1 | 0, 6390 | 0, 30800 | 0, $4_1 | 0);
      $150(5 | 0, HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
     }
     continue label$3;
    };
   }
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $205() {
  var $2_1 = 0, $36_1 = 0, $47_1 = 0, $57_1 = 0, $70_1 = 0, $73_1 = 0, $110_1 = 0, $124_1 = 0, $137_1 = 0, $140_1 = 0, $27_1 = 0, $88_1 = 0, $90_1 = 0, $155_1 = 0, $157_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!((HEAP32[((HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if (0 & 1 | 0) {
      break label$1
     }
     break label$2;
    }
    if (1 & 1 | 0) {
     break label$1
    }
   }
   $27_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = $337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0;
   $396($27_1 | 0, 6382 | 0, 30909 | 0, $2_1 + 32 | 0 | 0);
   $36_1 = 0;
   $382(5 | 0, $36_1 | 0, $36_1 | 0);
  }
  HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$4 : while (1) {
   $47_1 = 0;
   label$5 : {
    if (!((HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $47_1 = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$6 : {
    if (!($47_1 & 1 | 0)) {
     break label$6
    }
    $57_1 = 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = $57_1;
    label$7 : {
     if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($57_1 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 48 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
     label$8 : {
      label$9 : while (1) {
       $70_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 48 | 0) >> 2] = $70_1 + 4 | 0;
       $73_1 = HEAP32[$70_1 >> 2] | 0;
       HEAP32[($2_1 + 52 | 0) >> 2] = $73_1;
       if (!(($73_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$8
       }
       label$10 : {
        if (!((((HEAPU8[((HEAP32[($2_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
         break label$10
        }
        $88_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $90_1 = HEAP32[((HEAP32[($2_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[$2_1 >> 2] = $90_1;
        $396($88_1 | 0, 6313 | 0, 31046 | 0, $2_1 | 0);
        $382(5 | 0, HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0);
       }
       continue label$9;
      };
     }
    }
    HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$4;
   }
   break label$4;
  };
  HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
  label$11 : while (1) {
   $110_1 = 0;
   label$12 : {
    if (!((HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$12
    }
    $110_1 = (((HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$13 : {
    if (!($110_1 & 1 | 0)) {
     break label$13
    }
    $124_1 = 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = $124_1;
    label$14 : {
     if (!((HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($124_1 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[($2_1 + 48 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
     label$15 : {
      label$16 : while (1) {
       $137_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 48 | 0) >> 2] = $137_1 + 4 | 0;
       $140_1 = HEAP32[$137_1 >> 2] | 0;
       HEAP32[($2_1 + 52 | 0) >> 2] = $140_1;
       if (!(($140_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$15
       }
       label$17 : {
        if (!((((HEAPU8[((HEAP32[($2_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
         break label$17
        }
        $155_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $157_1 = HEAP32[((HEAP32[($2_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = $157_1;
        $396($155_1 | 0, 6385 | 0, 31189 | 0, $2_1 + 16 | 0 | 0);
        $382(5 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0);
       }
       continue label$16;
      };
     }
    }
    HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$11;
   }
   break label$11;
  };
  global$0 = $2_1 + 64 | 0;
  return;
 }
 
 function $206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = -1;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $25_1 = 0, $28_1 = 0, $58_1 = 0, $70_1 = 0, $72_1 = 0, $74_1 = 0, $76_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $9_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  HEAP8[($9_1 + 16 | 0) >> 0] = (HEAPU8[($9_1 + 16 | 0) >> 0] | 0) & -5 | 0;
  HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $25_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $25_1 + 4 | 0;
     $28_1 = HEAP32[$25_1 >> 2] | 0;
     HEAP32[($3_1 + 32 | 0) >> 2] = $28_1;
     if (!(($28_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if ((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$5
       }
       if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
      }
      label$6 : {
       if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       $58_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       HEAP8[($58_1 + 16 | 0) >> 0] = HEAPU8[($58_1 + 16 | 0) >> 0] | 0 | 4 | 0;
       label$7 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$7
        }
        $70_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $72_1 = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $74_1 = HEAP32[((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $76_1 = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($3_1 + 8 | 0) >> 2] = $76_1;
        HEAP32[($3_1 + 4 | 0) >> 2] = $74_1;
        HEAP32[$3_1 >> 2] = $72_1;
        $396($70_1 | 0, 4020 | 0, 31763 | 0, $3_1 | 0);
       }
       break label$2;
      }
     }
     continue label$3;
    };
   }
  }
  global$0 = $3_1 + 48 | 0;
  return;
 }
 
 function $208($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $35_1 = 0, $48_1 = 0, $51_1 = 0, $57_1 = 0, $61_1 = 0, $141_1 = 0, $146_1 = 0, $165_1 = 0, $13_1 = 0, $15_1 = 0, $18_1 = 0, $108_1 = 0, $111_1 = 0, $114_1 = 0, $181_1 = 0.0, $118_1 = 0, $121_1 = 0, $162_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $15_1 = HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $18_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($3_1 + 36 | 0) >> 2] = $18_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $15_1;
   $396($13_1 | 0, 3036 | 0, 32169 | 0, $3_1 + 32 | 0 | 0);
  }
  label$2 : {
   if (!((((HEAPU8[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
    break label$2
   }
   $207(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0);
  }
  $35_1 = 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = $35_1;
  label$3 : {
   if (!((HEAP32[(HEAP32[($3_1 + 76 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($35_1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[(HEAP32[($3_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $48_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
     HEAP32[($3_1 + 68 | 0) >> 2] = $48_1 + 4 | 0;
     $51_1 = HEAP32[$48_1 >> 2] | 0;
     HEAP32[($3_1 + 72 | 0) >> 2] = $51_1;
     if (!(($51_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $57_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
     HEAP8[($57_1 + 24 | 0) >> 0] = HEAPU8[($57_1 + 24 | 0) >> 0] | 0 | 8 | 0;
     continue label$5;
    };
   }
  }
  $61_1 = 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = $61_1;
  label$6 : {
   if (!((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != ($61_1 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($3_1 + 60 | 0) >> 2] = 0;
   HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = $337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     label$9 : {
      label$10 : {
       if ((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$10
       }
       if (!((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
      }
      label$11 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
        break label$11
       }
       $108_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $111_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $114_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $181_1 = +HEAPF64[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 3];
       $118_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       $121_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 20 | 0) >> 2] = $121_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = $118_1;
       HEAPF64[($3_1 + 8 | 0) >> 3] = $181_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = $114_1;
       HEAP32[$3_1 >> 2] = $111_1;
       $396($108_1 | 0, 3029 | 0, 32226 | 0, $3_1 | 0);
      }
      label$12 : {
       label$13 : {
        if (!((HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$13
        }
        $141_1 = HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
        HEAP8[($141_1 + 16 | 0) >> 0] = (HEAPU8[($141_1 + 16 | 0) >> 0] | 0) & -9 | 0;
        break label$12;
       }
       $146_1 = HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
       HEAP8[($146_1 + 16 | 0) >> 0] = (HEAPU8[($146_1 + 16 | 0) >> 0] | 0) & -9 | 0;
      }
      $334(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3_1 + 56 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) + -1 | 0;
     }
     $162_1 = (HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0;
     $165_1 = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 60 | 0) >> 2] = $165_1;
     HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[($162_1 + ($165_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$8;
    };
   }
  }
  $332(HEAP32[((HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) | 0;
  $332(HEAP32[((HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) | 0;
  $287(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $209($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $16_1 = 0, $19_1 = 0, $21_1 = 0, $24_1 = 0, $28_1 = 0, $39_1 = 0, $42_1 = 0, $45_1 = 0, $48_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
   $16_1 = 247;
   HEAP8[($14_1 + 16 | 0) >> 0] = (HEAPU8[($14_1 + 16 | 0) >> 0] | 0) & $16_1 | 0;
   $19_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
   $21_1 = 16;
   HEAP8[($19_1 + 16 | 0) >> 0] = HEAPU8[($19_1 + 16 | 0) >> 0] | 0 | $21_1 | 0;
   $24_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
   HEAP8[($24_1 + 16 | 0) >> 0] = (HEAPU8[($24_1 + 16 | 0) >> 0] | 0) & $16_1 | 0;
   $28_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
   HEAP8[($28_1 + 16 | 0) >> 0] = HEAPU8[($28_1 + 16 | 0) >> 0] | 0 | $21_1 | 0;
   label$2 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$2
    }
    $39_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $42_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    $45_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    $48_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $48_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $45_1;
    HEAP32[$3_1 >> 2] = $42_1;
    $396($39_1 | 0, 3032 | 0, 32331 | 0, $3_1 | 0);
   }
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $210($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $350_1 = 0, $22_1 = 0, $33_1 = 0, $36_1 = 0, $48_1 = 0, $59_1 = 0, $62_1 = 0, $81_1 = 0, $92_1 = 0, $95_1 = 0, $101_1 = 0, $114_1 = 0, $117_1 = 0, $123_1 = 0, $127_1 = 0, $138_1 = 0, $141_1 = 0, $149_1 = 0, $153_1 = 0, $164_1 = 0, $167_1 = 0, $173_1 = 0, $186_1 = 0, $189_1 = 0, $201_1 = 0, $205_1 = 0, $216_1 = 0, $219_1 = 0, $302_1 = 0, $316_1 = 0, $319_1 = 0, $330_1 = 0, $341_1 = 0, $344_1 = 0, $363_1 = 0, $366_1 = 0, $15_1 = 0, $43_1 = 0, $69_1 = 0, $263_1 = 0, $419_1 = 0, $421_1 = 0, $423_1 = 0, $425_1 = 0, $440_1 = 0, $442_1 = 0, $453_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 136 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 128 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $396($15_1 | 0, 8063 | 0, 32446 | 0, $5_1 + 80 | 0 | 0);
   $22_1 = 0;
   HEAP32[($5_1 + 124 | 0) >> 2] = $22_1;
   label$2 : {
    if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != ($22_1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[($5_1 + 132 | 0) >> 2] | 0) + 4 | 0;
    label$3 : {
     label$4 : while (1) {
      $33_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
      HEAP32[($5_1 + 120 | 0) >> 2] = $33_1 + 4 | 0;
      $36_1 = HEAP32[$33_1 >> 2] | 0;
      HEAP32[($5_1 + 124 | 0) >> 2] = $36_1;
      if (!(($36_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      $43_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[$5_1 >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $396($43_1 | 0, 8064 | 0, 32495 | 0, $5_1 | 0);
      continue label$4;
     };
    }
   }
   $48_1 = 0;
   HEAP32[($5_1 + 112 | 0) >> 2] = $48_1;
   label$5 : {
    if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) != ($48_1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 4 | 0;
    label$6 : {
     label$7 : while (1) {
      $59_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      HEAP32[($5_1 + 108 | 0) >> 2] = $59_1 + 4 | 0;
      $62_1 = HEAP32[$59_1 >> 2] | 0;
      HEAP32[($5_1 + 112 | 0) >> 2] = $62_1;
      if (!(($62_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      $69_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      $396($69_1 | 0, 8065 | 0, 32500 | 0, $5_1 + 16 | 0 | 0);
      continue label$7;
     };
    }
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8066 | 0, 32505 | 0, 0 | 0);
  }
  $81_1 = 0;
  HEAP32[($5_1 + 112 | 0) >> 2] = $81_1;
  label$8 : {
   if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) != ($81_1 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 4 | 0;
   label$9 : {
    label$10 : while (1) {
     $92_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = $92_1 + 4 | 0;
     $95_1 = HEAP32[$92_1 >> 2] | 0;
     HEAP32[($5_1 + 112 | 0) >> 2] = $95_1;
     if (!(($95_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     $101_1 = 0;
     HEAP32[($5_1 + 124 | 0) >> 2] = $101_1;
     label$11 : {
      if (!((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($101_1 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
      label$12 : {
       label$13 : while (1) {
        $114_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
        HEAP32[($5_1 + 120 | 0) >> 2] = $114_1 + 4 | 0;
        $117_1 = HEAP32[$114_1 >> 2] | 0;
        HEAP32[($5_1 + 124 | 0) >> 2] = $117_1;
        if (!(($117_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$12
        }
        $123_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
        HEAP8[($123_1 + 24 | 0) >> 0] = (HEAPU8[($123_1 + 24 | 0) >> 0] | 0) & -2 | 0;
        continue label$13;
       };
      }
     }
     continue label$10;
    };
   }
  }
  $127_1 = 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = $127_1;
  label$14 : {
   if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != ($127_1 | 0) & 1 | 0)) {
    break label$14
   }
   HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[($5_1 + 132 | 0) >> 2] | 0) + 4 | 0;
   label$15 : {
    label$16 : while (1) {
     $138_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
     HEAP32[($5_1 + 120 | 0) >> 2] = $138_1 + 4 | 0;
     $141_1 = HEAP32[$138_1 >> 2] | 0;
     HEAP32[($5_1 + 124 | 0) >> 2] = $141_1;
     if (!(($141_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$15
     }
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
     $149_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
     HEAP8[($149_1 + 24 | 0) >> 0] = HEAPU8[($149_1 + 24 | 0) >> 0] | 0 | 1 | 0;
     continue label$16;
    };
   }
  }
  $153_1 = 0;
  HEAP32[($5_1 + 112 | 0) >> 2] = $153_1;
  label$17 : {
   if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) != ($153_1 | 0) & 1 | 0)) {
    break label$17
   }
   HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 4 | 0;
   label$18 : {
    label$19 : while (1) {
     $164_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = $164_1 + 4 | 0;
     $167_1 = HEAP32[$164_1 >> 2] | 0;
     HEAP32[($5_1 + 112 | 0) >> 2] = $167_1;
     if (!(($167_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$18
     }
     $173_1 = 0;
     HEAP32[($5_1 + 124 | 0) >> 2] = $173_1;
     label$20 : {
      if (!((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($173_1 | 0) & 1 | 0)) {
       break label$20
      }
      HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
      label$21 : {
       label$22 : while (1) {
        $186_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
        HEAP32[($5_1 + 120 | 0) >> 2] = $186_1 + 4 | 0;
        $189_1 = HEAP32[$186_1 >> 2] | 0;
        HEAP32[($5_1 + 124 | 0) >> 2] = $189_1;
        if (!(($189_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$21
        }
        label$23 : {
         if (!(((HEAPU8[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0)) {
          break label$23
         }
         $201_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
         HEAP32[($201_1 + 20 | 0) >> 2] = (HEAP32[($201_1 + 20 | 0) >> 2] | 0) + 1 | 0;
        }
        continue label$22;
       };
      }
     }
     continue label$19;
    };
   }
  }
  $205_1 = 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = $205_1;
  label$24 : {
   if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != ($205_1 | 0) & 1 | 0)) {
    break label$24
   }
   HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[($5_1 + 132 | 0) >> 2] | 0) + 4 | 0;
   label$25 : {
    label$26 : while (1) {
     $216_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
     HEAP32[($5_1 + 120 | 0) >> 2] = $216_1 + 4 | 0;
     $219_1 = HEAP32[$216_1 >> 2] | 0;
     HEAP32[($5_1 + 124 | 0) >> 2] = $219_1;
     if (!(($219_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$25
     }
     label$27 : {
      if (HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) {
       break label$27
      }
      $334(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, ((HEAP32[($5_1 + 120 | 0) >> 2] | 0) - (((HEAP32[($5_1 + 132 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0 | 0) | 0;
      HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[($5_1 + 120 | 0) >> 2] | 0) + -4 | 0;
     }
     continue label$26;
    };
   }
  }
  HEAP32[($5_1 + 92 | 0) >> 2] = $337(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) | 0;
  label$28 : {
   if (!((HEAP32[(0 + 90260 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 92 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$28
   }
   HEAP32[(0 + 90260 | 0) >> 2] = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  }
  label$29 : {
   label$30 : {
    if ($337(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) | 0) {
     break label$30
    }
    label$31 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$31
     }
     $263_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $396($263_1 | 0, 4023 | 0, 32507 | 0, $5_1 + 64 | 0 | 0);
    }
    HEAP32[($5_1 + 140 | 0) >> 2] = 0;
    break label$29;
   }
   $440((HEAP32[($5_1 + 132 | 0) >> 2] | 0) + 4 | 0 | 0, $337(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) | 0 | 0, 4 | 0, 18 | 0);
   label$32 : {
    if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
     break label$32
    }
    HEAP32[($5_1 + 104 | 0) >> 2] = $337(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(0 + 91416 | 0) >> 2] = (HEAP32[(0 + 91416 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 91448 | 0) >> 2] = (HEAP32[(0 + 91448 | 0) >> 2] | 0) + (HEAP32[($5_1 + 104 | 0) >> 2] | 0) | 0;
    label$33 : {
     if (!((HEAP32[(0 + 91432 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$33
     }
     HEAP32[(0 + 91432 | 0) >> 2] = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
    }
   }
   $302_1 = 0;
   HEAP32[($5_1 + 100 | 0) >> 2] = $309($337(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   HEAP32[($5_1 + 112 | 0) >> 2] = $302_1;
   label$34 : {
    if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) != ($302_1 | 0) & 1 | 0)) {
     break label$34
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 4 | 0;
    label$35 : {
     label$36 : while (1) {
      $316_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      HEAP32[($5_1 + 108 | 0) >> 2] = $316_1 + 4 | 0;
      $319_1 = HEAP32[$316_1 >> 2] | 0;
      HEAP32[($5_1 + 112 | 0) >> 2] = $319_1;
      if (!(($319_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$35
      }
      $211(HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0);
      continue label$36;
     };
    }
   }
   $330_1 = 0;
   HEAP32[($5_1 + 124 | 0) >> 2] = $330_1;
   label$37 : {
    if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != ($330_1 | 0) & 1 | 0)) {
     break label$37
    }
    HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[($5_1 + 132 | 0) >> 2] | 0) + 4 | 0;
    label$38 : {
     label$39 : while (1) {
      $341_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
      HEAP32[($5_1 + 120 | 0) >> 2] = $341_1 + 4 | 0;
      $344_1 = HEAP32[$341_1 >> 2] | 0;
      HEAP32[($5_1 + 124 | 0) >> 2] = $344_1;
      if (!(($344_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$38
      }
      $350_1 = 0;
      HEAP32[($5_1 + 116 | 0) >> 2] = $212(HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0, $350_1 | 0) | 0;
      HEAP32[($5_1 + 112 | 0) >> 2] = $350_1;
      label$40 : {
       if (!((HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0) != ($350_1 | 0) & 1 | 0)) {
        break label$40
       }
       HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 4 | 0;
       label$41 : {
        label$42 : while (1) {
         $363_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
         HEAP32[($5_1 + 108 | 0) >> 2] = $363_1 + 4 | 0;
         $366_1 = HEAP32[$363_1 >> 2] | 0;
         HEAP32[($5_1 + 112 | 0) >> 2] = $366_1;
         if (!(($366_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$41
         }
         label$43 : {
          if (!(($213(HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, $5_1 + 96 | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$43
          }
          HEAP32[(0 + 92408 | 0) >> 2] = (HEAP32[(0 + 92408 | 0) >> 2] | 0) + 1 | 0;
          break label$41;
         }
         continue label$42;
        };
       }
      }
      $348($5_1 + 116 | 0 | 0);
      label$44 : {
       if ((HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$44
       }
       break label$38;
      }
      continue label$39;
     };
    }
   }
   label$45 : {
    label$46 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$46
     }
     label$47 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
       break label$47
      }
      $419_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $421_1 = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $423_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $425_1 = $337(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = $337(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = $425_1;
      HEAP32[($5_1 + 36 | 0) >> 2] = $423_1;
      HEAP32[($5_1 + 32 | 0) >> 2] = $421_1;
      $396($419_1 | 0, 2020 | 0, 32558 | 0, $5_1 + 32 | 0 | 0);
     }
     break label$45;
    }
    HEAP32[(0 + 91280 | 0) >> 2] = (HEAP32[(0 + 91280 | 0) >> 2] | 0) + 1 | 0;
    label$48 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$48
     }
     $440_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $442_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     HEAP32[($5_1 + 48 | 0) >> 2] = $442_1;
     $396($440_1 | 0, 14 | 0, 32632 | 0, $5_1 + 48 | 0 | 0);
    }
   }
   $324(87704 + 2580 | 0 | 0);
   HEAP32[($5_1 + 140 | 0) >> 2] = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
  }
  $453_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
  global$0 = $5_1 + 144 | 0;
  return $453_1 | 0;
 }
 
 function $211($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $25_1 = 0, $48_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $255(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0, 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    $25_1 = HEAP32[(((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = $25_1;
    label$3 : {
     if (($25_1 | 0) != (0 | 0) & 1 | 0) {
      break label$3
     }
     HEAP32[(((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     break label$1;
    }
    label$4 : {
     if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     break label$1;
    }
    $48_1 = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $48_1;
    label$5 : {
     if (!(($48_1 | 0) == (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    }
    continue label$2;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $26_1 = 0, $29_1 = 0, $38_1 = 0, $51_1 = 0, $54_1 = 0, $109_1 = 0, $110_1 = 0, $115_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 2 | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $26_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $26_1 + 4 | 0;
     $29_1 = HEAP32[$26_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $29_1;
     if (!(($29_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  $38_1 = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $38_1;
  label$4 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($38_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     $51_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $51_1 + 4 | 0;
     $54_1 = HEAP32[$51_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $54_1;
     if (!(($54_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      label$8 : {
       if ((HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$8
       }
       if (!(HEAP32[($4_1 + 24 | 0) >> 2] | 0)) {
        break label$7
       }
      }
      $214(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $4_1 + 12 | 0 | 0);
     }
     continue label$6;
    };
   }
  }
  label$9 : {
   label$10 : {
    if (HEAP32[(0 + 88120 | 0) >> 2] | 0) {
     break label$10
    }
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$9
    }
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = $337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(0 + 92408 | 0) >> 2] = (HEAP32[(0 + 92408 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(0 + 92416 | 0) >> 2] = (HEAP32[(0 + 92416 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
   label$11 : {
    if (!((HEAP32[(0 + 92424 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[(0 + 92424 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   }
   label$12 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$12
    }
    $109_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $110_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[$4_1 >> 2] = $110_1;
    $396($109_1 | 0, 3011 | 0, 47631 | 0, $4_1 | 0);
   }
  }
  $115_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $115_1 | 0;
 }
 
 function $213($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $33_1 = 0, $63_1 = 0, $76_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  $9_1 = 0;
  HEAP32[($8_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $5_1;
  HEAP32[(HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 2] = $9_1;
  HEAP32[(0 + 91384 | 0) >> 2] = (HEAP32[(0 + 91384 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($8_1 + 16 | 0) >> 2] = $255(HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($8_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0, $9_1 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     $33_1 = HEAP32[(((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $33_1;
     if (!(($33_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[(HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 2] = -1;
       break label$4;
      }
      HEAP32[(0 + 91392 | 0) >> 2] = (HEAP32[(0 + 91392 | 0) >> 2] | 0) + 1 | 0;
      label$6 : {
       if (!($339(HEAP32[(HEAP32[($8_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($8_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($8_1 + 44 | 0) >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
       break label$1;
      }
     }
     $63_1 = (HEAP32[($8_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($8_1 + 16 | 0) >> 2] = $63_1;
     label$7 : {
      if (!(($63_1 | 0) == (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($8_1 + 16 | 0) >> 2] = 0;
     }
     continue label$3;
    };
   }
   label$8 : {
    if (HEAP32[(HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 2] | 0) {
     break label$8
    }
    HEAP32[(HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
   }
   HEAP32[($8_1 + 44 | 0) >> 2] = 0;
  }
  $76_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
  global$0 = $8_1 + 48 | 0;
  return $76_1 | 0;
 }
 
 function $214($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $23_1 = 0, $26_1 = 0, $42_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 2 | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $23_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = $23_1 + 4 | 0;
     $26_1 = HEAP32[$23_1 >> 2] | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = $26_1;
     if (!(($26_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!((HEAP32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       $42_1 = HEAP32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$4;
      }
      $42_1 = HEAP32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $42_1;
     label$6 : {
      if (!((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        if (!((HEAP32[((HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        $325(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
        break label$7;
       }
       label$9 : {
        label$10 : {
         if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
          break label$10
         }
         HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(((HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
         label$11 : {
          if (!((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 >= (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$11
          }
          if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 <= (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$11
          }
          label$12 : {
           label$13 : {
            label$14 : {
             if ((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0) {
              break label$14
             }
             if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$13
             }
            }
            $325(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
            break label$12;
           }
           label$15 : {
            if (!($342(HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0)) {
             break label$15
            }
            $325(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
           }
          }
         }
         break label$9;
        }
        label$16 : {
         label$17 : {
          if ((HEAP32[(((HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0) {
           break label$17
          }
          if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
           break label$16
          }
          if (!((HEAP32[((HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
         }
         $325(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
        }
       }
      }
     }
     continue label$3;
    };
   }
  }
  HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) - 1 | 0;
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $215($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $105_1 = 0, $116_1 = 0, $119_1 = 0, $139_1 = 0, $150_1 = 0, $153_1 = 0, $159_1 = 0, $170_1 = 0, $173_1 = 0, $202_1 = 0, $213_1 = 0, $216_1 = 0, $222_1 = 0, $236_1 = 0, $239_1 = 0, $25_1 = 0, $28_1 = 0, $87_1 = 0, $90_1 = 0, $93_1 = 0, $271_1 = 0, $274_1 = 0, $277_1 = 0, $300_1 = 0, $303_1 = 0, $305_1 = 0, $308_1 = 0, $310_1 = 0, $352_1 = 0.0, $313_1 = 0, $325_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 132 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 128 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 108 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 104 | 0) >> 2] = $7_1;
  HEAPF64[($6_1 + 80 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[($6_1 + 72 | 0) >> 3] = (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]) * 10.0;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
     break label$2
    }
    if (((HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
     break label$1
    }
   }
   $25_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $28_1 = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 64 | 0) >> 2] = $28_1;
   $396($25_1 | 0, 6351 | 0, 32714 | 0, $6_1 + 64 | 0 | 0);
   $150(5 | 0, HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($6_1 + 100 | 0) >> 2] = $284(HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(($337(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[($6_1 + 80 | 0) >> 3] = +$59(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, $6_1 + 108 | 0 | 0, $6_1 + 104 | 0 | 0);
    label$5 : {
     if (!((HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 104 | 0) >> 2] | 0;
     HEAP32[($6_1 + 104 | 0) >> 2] = HEAP32[($6_1 + 136 | 0) >> 2] | 0;
    }
    break label$3;
   }
   $332(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 136 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    if (!(($337(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0 | 0) != ((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 2 | 0 | 0) & 1 | 0)) {
     break label$6
    }
    $87_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $90_1 = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $93_1 = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 56 | 0) >> 2] = $337(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 52 | 0) >> 2] = $93_1;
    HEAP32[($6_1 + 48 | 0) >> 2] = $90_1;
    $396($87_1 | 0, 6409 | 0, 32847 | 0, $6_1 + 48 | 0 | 0);
    $150(5 | 0, HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
   }
   $105_1 = 0;
   HEAP32[($6_1 + 124 | 0) >> 2] = $105_1;
   label$7 : {
    if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != ($105_1 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($6_1 + 120 | 0) >> 2] = (HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 4 | 0;
    label$8 : {
     label$9 : while (1) {
      $116_1 = HEAP32[($6_1 + 120 | 0) >> 2] | 0;
      HEAP32[($6_1 + 120 | 0) >> 2] = $116_1 + 4 | 0;
      $119_1 = HEAP32[$116_1 >> 2] | 0;
      HEAP32[($6_1 + 124 | 0) >> 2] = $119_1;
      if (!(($119_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[($6_1 + 88 | 0) >> 3] = +$37(HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 136 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
      label$10 : {
       if (!(+HEAPF64[($6_1 + 88 | 0) >> 3] < +HEAPF64[($6_1 + 80 | 0) >> 3] & 1 | 0)) {
        break label$10
       }
       HEAP32[($6_1 + 104 | 0) >> 2] = HEAP32[($6_1 + 136 | 0) >> 2] | 0;
       HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
       HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[($6_1 + 88 | 0) >> 3];
      }
      continue label$9;
     };
    }
   }
   label$11 : {
    if (!(+HEAPF64[($6_1 + 80 | 0) >> 3] > +HEAPF64[($6_1 + 72 | 0) >> 3] & 1 | 0)) {
     break label$11
    }
    $139_1 = 0;
    HEAP32[($6_1 + 124 | 0) >> 2] = $139_1;
    label$12 : {
     if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != ($139_1 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($6_1 + 120 | 0) >> 2] = (HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 4 | 0;
     label$13 : {
      label$14 : while (1) {
       $150_1 = HEAP32[($6_1 + 120 | 0) >> 2] | 0;
       HEAP32[($6_1 + 120 | 0) >> 2] = $150_1 + 4 | 0;
       $153_1 = HEAP32[$150_1 >> 2] | 0;
       HEAP32[($6_1 + 124 | 0) >> 2] = $153_1;
       if (!(($153_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       $159_1 = 0;
       HEAP32[($6_1 + 116 | 0) >> 2] = $159_1;
       label$15 : {
        if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != ($159_1 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($6_1 + 112 | 0) >> 2] = (HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 4 | 0;
        label$16 : {
         label$17 : while (1) {
          $170_1 = HEAP32[($6_1 + 112 | 0) >> 2] | 0;
          HEAP32[($6_1 + 112 | 0) >> 2] = $170_1 + 4 | 0;
          $173_1 = HEAP32[$170_1 >> 2] | 0;
          HEAP32[($6_1 + 116 | 0) >> 2] = $173_1;
          if (!(($173_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$16
          }
          label$18 : {
           if (!((HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 > (HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$18
           }
           HEAPF64[($6_1 + 88 | 0) >> 3] = +$37(HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
           label$19 : {
            if (!(+HEAPF64[($6_1 + 88 | 0) >> 3] < +HEAPF64[($6_1 + 80 | 0) >> 3] & 1 | 0)) {
             break label$19
            }
            HEAP32[($6_1 + 104 | 0) >> 2] = HEAP32[($6_1 + 116 | 0) >> 2] | 0;
            HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
            HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[($6_1 + 88 | 0) >> 3];
           }
          }
          continue label$17;
         };
        }
       }
       continue label$14;
      };
     }
    }
   }
   label$20 : {
    if (!(+HEAPF64[($6_1 + 80 | 0) >> 3] > +HEAPF64[($6_1 + 72 | 0) >> 3] & 1 | 0)) {
     break label$20
    }
    $202_1 = 0;
    HEAP32[($6_1 + 116 | 0) >> 2] = $202_1;
    label$21 : {
     if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != ($202_1 | 0) & 1 | 0)) {
      break label$21
     }
     HEAP32[($6_1 + 112 | 0) >> 2] = (HEAP32[($6_1 + 100 | 0) >> 2] | 0) + 4 | 0;
     label$22 : {
      label$23 : while (1) {
       $213_1 = HEAP32[($6_1 + 112 | 0) >> 2] | 0;
       HEAP32[($6_1 + 112 | 0) >> 2] = $213_1 + 4 | 0;
       $216_1 = HEAP32[$213_1 >> 2] | 0;
       HEAP32[($6_1 + 116 | 0) >> 2] = $216_1;
       if (!(($216_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$22
       }
       $222_1 = 0;
       HEAP32[($6_1 + 96 | 0) >> 2] = $216(HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 124 | 0) >> 2] = $222_1;
       label$24 : {
        if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != ($222_1 | 0) & 1 | 0)) {
         break label$24
        }
        HEAP32[($6_1 + 120 | 0) >> 2] = (HEAP32[($6_1 + 96 | 0) >> 2] | 0) + 4 | 0;
        label$25 : {
         label$26 : while (1) {
          $236_1 = HEAP32[($6_1 + 120 | 0) >> 2] | 0;
          HEAP32[($6_1 + 120 | 0) >> 2] = $236_1 + 4 | 0;
          $239_1 = HEAP32[$236_1 >> 2] | 0;
          HEAP32[($6_1 + 124 | 0) >> 2] = $239_1;
          if (!(($239_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$25
          }
          HEAPF64[($6_1 + 88 | 0) >> 3] = +$37(HEAP32[((HEAP32[($6_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
          label$27 : {
           if (!(+HEAPF64[($6_1 + 88 | 0) >> 3] < +HEAPF64[($6_1 + 80 | 0) >> 3] & 1 | 0)) {
            break label$27
           }
           HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
           HEAP32[($6_1 + 104 | 0) >> 2] = HEAP32[($6_1 + 116 | 0) >> 2] | 0;
           HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[($6_1 + 88 | 0) >> 3];
          }
          continue label$26;
         };
        }
       }
       $348($6_1 + 96 | 0 | 0);
       continue label$23;
      };
     }
    }
   }
  }
  HEAPF64[(HEAP32[($6_1 + 128 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 80 | 0) >> 3];
  $324($6_1 + 100 | 0 | 0);
  label$28 : {
   if ((HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$28
   }
   $271_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $274_1 = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $277_1 = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   HEAP32[($6_1 + 36 | 0) >> 2] = $277_1;
   HEAP32[($6_1 + 32 | 0) >> 2] = $274_1;
   $396($271_1 | 0, 6274 | 0, 33025 | 0, $6_1 + 32 | 0 | 0);
   $150(5 | 0, HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
  }
  HEAP32[(HEAP32[($6_1 + 132 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
  label$29 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$29
   }
   $300_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $303_1 = $267(HEAP32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   $305_1 = HEAP32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $308_1 = $267(HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   $310_1 = HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $352_1 = +HEAPF64[($6_1 + 80 | 0) >> 3];
   $313_1 = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = $313_1;
   HEAPF64[($6_1 + 16 | 0) >> 3] = $352_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $310_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $308_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $305_1;
   HEAP32[$6_1 >> 2] = $303_1;
   $396($300_1 | 0, 2061 | 0, 33168 | 0, $6_1 | 0);
  }
  $325_1 = HEAP32[($6_1 + 104 | 0) >> 2] | 0;
  global$0 = $6_1 + 144 | 0;
  return $325_1 | 0;
 }
 
 function $216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $26_1 = 0, $29_1 = 0, $38_1 = 0, $57_1 = 0, $60_1 = 0, $69_1 = 0, $82_1 = 0, $85_1 = 0, $113_1 = 0, $115_1 = 0, $120_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $26_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = $26_1 + 4 | 0;
     $29_1 = HEAP32[$26_1 >> 2] | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = $29_1;
     if (!(($29_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  $38_1 = 0;
  HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $38_1;
  label$4 : {
   if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != ($38_1 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     $57_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = $57_1 + 4 | 0;
     $60_1 = HEAP32[$57_1 >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $60_1;
     if (!(($60_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
     continue label$6;
    };
   }
  }
  $69_1 = 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $69_1;
  label$7 : {
   if (!((HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($69_1 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
   label$8 : {
    label$9 : while (1) {
     $82_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = $82_1 + 4 | 0;
     $85_1 = HEAP32[$82_1 >> 2] | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = $85_1;
     if (!(($85_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     label$10 : {
      if (!((HEAP32[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$10
      }
      $217(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, $4_1 + 20 | 0 | 0);
     }
     continue label$9;
    };
   }
  }
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$11
   }
   $113_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $115_1 = $337(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $115_1;
   $396($113_1 | 0, 3035 | 0, 42766 | 0, $4_1 | 0);
  }
  $120_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $120_1 | 0;
 }
 
 function $217($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $17_1 = 0, $30_1 = 0, $33_1 = 0, $56_1 = 0, $69_1 = 0, $72_1 = 0, $88_1 = 0, $203_1 = 0, $216_1 = 0, $219_1 = 0, $257_1 = 0, $258_1 = 0, $260_1 = 0, $262_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 2 | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
     break label$2
    }
    $17_1 = 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $17_1;
    label$3 : {
     if (!((HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($17_1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$4 : {
      label$5 : while (1) {
       $30_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
       HEAP32[($5_1 + 40 | 0) >> 2] = $30_1 + 4 | 0;
       $33_1 = HEAP32[$30_1 >> 2] | 0;
       HEAP32[($5_1 + 44 | 0) >> 2] = $33_1;
       if (!(($33_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$4
       }
       label$6 : {
        if (!((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
        $325(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
        HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       }
       continue label$5;
      };
     }
    }
    break label$1;
   }
   $56_1 = 0;
   HEAP32[($5_1 + 64 | 0) >> 2] = $56_1;
   label$7 : {
    if (!((HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($56_1 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$8 : {
     label$9 : while (1) {
      $69_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      HEAP32[($5_1 + 60 | 0) >> 2] = $69_1 + 4 | 0;
      $72_1 = HEAP32[$69_1 >> 2] | 0;
      HEAP32[($5_1 + 64 | 0) >> 2] = $72_1;
      if (!(($72_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      label$10 : {
       label$11 : {
        if (!((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$11
        }
        $88_1 = HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        break label$10;
       }
       $88_1 = HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      }
      HEAP32[($5_1 + 56 | 0) >> 2] = $88_1;
      label$12 : {
       if (!((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[($5_1 + 28 | 0) >> 2] = 0;
       label$13 : {
        label$14 : {
         if (!((HEAP32[((HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$14
         }
         HEAP32[($5_1 + 28 | 0) >> 2] = 1;
         break label$13;
        }
        label$15 : {
         label$16 : {
          if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
           break label$16
          }
          HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
          HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[(((HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
          label$17 : {
           if (!((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 >= (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$17
           }
           if (!((HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 <= (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$17
           }
           label$18 : {
            label$19 : {
             label$20 : {
              if ((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0) {
               break label$20
              }
              if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$19
              }
             }
             HEAP32[($5_1 + 28 | 0) >> 2] = 1;
             break label$18;
            }
            label$21 : {
             if (!($342(HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0)) {
              break label$21
             }
             HEAP32[($5_1 + 28 | 0) >> 2] = 1;
            }
           }
          }
          break label$15;
         }
         label$22 : {
          label$23 : {
           if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$23
           }
           HEAP32[($5_1 + 28 | 0) >> 2] = 1;
           break label$22;
          }
          label$24 : {
           if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
            break label$24
           }
           if (!((HEAP32[((HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$24
           }
           HEAP32[($5_1 + 28 | 0) >> 2] = 1;
          }
         }
        }
       }
       label$25 : {
        if (!(HEAP32[($5_1 + 28 | 0) >> 2] | 0)) {
         break label$25
        }
        $203_1 = 0;
        HEAP32[($5_1 + 44 | 0) >> 2] = $203_1;
        label$26 : {
         if (!((HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($203_1 | 0) & 1 | 0)) {
          break label$26
         }
         HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
         label$27 : {
          label$28 : while (1) {
           $216_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
           HEAP32[($5_1 + 40 | 0) >> 2] = $216_1 + 4 | 0;
           $219_1 = HEAP32[$216_1 >> 2] | 0;
           HEAP32[($5_1 + 44 | 0) >> 2] = $219_1;
           if (!(($219_1 | 0) != (0 | 0) & 1 | 0)) {
            break label$27
           }
           label$29 : {
            if (!((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$29
            }
            HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
            $325(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
            HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
           }
           continue label$28;
          };
         }
        }
       }
      }
      continue label$9;
     };
    }
   }
  }
  HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 72 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) - 1 | 0;
  label$30 : {
   if (!(HEAP32[($5_1 + 32 | 0) >> 2] | 0)) {
    break label$30
   }
   label$31 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$31
    }
    $257_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $258_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    $260_1 = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $262_1 = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = ((HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $262_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $260_1;
    HEAP32[$5_1 >> 2] = $258_1;
    $396($257_1 | 0, 4079 | 0, 42831 | 0, $5_1 | 0);
   }
  }
  global$0 = $5_1 + 80 | 0;
  return;
 }
 
 function $218($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $57_1 = 0.0, $22_1 = 0, $26_1 = 0, $29_1 = 0, $32_1 = 0, $34_1 = 0, $58_1 = 0.0, $37_1 = 0, $40_1 = 0, $54_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  $57_1 = +$59(HEAP32[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 2] | 0 | 0, $5_1 + 48 | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0);
  HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3] = $57_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $22_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $26_1 = $267(HEAP32[((HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   $29_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $32_1 = $267(HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   $34_1 = HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $58_1 = +HEAPF64[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 3];
   $37_1 = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $40_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = $40_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $37_1;
   HEAPF64[($5_1 + 16 | 0) >> 3] = $58_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $34_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $32_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $29_1;
   HEAP32[$5_1 >> 2] = $26_1;
   $396($22_1 | 0, 4069 | 0, 33301 | 0, $5_1 | 0);
  }
  $54_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
  global$0 = $5_1 + 64 | 0;
  return $54_1 | 0;
 }
 
 function $219($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0;
  $9_1 = global$0 - 64 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
     break label$2
    }
    if (!(((HEAP32[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (((HEAP32[((HEAP32[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(HEAP32[($9_1 + 60 | 0) >> 2] | 0)) {
      break label$4
     }
     HEAP32[(0 + 90656 | 0) >> 2] = (HEAP32[(0 + 90656 | 0) >> 2] | 0) + 1 | 0;
     $4(HEAP32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0, $9_1 + 24 | 0 | 0);
     HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 24 | 0) >> 3] * +(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
     label$5 : {
      label$6 : {
       if (!(+HEAPF64[($9_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAPF64[($9_1 + 8 | 0) >> 3] = +(0 | 0);
       HEAPF64[($9_1 + 16 | 0) >> 3] = +HEAPF64[($9_1 + 24 | 0) >> 3];
       HEAPF64[($9_1 + 24 | 0) >> 3] = -+HEAPF64[($9_1 + 24 | 0) >> 3];
       break label$5;
      }
      HEAPF64[($9_1 + 16 | 0) >> 3] = +(0 | 0);
      HEAPF64[($9_1 + 8 | 0) >> 3] = +HEAPF64[($9_1 + 24 | 0) >> 3];
     }
     break label$3;
    }
    HEAPF64[($9_1 + 24 | 0) >> 3] = +$14(HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0, $9_1 + 16 | 0 | 0, $9_1 + 8 | 0 | 0);
   }
   if (!(+HEAPF64[($9_1 + 24 | 0) >> 3] < +HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
    break label$1
   }
   HEAP32[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 2] = HEAP32[($9_1 + 52 | 0) >> 2] | 0;
   HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[($9_1 + 16 | 0) >> 3];
   HEAPF64[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 3] = +HEAPF64[($9_1 + 8 | 0) >> 3];
   HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[($9_1 + 24 | 0) >> 3];
  }
  global$0 = $9_1 + 64 | 0;
  return;
 }
 
 function $220() {
  var $2_1 = 0, $3_1 = 0, $20_1 = 0, $22_1 = 0, $24_1 = 0, $26_1 = 0, $61_1 = 0.0, $27_1 = 0, $62_1 = 0.0, $63_1 = 0.0, $34_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($3_1 + 90388 | 0) >> 2] = HEAP32[($3_1 + 92256 | 0) >> 2] | 0;
  fimport$0($2_1 + 64 | 0 | 0) | 0;
  HEAP32[($2_1 + 60 | 0) >> 2] = $476($2_1 + 64 | 0 | 0) | 0;
  HEAPF64[($2_1 + 72 | 0) >> 3] = +((fimport$1() | 0) >>> 0);
  HEAPF64[($2_1 + 72 | 0) >> 3] = +HEAPF64[($2_1 + 72 | 0) >> 3] / 1.0e6;
  HEAP32[($2_1 + 68 | 0) >> 2] = ((HEAP32[(0 + 92256 | 0) >> 2] | 0) - (HEAP32[(0 + 90888 | 0) >> 2] | 0) | 0) + (HEAP32[(0 + 90880 | 0) >> 2] | 0) | 0;
  $20_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
  $22_1 = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $24_1 = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $26_1 = HEAP32[(HEAP32[($2_1 + 60 | 0) >> 2] | 0) >> 2] | 0;
  $61_1 = +HEAPF64[($2_1 + 72 | 0) >> 3];
  $27_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
  $62_1 = +HEAPF64[(0 + 90152 | 0) >> 3];
  $63_1 = +HEAPF64[(0 + 90168 | 0) >> 3];
  $34_1 = (HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0;
  HEAP32[($2_1 + 52 | 0) >> 2] = (HEAP32[(0 + 90064 | 0) >> 2] | 0) - ($337(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = $34_1;
  HEAPF64[($2_1 + 40 | 0) >> 3] = $63_1;
  HEAPF64[($2_1 + 32 | 0) >> 3] = $62_1;
  HEAP32[($2_1 + 24 | 0) >> 2] = $27_1;
  HEAPF64[($2_1 + 16 | 0) >> 3] = $61_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $24_1;
  HEAP32[$2_1 >> 2] = $22_1;
  $396($20_1 | 0, 8087 | 0, 47483 | 0, $2_1 | 0);
  global$0 = $2_1 + 80 | 0;
  return;
 }
 
 function $221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $103_1 = 0, $5_1 = 0, $6_1 = 0, $22_1 = 0, $25_1 = 0, $31_1 = 0, $62_1 = 0, $93_1 = 0, $121_1 = 0, $124_1 = 0, $130_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 80 | 0) >> 2] = (HEAP32[($6_1 + 80 | 0) >> 2] | 0) & -134217729 | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $22_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $22_1 + 4 | 0;
     $25_1 = HEAP32[$22_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $25_1;
     if (!(($25_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $31_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     HEAP8[($31_1 + 16 | 0) >> 0] = (HEAPU8[($31_1 + 16 | 0) >> 0] | 0) & -3 | 0;
     continue label$3;
    };
   }
  }
  label$4 : {
   label$5 : {
    if ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    break label$4;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    label$7 : {
     if (((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0) {
      break label$7
     }
     label$8 : {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) > ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 5 | 0 | 0) & 1 | 0)) {
       break label$8
      }
      $62_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      HEAP32[($62_1 + 80 | 0) >> 2] = (HEAP32[($62_1 + 80 | 0) >> 2] | 0) & -268435457 | 0 | 268435456 | 0;
      HEAP32[(0 + 92512 | 0) >> 2] = (HEAP32[(0 + 92512 | 0) >> 2] | 0) + 1 | 0;
     }
     break label$6;
    }
    label$9 : {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) <= ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 5 | 0 | 0) & 1 | 0)) {
      break label$9
     }
     label$10 : {
      label$11 : {
       if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$11
       }
       if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
        break label$10
       }
      }
      $93_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      HEAP32[($93_1 + 80 | 0) >> 2] = (HEAP32[($93_1 + 80 | 0) >> 2] | 0) & -268435457 | 0;
     }
    }
   }
   if (((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0) {
    break label$4
   }
   $103_1 = 0;
   $158(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] = $103_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $103_1;
   label$12 : {
    if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($103_1 | 0) & 1 | 0)) {
     break label$12
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$13 : {
     label$14 : while (1) {
      $121_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = $121_1 + 4 | 0;
      $124_1 = HEAP32[$121_1 >> 2] | 0;
      HEAP32[($4_1 + 20 | 0) >> 2] = $124_1;
      if (!(($124_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$13
      }
      $130_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      HEAP8[($130_1 + 16 | 0) >> 0] = (HEAPU8[($130_1 + 16 | 0) >> 0] | 0) & -3 | 0;
      continue label$14;
     };
    }
   }
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $222($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $54_1 = 0, $72_1 = 0, $75_1 = 0, $81_1 = 0, $85_1 = 0, $98_1 = 0, $101_1 = 0, $117_1 = 0, $127_1 = 0, $140_1 = 0, $143_1 = 0, $149_1 = 0, $153_1 = 0, $157_1 = 0, $170_1 = 0, $173_1 = 0, $243_1 = 0, $256_1 = 0, $259_1 = 0, $310_1 = 0, $328_1 = 0, $331_1 = 0, $340_1 = 0, $353_1 = 0, $356_1 = 0, $372_1 = 0, $515_1 = 0, $521_1 = 0, $20_1 = 0, $22_1 = 0, $24_1 = 0, $195_1 = 0, $197_1 = 0, $199_1 = 0, $236_1 = 0, $301_1 = 0, $303_1 = 0, $401_1 = 0, $403_1 = 0, $405_1 = 0, $407_1 = 0, $426_1 = 0, $428_1 = 0, $430_1 = 0, $432_1 = 0, $441_1 = 0, $534 = 0, $536 = 0, $538 = 0;
  $5_1 = global$0 - 176 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 168 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 164 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 140 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5_1 + 164 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 152 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    label$3 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
      break label$3
     }
     $20_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $22_1 = HEAP32[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $24_1 = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($5_1 + 100 | 0) >> 2] = $24_1;
     HEAP32[($5_1 + 96 | 0) >> 2] = $22_1;
     $396($20_1 | 0, 4086 | 0, 41970 | 0, $5_1 + 96 | 0 | 0);
    }
    label$4 : {
     if (((HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
      break label$4
     }
     $228(HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
    }
    label$5 : {
     if (!((HEAP32[((HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $319((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 52 | 0 | 0, 0 | 0, HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 140 | 0) >> 2] = 1;
    }
    break label$1;
   }
   $54_1 = 0;
   HEAP32[(0 + 91632 | 0) >> 2] = (HEAP32[(0 + 91632 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($5_1 + 160 | 0) >> 2] = $54_1;
   label$6 : {
    if (!((HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($54_1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($5_1 + 156 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$7 : {
     label$8 : while (1) {
      $72_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
      HEAP32[($5_1 + 156 | 0) >> 2] = $72_1 + 4 | 0;
      $75_1 = HEAP32[$72_1 >> 2] | 0;
      HEAP32[($5_1 + 160 | 0) >> 2] = $75_1;
      if (!(($75_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      $81_1 = HEAP32[($5_1 + 160 | 0) >> 2] | 0;
      HEAP8[($81_1 + 24 | 0) >> 0] = (HEAPU8[($81_1 + 24 | 0) >> 0] | 0) & -2 | 0;
      continue label$8;
     };
    }
   }
   $85_1 = 0;
   HEAP32[($5_1 + 148 | 0) >> 2] = $85_1;
   label$9 : {
    if (!((HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($85_1 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($5_1 + 144 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$10 : {
     label$11 : while (1) {
      $98_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
      HEAP32[($5_1 + 144 | 0) >> 2] = $98_1 + 4 | 0;
      $101_1 = HEAP32[$98_1 >> 2] | 0;
      HEAP32[($5_1 + 148 | 0) >> 2] = $101_1;
      if (!(($101_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$10
      }
      label$12 : {
       label$13 : {
        if (!((HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$13
        }
        $117_1 = HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        break label$12;
       }
       $117_1 = HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      }
      label$14 : {
       if (!(($117_1 | 0) == (HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       $127_1 = 0;
       HEAP32[($5_1 + 160 | 0) >> 2] = $127_1;
       label$15 : {
        if (!((HEAP32[(HEAP32[($5_1 + 148 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($127_1 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($5_1 + 156 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 148 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
        label$16 : {
         label$17 : while (1) {
          $140_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
          HEAP32[($5_1 + 156 | 0) >> 2] = $140_1 + 4 | 0;
          $143_1 = HEAP32[$140_1 >> 2] | 0;
          HEAP32[($5_1 + 160 | 0) >> 2] = $143_1;
          if (!(($143_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$16
          }
          $149_1 = HEAP32[($5_1 + 160 | 0) >> 2] | 0;
          HEAP8[($149_1 + 24 | 0) >> 0] = HEAPU8[($149_1 + 24 | 0) >> 0] | 0 | 1 | 0;
          $153_1 = HEAP32[($5_1 + 160 | 0) >> 2] | 0;
          HEAP8[($153_1 + 24 | 0) >> 0] = HEAPU8[($153_1 + 24 | 0) >> 0] | 0 | 8 | 0;
          continue label$17;
         };
        }
       }
       break label$10;
      }
      continue label$11;
     };
    }
   }
   $157_1 = 0;
   HEAP32[($5_1 + 160 | 0) >> 2] = $157_1;
   label$18 : {
    if (!((HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($157_1 | 0) & 1 | 0)) {
     break label$18
    }
    HEAP32[($5_1 + 156 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
    label$19 : {
     label$20 : while (1) {
      $170_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
      HEAP32[($5_1 + 156 | 0) >> 2] = $170_1 + 4 | 0;
      $173_1 = HEAP32[$170_1 >> 2] | 0;
      HEAP32[($5_1 + 160 | 0) >> 2] = $173_1;
      if (!(($173_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$19
      }
      label$21 : {
       if (((HEAPU8[((HEAP32[($5_1 + 160 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0) {
        break label$21
       }
       break label$19;
      }
      continue label$20;
     };
    }
   }
   HEAP32[($5_1 + 152 | 0) >> 2] = HEAP32[($5_1 + 160 | 0) >> 2] | 0;
   label$22 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$22
    }
    $195_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $197_1 = HEAP32[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $199_1 = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($5_1 + 120 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($5_1 + 116 | 0) >> 2] = $199_1;
    HEAP32[($5_1 + 112 | 0) >> 2] = $197_1;
    $396($195_1 | 0, 4039 | 0, 42025 | 0, $5_1 + 112 | 0 | 0);
   }
   HEAP32[($5_1 + 140 | 0) >> 2] = $270(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0) | 0;
   label$23 : {
    label$24 : {
     if (((HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
      break label$24
     }
     $228(HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
     break label$23;
    }
    label$25 : {
     if ((((HEAPU8[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0) {
      break label$25
     }
     $258(HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0);
     $248(HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0);
    }
   }
  }
  label$26 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$26
   }
   $236_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($236_1 | 0, 4040 | 0, 42084 | 0, $5_1 + 80 | 0 | 0);
  }
  $243_1 = 0;
  HEAP32[($5_1 + 160 | 0) >> 2] = $243_1;
  label$27 : {
   if (!((HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($243_1 | 0) & 1 | 0)) {
    break label$27
   }
   HEAP32[($5_1 + 156 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$28 : {
    label$29 : while (1) {
     $256_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
     HEAP32[($5_1 + 156 | 0) >> 2] = $256_1 + 4 | 0;
     $259_1 = HEAP32[$256_1 >> 2] | 0;
     HEAP32[($5_1 + 160 | 0) >> 2] = $259_1;
     if (!(($259_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$28
     }
     label$30 : {
      label$31 : {
       if (!((HEAP32[($5_1 + 160 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$31
       }
       if (!(HEAP32[($5_1 + 140 | 0) >> 2] | 0)) {
        break label$31
       }
       $346(HEAP32[((HEAP32[($5_1 + 160 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
       break label$30;
      }
      $332(HEAP32[((HEAP32[($5_1 + 160 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) | 0;
      label$32 : {
       if ((HEAP32[((HEAP32[((HEAP32[($5_1 + 160 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$32
       }
       $244(HEAP32[($5_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
      }
     }
     continue label$29;
    };
   }
  }
  label$33 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$33
   }
   $301_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $303_1 = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 64 | 0) >> 2] = $303_1;
   $396($301_1 | 0, 4041 | 0, 42133 | 0, $5_1 + 64 | 0 | 0);
  }
  $310_1 = 0;
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($5_1 + 136 | 0) >> 2] = $310_1;
  label$34 : {
   if (!((HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($310_1 | 0) & 1 | 0)) {
    break label$34
   }
   HEAP32[($5_1 + 132 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$35 : {
    label$36 : while (1) {
     $328_1 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
     HEAP32[($5_1 + 132 | 0) >> 2] = $328_1 + 4 | 0;
     $331_1 = HEAP32[$328_1 >> 2] | 0;
     HEAP32[($5_1 + 136 | 0) >> 2] = $331_1;
     if (!(($331_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$35
     }
     HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     continue label$36;
    };
   }
  }
  $340_1 = 0;
  HEAP32[($5_1 + 148 | 0) >> 2] = $340_1;
  label$37 : {
   if (!((HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($340_1 | 0) & 1 | 0)) {
    break label$37
   }
   HEAP32[($5_1 + 144 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$38 : {
    label$39 : while (1) {
     $353_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
     HEAP32[($5_1 + 144 | 0) >> 2] = $353_1 + 4 | 0;
     $356_1 = HEAP32[$353_1 >> 2] | 0;
     HEAP32[($5_1 + 148 | 0) >> 2] = $356_1;
     if (!(($356_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$38
     }
     label$40 : {
      label$41 : {
       if (!((HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$41
       }
       $372_1 = HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$40;
      }
      $372_1 = HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 128 | 0) >> 2] = $372_1;
     label$42 : {
      label$43 : {
       if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$43
       }
       $208(HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 144 | 0) >> 2] = (HEAP32[($5_1 + 144 | 0) >> 2] | 0) + -4 | 0;
       $332(HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) | 0;
       break label$42;
      }
      label$44 : {
       label$45 : {
        if (!(((HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
         break label$45
        }
        if ($342(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) | 0) {
         break label$45
        }
        $401_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $403_1 = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $405_1 = HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $407_1 = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 40 | 0) >> 2] = $407_1;
        HEAP32[($5_1 + 36 | 0) >> 2] = $405_1;
        HEAP32[($5_1 + 32 | 0) >> 2] = $403_1;
        $396($401_1 | 0, 6356 | 0, 42194 | 0, $5_1 + 32 | 0 | 0);
        $150(5 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0);
        break label$44;
       }
       label$46 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$46
        }
        $426_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $428_1 = HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $430_1 = HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $432_1 = HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $441_1 = (HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0;
        HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0;
        HEAP32[($5_1 + 12 | 0) >> 2] = $441_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $432_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $430_1;
        HEAP32[$5_1 >> 2] = $428_1;
        $396($426_1 | 0, 4059 | 0, 42287 | 0, $5_1 | 0);
       }
       $325((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0);
       label$47 : {
        label$48 : {
         if (!((HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$48
         }
         $325((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0);
         $346(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
         HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
         break label$47;
        }
        label$49 : {
         if (!(((HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
          break label$49
         }
         $175(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0);
        }
        label$50 : {
         label$51 : {
          if (!((HEAP32[((HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$51
          }
          $332(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0) | 0;
          $346(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
          break label$50;
         }
         $332(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) | 0;
        }
       }
       label$52 : {
        label$53 : {
         if (!((HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$53
         }
         HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
         $515_1 = HEAP32[($5_1 + 148 | 0) >> 2] | 0;
         HEAP8[($515_1 + 16 | 0) >> 0] = (HEAPU8[($515_1 + 16 | 0) >> 0] | 0) & -33 | 0;
         break label$52;
        }
        HEAP32[((HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
        $521_1 = HEAP32[($5_1 + 148 | 0) >> 2] | 0;
        HEAP8[($521_1 + 16 | 0) >> 0] = (HEAPU8[($521_1 + 16 | 0) >> 0] | 0) & -65 | 0;
       }
      }
     }
     continue label$39;
    };
   }
  }
  label$54 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$54
   }
   $534 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $536 = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $538 = HEAP32[((HEAP32[($5_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 52 | 0) >> 2] = $538;
   HEAP32[($5_1 + 48 | 0) >> 2] = $536;
   $396($534 | 0, 3006 | 0, 42367 | 0, $5_1 + 48 | 0 | 0);
  }
  global$0 = $5_1 + 176 | 0;
  return;
 }
 
 function $223($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $102_1 = 0, $144_1 = 0, $172_1 = 0, $174_1 = 0, $176_1 = 0, $178_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
     HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
      HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
      HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
     HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
    }
   }
  }
  label$7 : {
   label$8 : {
    if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 > (HEAP32[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$8
    }
    HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
    HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    label$9 : {
     if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     $102_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
     HEAP32[($102_1 + 80 | 0) >> 2] = (HEAP32[($102_1 + 80 | 0) >> 2] | 0) & -4097 | 0 | (((((((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0) & 1 | 0) << 12 | 0) | 0;
    }
    HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    break label$7;
   }
   HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
   HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
   label$10 : {
    if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$10
    }
    $144_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
    HEAP32[($144_1 + 80 | 0) >> 2] = (HEAP32[($144_1 + 80 | 0) >> 2] | 0) & -4097 | 0 | (((((((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0) & 1 | 0) << 12 | 0) | 0;
   }
   HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  $346(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$11
   }
   $172_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $174_1 = HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $176_1 = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $178_1 = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $178_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = $176_1;
   HEAP32[$4_1 >> 2] = $174_1;
   $396($172_1 | 0, 4036 | 0, 41811 | 0, $4_1 | 0);
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $39_1 = 0, $42_1 = 0, $51_1 = 0, $64_1 = 0, $67_1 = 0, $14_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $16_1 = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $16_1;
   $396($14_1 | 0, 4037 | 0, 41873 | 0, $4_1 | 0);
  }
  $21_1 = 0;
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $21_1;
  label$2 : {
   if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($21_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $39_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $39_1 + 4 | 0;
     $42_1 = HEAP32[$39_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $42_1;
     if (!(($42_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     continue label$4;
    };
   }
  }
  $51_1 = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $51_1;
  label$5 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($51_1 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$6 : {
    label$7 : while (1) {
     $64_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $64_1 + 4 | 0;
     $67_1 = HEAP32[$64_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $67_1;
     if (!(($67_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     label$8 : {
      label$9 : {
       if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       label$10 : {
        if (!(((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
         break label$10
        }
        $175(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$12
         }
         $332(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
         break label$11;
        }
        $332(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
        $346(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
       }
       break label$8;
      }
      label$13 : {
       if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       $325((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
       $346(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
      }
     }
     continue label$7;
    };
   }
  }
  $332(HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $332(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $33_1 = 0, $36_1 = 0, $73_1 = 0, $88_1 = 0, $117_1 = 0, $132_1 = 0, $150_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = ((($337(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) + ($337(HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) | 0) - (HEAP32[(0 + 88316 | 0) >> 2] | 0) | 0) + 1 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $347(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $33_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $33_1 + 4 | 0;
     $36_1 = HEAP32[$33_1 >> 2] | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $36_1;
     if (!(($36_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 > (HEAP32[((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$5
        }
       }
       $325($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
       break label$4;
      }
      label$7 : while (1) {
       $73_1 = 0;
       label$8 : {
        if (!((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$8
        }
        $73_1 = (HEAP32[((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 > (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0;
       }
       label$9 : {
        if (!($73_1 & 1 | 0)) {
         break label$9
        }
        $88_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = $88_1 + 4 | 0;
        $325($4_1 + 16 | 0 | 0, HEAP32[$88_1 >> 2] | 0 | 0);
        continue label$7;
       }
       break label$7;
      };
      label$10 : {
       label$11 : {
        label$12 : {
         if (!((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$12
         }
         if (!((HEAP32[((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$11
         }
        }
        $325($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
        break label$10;
       }
       $117_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $117_1 + 4 | 0;
       $325($4_1 + 16 | 0 | 0, HEAP32[$117_1 >> 2] | 0 | 0);
      }
     }
     continue label$3;
    };
   }
  }
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$13
    }
    $132_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $132_1 + 4 | 0;
    $325($4_1 + 16 | 0 | 0, HEAP32[$132_1 >> 2] | 0 | 0);
    continue label$14;
   };
  }
  label$15 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < ($337(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
    break label$15
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6100 | 0, 42623 | 0, 0 | 0);
   $150_1 = 0;
   $382(5 | 0, $150_1 | 0, $150_1 | 0);
  }
  $324(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  $349() | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $34_1 = 0, $37_1 = 0, $63_1 = 0, $76_1 = 0, $79_1 = 0, $95_1 = 0, $101_1 = 0, $14_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $16_1 = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $16_1;
   $396($14_1 | 0, 4038 | 0, 41924 | 0, $4_1 | 0);
  }
  $21_1 = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $21_1;
  label$2 : {
   if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($21_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $34_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $34_1 + 4 | 0;
     $37_1 = HEAP32[$34_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $37_1;
     if (!(($37_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      label$6 : {
       if ((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$6
       }
       if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
      }
      $208(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
      HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + -4 | 0;
     }
     continue label$4;
    };
   }
  }
  $63_1 = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $63_1;
  label$7 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($63_1 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$8 : {
    label$9 : while (1) {
     $76_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $76_1 + 4 | 0;
     $79_1 = HEAP32[$76_1 >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $79_1;
     if (!(($79_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     label$10 : {
      label$11 : {
       if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
       $95_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
       HEAP8[($95_1 + 16 | 0) >> 0] = (HEAPU8[($95_1 + 16 | 0) >> 0] | 0) & -33 | 0;
       break label$10;
      }
      HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      $101_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      HEAP8[($101_1 + 16 | 0) >> 0] = (HEAPU8[($101_1 + 16 | 0) >> 0] | 0) & -65 | 0;
     }
     $325((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
     continue label$9;
    };
   }
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $46_1 = 0, $108_1 = 0, $49_1 = 0, $62_1 = 0, $65_1 = 0, $14_1 = 0, $16_1 = 0, $32_1 = 0, $34_1 = 0, $36_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $16_1 = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $16_1;
   $396($14_1 | 0, 4042 | 0, 42482 | 0, $4_1 + 16 | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $32_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $34_1 = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $36_1 = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $38_1 = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[(0 + 90044 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $38_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = $36_1;
   HEAP32[$4_1 >> 2] = $34_1;
   $396($32_1 | 0, 8081 | 0, 42551 | 0, $4_1 | 0);
   $46_1 = 0;
   $383(42617 | 0, $46_1 | 0, $46_1 | 0, $46_1 | 0, HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0);
  }
  $49_1 = 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $49_1;
  label$3 : {
   if (!((HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($49_1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $62_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = $62_1 + 4 | 0;
     $65_1 = HEAP32[$62_1 >> 2] | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = $65_1;
     if (!(($65_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      label$7 : {
       if (!((HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       $346(HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
       break label$6;
      }
      $332(HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0;
      label$8 : {
       if ((HEAP32[((HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$8
       }
       $244(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
      }
     }
     continue label$5;
    };
   }
  }
  label$9 : {
   if (!((HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   $108_1 = 0;
   $383(42617 | 0, $108_1 | 0, $108_1 | 0, $108_1 | 0, HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0, $18_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $15_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $15_1 + 4 | 0;
     $18_1 = HEAP32[$15_1 >> 2] | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = $18_1;
     if (!(($18_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if ((((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0) {
       break label$4
      }
      $258(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
      $248(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
     }
     continue label$3;
    };
   }
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $229($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $37_1 = 0, $6_1 = 0, $111_1 = 0, $210_1 = 0, $65_1 = 0, $67_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $90_1 = 0, $136_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0) >>> 0 > $6_1 >>> 0 & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0) >>> 0 < 14 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(86960 + ((HEAP32[($5_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(0 + 86960 | 0) >> 2] | 0;
  }
  label$3 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$3
   }
   $37_1 = 0;
   $383(47329 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, $37_1 | 0, $37_1 | 0, $37_1 | 0);
  }
  label$4 : {
   label$5 : {
    if ((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$5
    }
    if (!((HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((((HEAPU8[((HEAP32[(0 + 90044 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0)) {
     break label$4
    }
   }
   $65_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $67_1 = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $69_1 = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $70_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   $71_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = $71_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $70_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $69_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $67_1;
   $396($65_1 | 0, 8085 | 0, 47336 | 0, $5_1 + 16 | 0 | 0);
   label$6 : {
    if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    $90_1 = HEAP32[(0 + 90028 | 0) >> 2] | 0;
    label$7 : {
     label$8 : {
      if (!((HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      if (!((HEAP32[((HEAP32[(0 + 90044 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      $111_1 = HEAP32[((HEAP32[((HEAP32[(0 + 90044 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      break label$7;
     }
     $111_1 = 0;
    }
    $383(42617 | 0, $90_1 | 0, $111_1 | 0, 0 | 0, HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0);
   }
  }
  label$9 : {
   if (!((HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   label$10 : {
    label$11 : {
     if (!((((HEAPU8[((HEAP32[(0 + 90044 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
      break label$11
     }
     $136_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[$5_1 >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     $396($136_1 | 0, 8086 | 0, 47430 | 0, $5_1 | 0);
     break label$10;
    }
    $283(HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0, 1 | 0, $5_1 + 48 | 0 | 0);
   }
  }
  label$12 : {
   if (!((HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$12
   }
   if (!((HEAP32[((HEAP32[(0 + 90028 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$12
   }
   if (((HEAP32[((HEAP32[(0 + 90028 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
    break label$12
   }
   $282(HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0, 1 | 0, $5_1 + 48 | 0 | 0);
  }
  label$13 : {
   label$14 : {
    if (HEAP32[(0 + 87764 | 0) >> 2] | 0) {
     break label$14
    }
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$13
    }
   }
   label$15 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$15
    }
    if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (500 | 0) & 1 | 0)) {
     break label$15
    }
    $281();
   }
   $282(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, 1 | 0, $5_1 + 48 | 0 | 0);
  }
  label$16 : {
   if (!(HEAP32[($5_1 + 48 | 0) >> 2] | 0)) {
    break label$16
   }
   $210_1 = 0;
   $382(5 | 0, $210_1 | 0, $210_1 | 0);
  }
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $20_1 = 0, $33_1 = 0, $36_1 = 0, $79_1 = 0, $13_1 = 0, $49_1 = 0, $51_1 = 0, $100_1 = 0, $102_1 = 0, $103_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($13_1 | 0, 4073 | 0, 46059 | 0, $3_1 + 32 | 0 | 0);
  }
  $20_1 = 0;
  HEAP32[($3_1 + 56 | 0) >> 2] = $20_1;
  label$2 : {
   if (!((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($20_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $33_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
     HEAP32[($3_1 + 52 | 0) >> 2] = $33_1 + 4 | 0;
     $36_1 = HEAP32[$33_1 >> 2] | 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = $36_1;
     if (!(($36_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      if (!(((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
       break label$5
      }
      $49_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $51_1 = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = $51_1;
      $396($49_1 | 0, 6359 | 0, 46122 | 0, $3_1 + 16 | 0 | 0);
      $150(5 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0);
     }
     label$6 : {
      label$7 : {
       if (((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
        break label$7
       }
       if ((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
        break label$7
       }
       if (!(((HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
        break label$6
       }
      }
      continue label$4;
     }
     $79_1 = $337(HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 48 | 0) >> 2] = $79_1;
     label$8 : {
      if (!(($79_1 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      $174(HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0, 10 | 0, +(+(0 | 0)), +(1.0));
      label$9 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$9
       }
       $100_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $102_1 = HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $103_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
       HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $103_1;
       HEAP32[$3_1 >> 2] = $102_1;
       $396($100_1 | 0, 2019 | 0, 46224 | 0, $3_1 | 0);
      }
     }
     continue label$4;
    };
   }
  }
  global$0 = $3_1 + 64 | 0;
  return;
 }
 
 function $231() {
  var $2_1 = 0, $125_1 = 0, $40_1 = 0, $124_1 = 0, $28_1 = 0, $30_1 = 0, $32_1 = 0, $111_1 = 0, $114_1 = 0, $117_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    if ((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$1
    }
   }
   $28_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $30_1 = HEAP32[(0 + 90272 | 0) >> 2] | 0;
   $32_1 = HEAP32[(0 + 90276 | 0) >> 2] | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[(0 + 90280 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $32_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $30_1;
   $396($28_1 | 0, 6388 | 0, 34436 | 0, $2_1 + 16 | 0 | 0);
   $40_1 = 0;
   $382(5 | 0, $40_1 | 0, $40_1 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!((HEAP32[((HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      if (0 & 1 | 0) {
       break label$5
      }
      break label$4;
     }
     if (!(1 & 1 | 0)) {
      break label$4
     }
    }
    label$7 : {
     if (!((HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     label$8 : {
      if (!((HEAP32[((HEAP32[(0 + 90276 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      if (0 & 1 | 0) {
       break label$7
      }
      break label$4;
     }
     if (!(1 & 1 | 0)) {
      break label$4
     }
    }
    if (!((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    label$9 : {
     if (!((HEAP32[((HEAP32[(0 + 90280 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     if (0 & 1 | 0) {
      break label$3
     }
     break label$4;
    }
    if (1 & 1 | 0) {
     break label$3
    }
   }
   $111_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $114_1 = $337(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
   $117_1 = $337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $337(HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $117_1;
   HEAP32[$2_1 >> 2] = $114_1;
   $396($111_1 | 0, 6389 | 0, 34599 | 0, $2_1 | 0);
   $124_1 = 0;
   $382(5 | 0, $124_1 | 0, $124_1 | 0);
  }
  $125_1 = 87704;
  $348($125_1 + 2568 | 0 | 0);
  $348($125_1 + 2576 | 0 | 0);
  $348($125_1 + 2572 | 0 | 0);
  global$0 = $2_1 + 32 | 0;
  return;
 }
 
 function $232($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $233_1 = 0.0, $245_1 = 0.0, $252_1 = 0.0, $259_1 = 0.0, $262_1 = 0.0, $267_1 = 0.0, $16_1 = 0, $48_1 = 0, $110_1 = 0, $112_1 = 0, $114_1 = 0, $227_1 = 0.0, $228_1 = 0.0, $229_1 = 0.0, $140_1 = 0, $142_1 = 0, $144_1 = 0, $238_1 = 0.0, $239_1 = 0.0, $240_1 = 0.0, $247_1 = 0.0, $193_1 = 0, $195_1 = 0, $197_1 = 0, $273_1 = 0.0, $274_1 = 0.0, $207_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 184 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAPF64[($6_1 + 168 | 0) >> 3] = $2_1;
  HEAP32[($6_1 + 164 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 132 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 128 | 0) >> 2] = $7_1;
  label$1 : {
   if ((HEAP32[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0) {
    break label$1
   }
   $16_1 = $12(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + 40 | 0) >> 2] = $16_1;
  }
  HEAP32[(0 + 90696 | 0) >> 2] = (HEAP32[(0 + 90696 | 0) >> 2] | 0) + 1 | 0;
  $4(HEAP32[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $6_1 + 152 | 0 | 0);
  label$2 : {
   label$3 : {
    if (!(+HEAPF64[($6_1 + 152 | 0) >> 3] > +HEAPF64[(0 + 89424 | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    HEAP32[($6_1 + 132 | 0) >> 2] = 1;
    break label$2;
   }
   label$4 : {
    if (!(+HEAPF64[($6_1 + 152 | 0) >> 3] >= -+HEAPF64[(0 + 89424 | 0) >> 3] & 1 | 0)) {
     break label$4
    }
    HEAP32[($6_1 + 128 | 0) >> 2] = 1;
   }
  }
  label$5 : {
   if ((HEAP32[((HEAP32[($6_1 + 180 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$5
   }
   $48_1 = $12(HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 180 | 0) >> 2] | 0) + 40 | 0) >> 2] = $48_1;
  }
  HEAP32[(0 + 90696 | 0) >> 2] = (HEAP32[(0 + 90696 | 0) >> 2] | 0) + 1 | 0;
  $4(HEAP32[((HEAP32[($6_1 + 180 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, $6_1 + 144 | 0 | 0);
  label$6 : {
   label$7 : {
    if (!(+HEAPF64[($6_1 + 144 | 0) >> 3] > +HEAPF64[(0 + 89424 | 0) >> 3] & 1 | 0)) {
     break label$7
    }
    HEAP32[($6_1 + 132 | 0) >> 2] = 1;
    break label$6;
   }
   label$8 : {
    if (HEAP32[($6_1 + 128 | 0) >> 2] | 0) {
     break label$8
    }
    if (!(+HEAPF64[($6_1 + 144 | 0) >> 3] >= -+HEAPF64[(0 + 89424 | 0) >> 3] & 1 | 0)) {
     break label$8
    }
    HEAP32[($6_1 + 128 | 0) >> 2] = 1;
   }
  }
  label$9 : {
   label$10 : {
    if (HEAP32[($6_1 + 132 | 0) >> 2] | 0) {
     break label$10
    }
    label$11 : {
     if (!(HEAP32[($6_1 + 128 | 0) >> 2] | 0)) {
      break label$11
     }
     if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
      break label$10
     }
     if (HEAP32[(0 + 90216 | 0) >> 2] | 0) {
      break label$10
     }
    }
    HEAP32[($6_1 + 188 | 0) >> 2] = 0;
    break label$9;
   }
   label$12 : {
    if (HEAP32[($6_1 + 164 | 0) >> 2] | 0) {
     break label$12
    }
    if (!(HEAP32[(0 + 87720 | 0) >> 2] | 0)) {
     break label$12
    }
    HEAPF64[($6_1 + 168 | 0) >> 3] = +$10(HEAP32[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 180 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
    HEAP32[(0 + 90584 | 0) >> 2] = (HEAP32[(0 + 90584 | 0) >> 2] | 0) + 1 | 0;
   }
   label$13 : {
    label$14 : {
     if (!(HEAP32[($6_1 + 132 | 0) >> 2] | 0)) {
      break label$14
     }
     if (!(HEAP32[($6_1 + 128 | 0) >> 2] | 0)) {
      break label$14
     }
     HEAP32[(0 + 90768 | 0) >> 2] = (HEAP32[(0 + 90768 | 0) >> 2] | 0) + 1 | 0;
     label$15 : {
      label$16 : {
       if (!(+HEAPF64[($6_1 + 152 | 0) >> 3] > +HEAPF64[($6_1 + 144 | 0) >> 3] & 1 | 0)) {
        break label$16
       }
       $174(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, 4 | 0, +(+HEAPF64[($6_1 + 152 | 0) >> 3]), +(+HEAPF64[($6_1 + 168 | 0) >> 3]));
       break label$15;
      }
      $174(HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, 4 | 0, +(+HEAPF64[($6_1 + 144 | 0) >> 3]), +(+HEAPF64[($6_1 + 168 | 0) >> 3]));
     }
     label$17 : {
      if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
       break label$17
      }
      $110_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $112_1 = HEAP32[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $114_1 = HEAP32[((HEAP32[($6_1 + 180 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $227_1 = +HEAPF64[($6_1 + 152 | 0) >> 3];
      $228_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
      $229_1 = +HEAPF64[($6_1 + 168 | 0) >> 3];
      HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
      HEAPF64[($6_1 + 24 | 0) >> 3] = $229_1;
      HEAPF64[($6_1 + 16 | 0) >> 3] = $228_1;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $227_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $114_1;
      HEAP32[$6_1 >> 2] = $112_1;
      $396($110_1 | 0, 36 | 0, 45759 | 0, $6_1 | 0);
     }
     break label$13;
    }
    label$18 : {
     label$19 : {
      if (!(HEAP32[($6_1 + 132 | 0) >> 2] | 0)) {
       break label$19
      }
      label$20 : {
       label$21 : {
        if (!(+HEAPF64[($6_1 + 152 | 0) >> 3] < +HEAPF64[($6_1 + 144 | 0) >> 3] & 1 | 0)) {
         break label$21
        }
        $233_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
        break label$20;
       }
       $233_1 = +HEAPF64[($6_1 + 152 | 0) >> 3];
      }
      HEAPF64[($6_1 + 136 | 0) >> 3] = $233_1;
      HEAP32[(0 + 90776 | 0) >> 2] = (HEAP32[(0 + 90776 | 0) >> 2] | 0) + 1 | 0;
      $174(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, 3 | 0, +(+HEAPF64[($6_1 + 136 | 0) >> 3]), +(+HEAPF64[($6_1 + 168 | 0) >> 3]));
      label$22 : {
       if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
        break label$22
       }
       $140_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $142_1 = HEAP32[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $144_1 = HEAP32[((HEAP32[($6_1 + 180 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $238_1 = +HEAPF64[($6_1 + 152 | 0) >> 3];
       $239_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
       $240_1 = +HEAPF64[($6_1 + 168 | 0) >> 3];
       HEAP32[($6_1 + 80 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
       HEAPF64[($6_1 + 72 | 0) >> 3] = $240_1;
       HEAPF64[($6_1 + 64 | 0) >> 3] = $239_1;
       HEAPF64[($6_1 + 56 | 0) >> 3] = $238_1;
       HEAP32[($6_1 + 52 | 0) >> 2] = $144_1;
       HEAP32[($6_1 + 48 | 0) >> 2] = $142_1;
       $396($140_1 | 0, 37 | 0, 45870 | 0, $6_1 + 48 | 0 | 0);
      }
      break label$18;
     }
     label$23 : {
      label$24 : {
       if (!(+HEAPF64[($6_1 + 152 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$24
       }
       $245_1 = -+HEAPF64[($6_1 + 152 | 0) >> 3];
       break label$23;
      }
      $245_1 = +HEAPF64[($6_1 + 152 | 0) >> 3];
     }
     $247_1 = $245_1;
     label$25 : {
      label$26 : {
       if (!(+HEAPF64[($6_1 + 144 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$26
       }
       $252_1 = -+HEAPF64[($6_1 + 144 | 0) >> 3];
       break label$25;
      }
      $252_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
     }
     label$27 : {
      label$28 : {
       if (!($247_1 > $252_1 & 1 | 0)) {
        break label$28
       }
       label$29 : {
        label$30 : {
         if (!(+HEAPF64[($6_1 + 144 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$30
         }
         $259_1 = -+HEAPF64[($6_1 + 144 | 0) >> 3];
         break label$29;
        }
        $259_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
       }
       $262_1 = $259_1;
       break label$27;
      }
      label$31 : {
       label$32 : {
        if (!(+HEAPF64[($6_1 + 152 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
         break label$32
        }
        $267_1 = -+HEAPF64[($6_1 + 152 | 0) >> 3];
        break label$31;
       }
       $267_1 = +HEAPF64[($6_1 + 152 | 0) >> 3];
      }
      $262_1 = $267_1;
     }
     HEAPF64[($6_1 + 136 | 0) >> 3] = $262_1;
     HEAP32[(0 + 90824 | 0) >> 2] = (HEAP32[(0 + 90824 | 0) >> 2] | 0) + 1 | 0;
     $174(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, 1 | 0, +(+HEAPF64[($6_1 + 136 | 0) >> 3]), +(+HEAPF64[($6_1 + 168 | 0) >> 3]));
     label$33 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
       break label$33
      }
      $193_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $195_1 = HEAP32[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $197_1 = HEAP32[((HEAP32[($6_1 + 180 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $273_1 = +HEAPF64[($6_1 + 152 | 0) >> 3];
      $274_1 = +HEAPF64[($6_1 + 144 | 0) >> 3];
      HEAPF64[($6_1 + 120 | 0) >> 3] = +HEAPF64[($6_1 + 168 | 0) >> 3];
      HEAPF64[($6_1 + 112 | 0) >> 3] = $274_1;
      HEAPF64[($6_1 + 104 | 0) >> 3] = $273_1;
      HEAP32[($6_1 + 100 | 0) >> 2] = $197_1;
      HEAP32[($6_1 + 96 | 0) >> 2] = $195_1;
      $396($193_1 | 0, 2097 | 0, 45972 | 0, $6_1 + 96 | 0 | 0);
     }
    }
   }
   HEAP32[($6_1 + 188 | 0) >> 2] = 1;
  }
  $207_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
  global$0 = $6_1 + 192 | 0;
  return $207_1 | 0;
 }
 
 function $233($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $599 = 0.0, $605 = 0.0, $615 = 0.0, $644 = 0.0, $362_1 = 0, $376_1 = 0, $424_1 = 0, $438_1 = 0, $719 = 0.0, $482_1 = 0, $496_1 = 0, $730 = 0.0, $739 = 0.0, $749 = 0.0, $753 = 0.0, $757 = 0.0, $557 = 0, $571 = 0, $63_1 = 0, $98_1 = 0, $153_1 = 0, $155_1 = 0, $157_1 = 0, $649 = 0.0, $650 = 0.0, $651 = 0.0, $351_1 = 0, $353_1 = 0, $364_1 = 0, $367_1 = 0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $413_1 = 0, $415_1 = 0, $426_1 = 0, $429_1 = 0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $471_1 = 0, $473_1 = 0, $484_1 = 0, $487_1 = 0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $732 = 0.0, $546 = 0, $548 = 0, $559 = 0, $562 = 0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $589 = 0;
  $6_1 = global$0 - 400 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 392 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 388 | 0) >> 2] = $1_1;
  HEAPF64[($6_1 + 376 | 0) >> 3] = $2_1;
  HEAP32[($6_1 + 372 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 268 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 260 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $7_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    $599 = +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
    break label$1;
   }
   $599 = +HEAPF64[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 8 | 0) >> 3];
  }
  HEAPF64[($6_1 + 312 | 0) >> 3] = $599;
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($6_1 + 312 | 0) >> 3] < +HEAPF64[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
     break label$4
    }
    $605 = +HEAPF64[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 8 | 0) >> 3];
    break label$3;
   }
   $605 = +HEAPF64[($6_1 + 312 | 0) >> 3];
  }
  HEAPF64[($6_1 + 312 | 0) >> 3] = $605;
  HEAPF64[($6_1 + 304 | 0) >> 3] = 20.0 * +HEAPF64[($6_1 + 312 | 0) >> 3];
  label$5 : {
   label$6 : {
    if (!(-+HEAPF64[(0 + 90168 | 0) >> 3] < +HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
     break label$6
    }
    $615 = +HEAPF64[(0 + 87864 | 0) >> 3];
    break label$5;
   }
   $615 = -+HEAPF64[(0 + 90168 | 0) >> 3];
  }
  HEAPF64[($6_1 + 296 | 0) >> 3] = $615;
  HEAPF64[($6_1 + 288 | 0) >> 3] = 10.0 * +HEAPF64[($6_1 + 296 | 0) >> 3];
  label$7 : {
   label$8 : {
    if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
     break label$8
    }
    if (HEAP32[(0 + 90216 | 0) >> 2] | 0) {
     break label$8
    }
    label$9 : {
     if (((HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0 | 0) > (10 | 0) & 1 | 0) {
      break label$9
     }
     if (!(((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0 | 0) > (10 | 0) & 1 | 0)) {
      break label$8
     }
    }
    HEAPF64[($6_1 + 272 | 0) >> 3] = +HEAPF64[($6_1 + 312 | 0) >> 3];
    break label$7;
   }
   HEAPF64[($6_1 + 272 | 0) >> 3] = +HEAPF64[(0 + 89424 | 0) >> 3];
  }
  label$10 : {
   if ((HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$10
   }
   $63_1 = $12(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 40 | 0) >> 2] = $63_1;
  }
  HEAP32[(0 + 90696 | 0) >> 2] = (HEAP32[(0 + 90696 | 0) >> 2] | 0) + 1 | 0;
  $4(HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 360 | 0 | 0);
  label$11 : {
   label$12 : {
    if (!(+HEAPF64[($6_1 + 360 | 0) >> 3] > +HEAPF64[($6_1 + 272 | 0) >> 3] & 1 | 0)) {
     break label$12
    }
    HEAP32[($6_1 + 268 | 0) >> 2] = 1;
    break label$11;
   }
   label$13 : {
    label$14 : {
     if (!(+HEAPF64[($6_1 + 360 | 0) >> 3] >= -+HEAPF64[(0 + 89424 | 0) >> 3] & 1 | 0)) {
      break label$14
     }
     HEAP32[($6_1 + 264 | 0) >> 2] = 1;
     break label$13;
    }
    label$15 : {
     if (!(+HEAPF64[($6_1 + 360 | 0) >> 3] < -+HEAPF64[($6_1 + 288 | 0) >> 3] & 1 | 0)) {
      break label$15
     }
     HEAP32[($6_1 + 260 | 0) >> 2] = 1;
    }
   }
  }
  label$16 : {
   if ((HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$16
   }
   $98_1 = $12(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 40 | 0) >> 2] = $98_1;
  }
  HEAP32[(0 + 90696 | 0) >> 2] = (HEAP32[(0 + 90696 | 0) >> 2] | 0) + 1 | 0;
  $4(HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, $6_1 + 320 | 0 | 0);
  label$17 : {
   label$18 : {
    label$19 : {
     if (!(+HEAPF64[($6_1 + 320 | 0) >> 3] > +HEAPF64[($6_1 + 272 | 0) >> 3] & 1 | 0)) {
      break label$19
     }
     HEAP32[($6_1 + 268 | 0) >> 2] = 1;
     break label$18;
    }
    label$20 : {
     label$21 : {
      if (!(+HEAPF64[($6_1 + 320 | 0) >> 3] >= -+HEAPF64[(0 + 89424 | 0) >> 3] & 1 | 0)) {
       break label$21
      }
      HEAP32[($6_1 + 264 | 0) >> 2] = 1;
      break label$20;
     }
     label$22 : {
      if (!(+HEAPF64[($6_1 + 320 | 0) >> 3] < -+HEAPF64[($6_1 + 288 | 0) >> 3] & 1 | 0)) {
       break label$22
      }
      label$23 : {
       if (!(HEAP32[($6_1 + 260 | 0) >> 2] | 0)) {
        break label$23
       }
       HEAP32[($6_1 + 396 | 0) >> 2] = 0;
       break label$17;
      }
      HEAP32[($6_1 + 260 | 0) >> 2] = 1;
     }
    }
   }
   label$24 : {
    if (!(HEAP32[($6_1 + 268 | 0) >> 2] | 0)) {
     break label$24
    }
    label$25 : {
     if (HEAP32[($6_1 + 372 | 0) >> 2] | 0) {
      break label$25
     }
     if (!(HEAP32[(0 + 87720 | 0) >> 2] | 0)) {
      break label$25
     }
     HEAPF64[($6_1 + 376 | 0) >> 3] = +$10(HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
     HEAP32[(0 + 90584 | 0) >> 2] = (HEAP32[(0 + 90584 | 0) >> 2] | 0) + 1 | 0;
    }
    label$26 : {
     label$27 : {
      if (!(+HEAPF64[($6_1 + 360 | 0) >> 3] < +HEAPF64[($6_1 + 320 | 0) >> 3] & 1 | 0)) {
       break label$27
      }
      $644 = +HEAPF64[($6_1 + 320 | 0) >> 3];
      break label$26;
     }
     $644 = +HEAPF64[($6_1 + 360 | 0) >> 3];
    }
    HEAPF64[($6_1 + 280 | 0) >> 3] = $644;
    HEAP32[(0 + 90776 | 0) >> 2] = (HEAP32[(0 + 90776 | 0) >> 2] | 0) + 1 | 0;
    $174(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 3 | 0, +(+HEAPF64[($6_1 + 280 | 0) >> 3]), +(+HEAPF64[($6_1 + 376 | 0) >> 3]));
    label$28 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$28
     }
     $153_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $155_1 = HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $157_1 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $649 = +HEAPF64[($6_1 + 360 | 0) >> 3];
     $650 = +HEAPF64[($6_1 + 320 | 0) >> 3];
     $651 = +HEAPF64[($6_1 + 376 | 0) >> 3];
     HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     HEAPF64[($6_1 + 24 | 0) >> 3] = $651;
     HEAPF64[($6_1 + 16 | 0) >> 3] = $650;
     HEAPF64[($6_1 + 8 | 0) >> 3] = $649;
     HEAP32[($6_1 + 4 | 0) >> 2] = $157_1;
     HEAP32[$6_1 >> 2] = $155_1;
     $396($153_1 | 0, 18 | 0, 46305 | 0, $6_1 | 0);
    }
    HEAP32[($6_1 + 396 | 0) >> 2] = 1;
    break label$17;
   }
   label$29 : {
    label$30 : {
     if (!(HEAP32[($6_1 + 260 | 0) >> 2] | 0)) {
      break label$30
     }
     label$31 : {
      label$32 : {
       if (!(+HEAPF64[($6_1 + 360 | 0) >> 3] < -+HEAPF64[($6_1 + 288 | 0) >> 3] & 1 | 0)) {
        break label$32
       }
       HEAPF64[($6_1 + 344 | 0) >> 3] = +HEAPF64[($6_1 + 360 | 0) >> 3];
       HEAPF64[($6_1 + 352 | 0) >> 3] = +HEAPF64[($6_1 + 360 | 0) >> 3];
       HEAP32[($6_1 + 248 | 0) >> 2] = $39(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, $6_1 + 328 | 0 | 0, $6_1 + 336 | 0 | 0) | 0;
       label$33 : {
        if ((HEAP32[($6_1 + 248 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$33
        }
        $174(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, 11 | 0, +(+HEAPF64[($6_1 + 328 | 0) >> 3]), +(2.0));
        HEAP32[($6_1 + 256 | 0) >> 2] = 1;
       }
       break label$31;
      }
      HEAPF64[($6_1 + 328 | 0) >> 3] = +HEAPF64[($6_1 + 320 | 0) >> 3];
      HEAPF64[($6_1 + 336 | 0) >> 3] = +HEAPF64[($6_1 + 320 | 0) >> 3];
      HEAP32[($6_1 + 252 | 0) >> 2] = $39(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 344 | 0 | 0, $6_1 + 352 | 0 | 0) | 0;
      label$34 : {
       if ((HEAP32[($6_1 + 252 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$34
       }
       $174(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 11 | 0, +(+HEAPF64[($6_1 + 344 | 0) >> 3]), +(2.0));
       HEAP32[($6_1 + 256 | 0) >> 2] = 1;
      }
     }
     break label$29;
    }
    HEAP32[($6_1 + 252 | 0) >> 2] = $39(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, $6_1 + 344 | 0 | 0, $6_1 + 352 | 0 | 0) | 0;
    label$35 : {
     label$36 : {
      if (!((HEAP32[($6_1 + 252 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$36
      }
      HEAP32[($6_1 + 248 | 0) >> 2] = $39(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, $6_1 + 328 | 0 | 0, $6_1 + 336 | 0 | 0) | 0;
      label$37 : {
       label$38 : {
        if ((HEAP32[($6_1 + 248 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$38
        }
        $174(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, 11 | 0, +(+HEAPF64[($6_1 + 328 | 0) >> 3]), +(2.0));
        HEAP32[($6_1 + 256 | 0) >> 2] = 1;
        break label$37;
       }
       label$39 : {
        label$40 : {
         if (+HEAPF64[($6_1 + 352 | 0) >> 3] < -+HEAPF64[($6_1 + 288 | 0) >> 3] & 1 | 0) {
          break label$40
         }
         if (!(+HEAPF64[($6_1 + 336 | 0) >> 3] < -+HEAPF64[($6_1 + 288 | 0) >> 3] & 1 | 0)) {
          break label$39
         }
        }
        HEAP32[($6_1 + 260 | 0) >> 2] = 1;
       }
      }
      break label$35;
     }
     $174(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 11 | 0, +(+HEAPF64[($6_1 + 344 | 0) >> 3]), +(2.0));
     HEAP32[($6_1 + 256 | 0) >> 2] = 1;
    }
   }
   label$41 : {
    if (!(HEAP32[($6_1 + 256 | 0) >> 2] | 0)) {
     break label$41
    }
    HEAP32[(0 + 92048 | 0) >> 2] = (HEAP32[(0 + 92048 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($6_1 + 396 | 0) >> 2] = 1;
    break label$17;
   }
   label$42 : {
    label$43 : {
     label$44 : {
      if (+HEAPF64[($6_1 + 344 | 0) >> 3] > +HEAPF64[($6_1 + 304 | 0) >> 3] & 1 | 0) {
       break label$44
      }
      if (!(+HEAPF64[($6_1 + 328 | 0) >> 3] > +HEAPF64[($6_1 + 304 | 0) >> 3] & 1 | 0)) {
       break label$43
      }
     }
     HEAP32[($6_1 + 268 | 0) >> 2] = 1;
     break label$42;
    }
    label$45 : {
     if (!(HEAP32[($6_1 + 260 | 0) >> 2] | 0)) {
      break label$45
     }
     label$46 : {
      label$47 : {
       if (+HEAPF64[($6_1 + 344 | 0) >> 3] > +HEAPF64[($6_1 + 312 | 0) >> 3] & 1 | 0) {
        break label$47
       }
       if (!(+HEAPF64[($6_1 + 328 | 0) >> 3] > +HEAPF64[($6_1 + 312 | 0) >> 3] & 1 | 0)) {
        break label$46
       }
      }
      HEAP32[($6_1 + 268 | 0) >> 2] = 1;
     }
    }
   }
   label$48 : {
    if (HEAP32[($6_1 + 268 | 0) >> 2] | 0) {
     break label$48
    }
    if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
     break label$48
    }
    if (HEAP32[(0 + 90216 | 0) >> 2] | 0) {
     break label$48
    }
    HEAP32[($6_1 + 396 | 0) >> 2] = 0;
    break label$17;
   }
   label$49 : {
    label$50 : {
     if (!(HEAP32[($6_1 + 268 | 0) >> 2] | 0)) {
      break label$50
     }
     if (HEAP32[($6_1 + 264 | 0) >> 2] | 0) {
      break label$50
     }
     label$51 : {
      if (!(+HEAPF64[($6_1 + 344 | 0) >> 3] < +HEAPF64[($6_1 + 312 | 0) >> 3] & 1 | 0)) {
       break label$51
      }
      label$52 : {
       if (-+HEAPF64[(0 + 87864 | 0) >> 3] != +(0 | 0) & 1 | 0) {
        break label$52
       }
       if (!(+HEAPF64[($6_1 + 328 | 0) >> 3] < +HEAPF64[($6_1 + 312 | 0) >> 3] & 1 | 0)) {
        break label$51
       }
       if (!(+HEAPF64[($6_1 + 336 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
        break label$51
       }
      }
      HEAP32[($6_1 + 264 | 0) >> 2] = 1;
     }
     break label$49;
    }
    label$53 : {
     if (HEAP32[($6_1 + 264 | 0) >> 2] | 0) {
      break label$53
     }
     label$54 : {
      label$55 : {
       if (+HEAPF64[($6_1 + 352 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0) {
        break label$55
       }
       if (!(+HEAPF64[($6_1 + 336 | 0) >> 3] >= -+HEAPF64[(0 + 87864 | 0) >> 3] & 1 | 0)) {
        break label$54
       }
      }
      HEAP32[($6_1 + 264 | 0) >> 2] = 1;
     }
    }
   }
   label$56 : {
    if (HEAP32[($6_1 + 268 | 0) >> 2] | 0) {
     break label$56
    }
    if (HEAP32[($6_1 + 264 | 0) >> 2] | 0) {
     break label$56
    }
    HEAP32[($6_1 + 396 | 0) >> 2] = 0;
    break label$17;
   }
   label$57 : {
    if (HEAP32[($6_1 + 372 | 0) >> 2] | 0) {
     break label$57
    }
    if (!(HEAP32[(0 + 87720 | 0) >> 2] | 0)) {
     break label$57
    }
    HEAPF64[($6_1 + 376 | 0) >> 3] = +$10(HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
    HEAP32[(0 + 90584 | 0) >> 2] = (HEAP32[(0 + 90584 | 0) >> 2] | 0) + 1 | 0;
   }
   label$58 : {
    label$59 : {
     if (!(HEAP32[($6_1 + 268 | 0) >> 2] | 0)) {
      break label$59
     }
     if (!(HEAP32[($6_1 + 260 | 0) >> 2] | 0)) {
      break label$59
     }
     HEAP32[(0 + 92376 | 0) >> 2] = (HEAP32[(0 + 92376 | 0) >> 2] | 0) + 1 | 0;
     label$60 : {
      label$61 : {
       if (!(+HEAPF64[($6_1 + 344 | 0) >> 3] > +HEAPF64[($6_1 + 328 | 0) >> 3] & 1 | 0)) {
        break label$61
       }
       $174(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 5 | 0, +(+HEAPF64[($6_1 + 344 | 0) >> 3]), +(+HEAPF64[($6_1 + 376 | 0) >> 3]));
       break label$60;
      }
      $174(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, 5 | 0, +(+HEAPF64[($6_1 + 328 | 0) >> 3]), +(+HEAPF64[($6_1 + 376 | 0) >> 3]));
     }
     label$62 : {
      if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
       break label$62
      }
      $351_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $353_1 = HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      label$63 : {
       label$64 : {
        if (!((HEAP32[($6_1 + 252 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$64
        }
        $362_1 = HEAP32[((HEAP32[($6_1 + 252 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        break label$63;
       }
       $362_1 = -1;
      }
      $364_1 = $362_1;
      $367_1 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      label$65 : {
       label$66 : {
        if (!((HEAP32[($6_1 + 248 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$66
        }
        $376_1 = HEAP32[((HEAP32[($6_1 + 248 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        break label$65;
       }
       $376_1 = -1;
      }
      $704 = +HEAPF64[($6_1 + 344 | 0) >> 3];
      $705 = +HEAPF64[($6_1 + 328 | 0) >> 3];
      $706 = +HEAPF64[($6_1 + 376 | 0) >> 3];
      HEAP32[($6_1 + 88 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
      HEAPF64[($6_1 + 80 | 0) >> 3] = $706;
      HEAPF64[($6_1 + 72 | 0) >> 3] = $705;
      HEAPF64[($6_1 + 64 | 0) >> 3] = $704;
      HEAP32[($6_1 + 60 | 0) >> 2] = $376_1;
      HEAP32[($6_1 + 56 | 0) >> 2] = $367_1;
      HEAP32[($6_1 + 52 | 0) >> 2] = $364_1;
      HEAP32[($6_1 + 48 | 0) >> 2] = $353_1;
      $396($351_1 | 0, 27 | 0, 46425 | 0, $6_1 + 48 | 0 | 0);
     }
     break label$58;
    }
    label$67 : {
     label$68 : {
      if (!(HEAP32[($6_1 + 268 | 0) >> 2] | 0)) {
       break label$68
      }
      if (!(HEAP32[($6_1 + 264 | 0) >> 2] | 0)) {
       break label$68
      }
      HEAP32[(0 + 90768 | 0) >> 2] = (HEAP32[(0 + 90768 | 0) >> 2] | 0) + 1 | 0;
      label$69 : {
       label$70 : {
        if (!(+HEAPF64[($6_1 + 344 | 0) >> 3] > +HEAPF64[($6_1 + 328 | 0) >> 3] & 1 | 0)) {
         break label$70
        }
        $174(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 4 | 0, +(+HEAPF64[($6_1 + 344 | 0) >> 3]), +(+HEAPF64[($6_1 + 376 | 0) >> 3]));
        break label$69;
       }
       $174(HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, 4 | 0, +(+HEAPF64[($6_1 + 328 | 0) >> 3]), +(+HEAPF64[($6_1 + 376 | 0) >> 3]));
      }
      label$71 : {
       if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
        break label$71
       }
       $413_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $415_1 = HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       label$72 : {
        label$73 : {
         if (!((HEAP32[($6_1 + 252 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$73
         }
         $424_1 = HEAP32[((HEAP32[($6_1 + 252 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         break label$72;
        }
        $424_1 = -1;
       }
       $426_1 = $424_1;
       $429_1 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       label$74 : {
        label$75 : {
         if (!((HEAP32[($6_1 + 248 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$75
         }
         $438_1 = HEAP32[((HEAP32[($6_1 + 248 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         break label$74;
        }
        $438_1 = -1;
       }
       $713 = +HEAPF64[($6_1 + 344 | 0) >> 3];
       $714 = +HEAPF64[($6_1 + 328 | 0) >> 3];
       $715 = +HEAPF64[($6_1 + 376 | 0) >> 3];
       HEAP32[($6_1 + 136 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
       HEAPF64[($6_1 + 128 | 0) >> 3] = $715;
       HEAPF64[($6_1 + 120 | 0) >> 3] = $714;
       HEAPF64[($6_1 + 112 | 0) >> 3] = $713;
       HEAP32[($6_1 + 108 | 0) >> 2] = $438_1;
       HEAP32[($6_1 + 104 | 0) >> 2] = $429_1;
       HEAP32[($6_1 + 100 | 0) >> 2] = $426_1;
       HEAP32[($6_1 + 96 | 0) >> 2] = $415_1;
       $396($413_1 | 0, 28 | 0, 46549 | 0, $6_1 + 96 | 0 | 0);
      }
      break label$67;
     }
     label$76 : {
      label$77 : {
       if (!(HEAP32[($6_1 + 268 | 0) >> 2] | 0)) {
        break label$77
       }
       label$78 : {
        label$79 : {
         if (!(+HEAPF64[($6_1 + 344 | 0) >> 3] < +HEAPF64[($6_1 + 328 | 0) >> 3] & 1 | 0)) {
          break label$79
         }
         $719 = +HEAPF64[($6_1 + 328 | 0) >> 3];
         break label$78;
        }
        $719 = +HEAPF64[($6_1 + 344 | 0) >> 3];
       }
       HEAPF64[($6_1 + 280 | 0) >> 3] = $719;
       HEAP32[(0 + 90776 | 0) >> 2] = (HEAP32[(0 + 90776 | 0) >> 2] | 0) + 1 | 0;
       $174(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 3 | 0, +(+HEAPF64[($6_1 + 280 | 0) >> 3]), +(+HEAPF64[($6_1 + 376 | 0) >> 3]));
       label$80 : {
        if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
         break label$80
        }
        $471_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $473_1 = HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        label$81 : {
         label$82 : {
          if (!((HEAP32[($6_1 + 252 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$82
          }
          $482_1 = HEAP32[((HEAP32[($6_1 + 252 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          break label$81;
         }
         $482_1 = -1;
        }
        $484_1 = $482_1;
        $487_1 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        label$83 : {
         label$84 : {
          if (!((HEAP32[($6_1 + 248 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$84
          }
          $496_1 = HEAP32[((HEAP32[($6_1 + 248 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          break label$83;
         }
         $496_1 = -1;
        }
        $724 = +HEAPF64[($6_1 + 344 | 0) >> 3];
        $725 = +HEAPF64[($6_1 + 328 | 0) >> 3];
        $726 = +HEAPF64[($6_1 + 376 | 0) >> 3];
        HEAP32[($6_1 + 184 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
        HEAPF64[($6_1 + 176 | 0) >> 3] = $726;
        HEAPF64[($6_1 + 168 | 0) >> 3] = $725;
        HEAPF64[($6_1 + 160 | 0) >> 3] = $724;
        HEAP32[($6_1 + 156 | 0) >> 2] = $496_1;
        HEAP32[($6_1 + 152 | 0) >> 2] = $487_1;
        HEAP32[($6_1 + 148 | 0) >> 2] = $484_1;
        HEAP32[($6_1 + 144 | 0) >> 2] = $473_1;
        $396($471_1 | 0, 29 | 0, 46674 | 0, $6_1 + 144 | 0 | 0);
       }
       break label$76;
      }
      label$85 : {
       label$86 : {
        if (!(+HEAPF64[($6_1 + 344 | 0) >> 3] < +HEAPF64[($6_1 + 328 | 0) >> 3] & 1 | 0)) {
         break label$86
        }
        $730 = +HEAPF64[($6_1 + 328 | 0) >> 3];
        break label$85;
       }
       $730 = +HEAPF64[($6_1 + 344 | 0) >> 3];
      }
      $732 = $730;
      label$87 : {
       label$88 : {
        if (!(-+HEAPF64[($6_1 + 352 | 0) >> 3] < -+HEAPF64[($6_1 + 336 | 0) >> 3] & 1 | 0)) {
         break label$88
        }
        $739 = -+HEAPF64[($6_1 + 336 | 0) >> 3];
        break label$87;
       }
       $739 = -+HEAPF64[($6_1 + 352 | 0) >> 3];
      }
      label$89 : {
       label$90 : {
        if (!($732 < $739 & 1 | 0)) {
         break label$90
        }
        label$91 : {
         label$92 : {
          if (!(-+HEAPF64[($6_1 + 352 | 0) >> 3] < -+HEAPF64[($6_1 + 336 | 0) >> 3] & 1 | 0)) {
           break label$92
          }
          $749 = -+HEAPF64[($6_1 + 336 | 0) >> 3];
          break label$91;
         }
         $749 = -+HEAPF64[($6_1 + 352 | 0) >> 3];
        }
        $753 = $749;
        break label$89;
       }
       label$93 : {
        label$94 : {
         if (!(+HEAPF64[($6_1 + 344 | 0) >> 3] < +HEAPF64[($6_1 + 328 | 0) >> 3] & 1 | 0)) {
          break label$94
         }
         $757 = +HEAPF64[($6_1 + 328 | 0) >> 3];
         break label$93;
        }
        $757 = +HEAPF64[($6_1 + 344 | 0) >> 3];
       }
       $753 = $757;
      }
      HEAPF64[($6_1 + 280 | 0) >> 3] = $753;
      HEAP32[(0 + 90824 | 0) >> 2] = (HEAP32[(0 + 90824 | 0) >> 2] | 0) + 1 | 0;
      $174(HEAP32[($6_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 388 | 0) >> 2] | 0 | 0, 1 | 0, +(+HEAPF64[($6_1 + 280 | 0) >> 3]), +(+HEAPF64[($6_1 + 376 | 0) >> 3]));
      label$95 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$95
       }
       $546 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $548 = HEAP32[((HEAP32[($6_1 + 392 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       label$96 : {
        label$97 : {
         if (!((HEAP32[($6_1 + 252 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$97
         }
         $557 = HEAP32[((HEAP32[($6_1 + 252 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         break label$96;
        }
        $557 = -1;
       }
       $559 = $557;
       $562 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       label$98 : {
        label$99 : {
         if (!((HEAP32[($6_1 + 248 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$99
         }
         $571 = HEAP32[((HEAP32[($6_1 + 248 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         break label$98;
        }
        $571 = -1;
       }
       $763 = +HEAPF64[($6_1 + 344 | 0) >> 3];
       $764 = +HEAPF64[($6_1 + 328 | 0) >> 3];
       $765 = +HEAPF64[($6_1 + 376 | 0) >> 3];
       HEAP32[($6_1 + 232 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
       HEAPF64[($6_1 + 224 | 0) >> 3] = $765;
       HEAPF64[($6_1 + 216 | 0) >> 3] = $764;
       HEAPF64[($6_1 + 208 | 0) >> 3] = $763;
       HEAP32[($6_1 + 204 | 0) >> 2] = $571;
       HEAP32[($6_1 + 200 | 0) >> 2] = $562;
       HEAP32[($6_1 + 196 | 0) >> 2] = $559;
       HEAP32[($6_1 + 192 | 0) >> 2] = $548;
       $396($546 | 0, 2099 | 0, 46790 | 0, $6_1 + 192 | 0 | 0);
      }
     }
    }
   }
   HEAP32[($6_1 + 396 | 0) >> 2] = 1;
  }
  $589 = HEAP32[($6_1 + 396 | 0) >> 2] | 0;
  global$0 = $6_1 + 400 | 0;
  return $589 | 0;
 }
 
 function $234($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $49_1 = 0, $357_1 = 0.0, $64_1 = 0, $67_1 = 0, $94_1 = 0, $108_1 = 0, $116_1 = 0, $145_1 = 0, $254_1 = 0, $300_1 = 0, $329_1 = 0, $335_1 = 0, $16_1 = 0, $19_1 = 0, $21_1 = 0, $83_1 = 0, $96_1 = 0, $181_1 = 0, $387_1 = 0.0, $183_1 = 0, $185_1 = 0, $388_1 = 0.0, $188_1 = 0, $203_1 = 0, $205_1 = 0, $207_1 = 0, $389_1 = 0.0, $390_1 = 0.0, $210_1 = 0, $240_1 = 0, $243_1 = 0, $245_1 = 0, $247_1 = 0, $283_1 = 0, $286_1 = 0, $289_1 = 0, $291_1 = 0, $312_1 = 0, $314_1 = 0, $316_1 = 0, $319_1 = 0, $343_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  $7_1 = 0;
  HEAP32[($5_1 + 252 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 240 | 0) >> 3] = $1_1;
  HEAP32[($5_1 + 236 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 224 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 212 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 208 | 0) >> 2] = $7_1;
  HEAPF64[($5_1 + 176 | 0) >> 3] = 4494232837155789270363185.0e283;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $19_1 = $267(HEAP32[((HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   $21_1 = HEAP32[((HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAPF64[($5_1 + 152 | 0) >> 3] = +HEAPF64[($5_1 + 240 | 0) >> 3];
   HEAP32[($5_1 + 148 | 0) >> 2] = $21_1;
   HEAP32[($5_1 + 144 | 0) >> 2] = $19_1;
   $396($16_1 | 0, 2062 | 0, 34866 | 0, $5_1 + 144 | 0 | 0);
  }
  HEAP32[(HEAP32[($5_1 + 236 | 0) >> 2] | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    if (!(+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] < +HEAPF64[(0 + 87728 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    $357_1 = +HEAPF64[(0 + 87728 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
    break label$2;
   }
   $357_1 = +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
  }
  HEAPF64[($5_1 + 184 | 0) >> 3] = $357_1;
  label$4 : {
   if (!(+HEAPF64[($5_1 + 184 | 0) >> 3] < +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
    break label$4
   }
   HEAPF64[($5_1 + 184 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
  }
  label$5 : {
   if (!(+HEAPF64[($5_1 + 184 | 0) >> 3] < -+HEAPF64[(0 + 90168 | 0) >> 3] & 1 | 0)) {
    break label$5
   }
   HEAPF64[($5_1 + 184 | 0) >> 3] = -+HEAPF64[(0 + 90168 | 0) >> 3];
  }
  $49_1 = 0;
  $168(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, $49_1 | 0);
  HEAP32[($5_1 + 232 | 0) >> 2] = $49_1;
  label$6 : {
   if (!((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != ($49_1 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 228 | 0) >> 2] = (HEAP32[(0 + 90272 | 0) >> 2] | 0) + 4 | 0;
   label$7 : {
    label$8 : while (1) {
     $64_1 = HEAP32[($5_1 + 228 | 0) >> 2] | 0;
     HEAP32[($5_1 + 228 | 0) >> 2] = $64_1 + 4 | 0;
     $67_1 = HEAP32[$64_1 >> 2] | 0;
     HEAP32[($5_1 + 232 | 0) >> 2] = $67_1;
     if (!(($67_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     label$9 : {
      if (!((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (7 | 0) & 1 | 0)) {
       break label$9
      }
      $83_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      label$10 : {
       label$11 : {
        if (!((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$11
        }
        $94_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$10;
       }
       $94_1 = -1;
      }
      $96_1 = $94_1;
      label$12 : {
       label$13 : {
        if (!((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$13
        }
        $108_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$12;
       }
       $108_1 = -1;
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = $108_1;
      HEAP32[$5_1 >> 2] = $96_1;
      $396($83_1 | 0, 6393 | 0, 34983 | 0, $5_1 | 0);
      $116_1 = 0;
      $382(5 | 0, $116_1 | 0, $116_1 | 0);
     }
     HEAP32[($5_1 + 216 | 0) >> 2] = $215(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 252 | 0) >> 2] | 0 | 0, $5_1 + 220 | 0 | 0, $5_1 + 192 | 0 | 0) | 0;
     label$14 : {
      label$15 : {
       if (!((HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       if (!(+HEAPF64[($5_1 + 192 | 0) >> 3] < 3.0 * +HEAPF64[($5_1 + 176 | 0) >> 3] & 1 | 0)) {
        break label$15
       }
       HEAPF64[($5_1 + 176 | 0) >> 3] = +HEAPF64[($5_1 + 192 | 0) >> 3] / 3.0;
       HEAP32[($5_1 + 224 | 0) >> 2] = HEAP32[($5_1 + 232 | 0) >> 2] | 0;
       HEAP32[($5_1 + 208 | 0) >> 2] = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
       HEAP32[($5_1 + 212 | 0) >> 2] = HEAP32[($5_1 + 220 | 0) >> 2] | 0;
       break label$14;
      }
      label$16 : {
       if (!(+HEAPF64[($5_1 + 192 | 0) >> 3] < +HEAPF64[($5_1 + 176 | 0) >> 3] & 1 | 0)) {
        break label$16
       }
       HEAPF64[($5_1 + 176 | 0) >> 3] = +HEAPF64[($5_1 + 192 | 0) >> 3];
       HEAP32[($5_1 + 224 | 0) >> 2] = HEAP32[($5_1 + 232 | 0) >> 2] | 0;
       HEAP32[($5_1 + 208 | 0) >> 2] = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
       HEAP32[($5_1 + 212 | 0) >> 2] = HEAP32[($5_1 + 220 | 0) >> 2] | 0;
      }
     }
     continue label$8;
    };
   }
  }
  $145_1 = 0;
  HEAP32[($5_1 + 204 | 0) >> 2] = $145_1;
  label$17 : {
   if (!((HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) != ($145_1 | 0) & 1 | 0)) {
    break label$17
   }
   if (!(+HEAPF64[($5_1 + 176 | 0) >> 3] < +HEAPF64[($5_1 + 240 | 0) >> 3] & 1 | 0)) {
    break label$17
   }
   HEAPF64[($5_1 + 168 | 0) >> 3] = +HEAPF64[($5_1 + 176 | 0) >> 3] / +HEAPF64[($5_1 + 184 | 0) >> 3];
   label$18 : {
    label$19 : {
     if (!(+HEAPF64[($5_1 + 168 | 0) >> 3] > 100.0 & 1 | 0)) {
      break label$19
     }
     label$20 : {
      label$21 : {
       label$22 : {
        if (((HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0) {
         break label$22
        }
        if (!(((HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0)) {
         break label$21
        }
       }
       label$23 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
         break label$23
        }
        $181_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $387_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
        $183_1 = HEAP32[((HEAP32[($5_1 + 208 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $185_1 = HEAP32[((HEAP32[($5_1 + 212 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $388_1 = +HEAPF64[($5_1 + 176 | 0) >> 3];
        $188_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 40 | 0) >> 2] = $188_1;
        HEAPF64[($5_1 + 32 | 0) >> 3] = $388_1;
        HEAP32[($5_1 + 28 | 0) >> 2] = $185_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $183_1;
        HEAPF64[($5_1 + 16 | 0) >> 3] = $387_1;
        $396($181_1 | 0, 1051 | 0, 35101 | 0, $5_1 + 16 | 0 | 0);
       }
       break label$20;
      }
      $203_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $205_1 = HEAP32[((HEAP32[($5_1 + 208 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $207_1 = HEAP32[((HEAP32[($5_1 + 212 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $389_1 = +HEAPF64[($5_1 + 176 | 0) >> 3];
      $390_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      $210_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 72 | 0) >> 2] = $210_1;
      HEAPF64[($5_1 + 64 | 0) >> 3] = $390_1;
      HEAPF64[($5_1 + 56 | 0) >> 3] = $389_1;
      HEAP32[($5_1 + 52 | 0) >> 2] = $207_1;
      HEAP32[($5_1 + 48 | 0) >> 2] = $205_1;
      $396($203_1 | 0, 7081 | 0, 35316 | 0, $5_1 + 48 | 0 | 0);
     }
     break label$18;
    }
    label$24 : {
     label$25 : {
      if (!((HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$25
      }
      label$26 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$26
       }
       $240_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $243_1 = $267(HEAP32[((HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
       $245_1 = HEAP32[((HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $247_1 = HEAP32[((HEAP32[($5_1 + 212 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       HEAPF64[($5_1 + 96 | 0) >> 3] = +HEAPF64[($5_1 + 176 | 0) >> 3] * 3.0;
       HEAP32[($5_1 + 88 | 0) >> 2] = $247_1;
       HEAP32[($5_1 + 84 | 0) >> 2] = $245_1;
       HEAP32[($5_1 + 80 | 0) >> 2] = $243_1;
       $396($240_1 | 0, 2063 | 0, 35486 | 0, $5_1 + 80 | 0 | 0);
      }
      $254_1 = 1;
      HEAP32[(0 + 90120 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      HEAP32[(HEAP32[($5_1 + 236 | 0) >> 2] | 0) >> 2] = $254_1;
      HEAP32[($5_1 + 204 | 0) >> 2] = $254_1;
      break label$24;
     }
     label$27 : {
      label$28 : {
       if (!(($342(HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0) | 0 | 0) != ($342(HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$28
       }
       label$29 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$29
        }
        $283_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $286_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $289_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $291_1 = HEAP32[((HEAP32[($5_1 + 208 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 212 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[($5_1 + 120 | 0) >> 2] = $291_1;
        HEAP32[($5_1 + 116 | 0) >> 2] = $289_1;
        HEAP32[($5_1 + 112 | 0) >> 2] = $286_1;
        $396($283_1 | 0, 2064 | 0, 35614 | 0, $5_1 + 112 | 0 | 0);
       }
       $300_1 = 0;
       $202(HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, 8 | 0, +(+HEAPF64[($5_1 + 176 | 0) >> 3]), $300_1 | 0, $300_1 | 0);
       HEAP32[($5_1 + 204 | 0) >> 2] = 1;
       break label$27;
      }
      label$30 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$30
       }
       $312_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $314_1 = HEAP32[((HEAP32[($5_1 + 208 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $316_1 = HEAP32[((HEAP32[($5_1 + 212 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $319_1 = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 140 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 136 | 0) >> 2] = $319_1;
       HEAP32[($5_1 + 132 | 0) >> 2] = $316_1;
       HEAP32[($5_1 + 128 | 0) >> 2] = $314_1;
       $396($312_1 | 0, 2065 | 0, 35723 | 0, $5_1 + 128 | 0 | 0);
      }
      $329_1 = 0;
      $202(HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, 8 | 0, +(+HEAPF64[($5_1 + 176 | 0) >> 3]), $329_1 | 0, $329_1 | 0);
      HEAP32[($5_1 + 204 | 0) >> 2] = 1;
     }
    }
   }
  }
  label$31 : {
   label$32 : while (1) {
    $335_1 = $333(HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 232 | 0) >> 2] = $335_1;
    if (!(($335_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$31
    }
    $158(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, 48 | 0);
    continue label$32;
   };
  }
  $343_1 = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  global$0 = $5_1 + 256 | 0;
  return $343_1 | 0;
 }
 
 function $235($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $18_1 = 0, $21_1 = 0;
  $6_1 = global$0 - 32 | 0;
  $7_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $7_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 4 | 0;
    label$3 : {
     label$4 : while (1) {
      $18_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = $18_1 + 4 | 0;
      $21_1 = HEAP32[$18_1 >> 2] | 0;
      HEAP32[($6_1 + 8 | 0) >> 2] = $21_1;
      if (!(($21_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       label$6 : {
        if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$6
        }
        if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[($6_1 + 28 | 0) >> 2] = 1;
        break label$1;
       }
       label$7 : {
        if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($6_1 + 28 | 0) >> 2] = 1;
        break label$1;
       }
      }
      continue label$4;
     };
    }
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  }
  return HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $236() {
  var $2_1 = 0, $38_1 = 0, $28_1 = 0, $30_1 = 0, $32_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $28_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $30_1 = HEAP32[(0 + 90272 | 0) >> 2] | 0;
   $32_1 = HEAP32[(0 + 90276 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[(0 + 90280 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $32_1;
   HEAP32[$2_1 >> 2] = $30_1;
   $396($28_1 | 0, 6386 | 0, 35817 | 0, $2_1 | 0);
   $38_1 = 0;
   $382(5 | 0, $38_1 | 0, $38_1 | 0);
  }
  HEAP32[(0 + 90276 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90280 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 90272 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $42_1 = 0, $55_1 = 0, $58_1 = 0, $203_1 = 0, $205_1 = 0, $207_1 = 0, $163_1 = 0, $165_1 = 0, $167_1 = 0, $217_1 = 0.0, $169_1 = 0, $171_1 = 0, $174_1 = 0, $177_1 = 0, $180_1 = 0;
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 2 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($3_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 60 | 0) >> 2] = 0;
   label$3 : while (1) {
    if (!((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break label$1
    }
    label$4 : {
     if (((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
      break label$4
     }
     if (!(((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$4
     }
     $42_1 = 0;
     HEAP32[($3_1 + 88 | 0) >> 2] = $42_1;
     label$5 : {
      if (!((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($42_1 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($3_1 + 84 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
      label$6 : {
       label$7 : while (1) {
        $55_1 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
        HEAP32[($3_1 + 84 | 0) >> 2] = $55_1 + 4 | 0;
        $58_1 = HEAP32[$55_1 >> 2] | 0;
        HEAP32[($3_1 + 88 | 0) >> 2] = $58_1;
        if (!(($58_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        label$8 : {
         if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$8
         }
         if (!((HEAP32[((HEAP32[(HEAP32[($3_1 + 88 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[(HEAP32[($3_1 + 92 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$8
         }
         label$9 : {
          if (!((HEAP32[(((HEAP32[(HEAP32[($3_1 + 88 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(((HEAP32[(HEAP32[($3_1 + 92 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$9
          }
          HEAP32[($3_1 + 56 | 0) >> 2] = 1;
          label$10 : {
           label$11 : while (1) {
            if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$10
            }
            label$12 : {
             if (!((HEAP32[(((HEAP32[(HEAP32[($3_1 + 88 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[(((HEAP32[(HEAP32[($3_1 + 92 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$12
             }
             break label$10;
            }
            HEAP32[($3_1 + 56 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 1 | 0;
            continue label$11;
           };
          }
          label$13 : {
           if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$13
           }
           HEAP32[($3_1 + 80 | 0) >> 2] = $218(HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0, $3_1 + 76 | 0 | 0, $3_1 + 64 | 0 | 0) | 0;
           label$14 : {
            if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
             break label$14
            }
            $163_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $165_1 = HEAP32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            $167_1 = HEAP32[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            $217_1 = +HEAPF64[($3_1 + 64 | 0) >> 3];
            $169_1 = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
            $171_1 = HEAP32[((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
            $174_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $177_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $180_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($3_1 + 32 | 0) >> 2] = $180_1;
            HEAP32[($3_1 + 28 | 0) >> 2] = $177_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $174_1;
            HEAP32[($3_1 + 20 | 0) >> 2] = $171_1;
            HEAP32[($3_1 + 16 | 0) >> 2] = $169_1;
            HEAPF64[($3_1 + 8 | 0) >> 3] = $217_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $167_1;
            HEAP32[$3_1 >> 2] = $165_1;
            $396($163_1 | 0, 2069 | 0, 36604 | 0, $3_1 | 0);
           }
           $202(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 80 | 0) >> 2] | 0 | 0, 9 | 0, +(+HEAPF64[($3_1 + 64 | 0) >> 3]), HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0);
           $203_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
           $205_1 = 8;
           HEAP8[($203_1 + 16 | 0) >> 0] = HEAPU8[($203_1 + 16 | 0) >> 0] | 0 | $205_1 | 0;
           $207_1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
           HEAP8[($207_1 + 16 | 0) >> 0] = HEAPU8[($207_1 + 16 | 0) >> 0] | 0 | $205_1 | 0;
          }
         }
        }
        continue label$7;
       };
      }
     }
    }
    HEAP32[($3_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $3_1 + 96 | 0;
  return;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $44_1 = 0, $57_1 = 0, $60_1 = 0, $74_1 = 0, $87_1 = 0, $90_1 = 0, $18_1 = 0, $32_1 = 0, $34_1 = 0, $103_1 = 0, $105_1 = 0, $133_1 = 0, $135_1 = 0, $137_1 = 0, $151_1 = 0, $153_1 = 0, $155_1 = 0, $201_1 = 0, $240_1 = 0;
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $18_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($18_1 | 0, 4029 | 0, 36999 | 0, $3_1 + 96 | 0 | 0);
  }
  label$2 : {
   if (!(((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
    break label$2
   }
   $32_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $34_1 = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($3_1 + 84 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   HEAP32[($3_1 + 80 | 0) >> 2] = $34_1;
   $396($32_1 | 0, 6278 | 0, 37057 | 0, $3_1 + 80 | 0 | 0);
   $382(5 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  $44_1 = 0;
  HEAP32[($3_1 + 120 | 0) >> 2] = $44_1;
  label$3 : {
   if (!((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($44_1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 116 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $57_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
     HEAP32[($3_1 + 116 | 0) >> 2] = $57_1 + 4 | 0;
     $60_1 = HEAP32[$57_1 >> 2] | 0;
     HEAP32[($3_1 + 120 | 0) >> 2] = $60_1;
     if (!(($60_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     HEAP32[((HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     continue label$5;
    };
   }
  }
  $74_1 = 0;
  HEAP32[($3_1 + 112 | 0) >> 2] = $74_1;
  label$6 : {
   if (!((HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($74_1 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($3_1 + 108 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$7 : {
    label$8 : while (1) {
     $87_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
     HEAP32[($3_1 + 108 | 0) >> 2] = $87_1 + 4 | 0;
     $90_1 = HEAP32[$87_1 >> 2] | 0;
     HEAP32[($3_1 + 112 | 0) >> 2] = $90_1;
     if (!(($90_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     label$9 : {
      if (!(((HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
       break label$9
      }
      $103_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $105_1 = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($3_1 + 48 | 0) >> 2] = $105_1;
      $396($103_1 | 0, 6358 | 0, 37156 | 0, $3_1 + 48 | 0 | 0);
      $150(5 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0);
     }
     label$10 : {
      if (!((HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      label$11 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$11
       }
       $133_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $135_1 = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $137_1 = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
       HEAP32[($3_1 + 36 | 0) >> 2] = $137_1;
       HEAP32[($3_1 + 32 | 0) >> 2] = $135_1;
       $396($133_1 | 0, 2104 | 0, 37253 | 0, $3_1 + 32 | 0 | 0);
      }
      label$12 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
        break label$12
       }
       $151_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $153_1 = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $155_1 = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
       HEAP32[($3_1 + 20 | 0) >> 2] = $155_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = $153_1;
       $396($151_1 | 0, 6280 | 0, 37343 | 0, $3_1 + 16 | 0 | 0);
       $150(5 | 0, HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0);
      }
      HEAP32[(0 + 91152 | 0) >> 2] = (HEAP32[(0 + 91152 | 0) >> 2] | 0) + 1 | 0;
      $332(HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) | 0;
      label$13 : {
       if (!(($337(HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       HEAP32[(0 + 91144 | 0) >> 2] = (HEAP32[(0 + 91144 | 0) >> 2] | 0) + 1 | 0;
       $174(HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0, 10 | 0, +(+(0 | 0)), +(2.0));
       label$14 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$14
        }
        $201_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($201_1 | 0, 2023 | 0, 37458 | 0, $3_1 | 0);
       }
      }
      $332(HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($3_1 + 108 | 0) >> 2] = (HEAP32[($3_1 + 108 | 0) >> 2] | 0) + -4 | 0;
     }
     continue label$8;
    };
   }
  }
  label$15 : {
   if (!(($337(HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$15
   }
   HEAP32[(0 + 91144 | 0) >> 2] = (HEAP32[(0 + 91144 | 0) >> 2] | 0) + 1 | 0;
   $174(HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0, 10 | 0, +(+(0 | 0)), +(2.0));
   label$16 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$16
    }
    $240_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($240_1 | 0, 2024 | 0, 37458 | 0, $3_1 + 64 | 0 | 0);
   }
  }
  global$0 = $3_1 + 128 | 0;
  return;
 }
 
 function $239($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $53_1 = 0, $65_1 = 0, $74_1 = 0, $85_1 = 0, $88_1 = 0, $231_1 = 0, $244_1 = 0, $247_1 = 0, $294_1 = 0, $326_1 = 0, $339_1 = 0, $342_1 = 0, $355_1 = 0, $38_1 = 0, $40_1 = 0, $42_1 = 0, $44_1 = 0, $55_1 = 0, $143_1 = 0, $145_1 = 0, $148_1 = 0, $149_1 = 0, $151_1 = 0, $195_1 = 0, $197_1 = 0, $200_1 = 0, $201_1 = 0, $203_1 = 0, $222_1 = 0, $224_1 = 0, $262_1 = 0, $264_1 = 0, $315_1 = 0, $317_1 = 0, $319_1 = 0, $375_1 = 0, $377_1 = 0, $379_1 = 0, $381_1 = 0;
  $7_1 = global$0 - 208 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 188 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 160 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90040 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90040 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   HEAP32[($7_1 + 160 | 0) >> 2] = 1;
   $38_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $40_1 = HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $42_1 = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $44_1 = $337(HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $53_1 = HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$3;
    }
    $53_1 = -1;
   }
   $55_1 = $53_1;
   label$5 : {
    label$6 : {
     if (!((HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $65_1 = HEAP32[((HEAP32[($7_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$5;
    }
    $65_1 = -1;
   }
   HEAP32[($7_1 + 144 | 0) >> 2] = $65_1;
   HEAP32[($7_1 + 140 | 0) >> 2] = $55_1;
   HEAP32[($7_1 + 136 | 0) >> 2] = $44_1;
   HEAP32[($7_1 + 132 | 0) >> 2] = $42_1;
   HEAP32[($7_1 + 128 | 0) >> 2] = $40_1;
   $396($38_1 | 0, 2086 | 0, 45076 | 0, $7_1 + 128 | 0 | 0);
  }
  $74_1 = 0;
  HEAP32[($7_1 + 176 | 0) >> 2] = $74_1;
  label$7 : {
   if (!((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) != ($74_1 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[($7_1 + 172 | 0) >> 2] = (HEAP32[($7_1 + 196 | 0) >> 2] | 0) + 4 | 0;
   label$8 : {
    label$9 : while (1) {
     $85_1 = HEAP32[($7_1 + 172 | 0) >> 2] | 0;
     HEAP32[($7_1 + 172 | 0) >> 2] = $85_1 + 4 | 0;
     $88_1 = HEAP32[$85_1 >> 2] | 0;
     HEAP32[($7_1 + 176 | 0) >> 2] = $88_1;
     if (!(($88_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     label$10 : {
      if (!($246(HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0) | 0)) {
       break label$10
      }
      HEAP32[($7_1 + 168 | 0) >> 2] = $337(HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($7_1 + 164 | 0) >> 2] = $337(HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
      label$11 : {
       label$12 : {
        label$13 : {
         if ((HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0) {
          break label$13
         }
         if (!((HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$12
         }
         if (((HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
          break label$12
         }
         if (!($342(HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0) | 0)) {
          break label$12
         }
        }
        label$14 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
          break label$14
         }
         $143_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $145_1 = HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         $148_1 = HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $149_1 = HEAP32[($7_1 + 168 | 0) >> 2] | 0;
         $151_1 = HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         HEAP32[($7_1 + 12 | 0) >> 2] = $151_1;
         HEAP32[($7_1 + 8 | 0) >> 2] = $149_1;
         HEAP32[($7_1 + 4 | 0) >> 2] = $148_1;
         HEAP32[$7_1 >> 2] = $145_1;
         $396($143_1 | 0, 4070 | 0, 45155 | 0, $7_1 | 0);
        }
        break label$11;
       }
       label$15 : {
        label$16 : {
         label$17 : {
          if ((HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0) {
           break label$17
          }
          if (!((HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          if (((HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
           break label$16
          }
          if (!($342(HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0) | 0)) {
           break label$16
          }
         }
         label$18 : {
          if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
           break label$18
          }
          $195_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $197_1 = HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
          $200_1 = HEAP32[((HEAP32[((HEAP32[($7_1 + 176 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          $201_1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
          $203_1 = HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          HEAP32[($7_1 + 44 | 0) >> 2] = $203_1;
          HEAP32[($7_1 + 40 | 0) >> 2] = $201_1;
          HEAP32[($7_1 + 36 | 0) >> 2] = $200_1;
          HEAP32[($7_1 + 32 | 0) >> 2] = $197_1;
          $396($195_1 | 0, 4071 | 0, 45267 | 0, $7_1 + 32 | 0 | 0);
         }
         break label$15;
        }
        $237(HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0);
       }
      }
     }
     continue label$9;
    };
   }
  }
  label$19 : {
   label$20 : {
    if ((HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$20
    }
    label$21 : {
     if (!(HEAP32[($7_1 + 160 | 0) >> 2] | 0)) {
      break label$21
     }
     $222_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $224_1 = HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     HEAP32[($7_1 + 116 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     HEAP32[($7_1 + 112 | 0) >> 2] = $224_1;
     $396($222_1 | 0, 2087 | 0, 45382 | 0, $7_1 + 112 | 0 | 0);
    }
    $231_1 = 0;
    HEAP32[($7_1 + 184 | 0) >> 2] = $231_1;
    label$22 : {
     if (!((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($231_1 | 0) & 1 | 0)) {
      break label$22
     }
     HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
     label$23 : {
      label$24 : while (1) {
       $244_1 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
       HEAP32[($7_1 + 180 | 0) >> 2] = $244_1 + 4 | 0;
       $247_1 = HEAP32[$244_1 >> 2] | 0;
       HEAP32[($7_1 + 184 | 0) >> 2] = $247_1;
       if (!(($247_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$23
       }
       label$25 : {
        label$26 : {
         if (!(((HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
          break label$26
         }
         $193(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
         break label$25;
        }
        label$27 : {
         if (!(HEAP32[($7_1 + 160 | 0) >> 2] | 0)) {
          break label$27
         }
         $262_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $264_1 = HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[($7_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         HEAP32[($7_1 + 96 | 0) >> 2] = $264_1;
         $396($262_1 | 0, 4080 | 0, 45477 | 0, $7_1 + 96 | 0 | 0);
        }
        $238(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
        $336(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) | 0;
        label$28 : {
         if (!($192(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0) | 0)) {
          break label$28
         }
         HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[($7_1 + 180 | 0) >> 2] | 0) + -4 | 0;
        }
        $193(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
        $178(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
        $230(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
       }
       continue label$24;
      };
     }
    }
    label$29 : {
     if ((((HEAPU8[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
      break label$29
     }
     $294_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
     HEAP8[($294_1 + 24 | 0) >> 0] = HEAPU8[($294_1 + 24 | 0) >> 0] | 0 | 4 | 0;
     $325(87704 + 2588 | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
    }
    break label$19;
   }
   label$30 : {
    label$31 : {
     if (!(($337(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$31
     }
     HEAP32[(0 + 92072 | 0) >> 2] = (HEAP32[(0 + 92072 | 0) >> 2] | 0) + 1 | 0;
     label$32 : {
      if (!(HEAP32[($7_1 + 160 | 0) >> 2] | 0)) {
       break label$32
      }
      $315_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $317_1 = HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $319_1 = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      HEAP32[($7_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($7_1 + 68 | 0) >> 2] = $319_1;
      HEAP32[($7_1 + 64 | 0) >> 2] = $317_1;
      $396($315_1 | 0, 3039 | 0, 45549 | 0, $7_1 + 64 | 0 | 0);
     }
     $326_1 = 0;
     HEAP32[($7_1 + 184 | 0) >> 2] = $326_1;
     label$33 : {
      if (!((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($326_1 | 0) & 1 | 0)) {
       break label$33
      }
      HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
      label$34 : {
       label$35 : while (1) {
        $339_1 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
        HEAP32[($7_1 + 180 | 0) >> 2] = $339_1 + 4 | 0;
        $342_1 = HEAP32[$339_1 >> 2] | 0;
        HEAP32[($7_1 + 184 | 0) >> 2] = $342_1;
        if (!(($342_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$34
        }
        $336(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) | 0;
        $193(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
        continue label$35;
       };
      }
     }
     $355_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
     HEAP8[($355_1 + 24 | 0) >> 0] = HEAPU8[($355_1 + 24 | 0) >> 0] | 0 | 4 | 0;
     $325(87704 + 2588 | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
     break label$30;
    }
    HEAP32[(0 + 92064 | 0) >> 2] = (HEAP32[(0 + 92064 | 0) >> 2] | 0) + 1 | 0;
    label$36 : {
     label$37 : {
      if (HEAP32[($7_1 + 160 | 0) >> 2] | 0) {
       break label$37
      }
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
       break label$36
      }
     }
     $375_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $377_1 = HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $379_1 = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $381_1 = HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($7_1 + 88 | 0) >> 2] = $381_1;
     HEAP32[($7_1 + 84 | 0) >> 2] = $379_1;
     HEAP32[($7_1 + 80 | 0) >> 2] = $377_1;
     $396($375_1 | 0, 3040 | 0, 45630 | 0, $7_1 + 80 | 0 | 0);
    }
    $336(HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) | 0;
    $332(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0) | 0;
    label$38 : {
     if (!($192(HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0) | 0)) {
      break label$38
     }
     $193(HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0);
    }
   }
  }
  label$39 : {
   if (!((HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$39
   }
   $193(HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0);
  }
  global$0 = $7_1 + 208 | 0;
  return;
 }
 
 function $240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $45_1 = 0, $53_1 = 0, $68_1 = 0, $81_1 = 0, $84_1 = 0, $132_1 = 0, $145_1 = 0, $148_1 = 0, $177_1 = 0, $204_1 = 0, $207_1 = 0, $271_1 = 0, $284_1 = 0, $285_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
  $9_1 = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = $9_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $9_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ((HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$4
      }
      if (!(((HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
       break label$3
      }
     }
     $301(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
    }
    HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      $45_1 = 0;
      break label$5;
     }
     $45_1 = HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 36 | 0) >> 2] = $45_1;
    continue label$2;
   };
  }
  $53_1 = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 90256 | 0) >> 2] = $53_1;
  HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = $53_1;
  label$7 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$7
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4031 | 0, 39969 | 0, 0 | 0);
  }
  $68_1 = 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = $68_1;
  label$8 : {
   if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($68_1 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$9 : {
    label$10 : while (1) {
     $81_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $81_1 + 4 | 0;
     $84_1 = HEAP32[$81_1 >> 2] | 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = $84_1;
     if (!(($84_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     label$11 : {
      label$12 : {
       if (!((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + -4 | 0) >> 2] = 0;
       HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       break label$11;
      }
      HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     }
     continue label$10;
    };
   }
  }
  $330(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0);
  label$13 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$13
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4032 | 0, 40033 | 0, 0 | 0);
  }
  HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  label$14 : {
   label$15 : while (1) {
    if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$14
    }
    $132_1 = 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = $132_1;
    label$16 : {
     if (!((HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($132_1 | 0) & 1 | 0)) {
      break label$16
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$17 : {
      label$18 : while (1) {
       $145_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
       HEAP32[($4_1 + 28 | 0) >> 2] = $145_1 + 4 | 0;
       $148_1 = HEAP32[$145_1 >> 2] | 0;
       HEAP32[($4_1 + 32 | 0) >> 2] = $148_1;
       if (!(($148_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$17
       }
       label$19 : {
        if (!((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$19
        }
        continue label$18;
       }
       label$20 : {
        label$21 : {
         if (!(((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
          break label$21
         }
         label$22 : {
          label$23 : {
           if (!((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$23
           }
           $177_1 = 0;
           $325((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
           $346(HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
           HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
           HEAP32[($4_1 + 12 | 0) >> 2] = $177_1;
           label$24 : {
            if (!((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($177_1 | 0) & 1 | 0)) {
             break label$24
            }
            HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
            label$25 : {
             label$26 : while (1) {
              $204_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
              HEAP32[($4_1 + 8 | 0) >> 2] = $204_1 + 4 | 0;
              $207_1 = HEAP32[$204_1 >> 2] | 0;
              HEAP32[($4_1 + 12 | 0) >> 2] = $207_1;
              if (!(($207_1 | 0) != (0 | 0) & 1 | 0)) {
               break label$25
              }
              label$27 : {
               if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$27
               }
               HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
               break label$25;
              }
              label$28 : {
               if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$28
               }
               HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
               break label$25;
              }
              continue label$26;
             };
            }
           }
           break label$22;
          }
          $175(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
          $332(HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
         }
         break label$20;
        }
        $332(HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
        label$29 : {
         if (!((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$29
         }
         $325((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
         $325((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
         HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
         HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
        }
       }
       continue label$18;
      };
     }
    }
    label$30 : {
     label$31 : {
      if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$31
      }
      $271_1 = 0;
      break label$30;
     }
     $271_1 = HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 36 | 0) >> 2] = $271_1;
    continue label$15;
   };
  }
  label$32 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$32
   }
   $284_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $285_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $285_1;
   $396($284_1 | 0, 2032 | 0, 40076 | 0, $4_1 | 0);
  }
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $19_1 = 0, $36_1 = 0, $39_1 = 0, $55_1 = 0, $95_1 = 0, $108_1 = 0, $111_1 = 0, $247_1 = 0, $307_1 = 0, $315_1 = 0, $347_1 = 0, $360_1 = 0, $165_1 = 0, $290_1 = 0, $344_1 = 0, $373_1 = 0, $374_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $6_1 = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 64 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4033 | 0, 40136 | 0, 0 | 0);
  }
  $19_1 = 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = $19_1;
  label$2 : {
   if (!((HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($19_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $36_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = $36_1 + 4 | 0;
     $39_1 = HEAP32[$36_1 >> 2] | 0;
     HEAP32[($4_1 + 40 | 0) >> 2] = $39_1;
     if (!(($39_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      label$6 : {
       if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       $55_1 = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$5;
      }
      $55_1 = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[($4_1 + 64 | 0) >> 2] = $55_1;
     label$7 : {
      if (!((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + -4 | 0) >> 2] = 0;
     }
     continue label$4;
    };
   }
  }
  $330(HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0);
  label$8 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$8
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4034 | 0, 40194 | 0, 0 | 0);
  }
  HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$9
    }
    $95_1 = 0;
    HEAP32[($4_1 + 40 | 0) >> 2] = $95_1;
    label$11 : {
     if (!((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($95_1 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
     label$12 : {
      label$13 : while (1) {
       $108_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
       HEAP32[($4_1 + 36 | 0) >> 2] = $108_1 + 4 | 0;
       $111_1 = HEAP32[$108_1 >> 2] | 0;
       HEAP32[($4_1 + 40 | 0) >> 2] = $111_1;
       if (!(($111_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       label$14 : {
        label$15 : {
         if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$15
         }
         HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
         HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         break label$14;
        }
        label$16 : {
         label$17 : {
          if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$17
          }
          HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
          HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          break label$16;
         }
         label$18 : {
          label$19 : {
           if ((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0) {
            break label$19
           }
           if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$18
           }
          }
          $325((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
          HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
          continue label$13;
         }
         $165_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         $396($165_1 | 0, 6098 | 0, 40240 | 0, $4_1 | 0);
         $382(5 | 0, 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
        }
       }
       label$20 : {
        label$21 : {
         if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$21
         }
         label$22 : {
          if (!((HEAP32[(0 + 90036 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$22
          }
          HEAP32[(0 + 90036 | 0) >> 2] = 0;
         }
         $324(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
         $158(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, 20 | 0);
         HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
         break label$20;
        }
        label$23 : {
         label$24 : {
          if (!((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$24
          }
          $332(HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
          label$25 : {
           if (!((HEAP32[(0 + 90036 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$25
           }
           HEAP32[(0 + 90036 | 0) >> 2] = 0;
          }
          $324(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
          $158(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, 20 | 0);
          HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
          break label$23;
         }
         $325((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
         HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
        }
       }
       continue label$13;
      };
     }
    }
    label$26 : {
     if (!((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$26
     }
     $331(HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    label$27 : {
     label$28 : {
      if (((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
       break label$28
      }
      break label$27;
     }
     $247_1 = 0;
     HEAP32[($4_1 + 64 | 0) >> 2] = $247_1;
     label$29 : {
      if (!((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($247_1 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[($4_1 + 52 | 0) >> 2] = 0;
      HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 48 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
      label$30 : {
       label$31 : while (1) {
        if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$30
        }
        label$32 : {
         if (!((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$32
         }
         if (!(((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
          break label$32
         }
         HEAP32[($4_1 + 40 | 0) >> 2] = $266() | 0;
         $290_1 = $345(HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
         HEAP32[(HEAP32[($4_1 + 40 | 0) >> 2] | 0) >> 2] = $290_1;
         HEAP32[($4_1 + 32 | 0) >> 2] = (((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ ((HEAP32[($4_1 + 52 | 0) >> 2] | 0) & 1 | 0) | 0;
         label$33 : {
          label$34 : {
           if (!(HEAP32[($4_1 + 32 | 0) >> 2] | 0)) {
            break label$34
           }
           HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
           HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
           $307_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
           HEAP8[($307_1 + 16 | 0) >> 0] = HEAPU8[($307_1 + 16 | 0) >> 0] | 0 | 64 | 0;
           break label$33;
          }
          HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
          HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
          $315_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
          HEAP8[($315_1 + 16 | 0) >> 0] = HEAPU8[($315_1 + 16 | 0) >> 0] | 0 | 32 | 0;
         }
         $325((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
         $325((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
         label$35 : {
          if (!((HEAP32[(0 + 90080 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90032 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$35
          }
          HEAP32[(0 + 90036 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
         }
         HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0;
        }
        $344_1 = (HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
        $347_1 = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($4_1 + 52 | 0) >> 2] = $347_1;
        HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($344_1 + ($347_1 << 2 | 0) | 0) >> 2] | 0;
        continue label$31;
       };
      }
     }
    }
    label$36 : {
     label$37 : {
      if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$37
      }
      $360_1 = 0;
      break label$36;
     }
     $360_1 = HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 68 | 0) >> 2] = $360_1;
    continue label$10;
   };
  }
  label$38 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$38
   }
   $373_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $374_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $374_1;
   $396($373_1 | 0, 2033 | 0, 40300 | 0, $4_1 + 16 | 0 | 0);
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $18_1 = 0, $44_1 = 0, $47_1 = 0, $53_1 = 0, $54_1 = 0, $70_1 = 0, $73_1 = 0, $135_1 = 0, $120_1 = 0, $122_1 = 0, $124_1 = 0, $152_1 = 0, $154_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4035 | 0, 40359 | 0, 0 | 0);
  }
  $18_1 = 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $203(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $325($4_1 + 28 | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 40 | 0) >> 2] = $18_1;
  label$2 : {
   if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($18_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0;
   label$3 : {
    label$4 : while (1) {
     $44_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = $44_1 + 4 | 0;
     $47_1 = HEAP32[$44_1 >> 2] | 0;
     HEAP32[($4_1 + 40 | 0) >> 2] = $47_1;
     if (!(($47_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $53_1 = 0;
     $54_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     HEAP8[($54_1 + 24 | 0) >> 0] = HEAPU8[($54_1 + 24 | 0) >> 0] | 0 | 8 | 0;
     HEAP32[($4_1 + 52 | 0) >> 2] = $53_1;
     label$5 : {
      if (!((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($53_1 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
      label$6 : {
       label$7 : while (1) {
        $70_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
        HEAP32[($4_1 + 48 | 0) >> 2] = $70_1 + 4 | 0;
        $73_1 = HEAP32[$70_1 >> 2] | 0;
        HEAP32[($4_1 + 52 | 0) >> 2] = $73_1;
        if (!(($73_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        label$8 : {
         if (!((HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$8
         }
         HEAP32[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + -4 | 0) >> 2] = 0;
        }
        continue label$7;
       };
      }
     }
     $330(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
     $325((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
     label$9 : {
      if ((HEAP32[((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$9
      }
      HEAP32[(0 + 90896 | 0) >> 2] = (HEAP32[(0 + 90896 | 0) >> 2] | 0) + 1 | 0;
      label$10 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$10
       }
       $120_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $122_1 = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $124_1 = HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $124_1;
       HEAP32[$4_1 >> 2] = $122_1;
       $396($120_1 | 0, 2034 | 0, 40423 | 0, $4_1 | 0);
      }
      $336(HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
      $135_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
      HEAP8[($135_1 + 24 | 0) >> 0] = HEAPU8[($135_1 + 24 | 0) >> 0] | 0 | 4 | 0;
      $325(87704 + 2588 | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
     }
     continue label$4;
    };
   }
  }
  $348($4_1 + 28 | 0 | 0);
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$11
   }
   $152_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $154_1 = HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $154_1;
   $396($152_1 | 0, 3005 | 0, 40494 | 0, $4_1 + 16 | 0 | 0);
  }
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $243($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0, $26_1 = 0, $30_1 = 0, $57_1 = 0, $95_1 = 0, $97_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4030 | 0, 39845 | 0, 0 | 0);
  }
  $252(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  $247(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  $20_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($20_1 + 80 | 0) >> 2] = (HEAP32[($20_1 + 80 | 0) >> 2] | 0) & -1025 | 0 | 1024 | 0;
  $26_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($26_1 + 80 | 0) >> 2] = (HEAP32[($26_1 + 80 | 0) >> 2] | 0) & -8193 | 0;
  $30_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($30_1 + 80 | 0) >> 2] = (HEAP32[($30_1 + 80 | 0) >> 2] | 0) & -536870913 | 0 | 536870912 | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    $196(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    label$4 : {
     label$5 : {
      if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      $57_1 = 0;
      break label$4;
     }
     $57_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = $57_1;
    continue label$3;
   };
  }
  label$6 : {
   if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   if (!(($337(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0 | 0) <= ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 5 | 0 | 0) & 1 | 0)) {
    break label$6
   }
   $158(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
  }
  label$7 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$7
   }
   $95_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $97_1 = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $97_1;
   $396($95_1 | 0, 3004 | 0, 39908 | 0, $4_1 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $244($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $35_1 = 0, $20_1 = 0, $22_1 = 0, $24_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[(0 + 91640 | 0) >> 2] = (HEAP32[(0 + 91640 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $20_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $22_1 = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $24_1 = HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $24_1;
   HEAP32[$5_1 >> 2] = $22_1;
   $396($20_1 | 0, 2035 | 0, 42423 | 0, $5_1 | 0);
  }
  $336(HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  $35_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP8[($35_1 + 24 | 0) >> 0] = HEAPU8[($35_1 + 24 | 0) >> 0] | 0 | 4 | 0;
  $325(87704 + 2588 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0, $20_1 = 0, $68_1 = 0, $133_1 = 0, $130_1 = 0, $147_1 = 0, $149_1 = 0, $155_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
    label$3 : {
     label$4 : while (1) {
      $17_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
      HEAP32[($3_1 + 32 | 0) >> 2] = $17_1 + 4 | 0;
      $20_1 = HEAP32[$17_1 >> 2] | 0;
      HEAP32[($3_1 + 36 | 0) >> 2] = $20_1;
      if (!(($20_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($3_1 + 44 | 0) >> 2] = 0;
       break label$1;
      }
      continue label$4;
     };
    }
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[(0 + 91440 | 0) >> 2] = (HEAP32[(0 + 91440 | 0) >> 2] | 0) + 1 | 0;
   label$6 : {
    if ((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$6
    }
    HEAP32[($3_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   label$7 : {
    label$8 : {
     if ((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$8
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = $327(HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     break label$7;
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = $284(HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
   }
   $68_1 = 0;
   $350(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0);
   $336(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 36 | 0) >> 2] = $68_1;
   label$9 : {
    if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($68_1 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 0;
    HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      label$12 : {
       if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[(0 + 91440 | 0) >> 2] = (HEAP32[(0 + 91440 | 0) >> 2] | 0) + 1 | 0;
       $318($3_1 + 20 | 0 | 0, HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
       label$13 : {
        if ((HEAP32[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$13
        }
        HEAP32[(0 + 91424 | 0) >> 2] = (HEAP32[(0 + 91424 | 0) >> 2] | 0) + 1 | 0;
        $348($3_1 + 20 | 0 | 0);
        HEAP32[($3_1 + 44 | 0) >> 2] = 0;
        break label$1;
       }
      }
      $130_1 = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
      $133_1 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = $133_1;
      HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($130_1 + ($133_1 << 2 | 0) | 0) >> 2] | 0;
      continue label$11;
     };
    }
   }
   label$14 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$14
    }
    $147_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $149_1 = $337(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $149_1;
    $396($147_1 | 0, 3007 | 0, 42694 | 0, $3_1 | 0);
   }
   HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
  }
  $155_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return $155_1 | 0;
 }
 
 function $246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $32_1 = 0, $48_1 = 0, $51_1 = 0, $64_1 = 0, $66_1 = 0, $111_1 = 0, $115_1 = 0, $18_1 = 0, $20_1 = 0, $22_1 = 0, $85_1 = 0, $87_1 = 0, $89_1 = 0, $134_1 = 0, $149_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $343(HEAP32[(HEAP32[($5_1 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   $18_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $20_1 = HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $22_1 = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[($5_1 + 36 | 0) >> 2] = $22_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $20_1;
   $396($18_1 | 0, 6424 | 0, 44840 | 0, $5_1 + 32 | 0 | 0);
   $382(5 | 0, 0 | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
  }
  $32_1 = 0;
  $335(HEAP32[(HEAP32[($5_1 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = $32_1;
  label$2 : {
   label$3 : {
    if (!((HEAP32[(HEAP32[($5_1 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($32_1 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 72 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
    label$4 : {
     label$5 : while (1) {
      $48_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = $48_1 + 4 | 0;
      $51_1 = HEAP32[$48_1 >> 2] | 0;
      HEAP32[($5_1 + 48 | 0) >> 2] = $51_1;
      if (!(($51_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      label$6 : {
       if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       $64_1 = 0;
       $66_1 = 1;
       HEAP32[($64_1 + 90944 | 0) >> 2] = (HEAP32[($64_1 + 90944 | 0) >> 2] | 0) + $66_1 | 0;
       label$7 : {
        if (!((((HEAPU8[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 2 | 0) & $66_1 | 0) & 255 | 0)) {
         break label$7
        }
        $207(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
       }
       label$8 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$8
        }
        $85_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $87_1 = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $89_1 = HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[($5_1 + 4 | 0) >> 2] = $89_1;
        HEAP32[$5_1 >> 2] = $87_1;
        $396($85_1 | 0, 2038 | 0, 44940 | 0, $5_1 | 0);
       }
       $208(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 76 | 0) >> 2] = 0;
       break label$2;
      }
      label$9 : {
       if (!((HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$9
       }
       break label$4;
      }
      HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
   }
   $319(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0);
   $111_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
   HEAP8[($111_1 + 16 | 0) >> 0] = (HEAPU8[($111_1 + 16 | 0) >> 0] | 0) & 223 | 0;
   $115_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
   HEAP8[($115_1 + 16 | 0) >> 0] = (HEAPU8[($115_1 + 16 | 0) >> 0] | 0) & -65 | 0;
   label$10 : {
    if (!(($439((HEAP32[($5_1 + 56 | 0) >> 2] | 0) - (HEAP32[($5_1 + 60 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) % (2 | 0) | 0)) {
     break label$10
    }
    label$11 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$11
     }
     $134_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
     $396($134_1 | 0, 3010 | 0, 45013 | 0, $5_1 + 16 | 0 | 0);
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   }
   HEAP32[($5_1 + 76 | 0) >> 2] = 1;
  }
  $149_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
  global$0 = $5_1 + 80 | 0;
  return $149_1 | 0;
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $70_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 90004 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 90012 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 90016 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   }
  }
  label$3 : {
   if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[(0 + 9e4 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 90060 | 0) >> 2] = (HEAP32[(0 + 90060 | 0) >> 2] | 0) + 1 | 0;
  label$6 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$6
   }
   $70_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($70_1 | 0, 4044 | 0, 47886 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $248($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 90052 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 90056 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  $17_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($17_1 + 24 | 0) >> 0] = HEAPU8[($17_1 + 24 | 0) >> 0] | 0 | 16 | 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[(0 + 90048 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 90064 | 0) >> 2] = (HEAP32[(0 + 90064 | 0) >> 2] | 0) + 1 | 0;
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$4
   }
   $54_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $396($54_1 | 0, 4045 | 0, 47928 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $249() {
  var $2_1 = 0, $170_1 = 0, $34_1 = 0, $59_1 = 0, $72_1 = 0, $75_1 = 0, $91_1 = 0, $151_1 = 0, $183_1 = 0, $186_1 = 0, $247_1 = 0, $260_1 = 0, $263_1 = 0, $309_1 = 0, $315_1 = 0, $344_1 = 0, $390_1 = 0, $237_1 = 0, $239_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 3012 | 0, 47997 | 0, 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
    break label$2
   }
   $205();
  }
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
  label$3 : while (1) {
   $34_1 = 0;
   label$4 : {
    if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    $34_1 = (((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$5 : {
    if (!($34_1 & 1 | 0)) {
     break label$5
    }
    HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
    label$6 : {
     if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $59_1 = 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = $59_1;
     label$7 : {
      if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($59_1 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
      label$8 : {
       label$9 : while (1) {
        $72_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $72_1 + 4 | 0;
        $75_1 = HEAP32[$72_1 >> 2] | 0;
        HEAP32[($2_1 + 24 | 0) >> 2] = $75_1;
        if (!(($75_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$8
        }
        label$10 : {
         label$11 : {
          if (!((HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$11
          }
          $91_1 = HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
          break label$10;
         }
         $91_1 = HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 40 | 0) >> 2] = $91_1;
        label$12 : {
         label$13 : {
          if ((HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0) {
           break label$13
          }
          if (((HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
           break label$12
          }
          if (!(((HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
           break label$12
          }
         }
         label$14 : {
          if (((HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
           break label$14
          }
          $332(HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
         }
         $287(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0);
        }
        continue label$9;
       };
      }
     }
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$3;
   }
   break label$3;
  };
  label$15 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$15
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1017 | 0, 48041 | 0, 0 | 0);
  }
  HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$16 : while (1) {
   $151_1 = 0;
   label$17 : {
    if (!((HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$17
    }
    $151_1 = (HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$18 : {
    if (!($151_1 & 1 | 0)) {
     break label$18
    }
    HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    label$19 : {
     label$20 : {
      if (!(((HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
       break label$20
      }
      $170_1 = 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = $170_1;
      HEAP32[($2_1 + 40 | 0) >> 2] = $170_1;
      label$21 : {
       if (!((HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($170_1 | 0) & 1 | 0)) {
        break label$21
       }
       HEAP32[($2_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
       label$22 : {
        label$23 : while (1) {
         $183_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
         HEAP32[($2_1 + 36 | 0) >> 2] = $183_1 + 4 | 0;
         $186_1 = HEAP32[$183_1 >> 2] | 0;
         HEAP32[($2_1 + 40 | 0) >> 2] = $186_1;
         if (!(($186_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$22
         }
         label$24 : {
          if (!(((HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
           break label$24
          }
          label$25 : {
           label$26 : {
            if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$26
            }
            label$27 : {
             if (!($340(HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, ((HEAP32[($2_1 + 36 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0 | 0) | 0)) {
              break label$27
             }
             HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
             break label$22;
            }
            break label$25;
           }
           HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
          }
         }
         continue label$23;
        };
       }
      }
      label$28 : {
       label$29 : {
        if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$29
        }
        HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
        $346(HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0);
        break label$28;
       }
       $237_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $239_1 = HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[$2_1 >> 2] = $239_1;
       $396($237_1 | 0, 6102 | 0, 48098 | 0, $2_1 | 0);
       $150(5 | 0, HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0);
      }
      break label$19;
     }
     $247_1 = 0;
     HEAP32[($2_1 + 40 | 0) >> 2] = $247_1;
     label$30 : {
      if (!((HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($247_1 | 0) & 1 | 0)) {
       break label$30
      }
      HEAP32[($2_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      label$31 : {
       label$32 : while (1) {
        $260_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
        HEAP32[($2_1 + 36 | 0) >> 2] = $260_1 + 4 | 0;
        $263_1 = HEAP32[$260_1 >> 2] | 0;
        HEAP32[($2_1 + 40 | 0) >> 2] = $263_1;
        if (!(($263_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$31
        }
        label$33 : {
         if (!(((HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
          break label$33
         }
         HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
         $334(HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, ((HEAP32[($2_1 + 36 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0 | 0) | 0;
         HEAP32[($2_1 + 36 | 0) >> 2] = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + -4 | 0;
        }
        continue label$32;
       };
      }
     }
     $325((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0);
     HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$34 : {
      label$35 : {
       if (!((HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$35
       }
       HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
       $309_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
       HEAP8[($309_1 + 16 | 0) >> 0] = HEAPU8[($309_1 + 16 | 0) >> 0] | 0 | 64 | 0;
       break label$34;
      }
      HEAP32[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
      $315_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      HEAP8[($315_1 + 16 | 0) >> 0] = HEAPU8[($315_1 + 16 | 0) >> 0] | 0 | 32 | 0;
     }
    }
    HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$16;
   }
   break label$16;
  };
  label$36 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$36
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4094 | 0, 48203 | 0, 0 | 0);
  }
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
  label$37 : while (1) {
   $344_1 = 0;
   label$38 : {
    if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$38
    }
    $344_1 = (((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$39 : {
    if (!($344_1 & 1 | 0)) {
     break label$39
    }
    label$40 : {
     if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$40
     }
     HEAP32[((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
    }
    HEAP32[((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$37;
   }
   break label$37;
  };
  HEAP32[(0 + 90180 | 0) >> 2] = 0;
  HEAP32[(0 + 90176 | 0) >> 2] = 1;
  label$41 : {
   if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
    break label$41
   }
   HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
   label$42 : while (1) {
    $390_1 = 0;
    label$43 : {
     if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$43
     }
     $390_1 = (((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
    }
    label$44 : {
     if (!($390_1 & 1 | 0)) {
      break label$44
     }
     label$45 : {
      if ((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$45
      }
      HEAP32[(0 + 91408 | 0) >> 2] = (HEAP32[(0 + 91408 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$42;
    }
    break label$42;
   };
  }
  global$0 = $2_1 + 48 | 0;
  return;
 }
 
 function $250($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $49_1 = 0, $58_1 = 0, $60_1 = 0, $61_1 = 0, $96_1 = 0.0, $87_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
     break label$2
    }
    if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(0 + 90984 | 0) >> 2] = (HEAP32[(0 + 90984 | 0) >> 2] | 0) + 1 | 0;
   $4(HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0);
   label$3 : {
    if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] = +HEAPF64[($5_1 + 24 | 0) >> 3];
   }
   label$4 : {
    label$5 : {
     label$6 : {
      if (!(HEAP32[($5_1 + 32 | 0) >> 2] | 0)) {
       break label$6
      }
      if (+HEAPF64[($5_1 + 24 | 0) >> 3] >= -+HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0) {
       break label$5
      }
     }
     if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
      break label$4
     }
     if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    $49_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    HEAP32[($49_1 + 80 | 0) >> 2] = (HEAP32[($49_1 + 80 | 0) >> 2] | 0) & -65537 | 0 | 65536 | 0;
    label$7 : {
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$7
     }
     $58_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $60_1 = HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $61_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
     $96_1 = +HEAPF64[($5_1 + 24 | 0) >> 3];
     HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
     HEAPF64[($5_1 + 8 | 0) >> 3] = $96_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $61_1;
     HEAP32[$5_1 >> 2] = $60_1;
     $396($58_1 | 0, 19 | 0, 48318 | 0, $5_1 | 0);
    }
    label$8 : {
     if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) > ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[(0 + 91224 | 0) >> 2] = (HEAP32[(0 + 91224 | 0) >> 2] | 0) + 1 | 0;
     $151(48397 | 0);
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = 1;
  }
  $87_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $87_1 | 0;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($13_1 | 0, 3057 | 0, 48411 | 0, $3_1 | 0);
  }
  label$2 : {
   label$3 : {
    if (HEAP32[(0 + 87764 | 0) >> 2] | 0) {
     break label$3
    }
    if (!(HEAP32[(0 + 88276 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   label$4 : {
    if (HEAP32[(0 + 90192 | 0) >> 2] | 0) {
     break label$4
    }
    $204(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90272 | 0) >> 2] | 0 | 0);
    $204(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0);
    $204(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90280 | 0) >> 2] | 0 | 0);
   }
  }
  label$5 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[(0 + 90028 | 0) >> 2] = 0;
  }
  label$6 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[(0 + 90116 | 0) >> 2] = 0;
  }
  $252(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$7 : {
   label$8 : {
    if (!(((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
     break label$8
    }
    if (!(((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0)) {
     break label$7
    }
   }
   $158(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
   label$9 : {
    label$10 : {
     if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$10
     }
     $158(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89992 | 0) >> 2] | 0 | 0);
     break label$9;
    }
    $158(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
   }
  }
  $324((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0 | 0);
  label$11 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$11
   }
   $324((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0 | 0);
  }
  $324((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0 | 0);
  label$12 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$12
   }
   $324((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0 | 0);
  }
  label$13 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$13
   }
   $324((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0 | 0);
  }
  $158(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 88 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $68_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 90012 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  label$2 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  label$3 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[(0 + 90016 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  label$4 : {
   label$5 : {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[(0 + 9e4 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[(0 + 9e4 | 0) >> 2] | 0) + 44 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 90060 | 0) >> 2] = (HEAP32[(0 + 90060 | 0) >> 2] | 0) + -1 | 0;
  label$6 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$6
   }
   $68_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($68_1 | 0, 4057 | 0, 50669 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $253() {
  var $2_1 = 0, $34_1 = 0, $71_1 = 0, $104_1 = 0, $117_1 = 0, $120_1 = 0, $16_1 = 0, $18_1 = 0, $64_1 = 0, $66_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $337(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $18_1 = HEAP32[(0 + 90020 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $18_1;
   $396($16_1 | 0, 1018 | 0, 48436 | 0, $2_1 + 16 | 0 | 0);
  }
  HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
  label$2 : while (1) {
   $34_1 = 0;
   label$3 : {
    if (!((HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $34_1 = (((HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$4 : {
    if (!($34_1 & 1 | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = (HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    $251(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0);
    HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
    continue label$2;
   }
   break label$2;
  };
  label$5 : {
   if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90020 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   $64_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $66_1 = HEAP32[(0 + 90020 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $66_1;
   $396($64_1 | 0, 6103 | 0, 48496 | 0, $2_1 | 0);
   $71_1 = 0;
   $382(5 | 0, $71_1 | 0, $71_1 | 0);
  }
  HEAP32[(0 + 90020 | 0) >> 2] = 0;
  HEAP32[(0 + 92440 | 0) >> 2] = (HEAP32[(0 + 92440 | 0) >> 2] | 0) + (HEAP32[($2_1 + 28 | 0) >> 2] | 0) | 0;
  label$6 : {
   if (!((HEAP32[(0 + 92448 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[(0 + 92448 | 0) >> 2] = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  }
  HEAP32[(0 + 90952 | 0) >> 2] = (HEAP32[(0 + 90952 | 0) >> 2] | 0) + (HEAP32[($2_1 + 24 | 0) >> 2] | 0) | 0;
  label$7 : {
   if (!((HEAP32[(0 + 90960 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[(0 + 90960 | 0) >> 2] = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
  }
  $104_1 = 0;
  HEAP32[($2_1 + 36 | 0) >> 2] = $104_1;
  label$8 : {
   if (!((HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) != ($104_1 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[($2_1 + 32 | 0) >> 2] = (HEAP32[(0 + 90292 | 0) >> 2] | 0) + 4 | 0;
   label$9 : {
    label$10 : while (1) {
     $117_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = $117_1 + 4 | 0;
     $120_1 = HEAP32[$117_1 >> 2] | 0;
     HEAP32[($2_1 + 36 | 0) >> 2] = $120_1;
     if (!(($120_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     $288(HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0);
     continue label$10;
    };
   }
  }
  $331(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0, 0 | 0);
  global$0 = $2_1 + 48 | 0;
  return;
 }
 
 function $254($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $20_1 = 0, $32_1 = 0, $44_1 = 0, $64_1 = 0, $79_1 = 0, $91_1 = 0, $103_1 = 0, $123_1 = 0, $19_1 = 0, $31_1 = 0, $43_1 = 0, $63_1 = 0, $78_1 = 0, $90_1 = 0, $102_1 = 0, $122_1 = 0, $152_1 = 0, $154_1 = 0, $181_1 = 0, $183_1 = 0, $185_1 = 0, $187_1 = 0, $192_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($7_1 + 44 | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $8_1;
  $19_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
  $20_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = $20_1 + 4 | 0;
  label$1 : {
   label$2 : {
    if (!(($19_1 | 0) == (HEAP32[$20_1 >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 2] = 0;
    break label$1;
   }
   $31_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
   $32_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
   HEAP32[($7_1 + 40 | 0) >> 2] = $32_1 + 4 | 0;
   label$3 : {
    label$4 : {
     if (!(($31_1 | 0) == (HEAP32[$32_1 >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 2] = 1;
     break label$3;
    }
    $43_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
    $44_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
    HEAP32[($7_1 + 40 | 0) >> 2] = $44_1 + 4 | 0;
    label$5 : {
     label$6 : {
      if (!(($43_1 | 0) == (HEAP32[$44_1 >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 2] = 2;
      break label$5;
     }
     HEAP32[($7_1 + 48 | 0) >> 2] = 3;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       $63_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
       $64_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = $64_1 + 4 | 0;
       label$9 : {
        if (!(($63_1 | 0) == (HEAP32[$64_1 >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
        HEAP32[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
        break label$7;
       }
       HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      };
     }
    }
   }
  }
  $78_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
  $79_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  HEAP32[($7_1 + 36 | 0) >> 2] = $79_1 + 4 | 0;
  label$10 : {
   label$11 : {
    if (!(($78_1 | 0) == (HEAP32[$79_1 >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = 0;
    break label$10;
   }
   $90_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $91_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
   HEAP32[($7_1 + 36 | 0) >> 2] = $91_1 + 4 | 0;
   label$12 : {
    label$13 : {
     if (!(($90_1 | 0) == (HEAP32[$91_1 >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = 1;
     break label$12;
    }
    $102_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $103_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    HEAP32[($7_1 + 36 | 0) >> 2] = $103_1 + 4 | 0;
    label$14 : {
     label$15 : {
      if (!(($102_1 | 0) == (HEAP32[$103_1 >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = 2;
      break label$14;
     }
     HEAP32[($7_1 + 44 | 0) >> 2] = 3;
     label$16 : {
      label$17 : while (1) {
       if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       $122_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
       $123_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = $123_1 + 4 | 0;
       label$18 : {
        if (!(($122_1 | 0) == (HEAP32[$123_1 >> 2] | 0 | 0) & 1 | 0)) {
         break label$18
        }
        HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
        break label$16;
       }
       HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
       continue label$17;
      };
     }
    }
   }
  }
  label$19 : {
   label$20 : {
    if ((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$20
    }
    if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$19
    }
   }
   $152_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $154_1 = HEAP32[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = $154_1;
   $396($152_1 | 0, 6104 | 0, 48591 | 0, $7_1 + 16 | 0 | 0);
   $150(5 | 0, HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($7_1 + 56 | 0) >> 2] = $345(HEAP32[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) | 0;
  label$21 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$21
   }
   $181_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $183_1 = HEAP32[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $185_1 = HEAP32[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
   $187_1 = HEAP32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($7_1 + 8 | 0) >> 2] = $187_1;
   HEAP32[($7_1 + 4 | 0) >> 2] = $185_1;
   HEAP32[$7_1 >> 2] = $183_1;
   $396($181_1 | 0, 4047 | 0, 48670 | 0, $7_1 | 0);
  }
  $192_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
  global$0 = $7_1 + 80 | 0;
  return $192_1 | 0;
 }
 
 function $255($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $20_1 = 0, $93_1 = 0, $96_1 = 0, $103_1 = 0, $147_1 = 0, $142_1 = 0, $152_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) + 4 | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = 0;
  $20_1 = ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) ^ -1 | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    switch ($20_1 | 0) {
    case 0:
     HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     break label$1;
    case 1:
     HEAP32[($7_1 + 20 | 0) >> 2] = ((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     break label$1;
    case 2:
     HEAP32[($7_1 + 20 | 0) >> 2] = (((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     break label$1;
    case 3:
     HEAP32[($7_1 + 20 | 0) >> 2] = ((((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     break label$1;
    case 4:
     HEAP32[($7_1 + 20 | 0) >> 2] = (((((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     break label$1;
    case 5:
     HEAP32[($7_1 + 20 | 0) >> 2] = ((((((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     break label$1;
    default:
     break label$2;
    };
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = 0;
   HEAP32[($7_1 + 8 | 0) >> 2] = 3;
   label$9 : while (1) {
    $93_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    HEAP32[($7_1 + 24 | 0) >> 2] = $93_1 + 4 | 0;
    $96_1 = HEAP32[$93_1 >> 2] | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = $96_1;
    label$10 : {
     if (!(($96_1 | 0) != (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
     $103_1 = 32;
     HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) ^ (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> ($103_1 - (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) | 0) | 0) | 0;
     HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 3 | 0;
     label$11 : {
      if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) >= ($103_1 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) - 32 | 0;
     }
    }
    if ((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     continue label$9
    }
    break label$9;
   };
  }
  label$12 : {
   if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$12
   }
   $142_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$7_1 >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
   $396($142_1 | 0, 6202 | 0, 48722 | 0, $7_1 | 0);
   $147_1 = 0;
   $150(5 | 0, $147_1 | 0, $147_1 | 0);
  }
  HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) >>> 0) % ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) >>> 0) | 0;
  $152_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  global$0 = $7_1 + 48 | 0;
  return $152_1 | 0;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $30_1 = 0, $41_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : while (1) {
   $14_1 = 0;
   label$2 : {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = (((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($14_1 & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    $30_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $30_1 + 1 | 0;
    label$4 : {
     if (!($30_1 >>> 0 > (HEAP32[(0 + 90076 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$4
     }
     $301(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    }
    continue label$1;
   }
   break label$1;
  };
  $41_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $41_1 | 0;
 }
 
 function $257($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $17_1 = 0, $20_1 = 0, $40_1 = 0, $58_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $17_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $17_1 + 4 | 0;
     $20_1 = HEAP32[$17_1 >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $20_1;
     if (!(($20_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if ((((HEAPU8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0) {
       break label$4
      }
      $258(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
      $248(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
     }
     continue label$3;
    };
   }
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = $259() | 0;
  HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 52 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$5 : {
   if (!(HEAP32[($5_1 + 24 | 0) >> 2] | 0)) {
    break label$5
   }
   $40_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   HEAP32[($40_1 + 80 | 0) >> 2] = (HEAP32[($40_1 + 80 | 0) >> 2] | 0) & -4097 | 0 | 4096 | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   $325((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  }
  $247(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  $58_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $58_1 | 0;
 }
 
 function $258($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $396($17_1 | 0, 4058 | 0, 50747 | 0, $3_1 | 0);
  }
  label$2 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[(0 + 90056 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[(0 + 90048 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[(0 + 90048 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 90064 | 0) >> 2] = (HEAP32[(0 + 90064 | 0) >> 2] | 0) + -1 | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $259() {
  var $2_1 = 0, $21_1 = 0, $40_1 = 0, $46_1 = 0, $52_1 = 0, $28_1 = 0, $66_1 = 0, $71_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $156(88 | 0) | 0;
  $513(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 88 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 90076 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90024 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 90028 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  $21_1 = HEAP32[(0 + 90076 | 0) >> 2] | 0;
  HEAP32[(0 + 90076 | 0) >> 2] = $21_1 + 1 | 0;
  HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] = $21_1;
  $28_1 = $323(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] = $28_1;
  HEAPF64[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  label$2 : {
   label$3 : {
    if (!(HEAP32[(0 + 87800 | 0) >> 2] | 0)) {
     break label$3
    }
    if (!(HEAP32[(0 + 87724 | 0) >> 2] | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[(0 + 87728 | 0) >> 3];
    break label$2;
   }
   HEAPF64[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
  }
  $40_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($40_1 + 80 | 0) >> 2] = (HEAP32[($40_1 + 80 | 0) >> 2] | 0) & -8193 | 0 | 8192 | 0;
  $46_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($46_1 + 80 | 0) >> 2] = (HEAP32[($46_1 + 80 | 0) >> 2] | 0) & -524289 | 0 | 524288 | 0;
  $52_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($52_1 + 80 | 0) >> 2] = (HEAP32[($52_1 + 80 | 0) >> 2] | 0) & -1025 | 0 | 1024 | 0;
  label$4 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$4
   }
   $66_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($66_1 | 0, 4055 | 0, 50463 | 0, $2_1 | 0);
  }
  $71_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $71_1 | 0;
 }
 
 function $260() {
  var $2_1 = 0, $28_1 = 0, $12_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $12_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($12_1 | 0, 4074 | 0, 48796 | 0, $2_1 | 0);
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$2 : while (1) {
   $28_1 = 0;
   label$3 : {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $28_1 = (HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$4 : {
    if (!($28_1 & 1 | 0)) {
     break label$4
    }
    label$5 : {
     if (((HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0) {
      break label$5
     }
     $17(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$2;
   }
   break label$2;
  };
  label$6 : {
   if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$6
   }
   label$7 : {
    if (!(+HEAPF64[(0 + 90168 | 0) >> 3] > -+HEAPF64[(0 + 91752 | 0) >> 3] & 1 | 0)) {
     break label$7
    }
    HEAPF64[(0 + 90168 | 0) >> 3] = -+HEAPF64[(0 + 91752 | 0) >> 3];
   }
  }
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $261($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $19_1 = 0, $22_1 = 0, $40_1 = 0, $76_1 = 0, $95_1 = 0, $105_1 = 0, $190_1 = 0, $196_1 = 0, $219_1 = 0, $153_1 = 0, $155_1 = 0, $209_1 = 0, $211_1 = 0, $213_1 = 0, $214_1 = 0, $225_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $19_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
     HEAP32[($5_1 + 56 | 0) >> 2] = $19_1 + 4 | 0;
     $22_1 = HEAP32[$19_1 >> 2] | 0;
     HEAP32[($5_1 + 60 | 0) >> 2] = $22_1;
     if (!(($22_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
     label$4 : {
      label$5 : {
       if (!((HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       $40_1 = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$4;
      }
      $40_1 = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 52 | 0) >> 2] = $40_1;
     label$6 : {
      label$7 : {
       if (!(((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$7
       }
       label$8 : {
        if (HEAP32[(0 + 90180 | 0) >> 2] | 0) {
         break label$8
        }
        label$9 : {
         if (!((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$9
         }
         label$10 : {
          if (!((HEAP32[(0 + 90036 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$10
          }
          HEAP32[(0 + 90036 | 0) >> 2] = 0;
         }
         $324(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
         $158(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 20 | 0);
        }
       }
       break label$6;
      }
      $76_1 = $5_1 + 40 | 0;
      HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = $323(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) | 0;
      $325($76_1 | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
      $326($76_1 | 0, HEAP32[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 48 | 0) >> 2] = $257(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) | 0;
      $95_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
      HEAP32[$95_1 >> 2] = (HEAP32[$95_1 >> 2] | 0) + 1 | 0;
      label$11 : {
       if (!(((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 24 | 0) & 1 | 0)) {
        break label$11
       }
       $105_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
       HEAP32[($105_1 + 80 | 0) >> 2] = (HEAP32[($105_1 + 80 | 0) >> 2] | 0) & -33554433 | 0 | 33554432 | 0;
       label$12 : {
        label$13 : {
         if (((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0) {
          break label$13
         }
         HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
         HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
         break label$12;
        }
        HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
        HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
        HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
       }
      }
      label$14 : {
       label$15 : {
        if (!(HEAP32[(0 + 90180 | 0) >> 2] | 0)) {
         break label$15
        }
        label$16 : {
         if (((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
          break label$16
         }
         $325((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
        }
        break label$14;
       }
       label$17 : {
        label$18 : {
         if (!(((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
          break label$18
         }
         label$19 : {
          if (!(((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
           break label$19
          }
          $153_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $155_1 = HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($5_1 + 16 | 0) >> 2] = $155_1;
          $396($153_1 | 0, 6105 | 0, 48871 | 0, $5_1 + 16 | 0 | 0);
          $150(5 | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0);
         }
         $325((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0);
         break label$17;
        }
        $346(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0);
       }
       label$20 : {
        label$21 : {
         if (!(((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
          break label$21
         }
         $332(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0;
         $287(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
         break label$20;
        }
        $325((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
        label$22 : {
         label$23 : {
          if (!(HEAP32[($5_1 + 36 | 0) >> 2] | 0)) {
           break label$23
          }
          HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
          $190_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
          HEAP8[($190_1 + 16 | 0) >> 0] = HEAPU8[($190_1 + 16 | 0) >> 0] | 0 | 32 | 0;
          break label$22;
         }
         HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
         $196_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
         HEAP8[($196_1 + 16 | 0) >> 0] = HEAPU8[($196_1 + 16 | 0) >> 0] | 0 | 64 | 0;
        }
       }
      }
      label$24 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
        break label$24
       }
       $209_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $211_1 = HEAP32[((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $213_1 = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $214_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
       HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 8 | 0) >> 2] = $214_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $213_1;
       HEAP32[$5_1 >> 2] = $211_1;
       $396($209_1 | 0, 4048 | 0, 48964 | 0, $5_1 | 0);
      }
     }
     $219_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     HEAP32[($219_1 + 80 | 0) >> 2] = (HEAP32[($219_1 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
     continue label$3;
    };
   }
  }
  $225_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
  global$0 = $5_1 + 80 | 0;
  return $225_1 | 0;
 }
 
 function $262($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $19_1 = 0, $22_1 = 0, $77_1 = 0, $93_1 = 0, $119_1 = 0, $121_1 = 0, $122_1 = 0, $124_1 = 0, $126_1 = 0, $127_1 = 0, $133_1 = 0, $135_1 = 0, $136_1 = 0, $150_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $19_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
     HEAP32[($5_1 + 60 | 0) >> 2] = $19_1 + 4 | 0;
     $22_1 = HEAP32[$19_1 >> 2] | 0;
     HEAP32[($5_1 + 64 | 0) >> 2] = $22_1;
     if (!(($22_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0) {
       break label$4
      }
      if (((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
       break label$4
      }
      HEAP32[($5_1 + 52 | 0) >> 2] = $254(HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0, $5_1 + 40 | 0 | 0, $5_1 + 36 | 0 | 0, 1 | 0) | 0;
      HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
      HEAP32[($5_1 + 48 | 0) >> 2] = ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) & 1 | 0) ^ ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) & 1 | 0) | 0;
      label$5 : {
       label$6 : {
        if (!(((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) & 1 | 0;
        break label$5;
       }
       HEAP32[($5_1 + 44 | 0) >> 2] = ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) & 1 | 0) ^ 1 | 0;
      }
      HEAP32[($5_1 + 56 | 0) >> 2] = $257(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
      $77_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
      HEAP32[$77_1 >> 2] = (HEAP32[$77_1 >> 2] | 0) + 1 | 0;
      label$7 : {
       if (!(((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 24 | 0) & 1 | 0)) {
        break label$7
       }
       label$8 : {
        if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
         break label$8
        }
        if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
         break label$7
        }
       }
       HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
       $93_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
       HEAP32[($93_1 + 80 | 0) >> 2] = (HEAP32[($93_1 + 80 | 0) >> 2] | 0) & -33554433 | 0 | 33554432 | 0;
      }
      label$9 : {
       if (HEAP32[(0 + 90180 | 0) >> 2] | 0) {
        break label$9
       }
       HEAP32[(((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
      }
      label$10 : {
       if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
        break label$10
       }
       $119_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $121_1 = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $122_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
       $124_1 = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $126_1 = HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $127_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
       $133_1 = ((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0;
       $135_1 = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $136_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
       HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = $136_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $135_1;
       HEAP32[($5_1 + 20 | 0) >> 2] = $133_1;
       HEAP32[($5_1 + 16 | 0) >> 2] = $127_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = $126_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $124_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $122_1;
       HEAP32[$5_1 >> 2] = $121_1;
       $396($119_1 | 0, 4049 | 0, 49041 | 0, $5_1 | 0);
      }
     }
     continue label$3;
    };
   }
  }
  $150_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
  global$0 = $5_1 + 80 | 0;
  return $150_1 | 0;
 }
 
 function $263($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $59_1 = 0, $194_1 = 0, $237_1 = 0, $247_1 = 0, $256_1 = 0, $267_1 = 0, $287_1 = 0, $332_1 = 0, $343_1 = 0, $371_1 = 0, $381_1 = 0, $397_1 = 0, $405_1 = 0, $419_1 = 0, $33_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $116_1 = 0, $118_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $126_1 = 0, $206_1 = 0, $208_1 = 0, $209_1 = 0, $211_1 = 0, $224_1 = 0, $226_1 = 0, $228_1 = 0, $311_1 = 0, $313_1 = 0, $357_1 = 0, $359_1 = 0, $360_1 = 0, $362_1 = 0, $363_1 = 0, $385_1 = 0, $431_1 = 0, $433_1 = 0, $434_1 = 0;
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 188 | 0) >> 2] = 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $255(HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 200 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $33_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $35_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $36_1 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
   $37_1 = HEAP32[($6_1 + 176 | 0) >> 2] | 0;
   HEAP32[($6_1 + 140 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 192 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($6_1 + 136 | 0) >> 2] = $37_1;
   HEAP32[($6_1 + 132 | 0) >> 2] = $36_1;
   HEAP32[($6_1 + 128 | 0) >> 2] = $35_1;
   $396($33_1 | 0, 4050 | 0, 49163 | 0, $6_1 + 128 | 0 | 0);
  }
  HEAP32[(0 + 91376 | 0) >> 2] = (HEAP32[(0 + 91376 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($6_1 + 172 | 0) >> 2] = HEAP32[($6_1 + 176 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     $59_1 = HEAP32[(((HEAP32[(0 + 90284 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[($6_1 + 168 | 0) >> 2] = $59_1;
     if (!(($59_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      label$6 : {
       if (!((HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[($6_1 + 188 | 0) >> 2] = 1;
       break label$5;
      }
      HEAP32[(0 + 91400 | 0) >> 2] = (HEAP32[(0 + 91400 | 0) >> 2] | 0) + 1 | 0;
      label$7 : {
       if (!($264(1 | 0, HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, $6_1 + 160 | 0 | 0, $6_1 + 184 | 0 | 0) | 0)) {
        break label$7
       }
       label$8 : {
        if (!((HEAP32[(((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 200 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        $151(49224 | 0);
        $116_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $118_1 = HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $120_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $121_1 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
        $122_1 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
        $126_1 = HEAP32[((HEAP32[((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($6_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($6_1 + 96 | 0) >> 2] = $126_1;
        HEAP32[($6_1 + 92 | 0) >> 2] = $122_1;
        HEAP32[($6_1 + 88 | 0) >> 2] = $121_1;
        HEAP32[($6_1 + 84 | 0) >> 2] = $120_1;
        HEAP32[($6_1 + 80 | 0) >> 2] = $118_1;
        $396($116_1 | 0, 7084 | 0, 49262 | 0, $6_1 + 80 | 0 | 0);
       }
       HEAP32[($6_1 + 180 | 0) >> 2] = (HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0) == ((((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ (((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) | 0 | 0) & 1 | 0;
       HEAP32[($6_1 + 164 | 0) >> 2] = HEAP32[(((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       label$9 : {
        if (!(HEAP32[($6_1 + 180 | 0) >> 2] | 0)) {
         break label$9
        }
        if ((HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$9
        }
        HEAP32[(((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
        HEAP32[(((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 200 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
        $194_1 = HEAP32[($6_1 + 192 | 0) >> 2] | 0;
        HEAP32[$194_1 >> 2] = (HEAP32[$194_1 >> 2] | 0) + -1 | 0;
        label$10 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
          break label$10
         }
         $206_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $208_1 = HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $209_1 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
         $211_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
         HEAP32[($6_1 + 72 | 0) >> 2] = $211_1;
         HEAP32[($6_1 + 68 | 0) >> 2] = $209_1;
         HEAP32[($6_1 + 64 | 0) >> 2] = $208_1;
         $396($206_1 | 0, 4051 | 0, 49441 | 0, $6_1 + 64 | 0 | 0);
        }
        break label$2;
       }
       label$11 : {
        if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
         break label$11
        }
        if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
         break label$11
        }
        $151(49501 | 0);
        $224_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $226_1 = HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $228_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        label$12 : {
         label$13 : {
          if (!((HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$13
          }
          $237_1 = HEAP32[((HEAP32[($6_1 + 164 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          break label$12;
         }
         $237_1 = -1;
        }
        HEAP32[($6_1 + 56 | 0) >> 2] = $237_1;
        HEAP32[($6_1 + 52 | 0) >> 2] = $228_1;
        HEAP32[($6_1 + 48 | 0) >> 2] = $226_1;
        $396($224_1 | 0, 6107 | 0, 49538 | 0, $6_1 + 48 | 0 | 0);
        $150(7 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0);
       }
       $247_1 = 1;
       HEAP32[(((HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 200 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $247_1;
       $256_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
       HEAP32[($256_1 + 80 | 0) >> 2] = (HEAP32[($256_1 + 80 | 0) >> 2] | 0) & -2097153 | 0 | 2097152 | 0;
       $271(HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0);
       $267_1 = HEAP32[($6_1 + 192 | 0) >> 2] | 0;
       HEAP32[$267_1 >> 2] = (HEAP32[$267_1 >> 2] | 0) + 1 | 0;
       label$14 : {
        if (!((HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) != ($247_1 | 0) & 1 | 0)) {
         break label$14
        }
        HEAP32[(((HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
        $287_1 = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
        HEAP32[($287_1 + 80 | 0) >> 2] = (HEAP32[($287_1 + 80 | 0) >> 2] | 0) & -2097153 | 0 | 2097152 | 0;
        label$15 : {
         if (!((HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$15
         }
         HEAP32[($6_1 + 156 | 0) >> 2] = $343(HEAP32[((HEAP32[($6_1 + 164 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) | 0;
         label$16 : {
          if (!((HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
           break label$16
          }
          $311_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $313_1 = HEAP32[((HEAP32[($6_1 + 164 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($6_1 + 32 | 0) >> 2] = $313_1;
          $396($311_1 | 0, 6260 | 0, 49694 | 0, $6_1 + 32 | 0 | 0);
          $150(7 | 0, HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0);
         }
         HEAP32[(((HEAP32[((HEAP32[($6_1 + 164 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
         $332_1 = HEAP32[($6_1 + 164 | 0) >> 2] | 0;
         HEAP32[($332_1 + 80 | 0) >> 2] = (HEAP32[($332_1 + 80 | 0) >> 2] | 0) & -2097153 | 0 | 2097152 | 0;
         $271(HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0);
         $343_1 = HEAP32[($6_1 + 192 | 0) >> 2] | 0;
         HEAP32[$343_1 >> 2] = (HEAP32[$343_1 >> 2] | 0) + 2 | 0;
        }
       }
       label$17 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$17
        }
        $357_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $359_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $360_1 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
        $362_1 = HEAP32[((HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $363_1 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
        label$18 : {
         label$19 : {
          if (!((HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
           break label$19
          }
          $371_1 = -2;
          break label$18;
         }
         label$20 : {
          label$21 : {
           if (!((HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$21
           }
           $381_1 = HEAP32[((HEAP32[($6_1 + 164 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           break label$20;
          }
          $381_1 = -1;
         }
         $371_1 = $381_1;
        }
        $385_1 = HEAP32[($6_1 + 180 | 0) >> 2] | 0;
        HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 176 | 0) >> 2] | 0;
        HEAP32[($6_1 + 20 | 0) >> 2] = $385_1;
        HEAP32[($6_1 + 16 | 0) >> 2] = $371_1;
        HEAP32[($6_1 + 12 | 0) >> 2] = $363_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $362_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $360_1;
        HEAP32[$6_1 >> 2] = $359_1;
        $396($357_1 | 0, 4052 | 0, 49810 | 0, $6_1 | 0);
       }
       break label$2;
      }
     }
     $397_1 = (HEAP32[($6_1 + 172 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 172 | 0) >> 2] = $397_1;
     label$22 : {
      label$23 : {
       if (!(($397_1 | 0) >= (HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       $405_1 = 0;
       break label$22;
      }
      $405_1 = HEAP32[($6_1 + 172 | 0) >> 2] | 0;
     }
     HEAP32[($6_1 + 172 | 0) >> 2] = $405_1;
     continue label$4;
    };
   }
   label$24 : {
    if (HEAP32[($6_1 + 188 | 0) >> 2] | 0) {
     break label$24
    }
    HEAP32[(((HEAP32[(0 + 90284 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $419_1 = HEAP32[($6_1 + 192 | 0) >> 2] | 0;
   HEAP32[$419_1 >> 2] = (HEAP32[$419_1 >> 2] | 0) + 1 | 0;
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$2
   }
   $431_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $433_1 = HEAP32[((HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $434_1 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
   HEAP32[($6_1 + 120 | 0) >> 2] = HEAP32[($6_1 + 176 | 0) >> 2] | 0;
   HEAP32[($6_1 + 116 | 0) >> 2] = $434_1;
   HEAP32[($6_1 + 112 | 0) >> 2] = $433_1;
   $396($431_1 | 0, 4053 | 0, 49913 | 0, $6_1 + 112 | 0 | 0);
  }
  global$0 = $6_1 + 208 | 0;
  return;
 }
 
 function $264($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $40_1 = 0, $59_1 = 0, $77_1 = 0, $39_1 = 0, $114_1 = 0, $115_1 = 0, $118_1 = 0, $120_1 = 0, $125_1 = 0, $133_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = 0;
  HEAP32[($8_1 + 32 | 0) >> 2] = ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($8_1 + 28 | 0) >> 2] = ((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($8_1 + 20 | 0) >> 2] = ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($8_1 + 48 | 0) >> 2] | 0) << 2 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : while (1) {
       $39_1 = HEAP32[(HEAP32[($8_1 + 32 | 0) >> 2] | 0) >> 2] | 0;
       $40_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       HEAP32[($8_1 + 28 | 0) >> 2] = $40_1 + 4 | 0;
       if (!(($39_1 | 0) != (HEAP32[$40_1 >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       label$6 : {
        if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[($8_1 + 60 | 0) >> 2] = 0;
        break label$1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       continue label$5;
      };
     }
    }
    $59_1 = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
    HEAP32[($8_1 + 32 | 0) >> 2] = $59_1 + 4 | 0;
    if ((HEAP32[($59_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     continue label$2
    }
    break label$2;
   };
   label$7 : {
    if ((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$7
    }
    $77_1 = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($8_1 + 28 | 0) >> 2] = $77_1;
    HEAP32[($8_1 + 24 | 0) >> 2] = $77_1;
   }
   HEAP32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2] = ((HEAP32[($8_1 + 24 | 0) >> 2] | 0) - (((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0;
   HEAP32[(HEAP32[($8_1 + 36 | 0) >> 2] | 0) >> 2] = ((((HEAP32[($8_1 + 48 | 0) >> 2] | 0) & 1 | 0) ^ ((HEAP32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2] | 0) & 1 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0;
   label$8 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$8
    }
    $114_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $115_1 = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
    $118_1 = HEAP32[((HEAP32[(HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $120_1 = HEAP32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2] | 0;
    $125_1 = HEAP32[((HEAP32[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + -4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($8_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($8_1 + 12 | 0) >> 2] = $125_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $120_1;
    HEAP32[($8_1 + 4 | 0) >> 2] = $118_1;
    HEAP32[$8_1 >> 2] = $115_1;
    $396($114_1 | 0, 4054 | 0, 50394 | 0, $8_1 | 0);
   }
   HEAP32[($8_1 + 60 | 0) >> 2] = 1;
  }
  $133_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
  global$0 = $8_1 + 64 | 0;
  return $133_1 | 0;
 }
 
 function $265() {
  var $2_1 = 0, $4_1 = 0, $29_1 = 0, $85_1 = 0, $147_1 = 0, $163_1 = 0, $207_1 = 0, $223_1 = 0, $234_1 = 0, $272_1 = 0, $102_1 = 0, $105_1 = 0, $204_1 = 0, $216_1 = 0, $269_1 = 0, $278_1 = 0, $316_1 = 0.0, $279_1 = 0, $280_1 = 0, $317_1 = 0.0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  $4_1 = 0;
  HEAP32[($2_1 + 124 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 120 | 0) >> 2] = $4_1;
  HEAPF64[($2_1 + 96 | 0) >> 3] = +($4_1 | 0);
  HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  HEAP32[($2_1 + 56 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1019 | 0, 49968 | 0, 0 | 0);
  }
  HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$2 : while (1) {
   $29_1 = 0;
   label$3 : {
    if (!((HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $29_1 = (HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$4 : {
    if (!($29_1 & 1 | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 124 | 0) >> 2] = (HEAP32[($2_1 + 124 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
    HEAP32[(((HEAP32[($2_1 + 68 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($2_1 + 68 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($2_1 + 84 | 0) >> 2] | 0) + 1 | 0;
    $513(((HEAP32[($2_1 + 68 | 0) >> 2] | 0) + 4 | 0) + 4 | 0 | 0, 0 | 0, (HEAP32[($2_1 + 84 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$2;
   }
   break label$2;
  };
  $309(Math_imul(HEAP32[($2_1 + 124 | 0) >> 2] | 0, (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) | 0) | 0;
  HEAP32[($2_1 + 80 | 0) >> 2] = $337(HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$5 : while (1) {
   $85_1 = 0;
   label$6 : {
    if (!((HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    $85_1 = (HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$7 : {
    if (!($85_1 & 1 | 0)) {
     break label$7
    }
    label$8 : {
     if (((HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
      break label$8
     }
     $102_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $105_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = $105_1;
     $396($102_1 | 0, 6377 | 0, 50020 | 0, $2_1 | 0);
     $150(5 | 0, HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($2_1 + 116 | 0) >> 2] = 1;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($2_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      $263(HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0, $2_1 + 120 | 0 | 0);
      HEAP32[($2_1 + 116 | 0) >> 2] = (HEAP32[($2_1 + 116 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$5;
   }
   break label$5;
  };
  label$11 : {
   if (!(HEAP32[($2_1 + 120 | 0) >> 2] | 0)) {
    break label$11
   }
   $151(50202 | 0);
   label$12 : {
    if (!(HEAP32[($2_1 + 120 | 0) >> 2] | 0)) {
     break label$12
    }
    HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
    label$13 : while (1) {
     $147_1 = 0;
     label$14 : {
      if (!((HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$14
      }
      $147_1 = (HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$15 : {
      if (!($147_1 & 1 | 0)) {
       break label$15
      }
      label$16 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
        break label$16
       }
       $163_1 = 0;
       HEAP32[($2_1 + 108 | 0) >> 2] = $163_1;
       label$17 : {
        if (!((HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($163_1 | 0) & 1 | 0)) {
         break label$17
        }
        HEAP32[($2_1 + 76 | 0) >> 2] = 0;
        HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($2_1 + 72 | 0) >> 2] = $337(HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
        label$18 : {
         label$19 : while (1) {
          if (!((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$18
          }
          label$20 : {
           if (!((HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
            break label$20
           }
           HEAPF64[($2_1 + 88 | 0) >> 3] = +$308(HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0, $2_1 + 120 | 0 | 0);
           label$21 : {
            if (!(+HEAPF64[($2_1 + 96 | 0) >> 3] < +HEAPF64[($2_1 + 88 | 0) >> 3] & 1 | 0)) {
             break label$21
            }
            HEAPF64[($2_1 + 96 | 0) >> 3] = +HEAPF64[($2_1 + 88 | 0) >> 3];
           }
          }
          $204_1 = (HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
          $207_1 = (HEAP32[($2_1 + 76 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($2_1 + 76 | 0) >> 2] = $207_1;
          HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[($204_1 + ($207_1 << 2 | 0) | 0) >> 2] | 0;
          continue label$19;
         };
        }
       }
      }
      HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 112 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$13;
     }
     break label$13;
    };
   }
  }
  label$22 : {
   if (!(HEAP32[($2_1 + 120 | 0) >> 2] | 0)) {
    break label$22
   }
   $216_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
   $396($216_1 | 0, 6108 | 0, 50232 | 0, $2_1 + 48 | 0 | 0);
   $223_1 = 0;
   $311(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $223_1 | 0, $223_1 | 0);
  }
  label$23 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$23
   }
   $234_1 = 0;
   HEAP32[($2_1 + 52 | 0) >> 2] = $234_1;
   label$24 : {
    if (!((HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0) != ($234_1 | 0) & 1 | 0)) {
     break label$24
    }
    HEAP32[($2_1 + 64 | 0) >> 2] = 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90284 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 60 | 0) >> 2] = $337(HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0) | 0;
    label$25 : {
     label$26 : while (1) {
      if (!((HEAP32[($2_1 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$25
      }
      label$27 : {
       if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$27
       }
       HEAP32[($2_1 + 56 | 0) >> 2] = (HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      }
      $269_1 = (HEAP32[(0 + 90284 | 0) >> 2] | 0) + 4 | 0;
      $272_1 = (HEAP32[($2_1 + 64 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($2_1 + 64 | 0) >> 2] = $272_1;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($269_1 + ($272_1 << 2 | 0) | 0) >> 2] | 0;
      continue label$26;
     };
    }
   }
   $278_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $316_1 = +HEAPF64[($2_1 + 96 | 0) >> 3];
   $279_1 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
   $280_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = $337(HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 28 | 0) >> 2] = $280_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $279_1;
   HEAPF64[($2_1 + 16 | 0) >> 3] = $316_1;
   $396($278_1 | 0, 3063 | 0, 50305 | 0, $2_1 + 16 | 0 | 0);
  }
  $324(87704 + 2580 | 0 | 0);
  label$28 : {
   label$29 : {
    if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
     break label$29
    }
    if (!(HEAP32[(0 + 87876 | 0) >> 2] | 0)) {
     break label$28
    }
   }
   label$30 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$30
    }
    $389(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0);
   }
  }
  $317_1 = +HEAPF64[($2_1 + 96 | 0) >> 3];
  global$0 = $2_1 + 128 | 0;
  return +$317_1;
 }
 
 function $266() {
  var i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $31_1 = 0, $44_1 = 0, $49_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $156(20 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $6_1 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $6_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $6_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $6_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $6_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  $7_1 = i64toi32_i32$1 + 16 | 0;
  $8_1 = 0;
  HEAP8[$7_1 >> 0] = $8_1;
  HEAP8[($7_1 + 1 | 0) >> 0] = $8_1 >>> 8 | 0;
  HEAP8[($7_1 + 2 | 0) >> 0] = $8_1 >>> 16 | 0;
  HEAP8[($7_1 + 3 | 0) >> 0] = $8_1 >>> 24 | 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP8[i64toi32_i32$1 >> 0] = $6_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $6_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $6_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $6_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  HEAP32[(0 + 92280 | 0) >> 2] = (HEAP32[(0 + 92280 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!((HEAP32[(0 + 90080 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7074 | 0, 50495 | 0, 0 | 0);
  }
  $31_1 = HEAP32[(0 + 90080 | 0) >> 2] | 0;
  HEAP32[(0 + 90080 | 0) >> 2] = $31_1 + 1 | 0;
  HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = $31_1;
  label$2 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$2
   }
   $44_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $396($44_1 | 0, 4056 | 0, 50637 | 0, $2_1 | 0);
  }
  $49_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $49_1 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $59_1 = 0, $71_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = -3;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = -2;
    break label$1;
   }
   label$4 : {
    label$5 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 88328 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$5
     }
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < ((HEAP32[(0 + 88328 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 88324 | 0) >> 2] | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 88328 | 0) >> 2] | 0) | 0) >> 3 | 0;
     HEAP32[$3_1 >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) / (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) | 0;
     break label$4;
    }
    $59_1 = $343(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $59_1;
    label$6 : {
     label$7 : {
      if (!(($59_1 | 0) != (-1 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + (HEAP32[(0 + 88324 | 0) >> 2] | 0) | 0;
      break label$6;
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     break label$1;
    }
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
  }
  $71_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $71_1 | 0;
 }
 
 function $268() {
  var $2_1 = 0, $68_1 = 0, $3_1 = 0, $27_1 = 0, $41_1 = 0, $58_1 = 0, $81_1 = 0, $84_1 = 0, $136_1 = 0, $157_1 = 0, $170_1 = 0, $173_1 = 0, $183_1 = 0, $196_1 = 0, $199_1 = 0, $232_1 = 0, $249_1 = 0, $263_1 = 0, $276_1 = 0, $279_1 = 0, $301_1 = 0, $314_1 = 0, $317_1 = 0, $343_1 = 0, $391_1 = 0, $408_1 = 0, $422_1 = 0, $435_1 = 0, $438_1 = 0, $464_1 = 0, $16_1 = 0, $29_1 = 0, $113_1 = 0, $114_1 = 0, $117_1 = 0, $221_1 = 0, $356_1 = 0, $359_1 = 0, $361_1 = 0, $380_1 = 0, $477_1 = 0, $480_1 = 0, $482_1 = 0;
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 84 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$3
     }
     $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     label$4 : {
      label$5 : {
       if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $27_1 = HEAP32[((HEAP32[(0 + 90056 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       break label$4;
      }
      $27_1 = -1;
     }
     $29_1 = $27_1;
     label$6 : {
      label$7 : {
       if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$7
       }
       $41_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       break label$6;
      }
      $41_1 = -1;
     }
     HEAP32[($2_1 + 52 | 0) >> 2] = $41_1;
     HEAP32[($2_1 + 48 | 0) >> 2] = $29_1;
     $396($16_1 | 0, 3013 | 0, 50796 | 0, $2_1 + 48 | 0 | 0);
    }
    HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
    label$8 : while (1) {
     $58_1 = 0;
     label$9 : {
      if (!((HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      $58_1 = (HEAP32[(HEAP32[($2_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$10 : {
      if (!($58_1 & 1 | 0)) {
       break label$10
      }
      $68_1 = 0;
      HEAP32[($2_1 + 84 | 0) >> 2] = $68_1;
      HEAP32[($2_1 + 104 | 0) >> 2] = $68_1;
      label$11 : {
       if (!((HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($68_1 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($2_1 + 100 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
       label$12 : {
        label$13 : while (1) {
         $81_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         HEAP32[($2_1 + 100 | 0) >> 2] = $81_1 + 4 | 0;
         $84_1 = HEAP32[$81_1 >> 2] | 0;
         HEAP32[($2_1 + 104 | 0) >> 2] = $84_1;
         if (!(($84_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$12
         }
         label$14 : {
          if (!(((HEAP32[((HEAP32[($2_1 + 104 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
           break label$14
          }
          HEAP32[($2_1 + 84 | 0) >> 2] = (HEAP32[($2_1 + 84 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[((HEAP32[($2_1 + 100 | 0) >> 2] | 0) + -4 | 0) >> 2] = 0;
         }
         continue label$13;
        };
       }
      }
      label$15 : {
       if (!(HEAP32[($2_1 + 84 | 0) >> 2] | 0)) {
        break label$15
       }
       label$16 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$16
        }
        $113_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $114_1 = HEAP32[($2_1 + 84 | 0) >> 2] | 0;
        $117_1 = $337(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = $117_1;
        HEAP32[$2_1 >> 2] = $114_1;
        $396($113_1 | 0, 4046 | 0, 50898 | 0, $2_1 | 0);
       }
       $330(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 92 | 0) >> 2] | 0) >> 2] | 0;
      continue label$8;
     }
     break label$8;
    };
    HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
    label$17 : while (1) {
     $136_1 = 0;
     label$18 : {
      if (!((HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$18
      }
      $136_1 = (HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$19 : {
      if (!($136_1 & 1 | 0)) {
       break label$19
      }
      label$20 : {
       label$21 : {
        if (!(HEAP32[(0 + 90088 | 0) >> 2] | 0)) {
         break label$21
        }
        if (!((HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 90088 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$21
        }
        $157_1 = 0;
        HEAP32[($2_1 + 92 | 0) >> 2] = $157_1;
        label$22 : {
         if (!((HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($157_1 | 0) & 1 | 0)) {
          break label$22
         }
         HEAP32[($2_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
         label$23 : {
          label$24 : while (1) {
           $170_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
           HEAP32[($2_1 + 88 | 0) >> 2] = $170_1 + 4 | 0;
           $173_1 = HEAP32[$170_1 >> 2] | 0;
           HEAP32[($2_1 + 92 | 0) >> 2] = $173_1;
           if (!(($173_1 | 0) != (0 | 0) & 1 | 0)) {
            break label$23
           }
           $325((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0);
           continue label$24;
          };
         }
        }
        break label$20;
       }
       $183_1 = 0;
       HEAP32[($2_1 + 92 | 0) >> 2] = $183_1;
       label$25 : {
        if (!((HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($183_1 | 0) & 1 | 0)) {
         break label$25
        }
        HEAP32[($2_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
        label$26 : {
         label$27 : while (1) {
          $196_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
          HEAP32[($2_1 + 88 | 0) >> 2] = $196_1 + 4 | 0;
          $199_1 = HEAP32[$196_1 >> 2] | 0;
          HEAP32[($2_1 + 92 | 0) >> 2] = $199_1;
          if (!(($199_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$26
          }
          $352((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0) | 0;
          continue label$27;
         };
        }
       }
      }
      HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$17;
     }
     break label$17;
    };
    label$28 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$28
     }
     $221_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     label$29 : {
      label$30 : {
       if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$30
       }
       $232_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       break label$29;
      }
      $232_1 = -1;
     }
     HEAP32[($2_1 + 32 | 0) >> 2] = $232_1;
     $396($221_1 | 0, 3058 | 0, 51007 | 0, $2_1 + 32 | 0 | 0);
    }
    HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
    label$31 : while (1) {
     $249_1 = 0;
     label$32 : {
      if (!((HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$32
      }
      $249_1 = (((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
     }
     label$33 : {
      if (!($249_1 & 1 | 0)) {
       break label$33
      }
      $263_1 = 0;
      HEAP32[($2_1 + 92 | 0) >> 2] = $263_1;
      label$34 : {
       if (!((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($263_1 | 0) & 1 | 0)) {
        break label$34
       }
       HEAP32[($2_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$35 : {
        label$36 : while (1) {
         $276_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
         HEAP32[($2_1 + 88 | 0) >> 2] = $276_1 + 4 | 0;
         $279_1 = HEAP32[$276_1 >> 2] | 0;
         HEAP32[($2_1 + 92 | 0) >> 2] = $279_1;
         if (!(($279_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$35
         }
         label$37 : {
          if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0) {
           break label$37
          }
          if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
           break label$37
          }
          $301_1 = 0;
          HEAP32[($2_1 + 104 | 0) >> 2] = $301_1;
          label$38 : {
           if (!((HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($301_1 | 0) & 1 | 0)) {
            break label$38
           }
           HEAP32[($2_1 + 100 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
           label$39 : {
            label$40 : while (1) {
             $314_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
             HEAP32[($2_1 + 100 | 0) >> 2] = $314_1 + 4 | 0;
             $317_1 = HEAP32[$314_1 >> 2] | 0;
             HEAP32[($2_1 + 104 | 0) >> 2] = $317_1;
             if (!(($317_1 | 0) != (0 | 0) & 1 | 0)) {
              break label$39
             }
             label$41 : {
              if (((HEAP32[((HEAP32[($2_1 + 104 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
               break label$41
              }
              break label$39;
             }
             continue label$40;
            };
           }
          }
          label$42 : {
           label$43 : {
            if (!((HEAP32[($2_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$43
            }
            $332(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) | 0;
            break label$42;
           }
           $343_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
           HEAP8[($343_1 + 24 | 0) >> 0] = HEAPU8[($343_1 + 24 | 0) >> 0] | 0 | 4 | 0;
           $325(87704 + 2588 | 0 | 0, HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0);
           label$44 : {
            if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
             break label$44
            }
            $356_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $359_1 = $267(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
            $361_1 = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($2_1 + 20 | 0) >> 2] = $361_1;
            HEAP32[($2_1 + 16 | 0) >> 2] = $359_1;
            $396($356_1 | 0, 2041 | 0, 51086 | 0, $2_1 + 16 | 0 | 0);
           }
          }
         }
         continue label$36;
        };
       }
      }
      HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$31;
     }
     break label$31;
    };
    break label$1;
   }
   label$45 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$45
    }
    $380_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$46 : {
     label$47 : {
      if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$47
      }
      $391_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$46;
     }
     $391_1 = -1;
    }
    HEAP32[($2_1 + 80 | 0) >> 2] = $391_1;
    $396($380_1 | 0, 3058 | 0, 51161 | 0, $2_1 + 80 | 0 | 0);
   }
   HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
   label$48 : while (1) {
    $408_1 = 0;
    label$49 : {
     if (!((HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$49
     }
     $408_1 = (((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
    }
    label$50 : {
     if (!($408_1 & 1 | 0)) {
      break label$50
     }
     $422_1 = 0;
     HEAP32[($2_1 + 92 | 0) >> 2] = $422_1;
     label$51 : {
      if (!((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($422_1 | 0) & 1 | 0)) {
       break label$51
      }
      HEAP32[($2_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
      label$52 : {
       label$53 : while (1) {
        $435_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
        HEAP32[($2_1 + 88 | 0) >> 2] = $435_1 + 4 | 0;
        $438_1 = HEAP32[$435_1 >> 2] | 0;
        HEAP32[($2_1 + 92 | 0) >> 2] = $438_1;
        if (!(($438_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$52
        }
        label$54 : {
         if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0) {
          break label$54
         }
         if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
          break label$54
         }
         $464_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
         HEAP8[($464_1 + 24 | 0) >> 0] = HEAPU8[($464_1 + 24 | 0) >> 0] | 0 | 4 | 0;
         $325(87704 + 2588 | 0 | 0, HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0);
         label$55 : {
          if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
           break label$55
          }
          $477_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $480_1 = $267(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
          $482_1 = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($2_1 + 68 | 0) >> 2] = $482_1;
          HEAP32[($2_1 + 64 | 0) >> 2] = $480_1;
          $396($477_1 | 0, 2042 | 0, 51235 | 0, $2_1 + 64 | 0 | 0);
         }
        }
        continue label$53;
       };
      }
     }
     HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$48;
    }
    break label$48;
   };
  }
  global$0 = $2_1 + 112 | 0;
  return;
 }
 
 function $269() {
  var $2_1 = 0, $68_1 = 0, $3_1 = 0, $27_1 = 0, $41_1 = 0, $58_1 = 0, $81_1 = 0, $84_1 = 0, $142_1 = 0, $152_1 = 0, $165_1 = 0, $168_1 = 0, $201_1 = 0, $218_1 = 0, $232_1 = 0, $245_1 = 0, $248_1 = 0, $270_1 = 0, $283_1 = 0, $286_1 = 0, $312_1 = 0, $360_1 = 0, $377_1 = 0, $391_1 = 0, $404_1 = 0, $407_1 = 0, $433_1 = 0, $16_1 = 0, $29_1 = 0, $124_1 = 0, $125_1 = 0, $190_1 = 0, $325_1 = 0, $328_1 = 0, $330_1 = 0, $349_1 = 0, $446_1 = 0, $449_1 = 0, $451_1 = 0;
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 84 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$3
     }
     $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     label$4 : {
      label$5 : {
       if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $27_1 = HEAP32[((HEAP32[(0 + 90056 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       break label$4;
      }
      $27_1 = -1;
     }
     $29_1 = $27_1;
     label$6 : {
      label$7 : {
       if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$7
       }
       $41_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       break label$6;
      }
      $41_1 = -1;
     }
     HEAP32[($2_1 + 52 | 0) >> 2] = $41_1;
     HEAP32[($2_1 + 48 | 0) >> 2] = $29_1;
     $396($16_1 | 0, 3059 | 0, 51315 | 0, $2_1 + 48 | 0 | 0);
    }
    HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
    label$8 : while (1) {
     $58_1 = 0;
     label$9 : {
      if (!((HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      $58_1 = (HEAP32[(HEAP32[($2_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$10 : {
      if (!($58_1 & 1 | 0)) {
       break label$10
      }
      $68_1 = 0;
      HEAP32[($2_1 + 84 | 0) >> 2] = $68_1;
      HEAP32[($2_1 + 104 | 0) >> 2] = $68_1;
      label$11 : {
       if (!((HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($68_1 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($2_1 + 100 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
       label$12 : {
        label$13 : while (1) {
         $81_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
         HEAP32[($2_1 + 100 | 0) >> 2] = $81_1 + 4 | 0;
         $84_1 = HEAP32[$81_1 >> 2] | 0;
         HEAP32[($2_1 + 104 | 0) >> 2] = $84_1;
         if (!(($84_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$12
         }
         label$14 : {
          if (!(((HEAP32[((HEAP32[($2_1 + 104 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
           break label$14
          }
          HEAP32[($2_1 + 84 | 0) >> 2] = (HEAP32[($2_1 + 84 | 0) >> 2] | 0) + 1 | 0;
          $334(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, ((HEAP32[($2_1 + 100 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0 | 0) | 0;
          HEAP32[($2_1 + 100 | 0) >> 2] = (HEAP32[($2_1 + 100 | 0) >> 2] | 0) + -4 | 0;
         }
         continue label$13;
        };
       }
      }
      label$15 : {
       if (!(HEAP32[($2_1 + 84 | 0) >> 2] | 0)) {
        break label$15
       }
       label$16 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
         break label$16
        }
        $124_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $125_1 = HEAP32[($2_1 + 84 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[$2_1 >> 2] = $125_1;
        $396($124_1 | 0, 4021 | 0, 51422 | 0, $2_1 | 0);
       }
      }
      HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 92 | 0) >> 2] | 0) >> 2] | 0;
      continue label$8;
     }
     break label$8;
    };
    HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
    label$17 : while (1) {
     $142_1 = 0;
     label$18 : {
      if (!((HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$18
      }
      $142_1 = (HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$19 : {
      if (!($142_1 & 1 | 0)) {
       break label$19
      }
      $152_1 = 0;
      HEAP32[($2_1 + 92 | 0) >> 2] = $152_1;
      label$20 : {
       if (!((HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($152_1 | 0) & 1 | 0)) {
        break label$20
       }
       HEAP32[($2_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$21 : {
        label$22 : while (1) {
         $165_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
         HEAP32[($2_1 + 88 | 0) >> 2] = $165_1 + 4 | 0;
         $168_1 = HEAP32[$165_1 >> 2] | 0;
         HEAP32[($2_1 + 92 | 0) >> 2] = $168_1;
         if (!(($168_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$21
         }
         $325((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0);
         continue label$22;
        };
       }
      }
      HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$17;
     }
     break label$17;
    };
    label$23 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$23
     }
     $190_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     label$24 : {
      label$25 : {
       if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$25
       }
       $201_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       break label$24;
      }
      $201_1 = -1;
     }
     HEAP32[($2_1 + 32 | 0) >> 2] = $201_1;
     $396($190_1 | 0, 3065 | 0, 51497 | 0, $2_1 + 32 | 0 | 0);
    }
    HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
    label$26 : while (1) {
     $218_1 = 0;
     label$27 : {
      if (!((HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$27
      }
      $218_1 = (((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
     }
     label$28 : {
      if (!($218_1 & 1 | 0)) {
       break label$28
      }
      $232_1 = 0;
      HEAP32[($2_1 + 92 | 0) >> 2] = $232_1;
      label$29 : {
       if (!((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($232_1 | 0) & 1 | 0)) {
        break label$29
       }
       HEAP32[($2_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$30 : {
        label$31 : while (1) {
         $245_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
         HEAP32[($2_1 + 88 | 0) >> 2] = $245_1 + 4 | 0;
         $248_1 = HEAP32[$245_1 >> 2] | 0;
         HEAP32[($2_1 + 92 | 0) >> 2] = $248_1;
         if (!(($248_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$30
         }
         label$32 : {
          if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0) {
           break label$32
          }
          if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
           break label$32
          }
          $270_1 = 0;
          HEAP32[($2_1 + 104 | 0) >> 2] = $270_1;
          label$33 : {
           if (!((HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($270_1 | 0) & 1 | 0)) {
            break label$33
           }
           HEAP32[($2_1 + 100 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
           label$34 : {
            label$35 : while (1) {
             $283_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
             HEAP32[($2_1 + 100 | 0) >> 2] = $283_1 + 4 | 0;
             $286_1 = HEAP32[$283_1 >> 2] | 0;
             HEAP32[($2_1 + 104 | 0) >> 2] = $286_1;
             if (!(($286_1 | 0) != (0 | 0) & 1 | 0)) {
              break label$34
             }
             label$36 : {
              if (((HEAP32[((HEAP32[($2_1 + 104 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
               break label$36
              }
              break label$34;
             }
             continue label$35;
            };
           }
          }
          label$37 : {
           label$38 : {
            if (!((HEAP32[($2_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$38
            }
            $332(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) | 0;
            break label$37;
           }
           $312_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
           HEAP8[($312_1 + 24 | 0) >> 0] = HEAPU8[($312_1 + 24 | 0) >> 0] | 0 | 4 | 0;
           $325(87704 + 2588 | 0 | 0, HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0);
           label$39 : {
            if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
             break label$39
            }
            $325_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $328_1 = $267(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
            $330_1 = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($2_1 + 20 | 0) >> 2] = $330_1;
            HEAP32[($2_1 + 16 | 0) >> 2] = $328_1;
            $396($325_1 | 0, 2102 | 0, 51590 | 0, $2_1 + 16 | 0 | 0);
           }
          }
         }
         continue label$31;
        };
       }
      }
      HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$26;
     }
     break label$26;
    };
    break label$1;
   }
   label$40 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$40
    }
    $349_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$41 : {
     label$42 : {
      if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$42
      }
      $360_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$41;
     }
     $360_1 = -1;
    }
    HEAP32[($2_1 + 80 | 0) >> 2] = $360_1;
    $396($349_1 | 0, 3066 | 0, 51675 | 0, $2_1 + 80 | 0 | 0);
   }
   HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
   label$43 : while (1) {
    $377_1 = 0;
    label$44 : {
     if (!((HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$44
     }
     $377_1 = (((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
    }
    label$45 : {
     if (!($377_1 & 1 | 0)) {
      break label$45
     }
     $391_1 = 0;
     HEAP32[($2_1 + 92 | 0) >> 2] = $391_1;
     label$46 : {
      if (!((HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($391_1 | 0) & 1 | 0)) {
       break label$46
      }
      HEAP32[($2_1 + 88 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
      label$47 : {
       label$48 : while (1) {
        $404_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
        HEAP32[($2_1 + 88 | 0) >> 2] = $404_1 + 4 | 0;
        $407_1 = HEAP32[$404_1 >> 2] | 0;
        HEAP32[($2_1 + 92 | 0) >> 2] = $407_1;
        if (!(($407_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$47
        }
        label$49 : {
         if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0) {
          break label$49
         }
         if ((((HEAPU8[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
          break label$49
         }
         $433_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
         HEAP8[($433_1 + 24 | 0) >> 0] = HEAPU8[($433_1 + 24 | 0) >> 0] | 0 | 4 | 0;
         $325(87704 + 2588 | 0 | 0, HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0);
         label$50 : {
          if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
           break label$50
          }
          $446_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $449_1 = $267(HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
          $451_1 = HEAP32[((HEAP32[($2_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[($2_1 + 68 | 0) >> 2] = $451_1;
          HEAP32[($2_1 + 64 | 0) >> 2] = $449_1;
          $396($446_1 | 0, 2059 | 0, 51590 | 0, $2_1 + 64 | 0 | 0);
         }
        }
        continue label$48;
       };
      }
     }
     HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 96 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$43;
    }
    break label$43;
   };
  }
  global$0 = $2_1 + 112 | 0;
  return;
 }
 
 function $270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $53_1 = 0, $50_1 = 0, $64_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$4
      }
      break label$2;
     }
     label$5 : {
      if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = 0;
      break label$2;
     }
     $50_1 = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     $53_1 = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $53_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($50_1 + ($53_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  label$6 : {
   if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
    break label$6
   }
   $319((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 52 | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  $64_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $64_1 | 0;
 }
 
 function $271($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $16_1 = 0, $31_1 = 0, $39_1 = 0;
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $16_1 = HEAP32[(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = $16_1;
    if (!(($16_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     break label$1;
    }
    $31_1 = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $31_1;
    label$4 : {
     label$5 : {
      if (!(($31_1 | 0) >= (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      $39_1 = 0;
      break label$4;
     }
     $39_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $39_1;
    continue label$2;
   };
  }
  label$6 : {
   if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$6
   }
   HEAP32[(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  }
  return;
 }
 
 function $272() {
  var $2_1 = 0, $29_1 = 0, $39_1 = 0, $52_1 = 0, $55_1 = 0, $77_1 = 0, $90_1 = 0, $93_1 = 0, $102_1 = 0, $115_1 = 0, $118_1 = 0, $129_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 28 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $347(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  $353(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$1 : while (1) {
   $29_1 = 0;
   label$2 : {
    if (!((HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $29_1 = (HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($29_1 & 1 | 0)) {
     break label$3
    }
    $39_1 = 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = $39_1;
    label$4 : {
     if (!((HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($39_1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$5 : {
      label$6 : while (1) {
       $52_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $52_1 + 4 | 0;
       $55_1 = HEAP32[$52_1 >> 2] | 0;
       HEAP32[($2_1 + 16 | 0) >> 2] = $55_1;
       if (!(($55_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       label$7 : {
        if (!((HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
        $274(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
       }
       continue label$6;
      };
     }
    }
    $77_1 = 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $77_1;
    label$8 : {
     if (!((HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($77_1 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
     label$9 : {
      label$10 : while (1) {
       $90_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $90_1 + 4 | 0;
       $93_1 = HEAP32[$90_1 >> 2] | 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = $93_1;
       if (!(($93_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$9
       }
       $274(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
       continue label$10;
      };
     }
    }
    $102_1 = 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $102_1;
    label$11 : {
     if (!((HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != ($102_1 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0;
     label$12 : {
      label$13 : while (1) {
       $115_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $115_1 + 4 | 0;
       $118_1 = HEAP32[$115_1 >> 2] | 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = $118_1;
       if (!(($118_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       $274(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
       continue label$13;
      };
     }
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  $129_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
  global$0 = $2_1 + 32 | 0;
  return $129_1 | 0;
 }
 
 function $273($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $52_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[(0 + 88328 | 0) >> 2] | 0) + (Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
    break label$1;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 88324 | 0) >> 2] | 0) | 0;
   label$4 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 90288 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  $52_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $52_1 | 0;
 }
 
 function $274($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $22_1 = 0, $50_1 = 0, $29_1 = 0, $30_1 = 0, $42_1 = 0, $43_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $14_1 = HEAP32[(((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $14_1;
  label$1 : {
   label$2 : {
    if (!$14_1) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + -1 | 0;
    break label$1;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0;
  }
  $22_1 = $267(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $22_1;
  label$3 : {
   label$4 : {
    if (!(($22_1 | 0) < (0 | 0) & 1 | 0)) {
     break label$4
    }
    $29_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $30_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $30_1;
    $396($29_1 | 0, 7067 | 0, 67172 | 0, $5_1 | 0);
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $42_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $43_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = $43_1;
     $396($42_1 | 0, 6160 | 0, 67232 | 0, $5_1 + 16 | 0 | 0);
     $50_1 = 0;
     $382(5 | 0, $50_1 | 0, $50_1 | 0);
     break label$5;
    }
    HEAP32[(((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
   }
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $275() {
  var $2_1 = 0, $4_1 = 0, $33_1 = 0, $644 = 0.0, $647 = 0.0, $84_1 = 0, $94_1 = 0, $107_1 = 0, $110_1 = 0, $677 = 0.0, $237_1 = 0, $274_1 = 0, $278_1 = 0, $321_1 = 0, $693 = 0.0, $420_1 = 0, $434_1 = 0, $472_1 = 0, $510_1 = 0, $13_1 = 0, $633 = 0.0, $141_1 = 0, $144_1 = 0, $146_1 = 0, $655 = 0.0, $148_1 = 0, $186_1 = 0, $189_1 = 0, $191_1 = 0, $664 = 0.0, $193_1 = 0, $689 = 0.0, $353_1 = 0, $355_1 = 0, $357_1 = 0, $700 = 0.0, $359_1 = 0, $369_1 = 0, $371_1 = 0, $373_1 = 0, $702 = 0.0, $375_1 = 0, $409_1 = 0, $411_1 = 0, $707 = 0.0, $431_1 = 0, $495_1 = 0, $497_1 = 0, $723 = 0.0, $724 = 0.0, $521_1 = 0, $524_1 = 0, $526 = 0, $727 = 0.0, $529 = 0, $531 = 0, $533 = 0, $728 = 0.0, $536 = 0, $560 = 0, $733 = 0.0, $579 = 0, $745 = 0.0, $594 = 0, $755 = 0.0, $614 = 0, $616 = 0, $618 = 0, $769 = 0.0;
  $2_1 = global$0 - 464 | 0;
  global$0 = $2_1;
  $4_1 = 0;
  HEAP32[($2_1 + 440 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 368 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 364 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 352 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $633 = +HEAPF64[(0 + 90168 | 0) >> 3];
   HEAPF64[($2_1 + 328 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
   HEAPF64[($2_1 + 320 | 0) >> 3] = $633;
   $396($13_1 | 0, 1022 | 0, 51760 | 0, $2_1 + 320 | 0 | 0);
  }
  label$2 : {
   label$3 : {
    if (!(+HEAPF64[(0 + 90168 | 0) >> 3] > -(+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]) & 1 | 0)) {
     break label$3
    }
    $644 = -(+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]);
    break label$2;
   }
   $644 = +HEAPF64[(0 + 90168 | 0) >> 3];
  }
  $647 = +(0 | 0);
  HEAPF64[($2_1 + 376 | 0) >> 3] = $644;
  HEAPF64[($2_1 + 400 | 0) >> 3] = $647;
  HEAPF64[($2_1 + 408 | 0) >> 3] = $647;
  HEAP32[($2_1 + 336 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
  $33_1 = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 428 | 0) >> 2] = $33_1;
  HEAP32[($2_1 + 436 | 0) >> 2] = $33_1;
  HEAP32[($2_1 + 432 | 0) >> 2] = $33_1;
  label$4 : {
   if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
    break label$4
   }
   label$5 : {
    if (HEAP32[(0 + 88124 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 88232 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 88120 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 88276 | 0) >> 2] | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87764 | 0) >> 2] | 0) {
     break label$5
    }
    if ((HEAP32[(0 + 87996 | 0) >> 2] | 0 | 0) == (24 | 0) & 1 | 0) {
     break label$5
    }
    if (HEAP32[(0 + 87996 | 0) >> 2] | 0) {
     break label$4
    }
   }
   label$6 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$6
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1023 | 0, 51840 | 0, 0 | 0);
   }
   HEAP32[($2_1 + 344 | 0) >> 2] = $276() | 0;
   HEAP32[($2_1 + 340 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
   label$7 : while (1) {
    $84_1 = 0;
    label$8 : {
     if (!((HEAP32[($2_1 + 340 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     $84_1 = (HEAP32[(HEAP32[($2_1 + 340 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$9 : {
     if (!($84_1 & 1 | 0)) {
      break label$9
     }
     $94_1 = 0;
     HEAP32[($2_1 + 452 | 0) >> 2] = $94_1;
     label$10 : {
      if (!((HEAP32[((HEAP32[($2_1 + 340 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($94_1 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($2_1 + 448 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 340 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
      label$11 : {
       label$12 : while (1) {
        $107_1 = HEAP32[($2_1 + 448 | 0) >> 2] | 0;
        HEAP32[($2_1 + 448 | 0) >> 2] = $107_1 + 4 | 0;
        $110_1 = HEAP32[$107_1 >> 2] | 0;
        HEAP32[($2_1 + 452 | 0) >> 2] = $110_1;
        if (!(($110_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[(0 + 91032 | 0) >> 2] = (HEAP32[(0 + 91032 | 0) >> 2] | 0) + 1 | 0;
        $4(HEAP32[((HEAP32[($2_1 + 340 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 452 | 0) >> 2] | 0 | 0, $2_1 + 416 | 0 | 0);
        label$13 : {
         if (!(+HEAPF64[($2_1 + 416 | 0) >> 3] < +HEAPF64[($2_1 + 400 | 0) >> 3] & 1 | 0)) {
          break label$13
         }
         label$14 : {
          if (!(+HEAPF64[(0 + 90168 | 0) >> 3] / +HEAPF64[($2_1 + 376 | 0) >> 3] > 100.0 & 1 | 0)) {
           break label$14
          }
          label$15 : {
           if (HEAP32[(0 + 87992 | 0) >> 2] | 0) {
            break label$15
           }
           if (HEAP32[(0 + 87716 | 0) >> 2] | 0) {
            break label$14
           }
          }
          HEAPF64[($2_1 + 392 | 0) >> 3] = +$58(HEAP32[((HEAP32[($2_1 + 452 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
          $141_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $144_1 = $267(HEAP32[((HEAP32[($2_1 + 340 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
          $146_1 = HEAP32[((HEAP32[($2_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          $655 = +HEAPF64[($2_1 + 416 | 0) >> 3];
          $148_1 = HEAP32[((HEAP32[($2_1 + 452 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAPF64[($2_1 + 56 | 0) >> 3] = +HEAPF64[($2_1 + 392 | 0) >> 3];
          HEAP32[($2_1 + 48 | 0) >> 2] = $148_1;
          HEAPF64[($2_1 + 40 | 0) >> 3] = $655;
          HEAP32[($2_1 + 36 | 0) >> 2] = $146_1;
          HEAP32[($2_1 + 32 | 0) >> 2] = $144_1;
          $396($141_1 | 0, 7083 | 0, 51885 | 0, $2_1 + 32 | 0 | 0);
         }
         HEAPF64[($2_1 + 400 | 0) >> 3] = +HEAPF64[($2_1 + 416 | 0) >> 3];
         HEAP32[($2_1 + 336 | 0) >> 2] = HEAP32[($2_1 + 340 | 0) >> 2] | 0;
         HEAP32[($2_1 + 436 | 0) >> 2] = HEAP32[($2_1 + 452 | 0) >> 2] | 0;
        }
        label$16 : {
         label$17 : {
          if (-+HEAPF64[($2_1 + 416 | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0) {
           break label$17
          }
          if (+HEAPF64[($2_1 + 416 | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0) {
           break label$17
          }
          if ((HEAP32[($2_1 + 452 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0) {
           break label$17
          }
          if (!((HEAP32[($2_1 + 340 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
         }
         HEAPF64[($2_1 + 392 | 0) >> 3] = +$58(HEAP32[((HEAP32[($2_1 + 452 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
         $186_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $189_1 = $267(HEAP32[((HEAP32[($2_1 + 340 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
         $191_1 = HEAP32[((HEAP32[($2_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         $664 = +HEAPF64[($2_1 + 416 | 0) >> 3];
         $193_1 = HEAP32[((HEAP32[($2_1 + 452 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         HEAPF64[($2_1 + 24 | 0) >> 3] = +HEAPF64[($2_1 + 392 | 0) >> 3];
         HEAP32[($2_1 + 16 | 0) >> 2] = $193_1;
         HEAPF64[($2_1 + 8 | 0) >> 3] = $664;
         HEAP32[($2_1 + 4 | 0) >> 2] = $191_1;
         HEAP32[$2_1 >> 2] = $189_1;
         $396($186_1 | 0, 8093 | 0, 51999 | 0, $2_1 | 0);
        }
        continue label$12;
       };
      }
     }
     HEAP32[($2_1 + 340 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 340 | 0) >> 2] | 0) >> 2] | 0;
     continue label$7;
    }
    break label$7;
   };
   label$18 : {
    if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
     break label$18
    }
    label$19 : {
     if (!(+HEAPF64[(0 + 91656 | 0) >> 3] > +HEAPF64[(0 + 90168 | 0) >> 3] & 1 | 0)) {
      break label$19
     }
     HEAPF64[(0 + 91656 | 0) >> 3] = +HEAPF64[(0 + 90168 | 0) >> 3];
    }
   }
   HEAPF64[(0 + 90168 | 0) >> 3] = +HEAPF64[($2_1 + 400 | 0) >> 3];
   $348($2_1 + 344 | 0 | 0);
  }
  label$20 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$20
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1055 | 0, 52066 | 0, 0 | 0);
  }
  label$21 : {
   label$22 : {
    if (!(+HEAPF64[(0 + 90152 | 0) >> 3] < +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
     break label$22
    }
    $677 = +HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3];
    break label$21;
   }
   $677 = +HEAPF64[(0 + 90152 | 0) >> 3];
  }
  $237_1 = 0;
  HEAPF64[($2_1 + 384 | 0) >> 3] = $677;
  HEAP32[($2_1 + 348 | 0) >> 2] = $272() | 0;
  HEAP32[($2_1 + 460 | 0) >> 2] = $237_1;
  label$23 : {
   if (!((HEAP32[($2_1 + 348 | 0) >> 2] | 0 | 0) != ($237_1 | 0) & 1 | 0)) {
    break label$23
   }
   HEAP32[($2_1 + 360 | 0) >> 2] = 0;
   HEAP32[($2_1 + 460 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 356 | 0) >> 2] = $337(HEAP32[($2_1 + 348 | 0) >> 2] | 0 | 0) | 0;
   label$24 : {
    label$25 : while (1) {
     if (!((HEAP32[($2_1 + 360 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 356 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$24
     }
     label$26 : {
      label$27 : {
       if (!((HEAP32[($2_1 + 460 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAP32[($2_1 + 372 | 0) >> 2] = $273(HEAP32[($2_1 + 360 | 0) >> 2] | 0 | 0) | 0;
       label$28 : {
        if (!((HEAP32[($2_1 + 372 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$28
        }
        break label$26;
       }
       $274_1 = 0;
       $278_1 = $2_1 + 416 | 0;
       HEAP32[(0 + 92240 | 0) >> 2] = (HEAP32[(0 + 92240 | 0) >> 2] | 0) + 1 | 0;
       $4(HEAP32[($2_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 460 | 0) >> 2] | 0 | 0, $278_1 | 0);
       HEAP32[($2_1 + 364 | 0) >> 2] = (HEAP32[($2_1 + 364 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($2_1 + 456 | 0) >> 2] = $7(1 | 0, HEAP32[($2_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 460 | 0) >> 2] | 0 | 0, $274_1 | 0, $278_1 | 0, $2_1 + 364 | 0 | 0) | 0;
       label$29 : {
        if (!((HEAP32[($2_1 + 456 | 0) >> 2] | 0 | 0) != ($274_1 | 0) & 1 | 0)) {
         break label$29
        }
        if (!(+HEAPF64[($2_1 + 416 | 0) >> 3] >= +HEAPF64[($2_1 + 408 | 0) >> 3] & 1 | 0)) {
         break label$29
        }
        label$30 : {
         label$31 : {
          if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
           break label$31
          }
          if (((HEAP32[((HEAP32[($2_1 + 456 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0) {
           break label$31
          }
          $321_1 = $38(HEAP32[($2_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 456 | 0) >> 2] | 0 | 0, $2_1 + 416 | 0 | 0, $2_1 + 444 | 0 | 0) | 0;
          HEAP32[($2_1 + 456 | 0) >> 2] = $321_1;
          label$32 : {
           if (!(($321_1 | 0) != (0 | 0) & 1 | 0)) {
            break label$32
           }
           if (+HEAPF64[($2_1 + 416 | 0) >> 3] > +HEAPF64[($2_1 + 408 | 0) >> 3] & 1 | 0) {
            break label$31
           }
          }
          HEAP32[($2_1 + 352 | 0) >> 2] = (HEAP32[($2_1 + 352 | 0) >> 2] | 0) + 1 | 0;
          break label$30;
         }
         label$33 : {
          if (!(+HEAPF64[($2_1 + 416 | 0) >> 3] / +HEAPF64[($2_1 + 384 | 0) >> 3] > 100.0 & 1 | 0)) {
           break label$33
          }
          label$34 : {
           if (HEAP32[(0 + 87992 | 0) >> 2] | 0) {
            break label$34
           }
           if (HEAP32[(0 + 87716 | 0) >> 2] | 0) {
            break label$33
           }
          }
          HEAPF64[($2_1 + 392 | 0) >> 3] = +$58(HEAP32[((HEAP32[($2_1 + 456 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
          $689 = +HEAPF64[($2_1 + 392 | 0) >> 3];
          label$35 : {
           label$36 : {
            if (!(+HEAPF64[(0 + 89544 | 0) >> 3] < +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
             break label$36
            }
            $693 = +HEAPF64[(0 + 90152 | 0) >> 3];
            break label$35;
           }
           $693 = +HEAPF64[(0 + 89544 | 0) >> 3];
          }
          label$37 : {
           label$38 : {
            if (!($689 < $693 * 30.0 * 2.0 & 1 | 0)) {
             break label$38
            }
            $353_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $355_1 = $267(HEAP32[($2_1 + 372 | 0) >> 2] | 0 | 0) | 0;
            $357_1 = HEAP32[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $700 = +HEAPF64[($2_1 + 416 | 0) >> 3];
            $359_1 = HEAP32[((HEAP32[($2_1 + 456 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAPF64[($2_1 + 120 | 0) >> 3] = +HEAPF64[($2_1 + 392 | 0) >> 3];
            HEAP32[($2_1 + 112 | 0) >> 2] = $359_1;
            HEAPF64[($2_1 + 104 | 0) >> 3] = $700;
            HEAP32[($2_1 + 100 | 0) >> 2] = $357_1;
            HEAP32[($2_1 + 96 | 0) >> 2] = $355_1;
            $396($353_1 | 0, 7087 | 0, 52112 | 0, $2_1 + 96 | 0 | 0);
            break label$37;
           }
           $369_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
           $371_1 = $267(HEAP32[($2_1 + 372 | 0) >> 2] | 0 | 0) | 0;
           $373_1 = HEAP32[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           $702 = +HEAPF64[($2_1 + 416 | 0) >> 3];
           $375_1 = HEAP32[((HEAP32[($2_1 + 456 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           HEAPF64[($2_1 + 152 | 0) >> 3] = +HEAPF64[($2_1 + 392 | 0) >> 3];
           HEAP32[($2_1 + 144 | 0) >> 2] = $375_1;
           HEAPF64[($2_1 + 136 | 0) >> 3] = $702;
           HEAP32[($2_1 + 132 | 0) >> 2] = $373_1;
           HEAP32[($2_1 + 128 | 0) >> 2] = $371_1;
           $396($369_1 | 0, 7088 | 0, 52243 | 0, $2_1 + 128 | 0 | 0);
          }
          HEAP32[($2_1 + 440 | 0) >> 2] = HEAP32[($2_1 + 456 | 0) >> 2] | 0;
         }
        }
        HEAPF64[($2_1 + 408 | 0) >> 3] = +HEAPF64[($2_1 + 416 | 0) >> 3];
        HEAP32[($2_1 + 432 | 0) >> 2] = HEAP32[($2_1 + 456 | 0) >> 2] | 0;
        HEAP32[($2_1 + 368 | 0) >> 2] = HEAP32[($2_1 + 372 | 0) >> 2] | 0;
        HEAP32[($2_1 + 428 | 0) >> 2] = HEAP32[($2_1 + 460 | 0) >> 2] | 0;
       }
       label$39 : {
        label$40 : {
         if (+HEAPF64[($2_1 + 416 | 0) >> 3] > +HEAPF64[(0 + 88248 | 0) >> 3] & 1 | 0) {
          break label$40
         }
         if (!((HEAP32[($2_1 + 456 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$39
         }
         if (!((HEAP32[($2_1 + 456 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90028 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$39
         }
        }
        $409_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $411_1 = $267(HEAP32[($2_1 + 372 | 0) >> 2] | 0 | 0) | 0;
        $707 = +HEAPF64[($2_1 + 416 | 0) >> 3];
        label$41 : {
         label$42 : {
          if (!((HEAP32[($2_1 + 456 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$42
          }
          $420_1 = HEAP32[((HEAP32[($2_1 + 456 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          break label$41;
         }
         $420_1 = -1;
        }
        HEAP32[($2_1 + 80 | 0) >> 2] = $420_1;
        HEAPF64[($2_1 + 72 | 0) >> 3] = $707;
        HEAP32[($2_1 + 64 | 0) >> 2] = $411_1;
        $396($409_1 | 0, 8094 | 0, 52373 | 0, $2_1 + 64 | 0 | 0);
       }
      }
     }
     $431_1 = (HEAP32[($2_1 + 348 | 0) >> 2] | 0) + 4 | 0;
     $434_1 = (HEAP32[($2_1 + 360 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($2_1 + 360 | 0) >> 2] = $434_1;
     HEAP32[($2_1 + 460 | 0) >> 2] = HEAP32[($431_1 + ($434_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$25;
    };
   }
  }
  HEAP32[(0 + 90704 | 0) >> 2] = (HEAP32[(0 + 90704 | 0) >> 2] | 0) + (HEAP32[($2_1 + 364 | 0) >> 2] | 0) | 0;
  $348($2_1 + 348 | 0 | 0);
  HEAPF64[(0 + 91464 | 0) >> 3] = +HEAPF64[($2_1 + 408 | 0) >> 3] - +HEAPF64[(0 + 90152 | 0) >> 3];
  label$43 : {
   if (!(+HEAPF64[(0 + 91472 | 0) >> 3] < +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
    break label$43
   }
   HEAPF64[(0 + 91472 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
  }
  label$44 : {
   if (HEAP32[(0 + 87724 | 0) >> 2] | 0) {
    break label$44
   }
   if (!(+HEAPF64[($2_1 + 408 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
    break label$44
   }
   HEAP32[($2_1 + 460 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$45 : while (1) {
    $472_1 = 0;
    label$46 : {
     if (!((HEAP32[($2_1 + 460 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$46
     }
     $472_1 = (HEAP32[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$47 : {
     if (!($472_1 & 1 | 0)) {
      break label$47
     }
     label$48 : {
      if (!(+HEAPF64[($2_1 + 408 | 0) >> 3] < +HEAPF64[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
       break label$48
      }
      label$49 : {
       label$50 : {
        if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
         break label$50
        }
        HEAPF64[($2_1 + 408 | 0) >> 3] = +HEAPF64[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 8 | 0) >> 3];
        break label$49;
       }
       label$51 : {
        if (!(+HEAPF64[($2_1 + 408 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3] < +HEAPF64[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
         break label$51
        }
        $495_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $497_1 = HEAP32[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $723 = +HEAPF64[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 8 | 0) >> 3];
        $724 = +HEAPF64[($2_1 + 408 | 0) >> 3];
        HEAPF64[($2_1 + 312 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
        HEAPF64[($2_1 + 304 | 0) >> 3] = $724;
        HEAPF64[($2_1 + 296 | 0) >> 3] = $723;
        HEAP32[($2_1 + 288 | 0) >> 2] = $497_1;
        $396($495_1 | 0, 7082 | 0, 52413 | 0, $2_1 + 288 | 0 | 0);
       }
      }
     }
     HEAP32[($2_1 + 460 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 460 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$45;
    }
    break label$45;
   };
  }
  $510_1 = 1;
  HEAPF64[(0 + 90152 | 0) >> 3] = +HEAPF64[($2_1 + 408 | 0) >> 3];
  $277();
  HEAP32[(0 + 90144 | 0) >> 2] = $510_1;
  label$52 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($510_1 | 0) & 1 | 0)) {
    break label$52
   }
   $521_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $524_1 = $267(HEAP32[((HEAP32[($2_1 + 336 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   $526 = HEAP32[((HEAP32[($2_1 + 336 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $727 = +HEAPF64[(0 + 90168 | 0) >> 3];
   $529 = HEAP32[((HEAP32[($2_1 + 436 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $531 = $267(HEAP32[($2_1 + 368 | 0) >> 2] | 0 | 0) | 0;
   $533 = HEAP32[((HEAP32[($2_1 + 428 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $728 = +HEAPF64[(0 + 90152 | 0) >> 3];
   $536 = HEAP32[((HEAP32[($2_1 + 432 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($2_1 + 284 | 0) >> 2] = HEAP32[($2_1 + 352 | 0) >> 2] | 0;
   HEAP32[($2_1 + 280 | 0) >> 2] = $536;
   HEAPF64[($2_1 + 272 | 0) >> 3] = $728;
   HEAP32[($2_1 + 264 | 0) >> 2] = $533;
   HEAP32[($2_1 + 260 | 0) >> 2] = $531;
   HEAP32[($2_1 + 256 | 0) >> 2] = $529;
   HEAPF64[($2_1 + 248 | 0) >> 3] = $727;
   HEAP32[($2_1 + 244 | 0) >> 2] = $526;
   HEAP32[($2_1 + 240 | 0) >> 2] = $524_1;
   $396($521_1 | 0, 1024 | 0, 52585 | 0, $2_1 + 240 | 0 | 0);
  }
  label$53 : {
   if (HEAP32[(0 + 87716 | 0) >> 2] | 0) {
    break label$53
   }
   label$54 : {
    label$55 : {
     if (!(+HEAPF64[($2_1 + 408 | 0) >> 3] / +HEAPF64[($2_1 + 384 | 0) >> 3] > 100.0 & 1 | 0)) {
      break label$55
     }
     $560 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $733 = +HEAPF64[($2_1 + 408 | 0) >> 3];
     HEAPF64[($2_1 + 168 | 0) >> 3] = +HEAPF64[($2_1 + 408 | 0) >> 3] / +HEAPF64[($2_1 + 384 | 0) >> 3];
     HEAPF64[($2_1 + 160 | 0) >> 3] = $733;
     $396($560 | 0, 6297 | 0, 52749 | 0, $2_1 + 160 | 0 | 0);
     $382(8 | 0, HEAP32[($2_1 + 440 | 0) >> 2] | 0 | 0, 0 | 0);
     break label$54;
    }
    label$56 : {
     label$57 : {
      if (HEAP32[(0 + 87724 | 0) >> 2] | 0) {
       break label$57
      }
      if (!(+HEAPF64[($2_1 + 384 | 0) >> 3] > +HEAPF64[(0 + 89544 | 0) >> 3] * 1.0e3 & 1 | 0)) {
       break label$57
      }
      label$58 : {
       if (!(+HEAPF64[($2_1 + 408 | 0) >> 3] > +HEAPF64[(0 + 89544 | 0) >> 3] * 1.0e3 & 1 | 0)) {
        break label$58
       }
       $579 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $745 = +HEAPF64[($2_1 + 384 | 0) >> 3];
       HEAPF64[($2_1 + 232 | 0) >> 3] = +HEAPF64[($2_1 + 384 | 0) >> 3] / (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]);
       HEAPF64[($2_1 + 224 | 0) >> 3] = $745;
       $396($579 | 0, 6298 | 0, 52935 | 0, $2_1 + 224 | 0 | 0);
       $382(8 | 0, HEAP32[($2_1 + 440 | 0) >> 2] | 0 | 0, 0 | 0);
      }
      break label$56;
     }
     label$59 : {
      label$60 : {
       if (!(+HEAPF64[(0 + 90168 | 0) >> 3] / +HEAPF64[($2_1 + 376 | 0) >> 3] > 100.0 & 1 | 0)) {
        break label$60
       }
       $594 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $755 = +HEAPF64[(0 + 90168 | 0) >> 3];
       HEAPF64[($2_1 + 184 | 0) >> 3] = +HEAPF64[(0 + 90168 | 0) >> 3] / +HEAPF64[($2_1 + 376 | 0) >> 3];
       HEAPF64[($2_1 + 176 | 0) >> 3] = $755;
       $396($594 | 0, 6354 | 0, 53148 | 0, $2_1 + 176 | 0 | 0);
       $382(8 | 0, HEAP32[($2_1 + 436 | 0) >> 2] | 0 | 0, 0 | 0);
       break label$59;
      }
      label$61 : {
       if (!(+HEAPF64[($2_1 + 376 | 0) >> 3] < -(+HEAPF64[(0 + 89544 | 0) >> 3] * 1.0e3) & 1 | 0)) {
        break label$61
       }
       label$62 : {
        if (!(+HEAPF64[(0 + 90168 | 0) >> 3] < -(+HEAPF64[(0 + 89544 | 0) >> 3] * 1.0e3) & 1 | 0)) {
         break label$62
        }
        $614 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $616 = HEAP32[((HEAP32[($2_1 + 336 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $618 = HEAP32[((HEAP32[($2_1 + 436 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $769 = +HEAPF64[($2_1 + 400 | 0) >> 3];
        HEAPF64[($2_1 + 208 | 0) >> 3] = -+HEAPF64[(0 + 90168 | 0) >> 3] / (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]);
        HEAPF64[($2_1 + 200 | 0) >> 3] = $769;
        HEAP32[($2_1 + 196 | 0) >> 2] = $618;
        HEAP32[($2_1 + 192 | 0) >> 2] = $616;
        $396($614 | 0, 6380 | 0, 53326 | 0, $2_1 + 192 | 0 | 0);
        $382(8 | 0, HEAP32[($2_1 + 436 | 0) >> 2] | 0 | 0, 0 | 0);
       }
      }
     }
    }
   }
  }
  global$0 = $2_1 + 464 | 0;
  return;
 }
 
 function $276() {
  var $2_1 = 0, $24_1 = 0, $40_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) + ($337(HEAP32[(0 + 90288 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $347(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $353(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
  label$1 : while (1) {
   $24_1 = 0;
   label$2 : {
    if (!((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $24_1 = (HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($24_1 & 1 | 0)) {
     break label$3
    }
    $274(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  $40_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $40_1 | 0;
 }
 
 function $277() {
  var $2_1 = 0, $17_1 = 0, $44_1 = 0, $64_1 = 0, $82_1 = 0, $95_1 = 0, $98_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
    label$3 : while (1) {
     $17_1 = 0;
     label$4 : {
      if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      $17_1 = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$5 : {
      if (!($17_1 & 1 | 0)) {
       break label$5
      }
      label$6 : {
       if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       $324((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 68 | 0 | 0);
      }
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$3;
     }
     break label$3;
    };
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(HEAP32[(0 + 87840 | 0) >> 2] | 0)) {
      break label$8
     }
     if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
      break label$7
     }
    }
    $44_1 = 0;
    $50($44_1 | 0, $44_1 | 0, $2_1 | 0);
    label$9 : {
     if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$9
     }
     HEAPF64[$2_1 >> 3] = +HEAPF64[$2_1 >> 3] - +HEAPF64[(0 + 90136 | 0) >> 3] * Math_sqrt(+(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0));
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
    label$10 : while (1) {
     $64_1 = 0;
     label$11 : {
      if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$11
      }
      $64_1 = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$12 : {
      if (!($64_1 & 1 | 0)) {
       break label$12
      }
      label$13 : {
       if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       $82_1 = 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = $82_1;
       label$14 : {
        if (!((HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != ($82_1 | 0) & 1 | 0)) {
         break label$14
        }
        HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + 4 | 0;
        label$15 : {
         label$16 : while (1) {
          $95_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          HEAP32[($2_1 + 20 | 0) >> 2] = $95_1 + 4 | 0;
          $98_1 = HEAP32[$95_1 >> 2] | 0;
          HEAP32[($2_1 + 24 | 0) >> 2] = $98_1;
          if (!(($98_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$15
          }
          HEAP32[($2_1 + 16 | 0) >> 2] = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 1 | 0;
          $4(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, $2_1 + 8 | 0 | 0);
          label$17 : {
           label$18 : {
            if (!(+HEAPF64[($2_1 + 8 | 0) >> 3] < +HEAPF64[$2_1 >> 3] & 1 | 0)) {
             break label$18
            }
            label$19 : {
             if (HEAP32[(0 + 87844 | 0) >> 2] | 0) {
              break label$19
             }
             HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + -4 | 0) >> 2] = 0;
            }
            break label$17;
           }
           label$20 : {
            if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
             break label$20
            }
            HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + -4 | 0) >> 2] = 0;
           }
          }
          continue label$16;
         };
        }
       }
       $330(HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$10;
     }
     break label$10;
    };
    HEAP32[(0 + 90704 | 0) >> 2] = (HEAP32[(0 + 90704 | 0) >> 2] | 0) + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
   }
  }
  global$0 = $2_1 + 32 | 0;
  return;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $66_1 = 0, $117_1 = 0, $131_1 = 0, $163_1 = 0, $216_1 = 0, $303_1 = 0, $423_1 = 0, $447_1 = 0, $485_1 = 0, $514_1 = 0, $545 = 0, $558 = 0, $561 = 0, $567 = 0, $569 = 0, $577 = 0, $660 = 0, $687 = 0, $722 = 0, $771 = 0, $789 = 0, $807 = 0, $810 = 0, $878 = 0, $894 = 0, $907 = 0, $910 = 0, $14_1 = 0, $16_1 = 0, $104_1 = 0, $106_1 = 0, $119_1 = 0, $150_1 = 0, $152_1 = 0, $203_1 = 0, $205_1 = 0, $224_1 = 0, $226_1 = 0, $290_1 = 0, $292_1 = 0, $375_1 = 0, $377_1 = 0, $380_1 = 0, $472_1 = 0, $474_1 = 0, $542 = 0, $593 = 0, $595 = 0, $597 = 0, $632 = 0, $633 = 0, $635 = 0, $679 = 0, $701 = 0, $740 = 0, $753 = 0, $754 = 0, $826 = 0, $828 = 0, $845 = 0, $847 = 0, $849 = 0, $851 = 0, $921 = 0, $923 = 0, $925 = 0, $927 = 0, $951 = 0, $952 = 0, $980 = 0, $981 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  $5_1 = 0;
  HEAP32[($3_1 + 364 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 348 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 344 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 328 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 324 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 320 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 316 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 312 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 308 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 304 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 300 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 296 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 292 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $16_1 = HEAP32[((HEAP32[($3_1 + 364 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($3_1 + 276 | 0) >> 2] = HEAP32[(0 + 90180 | 0) >> 2] | 0;
   HEAP32[($3_1 + 272 | 0) >> 2] = $16_1;
   $396($14_1 | 0, 1027 | 0, 59395 | 0, $3_1 + 272 | 0 | 0);
  }
  label$2 : {
   if ($280(HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) | 0) {
    break label$2
   }
   HEAP32[($3_1 + 308 | 0) >> 2] = 1;
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6374 | 0, 59460 | 0, 0 | 0);
   label$3 : {
    if (!((HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) < (4e3 | 0) & 1 | 0)) {
     break label$3
    }
    $281();
   }
  }
  label$4 : {
   label$5 : {
    if ((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$5
    }
    if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
     break label$4
    }
   }
   HEAP32[($3_1 + 296 | 0) >> 2] = 1;
  }
  label$6 : {
   if (!((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[($3_1 + 364 | 0) >> 2] | 0;
   label$7 : while (1) {
    $66_1 = 0;
    label$8 : {
     if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     $66_1 = (HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$9 : {
     if (!($66_1 & 1 | 0)) {
      break label$9
     }
     label$10 : {
      if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($3_1 + 292 | 0) >> 2] = 1;
     }
     label$11 : {
      if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($3_1 + 304 | 0) >> 2] = 1;
     }
     label$12 : {
      if (!(((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0)) {
       break label$12
      }
      if (HEAP32[($3_1 + 304 | 0) >> 2] | 0) {
       break label$12
      }
      if (HEAP32[($3_1 + 292 | 0) >> 2] | 0) {
       break label$12
      }
      $104_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $106_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      label$13 : {
       label$14 : {
        if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$14
        }
        $117_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$13;
       }
       $117_1 = -1;
      }
      $119_1 = $117_1;
      label$15 : {
       label$16 : {
        if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$16
        }
        $131_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$15;
       }
       $131_1 = -1;
      }
      HEAP32[($3_1 + 88 | 0) >> 2] = $131_1;
      HEAP32[($3_1 + 84 | 0) >> 2] = $119_1;
      HEAP32[($3_1 + 80 | 0) >> 2] = $106_1;
      $396($104_1 | 0, 6289 | 0, 59523 | 0, $3_1 + 80 | 0 | 0);
      $382(5 | 0, HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     label$17 : {
      if (((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
       break label$17
      }
      if (!(HEAP32[($3_1 + 304 | 0) >> 2] | 0)) {
       break label$17
      }
      $150_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $152_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      label$18 : {
       label$19 : {
        if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$19
        }
        $163_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        break label$18;
       }
       $163_1 = -1;
      }
      HEAP32[($3_1 + 68 | 0) >> 2] = $163_1;
      HEAP32[($3_1 + 64 | 0) >> 2] = $152_1;
      $396($150_1 | 0, 6292 | 0, 59640 | 0, $3_1 + 64 | 0 | 0);
      $382(5 | 0, HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     label$20 : {
      if (!((((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != ((HEAP32[($3_1 + 292 | 0) >> 2] | 0) & (((HEAP32[($3_1 + 304 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0) | 0 | 0) & 1 | 0)) {
       break label$20
      }
      label$21 : {
       label$22 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
         break label$22
        }
        $203_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $205_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        label$23 : {
         label$24 : {
          if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$24
          }
          $216_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          break label$23;
         }
         $216_1 = -1;
        }
        HEAP32[($3_1 + 36 | 0) >> 2] = $216_1;
        HEAP32[($3_1 + 32 | 0) >> 2] = $205_1;
        $396($203_1 | 0, 6290 | 0, 59737 | 0, $3_1 + 32 | 0 | 0);
        break label$21;
       }
       $224_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $226_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 48 | 0) >> 2] = $226_1;
       $396($224_1 | 0, 6291 | 0, 59832 | 0, $3_1 + 48 | 0 | 0);
      }
      $382(5 | 0, HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     label$25 : {
      label$26 : {
       if (!(HEAP32[(0 + 90180 | 0) >> 2] | 0)) {
        break label$26
       }
       HEAP32[($3_1 + 288 | 0) >> 2] = ((((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0;
       break label$25;
      }
      HEAP32[($3_1 + 288 | 0) >> 2] = ((((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0;
     }
     label$27 : {
      label$28 : {
       if (!(HEAP32[($3_1 + 288 | 0) >> 2] | 0)) {
        break label$28
       }
       label$29 : {
        if (HEAP32[($3_1 + 296 | 0) >> 2] | 0) {
         break label$29
        }
        label$30 : {
         label$31 : {
          if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$31
          }
          HEAP32[($3_1 + 296 | 0) >> 2] = 1;
          break label$30;
         }
         label$32 : {
          if (!($337(HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0)) {
           break label$32
          }
          label$33 : {
           label$34 : {
            if (!(HEAP32[(0 + 89568 | 0) >> 2] | 0)) {
             break label$34
            }
            if (!(+HEAPF64[(HEAP32[($3_1 + 360 | 0) >> 2] | 0) >> 3] >= +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
             break label$33
            }
           }
           $290_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
           $292_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           label$35 : {
            label$36 : {
             if (!((HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break label$36
             }
             $303_1 = HEAP32[((HEAP32[(0 + 90008 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             break label$35;
            }
            $303_1 = -1;
           }
           HEAP32[($3_1 + 4 | 0) >> 2] = $303_1;
           HEAP32[$3_1 >> 2] = $292_1;
           $396($290_1 | 0, 6137 | 0, 59927 | 0, $3_1 | 0);
           $150(5 | 0, HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0, HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0);
          }
         }
        }
       }
       HEAP32[($3_1 + 328 | 0) >> 2] = (HEAP32[($3_1 + 328 | 0) >> 2] | 0) + 1 | 0;
       $282(HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0, 0 | 0, $3_1 + 308 | 0 | 0);
       break label$27;
      }
      label$37 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$37
       }
       if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
        break label$37
       }
       label$38 : {
        label$39 : {
         label$40 : {
          if (!((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$40
          }
          label$41 : {
           if (!((HEAP32[((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$41
           }
           if (0 & 1 | 0) {
            break label$40
           }
           break label$39;
          }
          if (!(1 & 1 | 0)) {
           break label$39
          }
         }
         if (!((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$38
         }
         label$42 : {
          if (!((HEAP32[((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$42
          }
          if (0 & 1 | 0) {
           break label$38
          }
          break label$39;
         }
         if (1 & 1 | 0) {
          break label$38
         }
        }
        $375_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $377_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $380_1 = $337(HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($3_1 + 24 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = $380_1;
        HEAP32[($3_1 + 16 | 0) >> 2] = $377_1;
        $396($375_1 | 0, 6376 | 0, 60016 | 0, $3_1 + 16 | 0 | 0);
        $382(5 | 0, HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0, 0 | 0);
       }
      }
     }
     HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$7;
    }
    break label$7;
   };
  }
  label$43 : {
   label$44 : {
    if (!((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$44
    }
    HEAP32[($3_1 + 332 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
    break label$43;
   }
   label$45 : {
    label$46 : {
     if (!((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$46
     }
     HEAP32[($3_1 + 332 | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
     break label$45;
    }
    HEAP32[($3_1 + 332 | 0) >> 2] = 0;
   }
  }
  HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[($3_1 + 332 | 0) >> 2] | 0;
  label$47 : while (1) {
   $423_1 = 0;
   label$48 : {
    if (!((HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$48
    }
    $423_1 = (HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$49 : {
    if (!($423_1 & 1 | 0)) {
     break label$49
    }
    $283(HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0, 0 | 0, $3_1 + 308 | 0 | 0);
    label$50 : {
     if (!((HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$50
     }
     HEAP32[($3_1 + 300 | 0) >> 2] = 1;
    }
    $447_1 = HEAP32[($3_1 + 340 | 0) >> 2] | 0;
    HEAP8[($447_1 + 24 | 0) >> 0] = (HEAPU8[($447_1 + 24 | 0) >> 0] | 0) & 254 | 0;
    HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
    label$51 : {
     if (!((((HEAPU8[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 4 | 0) & 1 | 0) & 255 | 0)) {
      break label$51
     }
     if (HEAP32[($3_1 + 300 | 0) >> 2] | 0) {
      break label$51
     }
     if ((((HEAPU8[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
      break label$51
     }
     $472_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $474_1 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     label$52 : {
      label$53 : {
       if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$53
       }
       $485_1 = HEAP32[((HEAP32[(0 + 90056 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       break label$52;
      }
      $485_1 = -1;
     }
     HEAP32[($3_1 + 100 | 0) >> 2] = $485_1;
     HEAP32[($3_1 + 96 | 0) >> 2] = $474_1;
     $396($472_1 | 0, 6288 | 0, 60153 | 0, $3_1 + 96 | 0 | 0);
     $382(5 | 0, HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0;
    continue label$47;
   }
   break label$47;
  };
  label$54 : {
   if (!((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$54
   }
   HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[($3_1 + 364 | 0) >> 2] | 0;
   label$55 : while (1) {
    $514_1 = 0;
    label$56 : {
     if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$56
     }
     $514_1 = (HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$57 : {
     if (!($514_1 & 1 | 0)) {
      break label$57
     }
     label$58 : {
      label$59 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$59
       }
       break label$58;
      }
      label$60 : {
       label$61 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
         break label$61
        }
        HEAP32[($3_1 + 320 | 0) >> 2] = (HEAP32[($3_1 + 320 | 0) >> 2] | 0) + (HEAP32[(0 + 88316 | 0) >> 2] | 0) | 0;
        break label$60;
       }
       $542 = $337(HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($3_1 + 320 | 0) >> 2] = (HEAP32[($3_1 + 320 | 0) >> 2] | 0) + $542 | 0;
      }
      $545 = 0;
      HEAP32[($3_1 + 340 | 0) >> 2] = $545;
      label$62 : {
       if (!((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($545 | 0) & 1 | 0)) {
        break label$62
       }
       HEAP32[($3_1 + 336 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$63 : {
        label$64 : while (1) {
         $558 = HEAP32[($3_1 + 336 | 0) >> 2] | 0;
         HEAP32[($3_1 + 336 | 0) >> 2] = $558 + 4 | 0;
         $561 = HEAP32[$558 >> 2] | 0;
         HEAP32[($3_1 + 340 | 0) >> 2] = $561;
         if (!(($561 | 0) != (0 | 0) & 1 | 0)) {
          break label$63
         }
         $567 = HEAP32[($3_1 + 340 | 0) >> 2] | 0;
         $569 = 1;
         HEAP32[($567 + 20 | 0) >> 2] = (HEAP32[($567 + 20 | 0) >> 2] | 0) + $569 | 0;
         label$65 : {
          if (((HEAPU8[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & $569 | 0) & 255 | 0) {
           break label$65
          }
          $577 = HEAP32[($3_1 + 340 | 0) >> 2] | 0;
          HEAP8[($577 + 24 | 0) >> 0] = HEAPU8[($577 + 24 | 0) >> 0] | 0 | 1 | 0;
          HEAP32[($3_1 + 324 | 0) >> 2] = (HEAP32[($3_1 + 324 | 0) >> 2] | 0) + 1 | 0;
          label$66 : {
           if (!(($267(HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0) & 1 | 0)) {
            break label$66
           }
           $593 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
           $595 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
           $597 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
           HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[(0 + 88328 | 0) >> 2] | 0;
           HEAP32[($3_1 + 116 | 0) >> 2] = $597;
           HEAP32[($3_1 + 112 | 0) >> 2] = $595;
           $396($593 | 0, 6139 | 0, 60249 | 0, $3_1 + 112 | 0 | 0);
           HEAP32[($3_1 + 308 | 0) >> 2] = 1;
          }
         }
         continue label$64;
        };
       }
      }
     }
     HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$55;
    }
    break label$55;
   };
  }
  HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + (HEAP32[($3_1 + 328 | 0) >> 2] | 0) | 0;
  label$67 : {
   if (!((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$67
   }
   label$68 : {
    if (!((HEAP32[($3_1 + 328 | 0) >> 2] | 0 | 0) != ((HEAP32[(0 + 90060 | 0) >> 2] | 0) - (HEAP32[(0 + 90020 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$68
    }
    $632 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $633 = HEAP32[($3_1 + 328 | 0) >> 2] | 0;
    $635 = HEAP32[(0 + 90060 | 0) >> 2] | 0;
    HEAP32[($3_1 + 264 | 0) >> 2] = HEAP32[(0 + 90020 | 0) >> 2] | 0;
    HEAP32[($3_1 + 260 | 0) >> 2] = $635;
    HEAP32[($3_1 + 256 | 0) >> 2] = $633;
    $396($632 | 0, 6140 | 0, 60337 | 0, $3_1 + 256 | 0 | 0);
    HEAP32[($3_1 + 308 | 0) >> 2] = 1;
   }
   HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
   label$69 : {
    if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
     break label$69
    }
    HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
    label$70 : while (1) {
     $660 = 0;
     label$71 : {
      if (!((HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$71
      }
      $660 = (HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$72 : {
      if (!($660 & 1 | 0)) {
       break label$72
      }
      label$73 : {
       if ((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$73
       }
       $679 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $396($679 | 0, 6407 | 0, 60458 | 0, $3_1 + 128 | 0 | 0);
       HEAP32[($3_1 + 308 | 0) >> 2] = 1;
      }
      $687 = HEAP32[($3_1 + 340 | 0) >> 2] | 0;
      $329(HEAP32[($687 + 12 | 0) >> 2] | 0 | 0, 60532 | 0, HEAP32[($687 + 16 | 0) >> 2] | 0 | 0);
      label$74 : {
       label$75 : {
        if (!((((HEAPU8[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
         break label$75
        }
        break label$74;
       }
       $701 = $337(HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($3_1 + 316 | 0) >> 2] = (HEAP32[($3_1 + 316 | 0) >> 2] | 0) + $701 | 0;
      }
      HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0;
      continue label$70;
     }
     break label$70;
    };
    label$76 : {
     if (!((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$76
     }
     HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[($3_1 + 364 | 0) >> 2] | 0;
     label$77 : while (1) {
      $722 = 0;
      label$78 : {
       if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$78
       }
       $722 = (HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$79 : {
       if (!($722 & 1 | 0)) {
        break label$79
       }
       label$80 : {
        if (((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
         break label$80
        }
        $740 = $337(HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($3_1 + 312 | 0) >> 2] = (HEAP32[($3_1 + 312 | 0) >> 2] | 0) + $740 | 0;
       }
       HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       continue label$77;
      }
      break label$77;
     };
    }
    label$81 : {
     if (!((HEAP32[($3_1 + 316 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 312 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$81
     }
     $753 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $754 = HEAP32[($3_1 + 316 | 0) >> 2] | 0;
     HEAP32[($3_1 + 244 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
     HEAP32[($3_1 + 240 | 0) >> 2] = $754;
     $396($753 | 0, 6141 | 0, 60548 | 0, $3_1 + 240 | 0 | 0);
     HEAP32[($3_1 + 308 | 0) >> 2] = 1;
     HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
     label$82 : while (1) {
      $771 = 0;
      label$83 : {
       if (!((HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$83
       }
       $771 = (HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$84 : {
       if (!($771 & 1 | 0)) {
        break label$84
       }
       label$85 : {
        label$86 : {
         if (!((((HEAPU8[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
          break label$86
         }
         break label$85;
        }
        $789 = 0;
        HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($3_1 + 356 | 0) >> 2] = $789;
        label$87 : {
         if (!((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($789 | 0) & 1 | 0)) {
          break label$87
         }
         HEAP32[($3_1 + 352 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
         label$88 : {
          label$89 : while (1) {
           $807 = HEAP32[($3_1 + 352 | 0) >> 2] | 0;
           HEAP32[($3_1 + 352 | 0) >> 2] = $807 + 4 | 0;
           $810 = HEAP32[$807 >> 2] | 0;
           HEAP32[($3_1 + 356 | 0) >> 2] = $810;
           if (!(($810 | 0) != (0 | 0) & 1 | 0)) {
            break label$88
           }
           label$90 : {
            if (!((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$90
            }
            $826 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $828 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($3_1 + 164 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            HEAP32[($3_1 + 160 | 0) >> 2] = $828;
            $396($826 | 0, 6275 | 0, 60699 | 0, $3_1 + 160 | 0 | 0);
            HEAP32[($3_1 + 344 | 0) >> 2] = HEAP32[($3_1 + 348 | 0) >> 2] | 0;
            HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 356 | 0) >> 2] | 0;
           }
           HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
           label$91 : {
            if ($342(HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) | 0) {
             break label$91
            }
            $845 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $847 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $849 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            $851 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
            HEAP32[($3_1 + 156 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($3_1 + 152 | 0) >> 2] = $851;
            HEAP32[($3_1 + 148 | 0) >> 2] = $849;
            HEAP32[($3_1 + 144 | 0) >> 2] = $847;
            $396($845 | 0, 6276 | 0, 60790 | 0, $3_1 + 144 | 0 | 0);
            HEAP32[($3_1 + 344 | 0) >> 2] = HEAP32[($3_1 + 348 | 0) >> 2] | 0;
            HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 356 | 0) >> 2] | 0;
           }
           continue label$89;
          };
         }
        }
       }
       HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0;
       continue label$82;
      }
      break label$82;
     };
     label$92 : {
      if (!((HEAP32[($3_1 + 364 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$92
      }
      HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[($3_1 + 364 | 0) >> 2] | 0;
      label$93 : while (1) {
       $878 = 0;
       label$94 : {
        if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$94
        }
        $878 = (HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
       }
       label$95 : {
        if (!($878 & 1 | 0)) {
         break label$95
        }
        label$96 : {
         if (((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
          break label$96
         }
         $894 = 0;
         HEAP32[($3_1 + 340 | 0) >> 2] = $894;
         label$97 : {
          if (!((HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($894 | 0) & 1 | 0)) {
           break label$97
          }
          HEAP32[($3_1 + 336 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
          label$98 : {
           label$99 : while (1) {
            $907 = HEAP32[($3_1 + 336 | 0) >> 2] | 0;
            HEAP32[($3_1 + 336 | 0) >> 2] = $907 + 4 | 0;
            $910 = HEAP32[$907 >> 2] | 0;
            HEAP32[($3_1 + 340 | 0) >> 2] = $910;
            if (!(($910 | 0) != (0 | 0) & 1 | 0)) {
             break label$98
            }
            label$100 : {
             if ($342(HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) | 0) {
              break label$100
             }
             $921 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
             $923 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
             $925 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             $927 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
             HEAP32[($3_1 + 184 | 0) >> 2] = $927;
             HEAP32[($3_1 + 180 | 0) >> 2] = $925;
             HEAP32[($3_1 + 176 | 0) >> 2] = $923;
             $396($921 | 0, 6277 | 0, 60900 | 0, $3_1 + 176 | 0 | 0);
             HEAP32[($3_1 + 344 | 0) >> 2] = HEAP32[($3_1 + 348 | 0) >> 2] | 0;
             HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 360 | 0) >> 2] | 0;
            }
            continue label$99;
           };
          }
         }
        }
        HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
        continue label$93;
       }
       break label$93;
      };
     }
    }
   }
   label$101 : {
    if (!((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) != ((HEAP32[(0 + 90064 | 0) >> 2] | 0) - ($337(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) | 0) | 0 | 0) & 1 | 0)) {
     break label$101
    }
    $951 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $952 = HEAP32[($3_1 + 324 | 0) >> 2] | 0;
    HEAP32[($3_1 + 228 | 0) >> 2] = (HEAP32[(0 + 90064 | 0) >> 2] | 0) - ($337(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) | 0) | 0;
    HEAP32[($3_1 + 224 | 0) >> 2] = $952;
    $396($951 | 0, 6142 | 0, 61003 | 0, $3_1 + 224 | 0 | 0);
    HEAP32[($3_1 + 308 | 0) >> 2] = 1;
   }
   label$102 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$102
    }
    if (!((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 328 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$102
    }
    $980 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $981 = HEAP32[($3_1 + 324 | 0) >> 2] | 0;
    HEAP32[($3_1 + 212 | 0) >> 2] = HEAP32[($3_1 + 328 | 0) >> 2] | 0;
    HEAP32[($3_1 + 208 | 0) >> 2] = $981;
    $396($980 | 0, 6143 | 0, 61107 | 0, $3_1 + 208 | 0 | 0);
    HEAP32[($3_1 + 308 | 0) >> 2] = 1;
   }
   label$103 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
     break label$103
    }
    if (!((((HEAP32[($3_1 + 324 | 0) >> 2] | 0) + (HEAP32[($3_1 + 328 | 0) >> 2] | 0) | 0) - ((HEAP32[($3_1 + 320 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$103
    }
    $1010 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $1011 = HEAP32[($3_1 + 324 | 0) >> 2] | 0;
    $1012 = HEAP32[($3_1 + 328 | 0) >> 2] | 0;
    HEAP32[($3_1 + 200 | 0) >> 2] = (HEAP32[($3_1 + 320 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
    HEAP32[($3_1 + 196 | 0) >> 2] = $1012;
    HEAP32[($3_1 + 192 | 0) >> 2] = $1011;
    $396($1010 | 0, 7063 | 0, 61175 | 0, $3_1 + 192 | 0 | 0);
   }
  }
  label$104 : {
   if (!(HEAP32[($3_1 + 308 | 0) >> 2] | 0)) {
    break label$104
   }
   $150(5 | 0, HEAP32[($3_1 + 348 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 368 | 0;
  return;
 }
 
 function $279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $53_1 = 0, $72_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $323_1 = 0, $384_1 = 0, $397_1 = 0, $400_1 = 0, $90_1 = 0, $182_1 = 0, $185_1 = 0, $187_1 = 0, $510_1 = 0.0, $197_1 = 0, $200_1 = 0, $202_1 = 0, $204_1 = 0, $225_1 = 0, $227_1 = 0, $229_1 = 0, $232_1 = 0, $234_1 = 0, $514_1 = 0.0, $261_1 = 0, $263_1 = 0, $265_1 = 0, $268_1 = 0, $270_1 = 0, $517_1 = 0.0, $293_1 = 0, $295_1 = 0, $297_1 = 0, $300_1 = 0, $302_1 = 0, $518_1 = 0.0, $304_1 = 0, $320_1 = 0, $339_1 = 0, $364_1 = 0, $440_1 = 0, $442_1 = 0, $444_1 = 0, $446_1 = 0, $521_1 = 0.0, $471_1 = 0, $473_1 = 0, $475_1 = 0, $477_1 = 0, $524_1 = 0.0;
  $4_1 = global$0 - 320 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 316 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 312 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 296 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 292 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 272 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 268 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 264 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 260 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 89392 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$3
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1064 | 0, 53531 | 0, 0 | 0);
    }
    HEAP32[($4_1 + 260 | 0) >> 2] = 1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
      break label$5
     }
     label$6 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
       break label$6
      }
      $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1026 | 0, 53666 | 0, 0 | 0);
     }
     HEAP32[($4_1 + 260 | 0) >> 2] = 1;
     break label$4;
    }
    label$7 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$7
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1062 | 0, 53786 | 0, 0 | 0);
    }
   }
  }
  label$8 : {
   if (HEAP32[(0 + 88180 | 0) >> 2] | 0) {
    break label$8
   }
   $53_1 = 0;
   HEAP32[(0 + 90784 | 0) >> 2] = $53_1;
   HEAP32[(0 + 90856 | 0) >> 2] = $53_1;
  }
  label$9 : {
   if (!((HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   HEAP32[($4_1 + 308 | 0) >> 2] = HEAP32[($4_1 + 316 | 0) >> 2] | 0;
   label$10 : while (1) {
    $72_1 = 0;
    label$11 : {
     if (!((HEAP32[($4_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     $72_1 = (HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$12 : {
     if (!($72_1 & 1 | 0)) {
      break label$12
     }
     label$13 : {
      label$14 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
        break label$14
       }
       $151(53902 | 0);
       $90_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $396($90_1 | 0, 6113 | 0, 53916 | 0, $4_1 | 0);
       HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
       HEAP32[($4_1 + 272 | 0) >> 2] = 1;
       break label$13;
      }
      label$15 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
        break label$15
       }
       break label$13;
      }
      label$16 : {
       label$17 : {
        if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
         break label$17
        }
        label$18 : {
         if (!(HEAP32[(0 + 89392 | 0) >> 2] | 0)) {
          break label$18
         }
         if (((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
          break label$17
         }
        }
        $113_1 = 0;
        HEAP32[($4_1 + 252 | 0) >> 2] = $113_1;
        HEAP32[($4_1 + 256 | 0) >> 2] = $113_1;
        break label$16;
       }
       $114_1 = 0;
       $115_1 = 1;
       HEAP32[($4_1 + 252 | 0) >> 2] = $115_1;
       HEAP32[($4_1 + 256 | 0) >> 2] = $115_1;
       HEAP32[($4_1 + 304 | 0) >> 2] = $114_1;
       label$19 : {
        if (!((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($114_1 | 0) & 1 | 0)) {
         break label$19
        }
        HEAP32[($4_1 + 248 | 0) >> 2] = 0;
        HEAP32[($4_1 + 304 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($4_1 + 244 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
        label$20 : {
         label$21 : while (1) {
          if (!((HEAP32[($4_1 + 248 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$20
          }
          label$22 : {
           label$23 : {
            if (!(((HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
             break label$23
            }
            break label$22;
           }
           label$24 : {
            if (((HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
             break label$24
            }
            HEAP32[($4_1 + 252 | 0) >> 2] = 0;
            break label$22;
           }
           HEAP32[($4_1 + 288 | 0) >> 2] = HEAP32[(((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 248 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
           $4(HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 304 | 0) >> 2] | 0 | 0, $4_1 + 280 | 0 | 0);
           label$25 : {
            if (!(+HEAPF64[($4_1 + 280 | 0) >> 3] >= -+HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
             break label$25
            }
            label$26 : {
             if (!((HEAP32[($4_1 + 312 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
              break label$26
             }
             $151(53983 | 0);
             label$27 : {
              label$28 : {
               if (!(+HEAPF64[($4_1 + 280 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
                break label$28
               }
               $182_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
               $185_1 = $267(HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
               $187_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
               $510_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
               HEAP32[($4_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
               HEAPF64[($4_1 + 120 | 0) >> 3] = $510_1;
               HEAP32[($4_1 + 116 | 0) >> 2] = $187_1;
               HEAP32[($4_1 + 112 | 0) >> 2] = $185_1;
               $396($182_1 | 0, 6114 | 0, 54010 | 0, $4_1 + 112 | 0 | 0);
               break label$27;
              }
              $197_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
              $200_1 = $267(HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
              $202_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $204_1 = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAPF64[($4_1 + 160 | 0) >> 3] = +HEAPF64[($4_1 + 280 | 0) >> 3];
              HEAP32[($4_1 + 152 | 0) >> 2] = $204_1;
              HEAP32[($4_1 + 148 | 0) >> 2] = $202_1;
              HEAP32[($4_1 + 144 | 0) >> 2] = $200_1;
              $396($197_1 | 0, 6379 | 0, 54108 | 0, $4_1 + 144 | 0 | 0);
             }
             $382(2 | 0, HEAP32[($4_1 + 304 | 0) >> 2] | 0 | 0, 0 | 0);
            }
            label$29 : {
             label$30 : {
              if (!(+HEAPF64[($4_1 + 280 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
               break label$30
              }
              HEAP32[(0 + 90784 | 0) >> 2] = (HEAP32[(0 + 90784 | 0) >> 2] | 0) + 1 | 0;
              $151(54232 | 0);
              $225_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
              $227_1 = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              $229_1 = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              $232_1 = $267(HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
              $234_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $514_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
              HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAPF64[($4_1 + 32 | 0) >> 3] = $514_1;
              HEAP32[($4_1 + 28 | 0) >> 2] = $234_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $232_1;
              HEAP32[($4_1 + 20 | 0) >> 2] = $229_1;
              HEAP32[($4_1 + 16 | 0) >> 2] = $227_1;
              $396($225_1 | 0, 6115 | 0, 54246 | 0, $4_1 + 16 | 0 | 0);
              HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
              HEAP32[($4_1 + 292 | 0) >> 2] = HEAP32[($4_1 + 304 | 0) >> 2] | 0;
              HEAP32[($4_1 + 272 | 0) >> 2] = 1;
              break label$29;
             }
             label$31 : {
              label$32 : {
               if (!(HEAP32[(0 + 89392 | 0) >> 2] | 0)) {
                break label$32
               }
               label$33 : {
                if (!(+HEAPF64[($4_1 + 280 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
                 break label$33
                }
                HEAP32[(0 + 90856 | 0) >> 2] = (HEAP32[(0 + 90856 | 0) >> 2] | 0) + 1 | 0;
                $151(54327 | 0);
                $261_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                $263_1 = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                $265_1 = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                $268_1 = $267(HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
                $270_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
                $517_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
                HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                HEAPF64[($4_1 + 64 | 0) >> 3] = $517_1;
                HEAP32[($4_1 + 60 | 0) >> 2] = $270_1;
                HEAP32[($4_1 + 56 | 0) >> 2] = $268_1;
                HEAP32[($4_1 + 52 | 0) >> 2] = $265_1;
                HEAP32[($4_1 + 48 | 0) >> 2] = $263_1;
                $396($261_1 | 0, 6116 | 0, 54342 | 0, $4_1 + 48 | 0 | 0);
                HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
                HEAP32[($4_1 + 292 | 0) >> 2] = HEAP32[($4_1 + 304 | 0) >> 2] | 0;
                HEAP32[($4_1 + 272 | 0) >> 2] = 1;
               }
               break label$31;
              }
              HEAP32[(0 + 90856 | 0) >> 2] = (HEAP32[(0 + 90856 | 0) >> 2] | 0) + 1 | 0;
              $151(54327 | 0);
              label$34 : {
               if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
                break label$34
               }
               $293_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
               $295_1 = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
               $297_1 = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
               $300_1 = $267(HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
               $302_1 = HEAP32[((HEAP32[($4_1 + 288 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
               $518_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
               $304_1 = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
               HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
               HEAP32[($4_1 + 104 | 0) >> 2] = $304_1;
               HEAPF64[($4_1 + 96 | 0) >> 3] = $518_1;
               HEAP32[($4_1 + 92 | 0) >> 2] = $302_1;
               HEAP32[($4_1 + 88 | 0) >> 2] = $300_1;
               HEAP32[($4_1 + 84 | 0) >> 2] = $297_1;
               HEAP32[($4_1 + 80 | 0) >> 2] = $295_1;
               $396($293_1 | 0, 22 | 0, 54471 | 0, $4_1 + 80 | 0 | 0);
              }
             }
            }
           }
          }
          $320_1 = (HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
          $323_1 = (HEAP32[($4_1 + 248 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($4_1 + 248 | 0) >> 2] = $323_1;
          HEAP32[($4_1 + 304 | 0) >> 2] = HEAP32[($320_1 + ($323_1 << 2 | 0) | 0) >> 2] | 0;
          continue label$21;
         };
        }
       }
      }
      label$35 : {
       if (HEAP32[($4_1 + 252 | 0) >> 2] | 0) {
        break label$35
       }
       label$36 : {
        if (!(HEAP32[($4_1 + 260 | 0) >> 2] | 0)) {
         break label$36
        }
        label$37 : {
         if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
          break label$37
         }
         $339_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         HEAP32[($4_1 + 240 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $396($339_1 | 0, 1063 | 0, 54569 | 0, $4_1 + 240 | 0 | 0);
        }
        HEAP32[($4_1 + 260 | 0) >> 2] = 0;
       }
       label$38 : {
        label$39 : {
         if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
          break label$39
         }
         label$40 : {
          if ((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$40
          }
          $364_1 = $12(HEAP32[($4_1 + 308 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 40 | 0) >> 2] = $364_1;
         }
         HEAP32[($4_1 + 276 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
         break label$38;
        }
        label$41 : {
         if (HEAP32[($4_1 + 268 | 0) >> 2] | 0) {
          break label$41
         }
         if (((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
          break label$41
         }
         HEAP32[($4_1 + 268 | 0) >> 2] = 1;
         $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 7062 | 0, 54692 | 0, 0 | 0);
        }
        HEAP32[($4_1 + 276 | 0) >> 2] = $12(HEAP32[($4_1 + 308 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($4_1 + 264 | 0) >> 2] = 1;
       }
       $384_1 = 0;
       HEAP32[($4_1 + 304 | 0) >> 2] = $384_1;
       label$42 : {
        if (!((HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($384_1 | 0) & 1 | 0)) {
         break label$42
        }
        HEAP32[($4_1 + 300 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
        label$43 : {
         label$44 : while (1) {
          $397_1 = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
          HEAP32[($4_1 + 300 | 0) >> 2] = $397_1 + 4 | 0;
          $400_1 = HEAP32[$397_1 >> 2] | 0;
          HEAP32[($4_1 + 304 | 0) >> 2] = $400_1;
          if (!(($400_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$43
          }
          label$45 : {
           if (!(((HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
            break label$45
           }
           if (!(HEAP32[($4_1 + 256 | 0) >> 2] | 0)) {
            break label$45
           }
           continue label$44;
          }
          label$46 : {
           if (!(((HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
            break label$46
           }
           continue label$44;
          }
          HEAP32[(0 + 90992 | 0) >> 2] = (HEAP32[(0 + 90992 | 0) >> 2] | 0) + 1 | 0;
          $4(HEAP32[($4_1 + 276 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 304 | 0) >> 2] | 0 | 0, $4_1 + 280 | 0 | 0);
          label$47 : {
           label$48 : {
            if (!(+HEAPF64[($4_1 + 280 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
             break label$48
            }
            HEAP32[(0 + 90784 | 0) >> 2] = (HEAP32[(0 + 90784 | 0) >> 2] | 0) + 1 | 0;
            $151(54232 | 0);
            $440_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $442_1 = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $444_1 = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $446_1 = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $521_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
            HEAP32[($4_1 + 200 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAPF64[($4_1 + 192 | 0) >> 3] = $521_1;
            HEAP32[($4_1 + 184 | 0) >> 2] = $446_1;
            HEAP32[($4_1 + 180 | 0) >> 2] = $444_1;
            HEAP32[($4_1 + 176 | 0) >> 2] = $442_1;
            $396($440_1 | 0, 6117 | 0, 54792 | 0, $4_1 + 176 | 0 | 0);
            HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
            HEAP32[($4_1 + 292 | 0) >> 2] = HEAP32[($4_1 + 304 | 0) >> 2] | 0;
            HEAP32[($4_1 + 272 | 0) >> 2] = 1;
            break label$47;
           }
           label$49 : {
            if (!(+HEAPF64[($4_1 + 280 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
             break label$49
            }
            HEAP32[(0 + 90856 | 0) >> 2] = (HEAP32[(0 + 90856 | 0) >> 2] | 0) + 1 | 0;
            $151(54327 | 0);
            $471_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $473_1 = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $475_1 = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $477_1 = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $524_1 = +HEAPF64[($4_1 + 280 | 0) >> 3];
            HEAP32[($4_1 + 232 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAPF64[($4_1 + 224 | 0) >> 3] = $524_1;
            HEAP32[($4_1 + 216 | 0) >> 2] = $477_1;
            HEAP32[($4_1 + 212 | 0) >> 2] = $475_1;
            HEAP32[($4_1 + 208 | 0) >> 2] = $473_1;
            $396($471_1 | 0, 6118 | 0, 54874 | 0, $4_1 + 208 | 0 | 0);
            HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
            HEAP32[($4_1 + 292 | 0) >> 2] = HEAP32[($4_1 + 304 | 0) >> 2] | 0;
            HEAP32[($4_1 + 272 | 0) >> 2] = 1;
           }
          }
          continue label$44;
         };
        }
       }
       label$50 : {
        if (!(HEAP32[($4_1 + 264 | 0) >> 2] | 0)) {
         break label$50
        }
        $158(HEAP32[($4_1 + 276 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
       }
      }
     }
     HEAP32[($4_1 + 308 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 308 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$10;
    }
    break label$10;
   };
  }
  label$51 : {
   if (!(HEAP32[($4_1 + 272 | 0) >> 2] | 0)) {
    break label$51
   }
   if (HEAP32[(0 + 87800 | 0) >> 2] | 0) {
    break label$51
   }
   $150(3 | 0, HEAP32[($4_1 + 296 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 320 | 0;
  return;
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $592 = 0, $56_1 = 0, $96_1 = 0, $108_1 = 0, $155_1 = 0, $175_1 = 0, $200_1 = 0, $258_1 = 0, $272_1 = 0, $302_1 = 0, $347_1 = 0, $361_1 = 0, $405_1 = 0, $584 = 0, $612 = 0, $669 = 0, $683 = 0, $713 = 0, $761 = 0, $811 = 0, $36_1 = 0, $45_1 = 0, $47_1 = 0, $78_1 = 0, $87_1 = 0, $98_1 = 0, $144_1 = 0, $242_1 = 0, $244_1 = 0, $246_1 = 0, $249_1 = 0, $260_1 = 0, $263_1 = 0, $285_1 = 0, $287_1 = 0, $289_1 = 0, $291_1 = 0, $293_1 = 0, $336_1 = 0, $338_1 = 0, $349_1 = 0, $392_1 = 0, $394_1 = 0, $464_1 = 0, $467_1 = 0, $497_1 = 0, $500_1 = 0, $530 = 0, $533 = 0, $573 = 0, $653 = 0, $655 = 0, $657 = 0, $660 = 0, $671 = 0, $674 = 0, $696 = 0, $698 = 0, $700 = 0, $702 = 0, $704 = 0, $747 = 0, $749 = 0, $750 = 0, $801 = 0, $817 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 360 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 352 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 348 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 328 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 324 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 320 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 316 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 312 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 308 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3_1 + 336 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
    HEAP32[($3_1 + 332 | 0) >> 2] = 0;
    label$4 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$4
     }
     $36_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $45_1 = (HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0 ? 57770 : 57779;
     $47_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     label$5 : {
      label$6 : {
       if (!((HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       $56_1 = HEAP32[((HEAP32[($3_1 + 336 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       break label$5;
      }
      $56_1 = -1;
     }
     HEAP32[($3_1 + 280 | 0) >> 2] = $56_1;
     HEAP32[($3_1 + 276 | 0) >> 2] = $47_1;
     HEAP32[($3_1 + 272 | 0) >> 2] = $45_1;
     $396($36_1 | 0, 2110 | 0, 57710 | 0, $3_1 + 272 | 0 | 0);
    }
    break label$1;
   }
   HEAP32[($3_1 + 336 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
   HEAP32[($3_1 + 332 | 0) >> 2] = 0;
   label$7 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$7
    }
    $78_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $87_1 = (HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0 ? 57843 : 57853;
    label$8 : {
     label$9 : {
      if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      $96_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$8;
     }
     $96_1 = -1;
    }
    $98_1 = $96_1;
    label$10 : {
     label$11 : {
      if (!((HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$11
      }
      $108_1 = HEAP32[((HEAP32[($3_1 + 336 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      break label$10;
     }
     $108_1 = -1;
    }
    HEAP32[($3_1 + 296 | 0) >> 2] = $108_1;
    HEAP32[($3_1 + 292 | 0) >> 2] = $98_1;
    HEAP32[($3_1 + 288 | 0) >> 2] = $87_1;
    $396($78_1 | 0, 2111 | 0, 57787 | 0, $3_1 + 288 | 0 | 0);
   }
  }
  label$12 : {
   if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$12
   }
   label$13 : {
    label$14 : {
     if ((HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$14
     }
     if (HEAP32[((HEAP32[(0 + 90004 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) {
      break label$14
     }
     if (!((HEAP32[((HEAP32[(0 + 90004 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$13
     }
    }
    $144_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$15 : {
     label$16 : {
      if (!((HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$16
      }
      $155_1 = HEAP32[((HEAP32[(0 + 90004 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$15;
     }
     $155_1 = -1;
    }
    HEAP32[($3_1 + 256 | 0) >> 2] = $155_1;
    $396($144_1 | 0, 6397 | 0, 57859 | 0, $3_1 + 256 | 0 | 0);
    $382(5 | 0, HEAP32[(0 + 90004 | 0) >> 2] | 0 | 0, 0 | 0);
   }
   label$17 : {
    label$18 : {
     if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$18
     }
     $175_1 = 0;
     break label$17;
    }
    $175_1 = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
   }
   HEAP32[($3_1 + 344 | 0) >> 2] = $175_1;
   HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
   label$19 : {
    if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$19
    }
    HEAP32[($3_1 + 356 | 0) >> 2] = HEAP32[($3_1 + 360 | 0) >> 2] | 0;
    label$20 : while (1) {
     $200_1 = 0;
     label$21 : {
      if (!((HEAP32[($3_1 + 356 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$21
      }
      $200_1 = (HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$22 : {
      if (!($200_1 & 1 | 0)) {
       break label$22
      }
      label$23 : {
       label$24 : {
        if ((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 90256 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
         break label$24
        }
        if (!((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 90076 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$23
        }
       }
       HEAP32[($3_1 + 324 | 0) >> 2] = 1;
       HEAP32[($3_1 + 352 | 0) >> 2] = HEAP32[($3_1 + 356 | 0) >> 2] | 0;
       HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 344 | 0) >> 2] | 0;
       label$25 : {
        label$26 : {
         if (!((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$26
         }
         $242_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $244_1 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $246_1 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         $249_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         label$27 : {
          label$28 : {
           if (!((HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$28
           }
           $258_1 = HEAP32[((HEAP32[($3_1 + 344 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           break label$27;
          }
          $258_1 = -1;
         }
         $260_1 = $258_1;
         $263_1 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         label$29 : {
          label$30 : {
           if (!((HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$30
           }
           $272_1 = HEAP32[((HEAP32[($3_1 + 344 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           break label$29;
          }
          $272_1 = -1;
         }
         HEAP32[($3_1 + 180 | 0) >> 2] = $272_1;
         HEAP32[($3_1 + 176 | 0) >> 2] = $263_1;
         HEAP32[($3_1 + 172 | 0) >> 2] = $260_1;
         HEAP32[($3_1 + 168 | 0) >> 2] = $249_1;
         HEAP32[($3_1 + 164 | 0) >> 2] = $246_1;
         HEAP32[($3_1 + 160 | 0) >> 2] = $244_1;
         $396($242_1 | 0, 6039 | 0, 57976 | 0, $3_1 + 160 | 0 | 0);
         break label$25;
        }
        $285_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $287_1 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $289_1 = HEAP32[(0 + 90076 | 0) >> 2] | 0;
        $291_1 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
        $293_1 = HEAP32[(0 + 90256 | 0) >> 2] | 0;
        label$31 : {
         label$32 : {
          if (!((HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$32
          }
          $302_1 = HEAP32[((HEAP32[($3_1 + 344 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          break label$31;
         }
         $302_1 = -1;
        }
        HEAP32[($3_1 + 208 | 0) >> 2] = $302_1;
        HEAP32[($3_1 + 204 | 0) >> 2] = $293_1;
        HEAP32[($3_1 + 200 | 0) >> 2] = $291_1;
        HEAP32[($3_1 + 196 | 0) >> 2] = $289_1;
        HEAP32[($3_1 + 192 | 0) >> 2] = $287_1;
        $396($285_1 | 0, 6350 | 0, 58123 | 0, $3_1 + 192 | 0 | 0);
       }
       label$33 : {
        label$34 : {
         if (!((HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$34
         }
         HEAP32[((HEAP32[($3_1 + 344 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[(0 + 90004 | 0) >> 2] | 0;
         break label$33;
        }
        HEAP32[($3_1 + 360 | 0) >> 2] = HEAP32[(0 + 90004 | 0) >> 2] | 0;
       }
       break label$22;
      }
      HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
      label$35 : {
       if (!((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$35
       }
       $336_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $338_1 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       label$36 : {
        label$37 : {
         if (!((HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$37
         }
         $347_1 = HEAP32[((HEAP32[($3_1 + 344 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         break label$36;
        }
        $347_1 = -1;
       }
       $349_1 = $347_1;
       label$38 : {
        label$39 : {
         if (!((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$39
         }
         $361_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         break label$38;
        }
        $361_1 = -1;
       }
       HEAP32[($3_1 + 248 | 0) >> 2] = $361_1;
       HEAP32[($3_1 + 244 | 0) >> 2] = $349_1;
       HEAP32[($3_1 + 240 | 0) >> 2] = $338_1;
       $396($336_1 | 0, 6416 | 0, 58304 | 0, $3_1 + 240 | 0 | 0);
       HEAP32[($3_1 + 324 | 0) >> 2] = 1;
       HEAP32[($3_1 + 352 | 0) >> 2] = HEAP32[($3_1 + 356 | 0) >> 2] | 0;
       HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
      }
      HEAP32[($3_1 + 344 | 0) >> 2] = HEAP32[($3_1 + 356 | 0) >> 2] | 0;
      label$40 : {
       if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$40
       }
       label$41 : {
        if (!((HEAP32[($3_1 + 356 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$41
        }
        label$42 : {
         if (!(HEAP32[($3_1 + 320 | 0) >> 2] | 0)) {
          break label$42
         }
         $392_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         $394_1 = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
         label$43 : {
          label$44 : {
           if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$44
           }
           $405_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
           break label$43;
          }
          $405_1 = -1;
         }
         HEAP32[($3_1 + 228 | 0) >> 2] = $405_1;
         HEAP32[($3_1 + 224 | 0) >> 2] = $394_1;
         $396($392_1 | 0, 6285 | 0, 58383 | 0, $3_1 + 224 | 0 | 0);
         HEAP32[($3_1 + 324 | 0) >> 2] = 1;
         HEAP32[($3_1 + 352 | 0) >> 2] = HEAP32[($3_1 + 356 | 0) >> 2] | 0;
         HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 308 | 0) >> 2] = 1;
       }
       label$45 : {
        if (!((HEAP32[($3_1 + 356 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$45
        }
        HEAP32[($3_1 + 320 | 0) >> 2] = 1;
       }
       label$46 : {
        if (!((HEAP32[($3_1 + 356 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$46
        }
        HEAP32[($3_1 + 316 | 0) >> 2] = 1;
       }
      }
      HEAP32[($3_1 + 356 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 356 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$20;
     }
     break label$20;
    };
   }
   label$47 : {
    if (!((HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$47
    }
    label$48 : {
     if (HEAP32[($3_1 + 316 | 0) >> 2] | 0) {
      break label$48
     }
     if (!((HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$48
     }
     if (!((HEAP32[((HEAP32[(0 + 90008 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$48
     }
     $464_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $467_1 = HEAP32[((HEAP32[(0 + 90008 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($3_1 + 148 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($3_1 + 144 | 0) >> 2] = $467_1;
     $396($464_1 | 0, 6369 | 0, 58507 | 0, $3_1 + 144 | 0 | 0);
     HEAP32[($3_1 + 324 | 0) >> 2] = 1;
     HEAP32[($3_1 + 352 | 0) >> 2] = HEAP32[(0 + 90008 | 0) >> 2] | 0;
     HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 360 | 0) >> 2] | 0;
    }
    label$49 : {
     if (HEAP32[($3_1 + 320 | 0) >> 2] | 0) {
      break label$49
     }
     if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$49
     }
     if (!((HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$49
     }
     $497_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $500_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($3_1 + 128 | 0) >> 2] = $500_1;
     $396($497_1 | 0, 6286 | 0, 58608 | 0, $3_1 + 128 | 0 | 0);
     HEAP32[($3_1 + 324 | 0) >> 2] = 1;
     HEAP32[($3_1 + 352 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
     HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 360 | 0) >> 2] | 0;
    }
    label$50 : {
     if (HEAP32[($3_1 + 308 | 0) >> 2] | 0) {
      break label$50
     }
     if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$50
     }
     if (!((HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$50
     }
     $530 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $533 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($3_1 + 116 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 360 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($3_1 + 112 | 0) >> 2] = $533;
     $396($530 | 0, 6138 | 0, 58696 | 0, $3_1 + 112 | 0 | 0);
     HEAP32[($3_1 + 324 | 0) >> 2] = 1;
     HEAP32[($3_1 + 352 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
     HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 360 | 0) >> 2] | 0;
    }
   }
  }
  label$51 : {
   if (!((HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$51
   }
   label$52 : {
    label$53 : {
     if ((HEAP32[(0 + 90052 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$53
     }
     if (HEAP32[((HEAP32[(0 + 90052 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) {
      break label$53
     }
     if (!((HEAP32[(HEAP32[(0 + 90052 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$52
     }
    }
    $573 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$54 : {
     label$55 : {
      if (!((HEAP32[(0 + 90052 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$55
      }
      $584 = HEAP32[((HEAP32[(0 + 90052 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      break label$54;
     }
     $584 = -1;
    }
    HEAP32[($3_1 + 96 | 0) >> 2] = $584;
    $396($573 | 0, 6366 | 0, 58783 | 0, $3_1 + 96 | 0 | 0);
    $592 = 0;
    $383(55919 | 0, HEAP32[($3_1 + 352 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 348 | 0) >> 2] | 0 | 0, $592 | 0, HEAP32[(0 + 90052 | 0) >> 2] | 0 | 0);
    $382(5 | 0, $592 | 0, $592 | 0);
   }
   HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[($3_1 + 336 | 0) >> 2] | 0;
   label$56 : while (1) {
    $612 = 0;
    label$57 : {
     if (!((HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$57
     }
     $612 = (HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$58 : {
     if (!($612 & 1 | 0)) {
      break label$58
     }
     label$59 : {
      label$60 : {
       if ((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 90260 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
        break label$60
       }
       if (!((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 90084 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$59
       }
      }
      HEAP32[($3_1 + 324 | 0) >> 2] = 1;
      HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[($3_1 + 340 | 0) >> 2] | 0;
      label$61 : {
       label$62 : {
        if (!((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$62
        }
        $653 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $655 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $657 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        $660 = HEAP32[((HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        label$63 : {
         label$64 : {
          if (!((HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$64
          }
          $669 = HEAP32[((HEAP32[($3_1 + 332 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          break label$63;
         }
         $669 = -1;
        }
        $671 = $669;
        $674 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        label$65 : {
         label$66 : {
          if (!((HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$66
          }
          $683 = HEAP32[((HEAP32[($3_1 + 332 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          break label$65;
         }
         $683 = -1;
        }
        HEAP32[($3_1 + 36 | 0) >> 2] = $683;
        HEAP32[($3_1 + 32 | 0) >> 2] = $674;
        HEAP32[($3_1 + 28 | 0) >> 2] = $671;
        HEAP32[($3_1 + 24 | 0) >> 2] = $660;
        HEAP32[($3_1 + 20 | 0) >> 2] = $657;
        HEAP32[($3_1 + 16 | 0) >> 2] = $655;
        $396($653 | 0, 6367 | 0, 58901 | 0, $3_1 + 16 | 0 | 0);
        break label$61;
       }
       $696 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $698 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $700 = HEAP32[(0 + 90084 | 0) >> 2] | 0;
       $702 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
       $704 = HEAP32[(0 + 90256 | 0) >> 2] | 0;
       label$67 : {
        label$68 : {
         if (!((HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$68
         }
         $713 = HEAP32[((HEAP32[($3_1 + 332 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
         break label$67;
        }
        $713 = -1;
       }
       HEAP32[($3_1 + 64 | 0) >> 2] = $713;
       HEAP32[($3_1 + 60 | 0) >> 2] = $704;
       HEAP32[($3_1 + 56 | 0) >> 2] = $702;
       HEAP32[($3_1 + 52 | 0) >> 2] = $700;
       HEAP32[($3_1 + 48 | 0) >> 2] = $698;
       $396($696 | 0, 6368 | 0, 59050 | 0, $3_1 + 48 | 0 | 0);
      }
      label$69 : {
       label$70 : {
        if (!((HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$70
        }
        HEAP32[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 90052 | 0) >> 2] | 0;
        break label$69;
       }
       HEAP32[($3_1 + 336 | 0) >> 2] = HEAP32[(0 + 90052 | 0) >> 2] | 0;
      }
      break label$58;
     }
     HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
     label$71 : {
      if (!((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$71
      }
      $747 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $749 = HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $750 = HEAP32[($3_1 + 332 | 0) >> 2] | 0;
      label$72 : {
       label$73 : {
        if (!((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$73
        }
        $761 = HEAP32[((HEAP32[((HEAP32[($3_1 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        break label$72;
       }
       $761 = -1;
      }
      HEAP32[($3_1 + 88 | 0) >> 2] = $761;
      HEAP32[($3_1 + 84 | 0) >> 2] = $750;
      HEAP32[($3_1 + 80 | 0) >> 2] = $749;
      $396($747 | 0, 6427 | 0, 59235 | 0, $3_1 + 80 | 0 | 0);
      HEAP32[($3_1 + 324 | 0) >> 2] = 1;
      HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[($3_1 + 340 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 332 | 0) >> 2] = HEAP32[($3_1 + 340 | 0) >> 2] | 0;
     label$74 : {
      if (!((HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$74
      }
      HEAP32[($3_1 + 312 | 0) >> 2] = 1;
     }
     HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 340 | 0) >> 2] | 0) >> 2] | 0;
     continue label$56;
    }
    break label$56;
   };
   label$75 : {
    if (HEAP32[($3_1 + 312 | 0) >> 2] | 0) {
     break label$75
    }
    if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$75
    }
    if (!((HEAP32[(HEAP32[(0 + 90056 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$75
    }
    $801 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[(0 + 90056 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $396($801 | 0, 6287 | 0, 59314 | 0, $3_1 | 0);
    HEAP32[($3_1 + 324 | 0) >> 2] = 1;
    HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
   }
  }
  label$76 : {
   label$77 : {
    if (!(HEAP32[($3_1 + 324 | 0) >> 2] | 0)) {
     break label$77
    }
    $811 = 0;
    $383(55919 | 0, HEAP32[($3_1 + 352 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 348 | 0) >> 2] | 0 | 0, $811 | 0, HEAP32[($3_1 + 328 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 364 | 0) >> 2] = $811;
    break label$76;
   }
   HEAP32[($3_1 + 364 | 0) >> 2] = 1;
  }
  $817 = HEAP32[($3_1 + 364 | 0) >> 2] | 0;
  global$0 = $3_1 + 368 | 0;
  return $817 | 0;
 }
 
 function $281() {
  var $2_1 = 0, $21_1 = 0, $33_1 = 0, $62_1 = 0, $76_1 = 0, $90_1 = 0, $104_1 = 0, $122_1 = 0, $134_1 = 0, $5_1 = 0, $42_1 = 0, $51_1 = 0, $64_1 = 0, $78_1 = 0, $92_1 = 0, $143_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 68 | 0) >> 2] = 0;
  $5_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
  HEAPF64[($2_1 + 48 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
  $396($5_1 | 0, 3062 | 0, 67376 | 0, $2_1 + 48 | 0 | 0);
  HEAP32[($2_1 + 76 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$1 : while (1) {
   $21_1 = 0;
   label$2 : {
    if (!((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $21_1 = (HEAP32[((HEAP32[($2_1 + 76 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($21_1 & 1 | 0)) {
     break label$3
    }
    $33_1 = (HEAP32[($2_1 + 68 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2_1 + 68 | 0) >> 2] = $33_1;
    label$4 : {
     if (($33_1 | 0) % (100 | 0) | 0) {
      break label$4
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8109 | 0, 67421 | 0, 0 | 0);
    }
    $42_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[((HEAP32[($2_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($42_1 | 0, 8110 | 0, 67370 | 0, $2_1 | 0);
    HEAP32[($2_1 + 76 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 76 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  $51_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    $62_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    break label$5;
   }
   $62_1 = -1;
  }
  $64_1 = $62_1;
  label$7 : {
   label$8 : {
    if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    $76_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    break label$7;
   }
   $76_1 = -1;
  }
  $78_1 = $76_1;
  label$9 : {
   label$10 : {
    if (!((HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$10
    }
    $90_1 = HEAP32[((HEAP32[(0 + 90008 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    break label$9;
   }
   $90_1 = -1;
  }
  $92_1 = $90_1;
  label$11 : {
   label$12 : {
    if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$12
    }
    $104_1 = HEAP32[((HEAP32[(0 + 90056 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    break label$11;
   }
   $104_1 = -1;
  }
  HEAP32[($2_1 + 44 | 0) >> 2] = $104_1;
  HEAP32[($2_1 + 40 | 0) >> 2] = $92_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = $78_1;
  HEAP32[($2_1 + 32 | 0) >> 2] = $64_1;
  $396($51_1 | 0, 8111 | 0, 67428 | 0, $2_1 + 32 | 0 | 0);
  HEAP32[($2_1 + 68 | 0) >> 2] = 0;
  HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
  label$13 : while (1) {
   $122_1 = 0;
   label$14 : {
    if (!((HEAP32[($2_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$14
    }
    $122_1 = (HEAP32[(HEAP32[($2_1 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$15 : {
    if (!($122_1 & 1 | 0)) {
     break label$15
    }
    $134_1 = (HEAP32[($2_1 + 68 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2_1 + 68 | 0) >> 2] = $134_1;
    label$16 : {
     if (($134_1 | 0) % (100 | 0) | 0) {
      break label$16
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8112 | 0, 67421 | 0, 0 | 0);
    }
    $143_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    $396($143_1 | 0, 8113 | 0, 67370 | 0, $2_1 + 16 | 0 | 0);
    HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 72 | 0) >> 2] | 0) >> 2] | 0;
    continue label$13;
   }
   break label$13;
  };
  $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8114 | 0, 67374 | 0, 0 | 0);
  global$0 = $2_1 + 80 | 0;
  return;
 }
 
 function $282($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $750 = 0, $771 = 0, $284_1 = 0, $749 = 0, $768 = 0, $1038 = 0, $180_1 = 0, $209_1 = 0, $217_1 = 0, $255_1 = 0, $258_1 = 0, $463_1 = 0, $476_1 = 0, $479_1 = 0, $526 = 0, $532 = 0, $545 = 0, $548 = 0, $592 = 0, $596 = 0, $609 = 0, $612 = 0, $618 = 0, $622 = 0, $626 = 0, $639 = 0, $642 = 0, $666 = 0, $708 = 0, $712 = 0, $766 = 0, $800 = 0, $813 = 0, $816 = 0, $840 = 0, $859 = 0, $862 = 0, $868 = 0, $872 = 0, $876 = 0, $887 = 0, $890 = 0, $896 = 0, $900 = 0, $913 = 0, $916 = 0, $933 = 0, $942 = 0, $955 = 0, $958 = 0, $987 = 0, $992 = 0, $1003 = 0, $1006 = 0, $1014 = 0, $1066 = 0, $1079 = 0, $1082 = 0, $1176 = 0, $1287 = 0, $21_1 = 0, $23_1 = 0, $39_1 = 0, $41_1 = 0, $59_1 = 0, $61_1 = 0, $63_1 = 0, $80_1 = 0, $104_1 = 0, $128_1 = 0, $145_1 = 0, $167_1 = 0, $169_1 = 0, $196_1 = 0, $198_1 = 0, $273_1 = 0, $275_1 = 0, $295_1 = 0, $297_1 = 0, $345_1 = 0, $347_1 = 0, $348_1 = 0, $388_1 = 0, $390_1 = 0, $391_1 = 0, $452_1 = 0, $454_1 = 0, $455_1 = 0, $456_1 = 0, $500_1 = 0, $517_1 = 0, $519_1 = 0, $559 = 0, $561 = 0, $563 = 0, $565 = 0, $581 = 0, $583 = 0, $655 = 0, $657 = 0, $684 = 0, $687 = 0, $690 = 0, $723 = 0, $725 = 0, $727 = 0, $765 = 0, $767 = 0, $781 = 0, $829 = 0, $831 = 0, $922 = 0, $971 = 0, $973 = 0, $975 = 0, $977 = 0, $1022 = 0, $1024 = 0, $1026 = 0, $1028 = 0, $1052 = 0, $1054 = 0, $1056 = 0, $1142 = 0, $1144 = 0, $1145 = 0, $1147 = 0, $1265 = 0, $1267 = 0, $1269 = 0, $1284 = 0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $7_1 = 0;
  HEAP32[($5_1 + 556 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 548 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 536 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 524 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 508 | 0) >> 2] = 2147483647;
  HEAP32[($5_1 + 496 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 492 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 488 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 464 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) - 2 | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $21_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $23_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 452 | 0) >> 2] = HEAP32[($5_1 + 552 | 0) >> 2] | 0;
   HEAP32[($5_1 + 448 | 0) >> 2] = $23_1;
   $396($21_1 | 0, 4088 | 0, 54968 | 0, $5_1 + 448 | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 90076 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $39_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $41_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 436 | 0) >> 2] = HEAP32[(0 + 90076 | 0) >> 2] | 0;
   HEAP32[($5_1 + 432 | 0) >> 2] = $41_1;
   $396($39_1 | 0, 6414 | 0, 55007 | 0, $5_1 + 432 | 0 | 0);
   HEAP32[($5_1 + 488 | 0) >> 2] = 1;
  }
  label$3 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) >>> 0 > (HEAP32[(0 + 90256 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $59_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $61_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $63_1 = HEAP32[(0 + 90256 | 0) >> 2] | 0;
   HEAP32[($5_1 + 424 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
   HEAP32[($5_1 + 420 | 0) >> 2] = $63_1;
   HEAP32[($5_1 + 416 | 0) >> 2] = $61_1;
   $396($59_1 | 0, 6415 | 0, 55087 | 0, $5_1 + 416 | 0 | 0);
   HEAP32[($5_1 + 488 | 0) >> 2] = 1;
  }
  label$4 : {
   if (!(((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
    break label$4
   }
   if (HEAP32[(0 + 90180 | 0) >> 2] | 0) {
    break label$4
   }
   $80_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 400 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($80_1 | 0, 6119 | 0, 55185 | 0, $5_1 + 400 | 0 | 0);
   $382(5 | 0, HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$5 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
    break label$5
   }
   if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
    break label$5
   }
   if ($337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0) {
    break label$5
   }
   $104_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 384 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($104_1 | 0, 6399 | 0, 55256 | 0, $5_1 + 384 | 0 | 0);
   HEAP32[($5_1 + 488 | 0) >> 2] = 1;
  }
  label$6 : {
   if (!(((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0)) {
    break label$6
   }
   if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
    break label$6
   }
   if ($337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0) {
    break label$6
   }
   $128_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 368 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($128_1 | 0, 6400 | 0, 55338 | 0, $5_1 + 368 | 0 | 0);
   HEAP32[($5_1 + 488 | 0) >> 2] = 1;
  }
  label$7 : {
   if ((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$7
   }
   $145_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 352 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($145_1 | 0, 6120 | 0, 55455 | 0, $5_1 + 352 | 0 | 0);
   HEAP32[($5_1 + 488 | 0) >> 2] = 1;
  }
  label$8 : {
   if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
    break label$8
   }
   label$9 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
     break label$9
    }
    $167_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $169_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    label$10 : {
     label$11 : {
      if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$11
      }
      $180_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$10;
     }
     $180_1 = -1;
    }
    HEAP32[($5_1 + 340 | 0) >> 2] = $180_1;
    HEAP32[($5_1 + 336 | 0) >> 2] = $169_1;
    $396($167_1 | 0, 6349 | 0, 55527 | 0, $5_1 + 336 | 0 | 0);
    HEAP32[($5_1 + 488 | 0) >> 2] = 1;
   }
   label$12 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 29 | 0) & 1 | 0)) {
     break label$12
    }
    $196_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $198_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    label$13 : {
     label$14 : {
      if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$14
      }
      $209_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$13;
     }
     $209_1 = -1;
    }
    HEAP32[($5_1 + 324 | 0) >> 2] = $209_1;
    HEAP32[($5_1 + 320 | 0) >> 2] = $198_1;
    $396($196_1 | 0, 6383 | 0, 55633 | 0, $5_1 + 320 | 0 | 0);
    HEAP32[($5_1 + 488 | 0) >> 2] = 1;
   }
  }
  $217_1 = 0;
  $329(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, 55775 | 0, HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0);
  $329(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, 55790 | 0, HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0);
  $329(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, 55803 | 0, HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0);
  $329(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0, 55820 | 0, HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0);
  $329(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, 55838 | 0, HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 516 | 0) >> 2] = $217_1;
  label$15 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($217_1 | 0) & 1 | 0)) {
    break label$15
   }
   HEAP32[($5_1 + 512 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
   label$16 : {
    label$17 : while (1) {
     $255_1 = HEAP32[($5_1 + 512 | 0) >> 2] | 0;
     HEAP32[($5_1 + 512 | 0) >> 2] = $255_1 + 4 | 0;
     $258_1 = HEAP32[$255_1 >> 2] | 0;
     HEAP32[($5_1 + 516 | 0) >> 2] = $258_1;
     if (!(($258_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$16
     }
     label$18 : {
      if (!((((HEAPU8[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
       break label$18
      }
      $273_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $275_1 = HEAP32[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      HEAP32[($5_1 + 308 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 304 | 0) >> 2] = $275_1;
      $396($273_1 | 0, 6121 | 0, 55854 | 0, $5_1 + 304 | 0 | 0);
      $284_1 = 0;
      $383(55919 | 0, $284_1 | 0, $284_1 | 0, $284_1 | 0, HEAP32[($5_1 + 516 | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
     }
     label$19 : {
      if (!((HEAP32[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($5_1 + 508 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$19
      }
      $295_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $297_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 292 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      HEAP32[($5_1 + 288 | 0) >> 2] = $297_1;
      $396($295_1 | 0, 6122 | 0, 55929 | 0, $5_1 + 288 | 0 | 0);
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
      break label$16;
     }
     HEAP32[($5_1 + 508 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     continue label$17;
    };
   }
  }
  HEAP32[($5_1 + 504 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 500 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 496 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
  label$20 : {
   label$21 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
     break label$21
    }
    label$22 : {
     if (!(((HEAP32[($5_1 + 500 | 0) >> 2] | 0) + (HEAP32[($5_1 + 504 | 0) >> 2] | 0) | 0 | 0) != ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
      break label$22
     }
     if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
      break label$22
     }
     if ((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
      break label$22
     }
     $345_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $347_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $348_1 = HEAP32[($5_1 + 500 | 0) >> 2] | 0;
     HEAP32[($5_1 + 248 | 0) >> 2] = HEAP32[($5_1 + 504 | 0) >> 2] | 0;
     HEAP32[($5_1 + 244 | 0) >> 2] = $348_1;
     HEAP32[($5_1 + 240 | 0) >> 2] = $347_1;
     $396($345_1 | 0, 6123 | 0, 56022 | 0, $5_1 + 240 | 0 | 0);
     $321(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 51759 | 0, HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 488 | 0) >> 2] = 1;
    }
    break label$20;
   }
   label$23 : {
    if (HEAP32[($5_1 + 552 | 0) >> 2] | 0) {
     break label$23
    }
    label$24 : {
     if ((HEAP32[($5_1 + 500 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0) {
      break label$24
     }
     if (!((HEAP32[($5_1 + 504 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$23
     }
    }
    if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
     break label$23
    }
    if ((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
     break label$23
    }
    $388_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $390_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $391_1 = HEAP32[($5_1 + 500 | 0) >> 2] | 0;
    HEAP32[($5_1 + 280 | 0) >> 2] = HEAP32[($5_1 + 504 | 0) >> 2] | 0;
    HEAP32[($5_1 + 276 | 0) >> 2] = $391_1;
    HEAP32[($5_1 + 272 | 0) >> 2] = $390_1;
    $396($388_1 | 0, 6124 | 0, 56133 | 0, $5_1 + 272 | 0 | 0);
    HEAP32[($5_1 + 488 | 0) >> 2] = 1;
   }
   label$25 : {
    label$26 : {
     if ((HEAP32[($5_1 + 496 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 504 | 0) >> 2] | 0 | 0) & 1 | 0) {
      break label$26
     }
     label$27 : {
      if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$27
      }
      if (!((HEAP32[($5_1 + 500 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 496 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$27
      }
      if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
       break label$26
      }
     }
     if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$25
     }
     if (!((((HEAP32[($5_1 + 496 | 0) >> 2] | 0) + (HEAP32[($5_1 + 500 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 504 | 0) >> 2] | 0) | 0 | 0) != (6 | 0) & 1 | 0)) {
      break label$25
     }
    }
    label$28 : {
     if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
      break label$28
     }
     if ((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0) {
      break label$28
     }
     $452_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $454_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $455_1 = HEAP32[($5_1 + 496 | 0) >> 2] | 0;
     $456_1 = HEAP32[($5_1 + 504 | 0) >> 2] | 0;
     HEAP32[($5_1 + 268 | 0) >> 2] = HEAP32[($5_1 + 500 | 0) >> 2] | 0;
     HEAP32[($5_1 + 264 | 0) >> 2] = $456_1;
     HEAP32[($5_1 + 260 | 0) >> 2] = $455_1;
     HEAP32[($5_1 + 256 | 0) >> 2] = $454_1;
     $396($452_1 | 0, 6125 | 0, 56231 | 0, $5_1 + 256 | 0 | 0);
     HEAP32[($5_1 + 488 | 0) >> 2] = 1;
    }
   }
  }
  $463_1 = 0;
  HEAP32[($5_1 + 544 | 0) >> 2] = $463_1;
  label$29 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($463_1 | 0) & 1 | 0)) {
    break label$29
   }
   HEAP32[($5_1 + 540 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$30 : {
    label$31 : while (1) {
     $476_1 = HEAP32[($5_1 + 540 | 0) >> 2] | 0;
     HEAP32[($5_1 + 540 | 0) >> 2] = $476_1 + 4 | 0;
     $479_1 = HEAP32[$476_1 >> 2] | 0;
     HEAP32[($5_1 + 544 | 0) >> 2] = $479_1;
     if (!(($479_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$30
     }
     label$32 : {
      label$33 : {
       if ((HEAP32[($5_1 + 544 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
        break label$33
       }
       if (!((HEAP32[($5_1 + 544 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$32
       }
      }
      $500_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $396($500_1 | 0, 6126 | 0, 56353 | 0, $5_1 + 16 | 0 | 0);
      $382(5 | 0, HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     label$34 : {
      if (!(((HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
       break label$34
      }
      $517_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $519_1 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[$5_1 >> 2] = $519_1;
      $396($517_1 | 0, 6401 | 0, 56452 | 0, $5_1 | 0);
      HEAP32[($5_1 + 536 | 0) >> 2] = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
     }
     $526 = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
     HEAP32[($526 + 80 | 0) >> 2] = (HEAP32[($526 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
     continue label$31;
    };
   }
  }
  $532 = 0;
  HEAP32[($5_1 + 544 | 0) >> 2] = $532;
  label$35 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($532 | 0) & 1 | 0)) {
    break label$35
   }
   HEAP32[($5_1 + 540 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$36 : {
    label$37 : while (1) {
     $545 = HEAP32[($5_1 + 540 | 0) >> 2] | 0;
     HEAP32[($5_1 + 540 | 0) >> 2] = $545 + 4 | 0;
     $548 = HEAP32[$545 >> 2] | 0;
     HEAP32[($5_1 + 544 | 0) >> 2] = $548;
     if (!(($548 | 0) != (0 | 0) & 1 | 0)) {
      break label$36
     }
     label$38 : {
      if ($342(HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0) | 0) {
       break label$38
      }
      $559 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $561 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $563 = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $565 = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 56 | 0) >> 2] = $565;
      HEAP32[($5_1 + 52 | 0) >> 2] = $563;
      HEAP32[($5_1 + 48 | 0) >> 2] = $561;
      $396($559 | 0, 6127 | 0, 56544 | 0, $5_1 + 48 | 0 | 0);
      HEAP32[($5_1 + 536 | 0) >> 2] = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
     }
     label$39 : {
      if (((HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0) {
       break label$39
      }
      $581 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $583 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 32 | 0) >> 2] = $583;
      $396($581 | 0, 6128 | 0, 56646 | 0, $5_1 + 32 | 0 | 0);
      HEAP32[($5_1 + 536 | 0) >> 2] = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
     }
     $592 = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
     HEAP32[($592 + 80 | 0) >> 2] = (HEAP32[($592 + 80 | 0) >> 2] | 0) & -16385 | 0;
     continue label$37;
    };
   }
  }
  $596 = 0;
  HEAP32[($5_1 + 532 | 0) >> 2] = $596;
  label$40 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($596 | 0) & 1 | 0)) {
    break label$40
   }
   HEAP32[($5_1 + 528 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$41 : {
    label$42 : while (1) {
     $609 = HEAP32[($5_1 + 528 | 0) >> 2] | 0;
     HEAP32[($5_1 + 528 | 0) >> 2] = $609 + 4 | 0;
     $612 = HEAP32[$609 >> 2] | 0;
     HEAP32[($5_1 + 532 | 0) >> 2] = $612;
     if (!(($612 | 0) != (0 | 0) & 1 | 0)) {
      break label$41
     }
     $618 = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
     $329(HEAP32[$618 >> 2] | 0 | 0, 56724 | 0, HEAP32[($618 + 12 | 0) >> 2] | 0 | 0);
     $622 = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
     HEAP8[($622 + 16 | 0) >> 0] = (HEAPU8[($622 + 16 | 0) >> 0] | 0) & -2 | 0;
     continue label$42;
    };
   }
  }
  $626 = 0;
  HEAP32[($5_1 + 532 | 0) >> 2] = $626;
  label$43 : {
   if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($626 | 0) & 1 | 0)) {
    break label$43
   }
   HEAP32[($5_1 + 528 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
   label$44 : {
    label$45 : while (1) {
     $639 = HEAP32[($5_1 + 528 | 0) >> 2] | 0;
     HEAP32[($5_1 + 528 | 0) >> 2] = $639 + 4 | 0;
     $642 = HEAP32[$639 >> 2] | 0;
     HEAP32[($5_1 + 532 | 0) >> 2] = $642;
     if (!(($642 | 0) != (0 | 0) & 1 | 0)) {
      break label$44
     }
     label$46 : {
      if (!(((HEAPU8[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 1 | 0) & 255 | 0)) {
       break label$46
      }
      $655 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $657 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 132 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      HEAP32[($5_1 + 128 | 0) >> 2] = $657;
      $396($655 | 0, 6129 | 0, 56739 | 0, $5_1 + 128 | 0 | 0);
      HEAP32[($5_1 + 524 | 0) >> 2] = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
     }
     $666 = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
     HEAP8[($666 + 16 | 0) >> 0] = HEAPU8[($666 + 16 | 0) >> 0] | 0 | 1 | 0;
     HEAP32[($5_1 + 492 | 0) >> 2] = $337(HEAP32[(HEAP32[($5_1 + 532 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
     label$47 : {
      if (!((HEAP32[($5_1 + 492 | 0) >> 2] | 0 | 0) != ((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$47
      }
      $684 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $687 = HEAP32[((HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $690 = HEAP32[((HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 120 | 0) >> 2] = HEAP32[($5_1 + 492 | 0) >> 2] | 0;
      HEAP32[($5_1 + 116 | 0) >> 2] = $690;
      HEAP32[($5_1 + 112 | 0) >> 2] = $687;
      $396($684 | 0, 6130 | 0, 56814 | 0, $5_1 + 112 | 0 | 0);
      HEAP32[($5_1 + 524 | 0) >> 2] = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
     }
     label$48 : {
      label$49 : {
       if (!((HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$49
       }
       $708 = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$48;
      }
      $708 = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 544 | 0) >> 2] = $708;
     $712 = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
     HEAP32[($712 + 80 | 0) >> 2] = (HEAP32[($712 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
     label$50 : {
      if ($342(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 544 | 0) >> 2] | 0 | 0) | 0) {
       break label$50
      }
      $723 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $725 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $727 = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      HEAP32[($5_1 + 100 | 0) >> 2] = $727;
      HEAP32[($5_1 + 96 | 0) >> 2] = $725;
      $396($723 | 0, 6131 | 0, 56895 | 0, $5_1 + 96 | 0 | 0);
      HEAP32[($5_1 + 524 | 0) >> 2] = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
      HEAP32[($5_1 + 488 | 0) >> 2] = 1;
     }
     label$51 : {
      if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
       break label$51
      }
      if (((HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 10 | 0) & 1 | 0) {
       break label$51
      }
      $749 = HEAPU8[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0;
      $750 = 1;
      label$52 : {
       if (!(!(($749 >>> $750 | 0) & $750 | 0) | (($749 >>> 2 | 0) & $750 | 0) | 0 | ((($749 >>> 3 | 0) & $750 | 0) & 255 | 0) | 0)) {
        break label$52
       }
       $765 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $766 = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
       $767 = HEAP32[($766 + 12 | 0) >> 2] | 0;
       $768 = HEAPU8[($766 + 16 | 0) >> 0] | 0;
       $771 = 1;
       $781 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 80 | 0) >> 2] = $781;
       HEAP32[($5_1 + 76 | 0) >> 2] = (($768 >>> $771 | 0) & $771 | 0) & 255 | 0;
       HEAP32[($5_1 + 72 | 0) >> 2] = ($768 >>> 3 | 0) & $771 | 0;
       HEAP32[($5_1 + 68 | 0) >> 2] = ($768 >>> 2 | 0) & $771 | 0;
       HEAP32[($5_1 + 64 | 0) >> 2] = $767;
       $396($765 | 0, 6384 | 0, 56988 | 0, $5_1 + 64 | 0 | 0);
       HEAP32[($5_1 + 524 | 0) >> 2] = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
       HEAP32[($5_1 + 488 | 0) >> 2] = 1;
      }
     }
     continue label$45;
    };
   }
  }
  label$53 : {
   label$54 : {
    if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
     break label$54
    }
    $800 = 0;
    HEAP32[($5_1 + 544 | 0) >> 2] = $800;
    label$55 : {
     if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($800 | 0) & 1 | 0)) {
      break label$55
     }
     HEAP32[($5_1 + 540 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$56 : {
      label$57 : while (1) {
       $813 = HEAP32[($5_1 + 540 | 0) >> 2] | 0;
       HEAP32[($5_1 + 540 | 0) >> 2] = $813 + 4 | 0;
       $816 = HEAP32[$813 >> 2] | 0;
       HEAP32[($5_1 + 544 | 0) >> 2] = $816;
       if (!(($816 | 0) != (0 | 0) & 1 | 0)) {
        break label$56
       }
       label$58 : {
        if (((HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0) {
         break label$58
        }
        $829 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $831 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 228 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 224 | 0) >> 2] = $831;
        $396($829 | 0, 6132 | 0, 57120 | 0, $5_1 + 224 | 0 | 0);
        HEAP32[($5_1 + 536 | 0) >> 2] = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
        HEAP32[($5_1 + 488 | 0) >> 2] = 1;
       }
       $840 = 0;
       HEAP32[($5_1 + 460 | 0) >> 2] = $284(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
       $350(HEAP32[($5_1 + 460 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 516 | 0) >> 2] = $840;
       label$59 : {
        if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($840 | 0) & 1 | 0)) {
         break label$59
        }
        HEAP32[($5_1 + 512 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
        label$60 : {
         label$61 : while (1) {
          $859 = HEAP32[($5_1 + 512 | 0) >> 2] | 0;
          HEAP32[($5_1 + 512 | 0) >> 2] = $859 + 4 | 0;
          $862 = HEAP32[$859 >> 2] | 0;
          HEAP32[($5_1 + 516 | 0) >> 2] = $862;
          if (!(($862 | 0) != (0 | 0) & 1 | 0)) {
           break label$60
          }
          $868 = HEAP32[($5_1 + 516 | 0) >> 2] | 0;
          HEAP8[($868 + 24 | 0) >> 0] = (HEAPU8[($868 + 24 | 0) >> 0] | 0) & 254 | 0;
          $872 = HEAP32[($5_1 + 516 | 0) >> 2] | 0;
          HEAP8[($872 + 24 | 0) >> 0] = (HEAPU8[($872 + 24 | 0) >> 0] | 0) & -3 | 0;
          continue label$61;
         };
        }
       }
       $876 = 0;
       HEAP32[($5_1 + 516 | 0) >> 2] = $876;
       label$62 : {
        if (!((HEAP32[($5_1 + 460 | 0) >> 2] | 0 | 0) != ($876 | 0) & 1 | 0)) {
         break label$62
        }
        HEAP32[($5_1 + 512 | 0) >> 2] = (HEAP32[($5_1 + 460 | 0) >> 2] | 0) + 4 | 0;
        label$63 : {
         label$64 : while (1) {
          $887 = HEAP32[($5_1 + 512 | 0) >> 2] | 0;
          HEAP32[($5_1 + 512 | 0) >> 2] = $887 + 4 | 0;
          $890 = HEAP32[$887 >> 2] | 0;
          HEAP32[($5_1 + 516 | 0) >> 2] = $890;
          if (!(($890 | 0) != (0 | 0) & 1 | 0)) {
           break label$63
          }
          $896 = HEAP32[($5_1 + 516 | 0) >> 2] | 0;
          HEAP8[($896 + 24 | 0) >> 0] = HEAPU8[($896 + 24 | 0) >> 0] | 0 | 1 | 0;
          continue label$64;
         };
        }
       }
       $900 = 0;
       HEAP32[($5_1 + 532 | 0) >> 2] = $900;
       label$65 : {
        if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($900 | 0) & 1 | 0)) {
         break label$65
        }
        HEAP32[($5_1 + 528 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
        label$66 : {
         label$67 : while (1) {
          $913 = HEAP32[($5_1 + 528 | 0) >> 2] | 0;
          HEAP32[($5_1 + 528 | 0) >> 2] = $913 + 4 | 0;
          $916 = HEAP32[$913 >> 2] | 0;
          HEAP32[($5_1 + 532 | 0) >> 2] = $916;
          if (!(($916 | 0) != (0 | 0) & 1 | 0)) {
           break label$66
          }
          $922 = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
          label$68 : {
           label$69 : {
            if (!((HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$69
            }
            $933 = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
            break label$68;
           }
           $933 = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          }
          label$70 : {
           if (!(($922 | 0) != ($933 | 0) & 1 | 0)) {
            break label$70
           }
           continue label$67;
          }
          $942 = 0;
          HEAP32[($5_1 + 516 | 0) >> 2] = $942;
          label$71 : {
           if (!((HEAP32[(HEAP32[($5_1 + 532 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($942 | 0) & 1 | 0)) {
            break label$71
           }
           HEAP32[($5_1 + 512 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 532 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0;
           label$72 : {
            label$73 : while (1) {
             $955 = HEAP32[($5_1 + 512 | 0) >> 2] | 0;
             HEAP32[($5_1 + 512 | 0) >> 2] = $955 + 4 | 0;
             $958 = HEAP32[$955 >> 2] | 0;
             HEAP32[($5_1 + 516 | 0) >> 2] = $958;
             if (!(($958 | 0) != (0 | 0) & 1 | 0)) {
              break label$72
             }
             label$74 : {
              if (((HEAPU8[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0) & 255 | 0) {
               break label$74
              }
              $971 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
              $973 = HEAP32[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $975 = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
              $977 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAP32[($5_1 + 188 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAP32[($5_1 + 184 | 0) >> 2] = $977;
              HEAP32[($5_1 + 180 | 0) >> 2] = $975;
              HEAP32[($5_1 + 176 | 0) >> 2] = $973;
              $396($971 | 0, 6133 | 0, 57208 | 0, $5_1 + 176 | 0 | 0);
              $382(5 | 0, HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 532 | 0) >> 2] | 0 | 0);
             }
             $987 = HEAP32[($5_1 + 516 | 0) >> 2] | 0;
             HEAP8[($987 + 24 | 0) >> 0] = HEAPU8[($987 + 24 | 0) >> 0] | 0 | 2 | 0;
             continue label$73;
            };
           }
          }
          continue label$67;
         };
        }
       }
       label$75 : {
        if (HEAP32[($5_1 + 552 | 0) >> 2] | 0) {
         break label$75
        }
        $992 = 0;
        HEAP32[($5_1 + 516 | 0) >> 2] = $992;
        label$76 : {
         if (!((HEAP32[($5_1 + 460 | 0) >> 2] | 0 | 0) != ($992 | 0) & 1 | 0)) {
          break label$76
         }
         HEAP32[($5_1 + 512 | 0) >> 2] = (HEAP32[($5_1 + 460 | 0) >> 2] | 0) + 4 | 0;
         label$77 : {
          label$78 : while (1) {
           $1003 = HEAP32[($5_1 + 512 | 0) >> 2] | 0;
           HEAP32[($5_1 + 512 | 0) >> 2] = $1003 + 4 | 0;
           $1006 = HEAP32[$1003 >> 2] | 0;
           HEAP32[($5_1 + 516 | 0) >> 2] = $1006;
           if (!(($1006 | 0) != (0 | 0) & 1 | 0)) {
            break label$77
           }
           $1014 = 1;
           label$79 : {
            if ((((HEAPU8[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> $1014 | 0) & $1014 | 0) & 255 | 0) {
             break label$79
            }
            label$80 : {
             label$81 : {
              if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
               break label$81
              }
              $1022 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
              $1024 = HEAP32[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $1026 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              $1028 = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAP32[($5_1 + 220 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
              HEAP32[($5_1 + 216 | 0) >> 2] = $1028;
              HEAP32[($5_1 + 212 | 0) >> 2] = $1026;
              HEAP32[($5_1 + 208 | 0) >> 2] = $1024;
              $396($1022 | 0, 6420 | 0, 57290 | 0, $5_1 + 208 | 0 | 0);
              label$82 : {
               if (HEAP32[(0 + 87800 | 0) >> 2] | 0) {
                break label$82
               }
               $1038 = 0;
               $383(55919 | 0, HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 544 | 0) >> 2] | 0 | 0, $1038 | 0, HEAP32[($5_1 + 516 | 0) >> 2] | 0 | 0);
               $382(7 | 0, $1038 | 0, $1038 | 0);
              }
              break label$80;
             }
             label$83 : {
              if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
               break label$83
              }
              $1052 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
              $1054 = HEAP32[((HEAP32[($5_1 + 516 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $1056 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              HEAP32[($5_1 + 196 | 0) >> 2] = $1056;
              HEAP32[($5_1 + 192 | 0) >> 2] = $1054;
              $396($1052 | 0, 4025 | 0, 57401 | 0, $5_1 + 192 | 0 | 0);
             }
            }
           }
           continue label$78;
          };
         }
        }
       }
       $348($5_1 + 460 | 0 | 0);
       continue label$57;
      };
     }
    }
    break label$53;
   }
   $1066 = 0;
   HEAP32[($5_1 + 544 | 0) >> 2] = $1066;
   label$84 : {
    if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($1066 | 0) & 1 | 0)) {
     break label$84
    }
    HEAP32[($5_1 + 540 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
    label$85 : {
     label$86 : while (1) {
      $1079 = HEAP32[($5_1 + 540 | 0) >> 2] | 0;
      HEAP32[($5_1 + 540 | 0) >> 2] = $1079 + 4 | 0;
      $1082 = HEAP32[$1079 >> 2] | 0;
      HEAP32[($5_1 + 544 | 0) >> 2] = $1082;
      if (!(($1082 | 0) != (0 | 0) & 1 | 0)) {
       break label$85
      }
      label$87 : {
       if (!(((HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
        break label$87
       }
       if (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
        break label$87
       }
       if (((HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
        break label$87
       }
       HEAP32[($5_1 + 484 | 0) >> 2] = ((HEAP32[($5_1 + 540 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + 4 | 0) | 0) >> 2 | 0;
       HEAP32[($5_1 + 480 | 0) >> 2] = $343(HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0) | 0;
       label$88 : {
        label$89 : {
         if ((HEAP32[($5_1 + 484 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
          break label$89
         }
         if ((HEAP32[($5_1 + 480 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
          break label$89
         }
         if ($340(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 484 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 480 | 0) >> 2] | 0 | 0) | 0) {
          break label$88
         }
        }
        $1142 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $1144 = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $1145 = HEAP32[($5_1 + 484 | 0) >> 2] | 0;
        $1147 = HEAP32[((HEAP32[($5_1 + 544 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 156 | 0) >> 2] = HEAP32[($5_1 + 480 | 0) >> 2] | 0;
        HEAP32[($5_1 + 152 | 0) >> 2] = $1147;
        HEAP32[($5_1 + 148 | 0) >> 2] = $1145;
        HEAP32[($5_1 + 144 | 0) >> 2] = $1144;
        $396($1142 | 0, 6135 | 0, 57527 | 0, $5_1 + 144 | 0 | 0);
        HEAP32[($5_1 + 536 | 0) >> 2] = HEAP32[($5_1 + 544 | 0) >> 2] | 0;
        HEAP32[($5_1 + 488 | 0) >> 2] = 1;
       }
      }
      continue label$86;
     };
    }
   }
  }
  label$90 : {
   if (HEAP32[($5_1 + 552 | 0) >> 2] | 0) {
    break label$90
   }
   if (!(HEAP32[(0 + 87760 | 0) >> 2] | 0)) {
    break label$90
   }
   if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
    break label$90
   }
   label$91 : {
    if ((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0) {
     break label$91
    }
    if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
     break label$90
    }
   }
   $1176 = 0;
   HEAP32[($5_1 + 532 | 0) >> 2] = $1176;
   label$92 : {
    if (!((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($1176 | 0) & 1 | 0)) {
     break label$92
    }
    HEAP32[($5_1 + 476 | 0) >> 2] = 0;
    HEAP32[($5_1 + 532 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 472 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
    label$93 : {
     label$94 : while (1) {
      if (!((HEAP32[($5_1 + 476 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 472 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$93
      }
      label$95 : {
       if ((((HEAPU8[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) >>> 3 | 0) & 1 | 0) & 255 | 0) {
        break label$95
       }
       HEAP32[($5_1 + 468 | 0) >> 2] = (HEAP32[($5_1 + 476 | 0) >> 2] | 0) + 1 | 0;
       label$96 : {
        label$97 : while (1) {
         if (!((HEAP32[($5_1 + 468 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 472 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$96
         }
         HEAP32[($5_1 + 520 | 0) >> 2] = HEAP32[(((HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 468 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
         label$98 : {
          if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 532 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 464 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(((HEAP32[(HEAP32[($5_1 + 520 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 464 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$98
          }
          label$99 : {
           if (!((HEAP32[((HEAP32[(HEAP32[($5_1 + 532 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[(HEAP32[($5_1 + 520 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$99
           }
           label$100 : {
            if (!($338(HEAP32[(HEAP32[($5_1 + 532 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 520 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
             break label$100
            }
            $1265 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $1267 = HEAP32[((HEAP32[($5_1 + 532 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
            $1269 = HEAP32[((HEAP32[($5_1 + 520 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
            HEAP32[($5_1 + 168 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($5_1 + 164 | 0) >> 2] = $1269;
            HEAP32[($5_1 + 160 | 0) >> 2] = $1267;
            $396($1265 | 0, 6294 | 0, 57623 | 0, $5_1 + 160 | 0 | 0);
            HEAP32[($5_1 + 524 | 0) >> 2] = HEAP32[($5_1 + 532 | 0) >> 2] | 0;
            HEAP32[($5_1 + 488 | 0) >> 2] = 1;
           }
          }
         }
         HEAP32[($5_1 + 468 | 0) >> 2] = (HEAP32[($5_1 + 468 | 0) >> 2] | 0) + 1 | 0;
         continue label$97;
        };
       }
      }
      $1284 = (HEAP32[((HEAP32[($5_1 + 556 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
      $1287 = (HEAP32[($5_1 + 476 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($5_1 + 476 | 0) >> 2] = $1287;
      HEAP32[($5_1 + 532 | 0) >> 2] = HEAP32[($1284 + ($1287 << 2 | 0) | 0) >> 2] | 0;
      continue label$94;
     };
    }
   }
  }
  label$101 : {
   if (!(HEAP32[($5_1 + 488 | 0) >> 2] | 0)) {
    break label$101
   }
   $383(55919 | 0, HEAP32[($5_1 + 556 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 536 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 524 | 0) >> 2] | 0 | 0, 0 | 0);
   HEAP32[(HEAP32[($5_1 + 548 | 0) >> 2] | 0) >> 2] = 1;
  }
  global$0 = $5_1 + 560 | 0;
  return;
 }
 
 function $283($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $117_1 = 0, $7_1 = 0, $80_1 = 0, $93_1 = 0, $96_1 = 0, $17_1 = 0, $35_1 = 0, $37_1 = 0, $55_1 = 0, $57_1 = 0, $59_1 = 0, $107_1 = 0, $109_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  $7_1 = 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $7_1;
  label$1 : {
   if (!(($267(HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   $396($17_1 | 0, 6144 | 0, 61302 | 0, $5_1 + 48 | 0 | 0);
   HEAP32[($5_1 + 64 | 0) >> 2] = 1;
  }
  label$2 : {
   if (!((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 90084 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $35_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $37_1 = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[(0 + 90084 | 0) >> 2] | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = $37_1;
   $396($35_1 | 0, 6145 | 0, 61362 | 0, $5_1 + 32 | 0 | 0);
   HEAP32[($5_1 + 64 | 0) >> 2] = 1;
  }
  label$3 : {
   if (!((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[(0 + 90260 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $55_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $57_1 = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $59_1 = HEAP32[(0 + 90260 | 0) >> 2] | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = $59_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $57_1;
   $396($55_1 | 0, 6413 | 0, 61445 | 0, $5_1 + 16 | 0 | 0);
   HEAP32[($5_1 + 64 | 0) >> 2] = 1;
  }
  label$4 : {
   if (!(HEAP32[($5_1 + 72 | 0) >> 2] | 0)) {
    break label$4
   }
   if (HEAP32[($5_1 + 64 | 0) >> 2] | 0) {
    break label$4
   }
   if ((((HEAPU8[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0) {
    break label$4
   }
   label$5 : {
    if (!($337(HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0)) {
     break label$5
    }
    $80_1 = 0;
    HEAP32[($5_1 + 60 | 0) >> 2] = $80_1;
    label$6 : {
     if (!((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($80_1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
     label$7 : {
      label$8 : while (1) {
       $93_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
       HEAP32[($5_1 + 56 | 0) >> 2] = $93_1 + 4 | 0;
       $96_1 = HEAP32[$93_1 >> 2] | 0;
       HEAP32[($5_1 + 60 | 0) >> 2] = $96_1;
       if (!(($96_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$7
       }
       label$9 : {
        if ($342(HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0) {
         break label$9
        }
        $107_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $109_1 = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        HEAP32[$5_1 >> 2] = $109_1;
        $396($107_1 | 0, 6146 | 0, 61548 | 0, $5_1 | 0);
        HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
        HEAP32[($5_1 + 64 | 0) >> 2] = 1;
       }
       continue label$8;
      };
     }
    }
   }
  }
  label$10 : {
   if (!(HEAP32[($5_1 + 64 | 0) >> 2] | 0)) {
    break label$10
   }
   $117_1 = 0;
   $383(55919 | 0, $117_1 | 0, $117_1 | 0, $117_1 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0);
   label$11 : {
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != ($117_1 | 0) & 1 | 0)) {
     break label$11
    }
    $382(5 | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, 0 | 0);
   }
   HEAP32[(HEAP32[($5_1 + 68 | 0) >> 2] | 0) >> 2] = 1;
  }
  global$0 = $5_1 + 80 | 0;
  return;
 }
 
 function $284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $25_1 = 0, $72_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $323((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0 | 0) | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
  label$1 : while (1) {
   $25_1 = 0;
   label$2 : {
    if (!((HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $25_1 = (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($25_1 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (!((HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      $325($4_1 + 20 | 0 | 0, HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0);
      HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      break label$4;
     }
     label$6 : {
      label$7 : {
       if (!((HEAP32[((HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 > (HEAP32[((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$7
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 4 | 0;
       break label$6;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
     }
    }
    continue label$1;
   }
   break label$1;
  };
  $72_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $72_1 | 0;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0, $95_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$2 : while (1) {
    $22_1 = 0;
    label$3 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $22_1 = (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$4 : {
     if (!($22_1 & 1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
        break label$6
       }
       if (((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 28 | 0) & 1 | 0) {
        break label$6
       }
       HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$8
        }
        label$9 : {
         if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$9
         }
         $158(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89992 | 0) >> 2] | 0 | 0);
         HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
        }
        break label$7;
       }
       label$10 : {
        if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$10
        }
        $158(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0);
        HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
       }
      }
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[(0 + 90104 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  label$11 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$11
   }
   $95_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $396($95_1 | 0, 2043 | 0, 61622 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $37_1 = 0, $47_1 = 0, $63_1 = 0, $78_1 = 0, $88_1 = 0, $106_1 = 0, $128_1 = 0, $34_1 = 0, $60_1 = 0, $123_1 = 0, $127_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $347((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $337(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = $259() | 0;
     $34_1 = $345(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 52 | 0) >> 2] = $34_1;
     label$4 : {
      if (!(HEAP32[($3_1 + 32 | 0) >> 2] | 0)) {
       break label$4
      }
      $37_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
      HEAP32[($37_1 + 80 | 0) >> 2] = (HEAP32[($37_1 + 80 | 0) >> 2] | 0) & -4097 | 0 | 4096 | 0;
     }
     $247(HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0);
     $47_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
     HEAP32[($47_1 + 80 | 0) >> 2] = (HEAP32[($47_1 + 80 | 0) >> 2] | 0) & -1025 | 0 | 1024 | 0;
     $248(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
     $325($3_1 + 16 | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) ^ 1 | 0;
     $60_1 = (HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 4 | 0;
     $63_1 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $63_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($60_1 + ($63_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$5 : while (1) {
   $78_1 = 0;
   label$6 : {
    if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    $78_1 = (HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$7 : {
    if (!($78_1 & 1 | 0)) {
     break label$7
    }
    $88_1 = 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $88_1;
    label$8 : {
     if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != ($88_1 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
     label$9 : while (1) {
      $106_1 = 0;
      label$10 : {
       if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       $106_1 = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$11 : {
       if (!($106_1 & 1 | 0)) {
        break label$11
       }
       label$12 : {
        if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        $123_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
        $127_1 = (HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
        $128_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = $128_1 + 1 | 0;
        HEAP32[($127_1 + ($128_1 << 2 | 0) | 0) >> 2] = $123_1;
       }
       HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       continue label$9;
      }
      break label$9;
     };
    }
    $331(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$5;
   }
   break label$5;
  };
  $348($3_1 + 16 | 0 | 0);
  label$13 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$13
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1028 | 0, 61667 | 0, 0 | 0);
  }
  global$0 = $3_1 + 48 | 0;
  return;
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90036 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 90036 | 0) >> 2] = 0;
  }
  $324(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $158(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 20 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $288($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
    break label$1
   }
   if ((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 5 | 0) & 1 | 0) & 255 | 0) {
    break label$1
   }
   if (HEAP32[(0 + 90192 | 0) >> 2] | 0) {
    break label$1
   }
   $23_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $396($23_1 | 0, 6395 | 0, 61702 | 0, $3_1 | 0);
   $29_1 = 0;
   $382(5 | 0, $29_1 | 0, $29_1 | 0);
  }
  label$2 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90044 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[(0 + 90044 | 0) >> 2] = 0;
  }
  $258(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $324((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0);
  $158(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 28 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $68_1 = 0, $75_1 = 0, $87_1 = 0, $24_1 = 0, $25_1 = 0, $116_1 = 0, $118_1 = 0, $127_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $347(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
      break label$3
     }
     $24_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $25_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $25_1;
     $396($24_1 | 0, 6147 | 0, 61810 | 0, $3_1 | 0);
     $382(5 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    $325($3_1 + 36 | 0 | 0, HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    label$4 : {
     label$5 : {
      if (!((((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 0 | 0)) {
       break label$5
      }
      $325($3_1 + 36 | 0 | 0, HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
      break label$4;
     }
     $319($3_1 + 36 | 0 | 0, 0 | 0, HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    }
    $325($3_1 + 36 | 0 | 0, HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $68_1 = HEAP32[((HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = $68_1;
   HEAP32[($3_1 + 56 | 0) >> 2] = $68_1;
   label$6 : {
    label$7 : while (1) {
     $75_1 = $290(HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 48 | 0 | 0) | 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = $75_1;
     if (!(($75_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $325($3_1 + 36 | 0 | 0, HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0);
     $87_1 = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 40 | 0) >> 2] = $87_1;
     label$8 : {
      label$9 : {
       if (($87_1 | 0) > (HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$9
       }
       if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$8
       }
      }
      break label$6;
     }
     continue label$7;
    };
   }
   label$10 : {
    label$11 : {
     if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
    }
    $116_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $118_1 = HEAP32[((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = $118_1;
    $396($116_1 | 0, 6148 | 0, 61893 | 0, $3_1 + 16 | 0 | 0);
    $382(5 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0);
   }
  }
  $127_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  global$0 = $3_1 + 64 | 0;
  return $127_1 | 0;
 }
 
 function $290($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $22_1 = 0, $35_1 = 0, $38_1 = 0;
  $5_1 = global$0 - 48 | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0) ^ 0 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  }
  $22_1 = 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $22_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != ($22_1 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0;
    label$5 : {
     label$6 : while (1) {
      $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $35_1 + 4 | 0;
      $38_1 = HEAP32[$35_1 >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = $38_1;
      if (!(($38_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      label$7 : {
       if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       continue label$6;
      }
      label$8 : {
       label$9 : {
        if (!(((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0) ^ 0 | 0)) {
         break label$9
        }
        HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        break label$8;
       }
       HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      }
      label$10 : {
       if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       label$11 : {
        if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       break label$3;
      }
      continue label$6;
     };
    }
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  return HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0;
 }
 
 function $291($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $21_1 = 0, $104_1 = 0, $92_1 = 0, $94_1 = 0, $95_1 = 0, $128_1 = 0.0, $109_1 = 0, $119_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $8_1;
  HEAPF64[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$1 : while (1) {
   $21_1 = 0;
   label$2 : {
    if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $21_1 = (HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($21_1 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      label$6 : {
       if (((HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
        break label$6
       }
       if (!((HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       if (!(((HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$5
       }
      }
      break label$4;
     }
     label$7 : {
      if (!(HEAP32[($7_1 + 72 | 0) >> 2] | 0)) {
       break label$7
      }
      if (!(((HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0)) {
       break label$7
      }
      break label$4;
     }
     HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     $4(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, $7_1 + 40 | 0 | 0);
     label$8 : {
      if (!(+HEAPF64[($7_1 + 40 | 0) >> 3] > +HEAPF64[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      HEAPF64[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 3] = +HEAPF64[($7_1 + 40 | 0) >> 3];
      HEAP32[($7_1 + 56 | 0) >> 2] = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
      label$9 : {
       if (!(+HEAPF64[($7_1 + 40 | 0) >> 3] > +HEAPF64[(0 + 87728 | 0) >> 3] & 1 | 0)) {
        break label$9
       }
       HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = 1;
       break label$3;
      }
     }
    }
    HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  HEAP32[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  label$10 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$10
   }
   $92_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $94_1 = $267(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) | 0;
   $95_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
   label$11 : {
    label$12 : {
     if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
     $104_1 = HEAP32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$11;
    }
    $104_1 = -1;
   }
   $128_1 = +HEAPF64[(HEAP32[($7_1 + 68 | 0) >> 2] | 0) >> 3];
   $109_1 = HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
   HEAP32[($7_1 + 24 | 0) >> 2] = $109_1;
   HEAPF64[($7_1 + 16 | 0) >> 3] = $128_1;
   HEAP32[($7_1 + 8 | 0) >> 2] = $104_1;
   HEAP32[($7_1 + 4 | 0) >> 2] = $95_1;
   HEAP32[$7_1 >> 2] = $94_1;
   $396($92_1 | 0, 3016 | 0, 62128 | 0, $7_1 | 0);
  }
  $119_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
  global$0 = $7_1 + 80 | 0;
  return $119_1 | 0;
 }
 
 function $292($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $25_1 = 0, $28_1 = 0, $49_1 = 0, $66_1 = 0, $90_1 = 0, $93_1 = 0, $114_1 = 0, $157_1 = 0, $184_1 = 0, $186_1 = 0, $208_1 = 0.0, $188_1 = 0, $197_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $7_1;
  HEAPF64[($6_1 + 56 | 0) >> 3] = -8988465674311578540726371.0e283;
  HEAP32[($6_1 + 40 | 0) >> 2] = $7_1;
  HEAP32[(0 + 90664 | 0) >> 2] = (HEAP32[(0 + 90664 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($6_1 + 76 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $25_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
     HEAP32[($6_1 + 72 | 0) >> 2] = $25_1 + 4 | 0;
     $28_1 = HEAP32[$25_1 >> 2] | 0;
     HEAP32[($6_1 + 76 | 0) >> 2] = $28_1;
     if (!(($28_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (((HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0) {
        break label$5
       }
       if (!(((HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
        break label$4
       }
      }
      continue label$3;
     }
     $49_1 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
     HEAP32[$49_1 >> 2] = (HEAP32[$49_1 >> 2] | 0) + 1 | 0;
     $4(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0);
     label$6 : {
      if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] > +HEAPF64[($6_1 + 56 | 0) >> 3] & 1 | 0)) {
       break label$6
      }
      HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
      HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 48 | 0) >> 3];
     }
     continue label$3;
    };
   }
  }
  label$7 : {
   if ((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$7
   }
   $66_1 = 0;
   HEAP32[(0 + 90688 | 0) >> 2] = (HEAP32[(0 + 90688 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($6_1 + 44 | 0) >> 2] = $293(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
   $294();
   HEAP32[($6_1 + 76 | 0) >> 2] = $66_1;
   label$8 : {
    if (!((HEAP32[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($66_1 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
    label$9 : {
     label$10 : while (1) {
      $90_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
      HEAP32[($6_1 + 72 | 0) >> 2] = $90_1 + 4 | 0;
      $93_1 = HEAP32[$90_1 >> 2] | 0;
      HEAP32[($6_1 + 76 | 0) >> 2] = $93_1;
      if (!(($93_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      label$11 : {
       label$12 : {
        if (((HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0) {
         break label$12
        }
        if (!(((HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
         break label$11
        }
       }
       continue label$10;
      }
      $114_1 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      HEAP32[$114_1 >> 2] = (HEAP32[$114_1 >> 2] | 0) + 1 | 0;
      $4(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0);
      label$13 : {
       if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] > +HEAPF64[($6_1 + 56 | 0) >> 3] & 1 | 0)) {
        break label$13
       }
       HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
       HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 48 | 0) >> 3];
      }
      continue label$10;
     };
    }
   }
  }
  label$14 : {
   if ((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$14
   }
   HEAP32[(0 + 90672 | 0) >> 2] = (HEAP32[(0 + 90672 | 0) >> 2] | 0) + 1 | 0;
   label$15 : {
    if (!((HEAP32[(0 + 90680 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 90060 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAP32[(0 + 90680 | 0) >> 2] = HEAP32[(0 + 90060 | 0) >> 2] | 0;
   }
   label$16 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$16
    }
    $157_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($157_1 | 0, 3025 | 0, 61987 | 0, $6_1 + 32 | 0 | 0);
   }
   HEAP32[($6_1 + 68 | 0) >> 2] = $291(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, 1 | 0, $6_1 + 56 | 0 | 0, $6_1 + 40 | 0 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAPF64[(HEAP32[($6_1 + 84 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
  label$17 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$17
   }
   $184_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $186_1 = HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $208_1 = +HEAPF64[($6_1 + 56 | 0) >> 3];
   $188_1 = HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = $267(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $188_1;
   HEAPF64[($6_1 + 8 | 0) >> 3] = $208_1;
   HEAP32[$6_1 >> 2] = $186_1;
   $396($184_1 | 0, 3015 | 0, 62082 | 0, $6_1 | 0);
  }
  $197_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
  global$0 = $6_1 + 96 | 0;
  return $197_1 | 0;
 }
 
 function $293($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $38_1 = 0, $59_1 = 0, $62_1 = 0, $76_1 = 0, $89_1 = 0, $92_1 = 0, $104_1 = 0, $115_1 = 0, $118_1 = 0, $152_1 = 0, $154_1 = 0, $173_1 = 0, $175_1 = 0, $197_1 = 0.0, $178_1 = 0, $187_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 100 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 88 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[($5_1 + 76 | 0) >> 2] = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + -1 | 0;
  }
  label$2 : {
   label$3 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
       break label$5
      }
      if ((HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$4
      }
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6158 | 0, 66633 | 0, 0 | 0);
     $382(5 | 0, HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    $38_1 = 0;
    HEAP32[($5_1 + 48 | 0) >> 2] = $347(HEAP32[(0 + 89996 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    HEAP32[($5_1 + 56 | 0) >> 2] = $38_1;
    label$6 : {
     if (!((HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($38_1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
     label$7 : {
      label$8 : while (1) {
       $59_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
       HEAP32[($5_1 + 52 | 0) >> 2] = $59_1 + 4 | 0;
       $62_1 = HEAP32[$59_1 >> 2] | 0;
       HEAP32[($5_1 + 56 | 0) >> 2] = $62_1;
       if (!(($62_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$7
       }
       label$9 : {
        if (!((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
        $76_1 = 0;
        HEAP32[($5_1 + 72 | 0) >> 2] = $76_1;
        label$10 : {
         if (!((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($76_1 | 0) & 1 | 0)) {
          break label$10
         }
         HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
         label$11 : {
          label$12 : while (1) {
           $89_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
           HEAP32[($5_1 + 68 | 0) >> 2] = $89_1 + 4 | 0;
           $92_1 = HEAP32[$89_1 >> 2] | 0;
           HEAP32[($5_1 + 72 | 0) >> 2] = $92_1;
           if (!(($92_1 | 0) != (0 | 0) & 1 | 0)) {
            break label$11
           }
           $325($5_1 + 48 | 0 | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
           continue label$12;
          };
         }
        }
       }
       continue label$8;
      };
     }
    }
    break label$2;
   }
   HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
  }
  $104_1 = 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = $104_1;
  label$13 : {
   if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) != ($104_1 | 0) & 1 | 0)) {
    break label$13
   }
   HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 4 | 0;
   label$14 : {
    label$15 : while (1) {
     $115_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
     HEAP32[($5_1 + 68 | 0) >> 2] = $115_1 + 4 | 0;
     $118_1 = HEAP32[$115_1 >> 2] | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = $118_1;
     if (!(($118_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAPF64[($5_1 + 80 | 0) >> 3] = +$37(HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, 0 - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0 | 0);
     label$16 : {
      if (!(+HEAPF64[($5_1 + 80 | 0) >> 3] < +HEAPF64[($5_1 + 88 | 0) >> 3] & 1 | 0)) {
       break label$16
      }
      HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[($5_1 + 80 | 0) >> 3];
      HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
     }
     continue label$15;
    };
   }
  }
  label$17 : {
   if (!(((HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
    break label$17
   }
   $348($5_1 + 48 | 0 | 0);
  }
  HEAPF64[(HEAP32[($5_1 + 100 | 0) >> 2] | 0) >> 3] = Math_sqrt(+HEAPF64[($5_1 + 88 | 0) >> 3]);
  label$18 : {
   if ((HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$18
   }
   $152_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $154_1 = HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 36 | 0) >> 2] = $267(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = $154_1;
   $396($152_1 | 0, 6261 | 0, 66741 | 0, $5_1 + 32 | 0 | 0);
   $382(5 | 0, HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$19 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$19
   }
   $173_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $175_1 = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $197_1 = +HEAPF64[(HEAP32[($5_1 + 100 | 0) >> 2] | 0) >> 3];
   $178_1 = HEAP32[((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = $267(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $178_1;
   HEAPF64[($5_1 + 8 | 0) >> 3] = $197_1;
   HEAP32[$5_1 >> 2] = $175_1;
   $396($173_1 | 0, 3019 | 0, 66816 | 0, $5_1 | 0);
  }
  $187_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
  global$0 = $5_1 + 112 | 0;
  return $187_1 | 0;
 }
 
 function $294() {
  var $2_1 = 0, $33_1 = 0, $49_1 = 0, $62_1 = 0, $65_1 = 0, $85_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 89388 | 0) >> 2] | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$3
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1035 | 0, 69374 | 0, 0 | 0);
   }
   HEAP32[(0 + 90260 | 0) >> 2] = (HEAP32[(0 + 90260 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$4 : while (1) {
    $33_1 = 0;
    label$5 : {
     if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $33_1 = (HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$6 : {
     if (!($33_1 & 1 | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$8
       }
       break label$7;
      }
      $49_1 = 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = $49_1;
      label$9 : {
       if (!((HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($49_1 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$10 : {
        label$11 : while (1) {
         $62_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         HEAP32[($2_1 + 4 | 0) >> 2] = $62_1 + 4 | 0;
         $65_1 = HEAP32[$62_1 >> 2] | 0;
         HEAP32[($2_1 + 8 | 0) >> 2] = $65_1;
         if (!(($65_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$10
         }
         label$12 : {
          if (!((HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$12
          }
          HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 90260 | 0) >> 2] | 0;
          $85_1 = $323(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] = $85_1;
         }
         $325((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
         continue label$11;
        };
       }
      }
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$4;
    }
    break label$4;
   };
   HEAP32[(0 + 89388 | 0) >> 2] = 1;
  }
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0, $68_1 = 0, $95_1 = 0, $123_1 = 0, $147_1 = 0, $170_1 = 0, $207_1 = 0, $237_1 = 0, $312_1 = 0, $319_1 = 0, $352_1 = 0, $385_1 = 0, $336_1 = 0, $338_1 = 0, $372_1 = 0, $373_1 = 0, $374_1 = 0, $405_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $5_1;
  HEAPF64[($4_1 + 40 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
   label$2 : while (1) {
    $21_1 = 0;
    label$3 : {
     if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $21_1 = (HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$4 : {
     if (!($21_1 & 1 | 0)) {
      break label$4
     }
     label$5 : {
      if (!(((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
  }
  label$6 : {
   if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$6
   }
   if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
    break label$6
   }
   label$7 : {
    if (!((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
    label$8 : while (1) {
     $68_1 = 0;
     label$9 : {
      if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      $68_1 = (HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$10 : {
      if (!($68_1 & 1 | 0)) {
       break label$10
      }
      label$11 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
        break label$11
       }
       if (($296(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$11
       }
       $95_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
       HEAP32[($95_1 + 80 | 0) >> 2] = (HEAP32[($95_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
       HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + -1 | 0;
      }
      HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$8;
     }
     break label$8;
    };
   }
  }
  label$12 : {
   if (!(HEAP32[(0 + 87804 | 0) >> 2] | 0)) {
    break label$12
   }
   if (!(HEAP32[($4_1 + 28 | 0) >> 2] | 0)) {
    break label$12
   }
   label$13 : {
    if (!((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
    label$14 : while (1) {
     $123_1 = 0;
     label$15 : {
      if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$15
      }
      $123_1 = (HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$16 : {
      if (!($123_1 & 1 | 0)) {
       break label$16
      }
      label$17 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
        break label$17
       }
       if (!((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$17
       }
       $147_1 = 0;
       HEAP32[(0 + 91e3 | 0) >> 2] = (HEAP32[(0 + 91e3 | 0) >> 2] | 0) + 1 | 0;
       $4(HEAP32[(0 + 87808 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, $4_1 + 32 | 0 | 0);
       label$18 : {
        if (!(((HEAP32[(0 + 87804 | 0) >> 2] | 0 | 0) > ($147_1 | 0) & 1 | 0) ^ (+HEAPF64[($4_1 + 32 | 0) >> 3] > +($147_1 | 0) & 1 | 0) | 0)) {
         break label$18
        }
        $170_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
        HEAP32[($170_1 + 80 | 0) >> 2] = (HEAP32[($170_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + -1 | 0;
       }
      }
      HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$14;
     }
     break label$14;
    };
   }
  }
  label$19 : {
   label$20 : {
    if (!(HEAP32[(0 + 87812 | 0) >> 2] | 0)) {
     break label$20
    }
    label$21 : {
     if (HEAP32[($4_1 + 28 | 0) >> 2] | 0) {
      break label$21
     }
     if (HEAP32[($4_1 + 68 | 0) >> 2] | 0) {
      break label$21
     }
     if (!((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$20
     }
    }
    label$22 : {
     if (!((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$22
     }
     HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
     label$23 : while (1) {
      $207_1 = 0;
      label$24 : {
       if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$24
       }
       $207_1 = (HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$25 : {
       if (!($207_1 & 1 | 0)) {
        break label$25
       }
       label$26 : {
        if (!(((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
         break label$26
        }
        if (!((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$26
        }
        label$27 : {
         if ($42(HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, $4_1 + 48 | 0 | 0) | 0) {
          break label$27
         }
         $237_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
         HEAP32[($237_1 + 80 | 0) >> 2] = (HEAP32[($237_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + -1 | 0;
         label$28 : {
          if (!(+HEAPF64[($4_1 + 48 | 0) >> 3] < +HEAPF64[($4_1 + 40 | 0) >> 3] & 1 | 0)) {
           break label$28
          }
          HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 48 | 0) >> 3];
          HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
         }
        }
       }
       HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       continue label$23;
      }
      break label$23;
     };
    }
    label$29 : {
     label$30 : {
      if (HEAP32[($4_1 + 28 | 0) >> 2] | 0) {
       break label$30
      }
      label$31 : {
       if (!(HEAP32[($4_1 + 68 | 0) >> 2] | 0)) {
        break label$31
       }
       if (!((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$30
       }
      }
      label$32 : {
       if (!((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$32
       }
       label$33 : {
        label$34 : {
         if (!(((HEAP32[((HEAP32[(0 + 90116 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
          break label$34
         }
         HEAP32[(0 + 90116 | 0) >> 2] = 0;
         break label$33;
        }
        $42(HEAP32[((HEAP32[(0 + 90116 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, $4_1 + 48 | 0 | 0) | 0;
        label$35 : {
         if (!(+HEAPF64[($4_1 + 48 | 0) >> 3] < +HEAPF64[($4_1 + 40 | 0) >> 3] & 1 | 0)) {
          break label$35
         }
         HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[(0 + 90116 | 0) >> 2] | 0;
        }
       }
      }
      label$36 : {
       if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$36
       }
       if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$36
       }
       label$37 : {
        if (!((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$37
        }
        $312_1 = HEAP32[(0 + 90116 | 0) >> 2] | 0;
        HEAP32[($312_1 + 80 | 0) >> 2] = (HEAP32[($312_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
       }
       HEAP32[(0 + 90116 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
       $319_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
       HEAP32[($319_1 + 80 | 0) >> 2] = (HEAP32[($319_1 + 80 | 0) >> 2] | 0) & -524289 | 0 | 524288 | 0;
       HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       label$38 : {
        if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$38
        }
        $336_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $338_1 = HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3];
        HEAP32[$4_1 >> 2] = $338_1;
        $396($336_1 | 0, 2044 | 0, 62207 | 0, $4_1 | 0);
       }
       HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
       break label$19;
      }
      break label$29;
     }
     label$39 : {
      if (!((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$39
      }
      $352_1 = HEAP32[(0 + 90116 | 0) >> 2] | 0;
      HEAP32[($352_1 + 80 | 0) >> 2] = (HEAP32[($352_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
      HEAP32[(0 + 90116 | 0) >> 2] = 0;
     }
    }
   }
   HEAP32[(0 + 91368 | 0) >> 2] = (HEAP32[(0 + 91368 | 0) >> 2] | 0) + (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0;
   label$40 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$40
    }
    $372_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $373_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    $374_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
    label$41 : {
     label$42 : {
      if (!((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$42
      }
      $385_1 = HEAP32[((HEAP32[(0 + 90116 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$41;
     }
     $385_1 = -1;
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = $385_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = $374_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $373_1;
    $396($372_1 | 0, 2045 | 0, 62257 | 0, $4_1 + 16 | 0 | 0);
   }
   label$43 : {
    if (HEAP32[($4_1 + 28 | 0) >> 2] | 0) {
     break label$43
    }
    if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$43
    }
    if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
     break label$43
    }
    HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
    break label$19;
   }
   HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  $405_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  global$0 = $4_1 + 80 | 0;
  return $405_1 | 0;
 }
 
 function $296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 32 | 0;
  $5_1 = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0;
    label$3 : {
     label$4 : while (1) {
      $16_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = $16_1 + 4 | 0;
      $19_1 = HEAP32[$16_1 >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = $19_1;
      if (!(($19_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       break label$1;
      }
      continue label$4;
     };
    }
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $297($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $34_1 = 0, $89_1 = 0, $105_1 = 0, $130_1 = 0, $164_1 = 0, $181_1 = 0, $206_1 = 0, $228_1 = 0, $249_1 = 0, $311_1 = 0, $134_1 = 0, $137_1 = 0, $151_1 = 0, $155_1 = 0, $166_1 = 0, $171_1 = 0, $261_1 = 0, $263_1 = 0, $301_1 = 0, $320_1 = 0, $321_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 132 | 0) >> 2] = $4_1;
  HEAPF64[($3_1 + 112 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[($3_1 + 108 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (HEAP32[(0 + 87816 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[(0 + 87812 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[(0 + 87804 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[(0 + 88208 | 0) >> 2] | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (HEAP32[(0 + 87932 | 0) >> 2] | 0) {
     break label$3
    }
    $295(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   }
   label$4 : {
    if (!((HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
    label$5 : while (1) {
     $34_1 = 0;
     label$6 : {
      if (!((HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      $34_1 = (HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$7 : {
      if (!($34_1 & 1 | 0)) {
       break label$7
      }
      label$8 : {
       if (!(((HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[($3_1 + 108 | 0) >> 2] = (HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$5;
     }
     break label$5;
    };
   }
   label$9 : {
    label$10 : {
     if ((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$10
     }
     if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$9
     }
     if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
      break label$9
     }
    }
    label$11 : {
     if (!((HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
     label$12 : while (1) {
      $89_1 = 0;
      label$13 : {
       if (!((HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       $89_1 = (HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$14 : {
       if (!($89_1 & 1 | 0)) {
        break label$14
       }
       label$15 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
         break label$15
        }
        $105_1 = 0;
        if (!(((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > ($105_1 | 0) & 1 | 0) ^ (((($296(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0 | 0) != ($105_1 | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0) | 0)) {
         break label$15
        }
        $130_1 = (HEAP32[($3_1 + 108 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($3_1 + 108 | 0) >> 2] = $130_1;
        label$16 : {
         if ($130_1) {
          break label$16
         }
         label$17 : {
          if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
           break label$17
          }
          $134_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $137_1 = $267(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          HEAP32[$3_1 >> 2] = $137_1;
          $396($134_1 | 0, 7064 | 0, 62336 | 0, $3_1 | 0);
          break label$1;
         }
         label$18 : {
          label$19 : {
           if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
            break label$19
           }
           $151_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
           $155_1 = (HEAP32[(0 + 87816 | 0) >> 2] | 0) - 1 | 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[(0 + 87816 | 0) >> 2] | 0) - 1 | 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = $155_1;
           $396($151_1 | 0, 7065 | 0, 62414 | 0, $3_1 + 16 | 0 | 0);
           break label$18;
          }
          $164_1 = 0;
          $166_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          $171_1 = ($164_1 - (HEAP32[(0 + 87816 | 0) >> 2] | 0) | 0) - 1 | 0;
          HEAP32[($3_1 + 36 | 0) >> 2] = ($164_1 - (HEAP32[(0 + 87816 | 0) >> 2] | 0) | 0) - 1 | 0;
          HEAP32[($3_1 + 32 | 0) >> 2] = $171_1;
          $396($166_1 | 0, 7066 | 0, 62465 | 0, $3_1 + 32 | 0 | 0);
         }
        }
        $181_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
        HEAP32[($181_1 + 80 | 0) >> 2] = (HEAP32[($181_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
       }
       HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       continue label$12;
      }
      break label$12;
     };
    }
   }
   HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
   label$20 : {
    if (!(HEAP32[(0 + 88208 | 0) >> 2] | 0)) {
     break label$20
    }
    label$21 : {
     if (!((HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$21
     }
     HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
     label$22 : while (1) {
      $206_1 = 0;
      label$23 : {
       if (!((HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$23
       }
       $206_1 = (HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$24 : {
       if (!($206_1 & 1 | 0)) {
        break label$24
       }
       label$25 : {
        if (!(((HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
         break label$25
        }
        label$26 : {
         if ($42(HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, $3_1 + 120 | 0 | 0) | 0) {
          break label$26
         }
         $228_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
         HEAP32[($228_1 + 80 | 0) >> 2] = (HEAP32[($228_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
         HEAP32[($3_1 + 108 | 0) >> 2] = (HEAP32[($3_1 + 108 | 0) >> 2] | 0) + -1 | 0;
         label$27 : {
          if (!(+HEAPF64[($3_1 + 120 | 0) >> 3] < +HEAPF64[($3_1 + 112 | 0) >> 3] & 1 | 0)) {
           break label$27
          }
          HEAPF64[($3_1 + 112 | 0) >> 3] = +HEAPF64[($3_1 + 120 | 0) >> 3];
          HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
         }
        }
       }
       HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       continue label$22;
      }
      break label$22;
     };
    }
    label$28 : {
     if (HEAP32[($3_1 + 108 | 0) >> 2] | 0) {
      break label$28
     }
     if (!((HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$28
     }
     $249_1 = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
     HEAP32[($249_1 + 80 | 0) >> 2] = (HEAP32[($249_1 + 80 | 0) >> 2] | 0) & -524289 | 0 | 524288 | 0;
     HEAP32[($3_1 + 108 | 0) >> 2] = (HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 1 | 0;
     label$29 : {
      if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
       break label$29
      }
      $261_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $263_1 = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      HEAPF64[($3_1 + 88 | 0) >> 3] = +HEAPF64[($3_1 + 112 | 0) >> 3];
      HEAP32[($3_1 + 80 | 0) >> 2] = $263_1;
      $396($261_1 | 0, 23 | 0, 62529 | 0, $3_1 + 80 | 0 | 0);
     }
     break label$1;
    }
   }
   label$30 : {
    if (!((HEAP32[($3_1 + 108 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$30
    }
    if (HEAP32[(0 + 87968 | 0) >> 2] | 0) {
     break label$30
    }
    if (!((HEAP32[(0 + 90116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$30
    }
    if (!(((HEAP32[((HEAP32[(0 + 90116 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0)) {
     break label$30
    }
    label$31 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$31
     }
     $301_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90116 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $396($301_1 | 0, 2109 | 0, 62589 | 0, $3_1 + 64 | 0 | 0);
    }
    $311_1 = HEAP32[(0 + 90116 | 0) >> 2] | 0;
    HEAP32[($311_1 + 80 | 0) >> 2] = (HEAP32[($311_1 + 80 | 0) >> 2] | 0) & -524289 | 0;
    HEAP32[($3_1 + 108 | 0) >> 2] = 0;
   }
   HEAP32[(0 + 90072 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
   if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
    break label$1
   }
   $320_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $321_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $321_1;
   $396($320_1 | 0, 24 | 0, 62696 | 0, $3_1 + 48 | 0 | 0);
  }
  global$0 = $3_1 + 144 | 0;
  return;
 }
 
 function $298() {
  var $2_1 = 0, $14_1 = 0, $60_1 = 0, $62_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 40 | 0) >> 2] = 0;
  HEAPF64[($2_1 + 24 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$1 : while (1) {
   $14_1 = 0;
   label$2 : {
    if (!((HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = (HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($14_1 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     if (!((HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($2_1 + 32 | 0) >> 3] = +HEAPF64[(HEAP32[($2_1 + 44 | 0) >> 2] | 0) >> 3];
     label$5 : {
      if (!(+HEAPF64[($2_1 + 32 | 0) >> 3] > +HEAPF64[($2_1 + 24 | 0) >> 3] & 1 | 0)) {
       break label$5
      }
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
      HEAPF64[($2_1 + 24 | 0) >> 3] = +HEAPF64[($2_1 + 32 | 0) >> 3];
     }
    }
    HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  label$6 : {
   if (!((HEAP32[($2_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   $252(HEAP32[($2_1 + 40 | 0) >> 2] | 0 | 0);
   $299(HEAP32[($2_1 + 40 | 0) >> 2] | 0 | 0, 87704 + 2304 | 0 | 0);
   label$7 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$7
    }
    $60_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $62_1 = HEAP32[((HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAPF64[($2_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 24 | 0) >> 3];
    HEAP32[$2_1 >> 2] = $62_1;
    $396($60_1 | 0, 1029 | 0, 62753 | 0, $2_1 | 0);
   }
  }
  global$0 = $2_1 + 48 | 0;
  return;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $28_1 = 0, $15_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $17_1 = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $28_1 = HEAP32[((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$2;
    }
    $28_1 = -1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $28_1;
   HEAP32[$4_1 >> 2] = $17_1;
   $396($15_1 | 0, 4061 | 0, 67298 | 0, $4_1 | 0);
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 90004 | 0) >> 2] | 0;
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  label$5 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  label$6 : {
   if (!((HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[(0 + 9e4 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  label$7 : {
   if (!((HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[(0 + 90060 | 0) >> 2] = (HEAP32[(0 + 90060 | 0) >> 2] | 0) + 1 | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0, $20_1 = 0, $56_1 = 0, $68_1 = 0, $70_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[($3_1 + 40 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $17_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
     HEAP32[($3_1 + 36 | 0) >> 2] = $17_1 + 4 | 0;
     $20_1 = HEAP32[$17_1 >> 2] | 0;
     HEAP32[($3_1 + 40 | 0) >> 2] = $20_1;
     if (!(($20_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $4(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, $3_1 + 24 | 0 | 0);
     HEAP32[(0 + 90712 | 0) >> 2] = (HEAP32[(0 + 90712 | 0) >> 2] | 0) + 1 | 0;
     label$4 : {
      if (!(+HEAPF64[($3_1 + 24 | 0) >> 3] > +HEAPF64[($3_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
      HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3];
     }
     continue label$3;
    };
   }
  }
  label$5 : {
   if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   $332(HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   $325((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0);
   HEAPF64[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3];
  }
  $56_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  HEAP32[($56_1 + 80 | 0) >> 2] = (HEAP32[($56_1 + 80 | 0) >> 2] | 0) & -262145 | 0;
  label$6 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$6
   }
   $68_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $70_1 = $267(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = $70_1;
   $396($68_1 | 0, 3017 | 0, 62802 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 48 | 0;
  return;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6149 | 0, 62856 | 0, 0 | 0);
  $382(5 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $302() {
  var $2_1 = 0, $15_1 = 0, $268_1 = 0, $269_1 = 0, $276_1 = 0, $145_1 = 0, $191_1 = 0, $380_1 = 0, $403_1 = 0, $453_1 = 0, $6_1 = 0, $135_1 = 0, $305_1 = 0, $307_1 = 0, $309_1 = 0, $311_1 = 0, $313_1 = 0, $503_1 = 0.0, $316_1 = 0, $318_1 = 0, $320_1 = 0, $322_1 = 0, $344_1 = 0, $446_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
    break label$1
   }
   $6_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($2_1 + 104 | 0) >> 2] = 88344;
   HEAP32[($2_1 + 100 | 0) >> 2] = 88604;
   HEAP32[($2_1 + 96 | 0) >> 2] = 7840;
   $396($6_1 | 0, 9350 | 0, 62980 | 0, $2_1 + 96 | 0 | 0);
   $402(0 | 0) | 0;
  }
  $15_1 = 0;
  HEAP32[(0 + 90108 | 0) >> 2] = -1;
  HEAP32[(0 + 90384 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90368 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90372 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90376 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90380 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90080 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90084 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90076 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90260 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90256 | 0) >> 2] = $15_1;
  HEAP32[(0 + 90144 | 0) >> 2] = $15_1;
  label$2 : {
   label$3 : {
    if (!((HEAP32[(0 + 87804 | 0) >> 2] | 0 | 0) > ($15_1 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(0 + 87808 | 0) >> 2] = $273((HEAP32[(0 + 87804 | 0) >> 2] | 0) - 1 | 0 | 0) | 0;
    break label$2;
   }
   label$4 : {
    if (!((HEAP32[(0 + 87804 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[(0 + 87808 | 0) >> 2] = $273((0 - (HEAP32[(0 + 87804 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) | 0;
   }
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[(0 + 87820 | 0) >> 2] = $273((HEAP32[(0 + 87816 | 0) >> 2] | 0) - 1 | 0 | 0) | 0;
    break label$5;
   }
   label$7 : {
    if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[(0 + 87820 | 0) >> 2] = $273((0 - (HEAP32[(0 + 87816 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) | 0;
   }
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (!(HEAP32[(0 + 87804 | 0) >> 2] | 0)) {
      break label$10
     }
     if ((HEAP32[(0 + 87808 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 88328 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
      break label$9
     }
     if ((HEAP32[(0 + 87808 | 0) >> 2] | 0) >>> 0 > ($273((HEAP32[(0 + 88324 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >>> 0 & 1 | 0) {
      break label$9
     }
    }
    if (!(HEAP32[(0 + 87816 | 0) >> 2] | 0)) {
     break label$8
    }
    if ((HEAP32[(0 + 87820 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 88328 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
     break label$9
    }
    if (!((HEAP32[(0 + 87820 | 0) >> 2] | 0) >>> 0 > ($273((HEAP32[(0 + 88324 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$8
    }
   }
   $135_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($2_1 + 80 | 0) >> 2] = (HEAP32[(0 + 88324 | 0) >> 2] | 0) - 1 | 0;
   $396($135_1 | 0, 6150 | 0, 63010 | 0, $2_1 + 80 | 0 | 0);
   $145_1 = 0;
   $382(1 | 0, $145_1 | 0, $145_1 | 0);
  }
  HEAP32[($2_1 + 140 | 0) >> 2] = $47(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) | 0;
  label$11 : {
   if (!(HEAP32[(0 + 88192 | 0) >> 2] | 0)) {
    break label$11
   }
   $45(HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 89520 | 0) >> 3]), +(+HEAPF64[(0 + 89456 | 0) >> 3]), +(+HEAPF64[(0 + 89448 | 0) >> 3]));
  }
  $26();
  label$12 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$12
   }
   if (!(+HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] > 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$12
   }
   if (!(+HEAPF64[((HEAP32[(0 + 89400 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] < -8988465674311578540726371.0e283 & 1 | 0)) {
    break label$12
   }
   HEAP32[($2_1 + 128 | 0) >> 2] = 29;
   label$13 : {
    label$14 : while (1) {
     $191_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
     HEAP32[($2_1 + 128 | 0) >> 2] = $191_1 + -1 | 0;
     if (!$191_1) {
      break label$13
     }
     label$15 : {
      if (!((HEAP32[((87704 + 292 | 0) + ((HEAP32[($2_1 + 128 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
       break label$15
      }
      if (!((HEAP32[(0 + 87792 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$15
      }
      if (HEAP32[(0 + 87812 | 0) >> 2] | 0) {
       break label$15
      }
      if (HEAP32[(0 + 88208 | 0) >> 2] | 0) {
       break label$15
      }
      break label$13;
     }
     continue label$14;
    };
   }
   label$16 : {
    if (!((HEAP32[($2_1 + 128 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$16
    }
    label$17 : {
     label$18 : {
      if (!(HEAP32[(0 + 88268 | 0) >> 2] | 0)) {
       break label$18
      }
      HEAPF64[((HEAP32[(0 + 89400 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(0 + 89416 | 0) >> 3] * 2.0;
      HEAP32[(0 + 87812 | 0) >> 2] = 1;
      break label$17;
     }
     HEAPF64[((HEAP32[(0 + 89396 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[(0 + 89416 | 0) >> 3] * 2.0;
     label$19 : {
      if (HEAP32[(0 + 87812 | 0) >> 2] | 0) {
       break label$19
      }
      HEAP32[(0 + 88208 | 0) >> 2] = 1;
     }
    }
   }
  }
  label$20 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$20
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 4091 | 0, 63063 | 0, 0 | 0);
  }
  $268_1 = 0;
  $269_1 = $259() | 0;
  HEAP32[(0 + 90004 | 0) >> 2] = $269_1;
  HEAP32[(0 + 90012 | 0) >> 2] = $269_1;
  HEAP32[(0 + 9e4 | 0) >> 2] = $269_1;
  HEAP32[(0 + 90020 | 0) >> 2] = $268_1;
  HEAP32[(0 + 90064 | 0) >> 2] = $268_1;
  HEAP32[(0 + 90060 | 0) >> 2] = $268_1;
  $276_1 = $303($268_1 | 0) | 0;
  HEAP32[(0 + 90052 | 0) >> 2] = $276_1;
  HEAP32[(0 + 90056 | 0) >> 2] = $276_1;
  HEAP32[(0 + 90048 | 0) >> 2] = $276_1;
  HEAP32[($2_1 + 136 | 0) >> 2] = $304(HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0) | 0;
  $305(HEAP32[($2_1 + 136 | 0) >> 2] | 0 | 0);
  $154(HEAP32[($2_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88328 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0);
  label$21 : {
   label$22 : {
    if (HEAP32[(0 + 87984 | 0) >> 2] | 0) {
     break label$22
    }
    if (HEAP32[(0 + 88232 | 0) >> 2] | 0) {
     break label$22
    }
    if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
     break label$21
    }
   }
   label$23 : {
    label$24 : {
     if (HEAP32[(0 + 88232 | 0) >> 2] | 0) {
      break label$24
     }
     if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
      break label$23
     }
    }
    $305_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $307_1 = HEAP32[(0 + 88232 | 0) >> 2] | 0;
    $309_1 = HEAP32[(0 + 87832 | 0) >> 2] | 0;
    $311_1 = HEAP32[(0 + 88240 | 0) >> 2] | 0;
    $313_1 = HEAP32[(0 + 88256 | 0) >> 2] | 0;
    $503_1 = +HEAPF64[(0 + 88248 | 0) >> 3];
    $316_1 = HEAP32[(0 + 90024 | 0) >> 2] | 0;
    $318_1 = HEAP32[(0 + 90032 | 0) >> 2] | 0;
    $320_1 = HEAP32[(0 + 90040 | 0) >> 2] | 0;
    $322_1 = HEAP32[(0 + 88236 | 0) >> 2] | 0;
    HEAP32[($2_1 + 76 | 0) >> 2] = 88344;
    HEAP32[($2_1 + 72 | 0) >> 2] = 88604;
    HEAP32[($2_1 + 68 | 0) >> 2] = $322_1;
    HEAP32[($2_1 + 64 | 0) >> 2] = $320_1;
    HEAP32[($2_1 + 60 | 0) >> 2] = $318_1;
    HEAP32[($2_1 + 56 | 0) >> 2] = $316_1;
    HEAPF64[($2_1 + 48 | 0) >> 3] = $503_1;
    HEAP32[($2_1 + 44 | 0) >> 2] = $313_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = $311_1;
    HEAP32[($2_1 + 36 | 0) >> 2] = $309_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $307_1;
    $396($305_1 | 0, 8103 | 0, 63132 | 0, $2_1 + 32 | 0 | 0);
   }
   $344_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = 88860;
   HEAP32[($2_1 + 16 | 0) >> 2] = 7840;
   $396($344_1 | 0, 8104 | 0, 63287 | 0, $2_1 + 16 | 0 | 0);
  }
  $306(0 | 0, 1 | 0);
  HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  $298();
  label$25 : {
   if (!(HEAP32[(0 + 87948 | 0) >> 2] | 0)) {
    break label$25
   }
   HEAPF64[(0 + 89432 | 0) >> 3] = +HEAPF64[(0 + 87768 | 0) >> 3];
   HEAPF64[(0 + 89424 | 0) >> 3] = +HEAPF64[(0 + 87888 | 0) >> 3];
  }
  label$26 : {
   label$27 : {
    if (!(HEAP32[(0 + 87932 | 0) >> 2] | 0)) {
     break label$27
    }
    label$28 : {
     if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$28
     }
     if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
      break label$28
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6151 | 0, 63322 | 0, 0 | 0);
     $380_1 = 0;
     $382(1 | 0, $380_1 | 0, $380_1 | 0);
    }
    label$29 : {
     if (HEAP32[(0 + 87812 | 0) >> 2] | 0) {
      break label$29
     }
     if (HEAP32[(0 + 87804 | 0) >> 2] | 0) {
      break label$29
     }
     label$30 : {
      if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
       break label$30
      }
      if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
       break label$30
      }
      if ((HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$29
      }
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6152 | 0, 63456 | 0, 0 | 0);
     $403_1 = 0;
     $382(1 | 0, $403_1 | 0, $403_1 | 0);
    }
    label$31 : {
     if (!((HEAP32[(0 + 87816 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$31
     }
     if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
      break label$31
     }
     if (($296(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 136 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$31
     }
     HEAP32[($2_1 + 132 | 0) >> 2] = $6(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0, HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, $2_1 + 112 | 0 | 0, 0 | 0, $2_1 + 108 | 0 | 0, $2_1 + 124 | 0 | 0) | 0;
     HEAP32[(0 + 91e3 | 0) >> 2] = (HEAP32[(0 + 91e3 | 0) >> 2] | 0) + (HEAP32[($2_1 + 124 | 0) >> 2] | 0) | 0;
     label$32 : {
      if (HEAP32[($2_1 + 108 | 0) >> 2] | 0) {
       break label$32
      }
      $446_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[$2_1 >> 2] = $267(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0) | 0;
      $396($446_1 | 0, 6153 | 0, 63594 | 0, $2_1 | 0);
      $453_1 = 0;
      $382(1 | 0, $453_1 | 0, $453_1 | 0);
     }
     label$33 : {
      if ($145(HEAP32[(0 + 87820 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 132 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
       break label$33
      }
      $348($2_1 + 136 | 0 | 0);
      $348($2_1 + 140 | 0 | 0);
      break label$26;
     }
    }
    $295(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   }
   $348($2_1 + 136 | 0 | 0);
   $348($2_1 + 140 | 0 | 0);
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$26
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1030 | 0, 63686 | 0, 0 | 0);
  }
  global$0 = $2_1 + 144 | 0;
  return;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $12_1 = 0, $35_1 = 0, $49_1 = 0, $64_1 = 0, $67_1 = 0, $72_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 92288 | 0) >> 2] = (HEAP32[(0 + 92288 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $156(28 | 0) | 0;
  $12_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $12_1;
  $10_1 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $10_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $10_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $10_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $10_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  $11_1 = i64toi32_i32$1 + 24 | 0;
  $13_1 = 0;
  HEAP8[$11_1 >> 0] = $13_1;
  HEAP8[($11_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
  HEAP8[($11_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
  HEAP8[($11_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  HEAP8[i64toi32_i32$1 >> 0] = $10_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $10_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $10_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $10_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $12_1 + 8 | 0;
  HEAP8[i64toi32_i32$1 >> 0] = $10_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $10_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $10_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $10_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  label$1 : {
   if (!((HEAP32[(0 + 90084 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
    break label$1
   }
   $158(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, 28 | 0);
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6159 | 0, 66960 | 0, 0 | 0);
   $35_1 = 0;
   $382(6 | 0, $35_1 | 0, $35_1 | 0);
  }
  label$2 : {
   if (!((HEAP32[(0 + 90084 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90040 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[(0 + 90044 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  $49_1 = HEAP32[(0 + 90084 | 0) >> 2] | 0;
  HEAP32[(0 + 90084 | 0) >> 2] = $49_1 + 1 | 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] = $49_1;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$3
   }
   $64_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $67_1 = $267(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = $67_1;
   $396($64_1 | 0, 4060 | 0, 67067 | 0, $3_1 | 0);
  }
  $72_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $72_1 | 0;
 }
 
 function $304($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $376_1 = 0.0, $43_1 = 0, $62_1 = 0, $81_1 = 0, $97_1 = 0, $100_1 = 0, $166_1 = 0, $171_1 = 0, $229_1 = 0, $234_1 = 0, $272_1 = 0, $287_1 = 0, $289_1 = 0, $292_1 = 0, $336_1 = 0, $347_1 = 0, $350_1 = 0, $163_1 = 0, $226_1 = 0, $269_1 = 0, $365_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = $347((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  HEAP32[($6_1 + 48 | 0) >> 2] = $347((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 87704 | 0) >> 2] | 0)) {
     break label$2
    }
    $34(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(HEAP32[(0 + 88168 | 0) >> 2] | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : while (1) {
       if (!(($337(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) | 0 | 0) != ((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAPF64[($6_1 + 32 | 0) >> 3] = +($355() | 0 | 0);
       HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3] / 2147483647.0;
       HEAPF64[($6_1 + 32 | 0) >> 3] = Math_floor(+(HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0) * +HEAPF64[($6_1 + 32 | 0) >> 3]);
       $376_1 = +HEAPF64[($6_1 + 32 | 0) >> 3];
       label$7 : {
        label$8 : {
         if (!(Math_abs($376_1) < 2147483648.0)) {
          break label$8
         }
         $43_1 = ~~$376_1;
         break label$7;
        }
        $43_1 = -2147483648;
       }
       HEAP32[($6_1 + 28 | 0) >> 2] = $43_1;
       label$9 : {
        label$10 : while (1) {
         if (!($342(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, $273(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
         label$11 : {
          label$12 : {
           if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$12
           }
           $62_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
           break label$11;
          }
          $62_1 = 0;
         }
         HEAP32[($6_1 + 28 | 0) >> 2] = $62_1;
         continue label$10;
        };
       }
       $325($6_1 + 48 | 0 | 0, $273(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0);
       continue label$6;
      };
     }
     break label$3;
    }
    label$13 : {
     label$14 : {
      if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) >= (8 | 0) & 1 | 0)) {
       break label$14
      }
      $81_1 = $6_1 + 48 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $347((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
      $325($81_1 | 0, HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
      $325($81_1 | 0, HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
      label$15 : {
       label$16 : {
        if (!((6 | 0) > (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$16
        }
        $97_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
        break label$15;
       }
       $97_1 = 6;
      }
      $100_1 = 0;
      $34($97_1 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0);
      HEAP32[($6_1 + 16 | 0) >> 2] = $337(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($6_1 + 60 | 0) >> 2] = $100_1;
      label$17 : {
       if (!((HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) != ($100_1 | 0) & 1 | 0)) {
        break label$17
       }
       HEAP32[($6_1 + 24 | 0) >> 2] = 0;
       HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP32[($6_1 + 20 | 0) >> 2] = $337(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0;
       label$18 : {
        label$19 : while (1) {
         if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$18
         }
         label$20 : {
          if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$20
          }
          break label$18;
         }
         label$21 : {
          if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0) & 1 | 0)) {
           break label$21
          }
          label$22 : {
           if ($342(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
            break label$22
           }
           if ($342(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
            break label$22
           }
           +$27(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $6_1 + 12 | 0 | 0);
           label$23 : {
            label$24 : {
             if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
              break label$24
             }
             $325($6_1 + 44 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0);
             break label$23;
            }
            $325($6_1 + 48 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0);
            HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
           }
          }
         }
         $163_1 = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0;
         $166_1 = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($6_1 + 24 | 0) >> 2] = $166_1;
         HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($163_1 + ($166_1 << 2 | 0) | 0) >> 2] | 0;
         continue label$19;
        };
       }
      }
      $171_1 = 0;
      HEAP32[($6_1 + 60 | 0) >> 2] = $171_1;
      label$25 : {
       if (!((HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) != ($171_1 | 0) & 1 | 0)) {
        break label$25
       }
       HEAP32[($6_1 + 24 | 0) >> 2] = 0;
       HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP32[($6_1 + 20 | 0) >> 2] = $337(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0;
       label$26 : {
        label$27 : while (1) {
         if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$26
         }
         label$28 : {
          if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$28
          }
          break label$26;
         }
         label$29 : {
          if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) & 1 | 0) {
           break label$29
          }
          label$30 : {
           if ($342(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
            break label$30
           }
           if ($342(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
            break label$30
           }
           +$27(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $6_1 + 12 | 0 | 0);
           label$31 : {
            label$32 : {
             if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
              break label$32
             }
             $325($6_1 + 44 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0);
             break label$31;
            }
            $325($6_1 + 48 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0);
            HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
           }
          }
         }
         $226_1 = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0;
         $229_1 = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($6_1 + 24 | 0) >> 2] = $229_1;
         HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($226_1 + ($229_1 << 2 | 0) | 0) >> 2] | 0;
         continue label$27;
        };
       }
      }
      $234_1 = 0;
      HEAP32[($6_1 + 60 | 0) >> 2] = $234_1;
      label$33 : {
       if (!((HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) != ($234_1 | 0) & 1 | 0)) {
        break label$33
       }
       HEAP32[($6_1 + 24 | 0) >> 2] = 0;
       HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP32[($6_1 + 20 | 0) >> 2] = $337(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0;
       label$34 : {
        label$35 : while (1) {
         if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$34
         }
         label$36 : {
          label$37 : {
           if ($342(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
            break label$37
           }
           if (!($342(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0)) {
            break label$36
           }
          }
          HEAP32[(((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
         }
         $269_1 = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0;
         $272_1 = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($6_1 + 24 | 0) >> 2] = $272_1;
         HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($269_1 + ($272_1 << 2 | 0) | 0) >> 2] | 0;
         continue label$35;
        };
       }
      }
      $330(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0);
      HEAP32[($6_1 + 28 | 0) >> 2] = 0;
      label$38 : while (1) {
       $287_1 = 0;
       label$39 : {
        if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$39
        }
        $289_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
        HEAP32[($6_1 + 28 | 0) >> 2] = $289_1 + 1 | 0;
        $292_1 = $273($289_1 | 0) | 0;
        HEAP32[($6_1 + 60 | 0) >> 2] = $292_1;
        $287_1 = ($292_1 | 0) != (0 | 0);
       }
       label$40 : {
        if (!($287_1 & 1 | 0)) {
         break label$40
        }
        label$41 : {
         if ($342(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
          break label$41
         }
         if ($342(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
          break label$41
         }
         +$27(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $6_1 + 12 | 0 | 0);
         label$42 : {
          if (HEAP32[($6_1 + 12 | 0) >> 2] | 0) {
           break label$42
          }
          $325($6_1 + 48 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0);
          HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
         }
        }
        continue label$38;
       }
       break label$38;
      };
      $348($6_1 + 44 | 0 | 0);
      $34(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0);
      break label$13;
     }
     $34(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0);
    }
   }
  }
  $336_1 = 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = $336_1;
  label$43 : {
   if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) != ($336_1 | 0) & 1 | 0)) {
    break label$43
   }
   HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 4 | 0;
   label$44 : {
    label$45 : while (1) {
     $347_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
     HEAP32[($6_1 + 56 | 0) >> 2] = $347_1 + 4 | 0;
     $350_1 = HEAP32[$347_1 >> 2] | 0;
     HEAP32[($6_1 + 60 | 0) >> 2] = $350_1;
     if (!(($350_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$44
     }
     $319($6_1 + 52 | 0 | 0, 0 | 0, $303(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0);
     continue label$45;
    };
   }
  }
  $348($6_1 + 48 | 0 | 0);
  $365_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
  global$0 = $6_1 + 80 | 0;
  return $365_1 | 0;
 }
 
 function $305($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $105_1 = 0, $252_1 = 0, $315_1 = 0, $50_1 = 0, $95_1 = 0, $134_1 = 0, $164_1 = 0, $196_1 = 0, $238_1 = 0, $248_1 = 0, $283_1 = 0, $314_1 = 0, $329_1 = 0, $330_1 = 0, $343_1 = 0, $346_1 = 0, $382_1 = 0, $43_1 = 0, $78_1 = 0, $409_1 = 0.0, $189_1 = 0, $323_1 = 0;
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 108 | 0) >> 2] = $0_1;
  HEAPF64[($3_1 + 72 | 0) >> 3] = 1797693134862315708145274.0e284;
  $286(HEAP32[($3_1 + 108 | 0) >> 2] | 0 | 0);
  $306(0 | 0, 1 | 0);
  HEAP32[(0 + 90008 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  HEAP32[(0 + 89984 | 0) >> 2] = $11(HEAP32[($3_1 + 108 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8105 | 0, 63745 | 0, 0 | 0);
   $121(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 63762 | 0, HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($3_1 + 100 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  $17(HEAP32[($3_1 + 100 | 0) >> 2] | 0 | 0);
  label$2 : {
   if (!(((HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
    break label$2
   }
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$3
    }
    $43_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $396($43_1 | 0, 1065 | 0, 63780 | 0, $3_1 + 48 | 0 | 0);
   }
   $50_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
   HEAP32[($50_1 + 80 | 0) >> 2] = (HEAP32[($50_1 + 80 | 0) >> 2] | 0) & -65537 | 0;
  }
  HEAP32[(0 + 90984 | 0) >> 2] = (HEAP32[(0 + 90984 | 0) >> 2] | 0) + 1 | 0;
  $4(HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 100 | 0) >> 2] | 0 | 0, $3_1 + 64 | 0 | 0);
  label$4 : {
   if (!(+HEAPF64[($3_1 + 64 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
    break label$4
   }
   label$5 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$5
    }
    $78_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $409_1 = +HEAPF64[($3_1 + 64 | 0) >> 3];
    HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 100 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 32 | 0) >> 3] = $409_1;
    $396($78_1 | 0, 1060 | 0, 63867 | 0, $3_1 + 32 | 0 | 0);
   }
   HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$6 : while (1) {
    $95_1 = 0;
    label$7 : {
     if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     $95_1 = (HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$8 : {
     if (!($95_1 & 1 | 0)) {
      break label$8
     }
     $105_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
     HEAP32[($105_1 + 80 | 0) >> 2] = (HEAP32[($105_1 + 80 | 0) >> 2] | 0) & -4097 | 0 | ((((((HEAP32[($105_1 + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 1 | 0) & 1 | 0) << 12 | 0) | 0;
     HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$6;
    }
    break label$6;
   };
   $17(HEAP32[($3_1 + 100 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$9 : while (1) {
   $134_1 = 0;
   label$10 : {
    if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$10
    }
    $134_1 = (HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$11 : {
    if (!($134_1 & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     $17(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$9;
   }
   break label$9;
  };
  HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$13 : while (1) {
   $164_1 = 0;
   label$14 : {
    if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$14
    }
    $164_1 = (HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$15 : {
    if (!($164_1 & 1 | 0)) {
     break label$15
    }
    label$16 : {
     if (!(((HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
      break label$16
     }
     label$17 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
       break label$17
      }
      $189_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $396($189_1 | 0, 1066 | 0, 63780 | 0, $3_1 + 16 | 0 | 0);
     }
     $196_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
     HEAP32[($196_1 + 80 | 0) >> 2] = (HEAP32[($196_1 + 80 | 0) >> 2] | 0) & -65537 | 0;
    }
    HEAP32[(0 + 90984 | 0) >> 2] = (HEAP32[(0 + 90984 | 0) >> 2] | 0) + 1 | 0;
    $4(HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, $3_1 + 64 | 0 | 0);
    label$18 : {
     if (!(+HEAPF64[($3_1 + 64 | 0) >> 3] > +HEAPF64[(0 + 89440 | 0) >> 3] & 1 | 0)) {
      break label$18
     }
     label$19 : {
      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
       break label$19
      }
      $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1031 | 0, 63989 | 0, 0 | 0);
     }
     HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
     label$20 : while (1) {
      $238_1 = 0;
      label$21 : {
       if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$21
       }
       $238_1 = (HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
      }
      label$22 : {
       if (!($238_1 & 1 | 0)) {
        break label$22
       }
       $248_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
       HEAP32[($248_1 + 80 | 0) >> 2] = (HEAP32[($248_1 + 80 | 0) >> 2] | 0) & -65537 | 0;
       $252_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
       HEAP32[($252_1 + 80 | 0) >> 2] = (HEAP32[($252_1 + 80 | 0) >> 2] | 0) & -4097 | 0 | ((((((HEAP32[($252_1 + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 1 | 0) & 1 | 0) << 12 | 0) | 0;
       $49(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       continue label$20;
      }
      break label$20;
     };
     break label$15;
    }
    HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$13;
   }
   break label$13;
  };
  HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$23 : while (1) {
   $283_1 = 0;
   label$24 : {
    if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$24
    }
    $283_1 = (HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$25 : {
    if (!($283_1 & 1 | 0)) {
     break label$25
    }
    label$26 : {
     if ($250(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0) | 0) {
      break label$26
     }
     label$27 : {
      label$28 : {
       if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
        break label$28
       }
       if (HEAP32[(0 + 87740 | 0) >> 2] | 0) {
        break label$28
       }
       $151(64171 | 0);
       label$29 : {
        label$30 : {
         if (!(HEAP32[(0 + 88268 | 0) >> 2] | 0)) {
          break label$30
         }
         $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6240 | 0, 64214 | 0, 0 | 0);
         break label$29;
        }
        $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6239 | 0, 64487 | 0, 0 | 0);
       }
       $314_1 = 1;
       $315_1 = 0;
       $127(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 64818 | 0, HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, $315_1 | 0, $314_1 | 0);
       $382($314_1 | 0, $315_1 | 0, $315_1 | 0);
       break label$27;
      }
      $151(64879 | 0);
      $323_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $396($323_1 | 0, 6154 | 0, 64903 | 0, $3_1 | 0);
      $329_1 = 0;
      $382(2 | 0, $329_1 | 0, $329_1 | 0);
     }
    }
    $330_1 = 0;
    HEAP32[($3_1 + 96 | 0) >> 2] = $330_1;
    label$31 : {
     if (!((HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($330_1 | 0) & 1 | 0)) {
      break label$31
     }
     HEAP32[($3_1 + 92 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$32 : {
      label$33 : while (1) {
       $343_1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
       HEAP32[($3_1 + 92 | 0) >> 2] = $343_1 + 4 | 0;
       $346_1 = HEAP32[$343_1 >> 2] | 0;
       HEAP32[($3_1 + 96 | 0) >> 2] = $346_1;
       if (!(($346_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$32
       }
       HEAPF64[($3_1 + 80 | 0) >> 3] = +$10(HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($3_1 + 96 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
       label$34 : {
        if (!(+HEAPF64[($3_1 + 72 | 0) >> 3] > +HEAPF64[($3_1 + 80 | 0) >> 3] & 1 | 0)) {
         break label$34
        }
        HEAPF64[($3_1 + 72 | 0) >> 3] = +HEAPF64[($3_1 + 80 | 0) >> 3];
       }
       continue label$33;
      };
     }
    }
    HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$23;
   }
   break label$23;
  };
  label$35 : {
   if (!(+HEAPF64[($3_1 + 72 | 0) >> 3] < -.99999999 & 1 | 0)) {
    break label$35
   }
   if (HEAP32[(0 + 87920 | 0) >> 2] | 0) {
    break label$35
   }
   HEAPF64[($3_1 + 56 | 0) >> 3] = 1.0 + +HEAPF64[($3_1 + 72 | 0) >> 3];
   HEAP32[(0 + 89568 | 0) >> 2] = 1;
   $73(64998 | 0, 0 | 0, $3_1 + 56 | 0 | 0);
   label$36 : {
    if (!(+HEAPF64[($3_1 + 72 | 0) >> 3] < -.999999999999999 & 1 | 0)) {
     break label$36
    }
    if (HEAP32[(0 + 88180 | 0) >> 2] | 0) {
     break label$36
    }
    if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
     break label$36
    }
    $390(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3_1 + 72 | 0) >> 3]));
   }
  }
  $382_1 = 1;
  HEAP32[(0 + 92024 | 0) >> 2] = (HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0;
  $278(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
  $279(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, $382_1 | 0);
  label$37 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($382_1 | 0) & 1 | 0)) {
    break label$37
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8105 | 0, 65011 | 0, 0 | 0);
  }
  global$0 = $3_1 + 112 | 0;
  return;
 }
 
 function $306($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $294_1 = 0, $6_1 = 0, $27_1 = 0, $41_1 = 0, $55_1 = 0, $69_1 = 0, $83_1 = 0, $97_1 = 0, $128_1 = 0, $153_1 = 0, $208_1 = 0, $218_1 = 0, $224_1 = 0, $237_1 = 0, $247_1 = 0, $251_1 = 0, $270_1 = 0, $286_1 = 0, $16_1 = 0, $29_1 = 0, $43_1 = 0, $57_1 = 0, $71_1 = 0, $85_1 = 0, $101_1 = 0, $103_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $6_1 = 0;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[(0 + 90056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $27_1 = HEAP32[((HEAP32[(0 + 90056 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     break label$2;
    }
    $27_1 = -1;
   }
   $29_1 = $27_1;
   label$4 : {
    label$5 : {
     if (!((HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $41_1 = HEAP32[((HEAP32[(0 + 90012 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$4;
    }
    $41_1 = -1;
   }
   $43_1 = $41_1;
   label$6 : {
    label$7 : {
     if (!((HEAP32[(0 + 90016 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     $55_1 = HEAP32[((HEAP32[(0 + 90016 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$6;
    }
    $55_1 = -1;
   }
   $57_1 = $55_1;
   label$8 : {
    label$9 : {
     if (!((HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     $69_1 = HEAP32[((HEAP32[(0 + 9e4 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$8;
    }
    $69_1 = -1;
   }
   $71_1 = $69_1;
   label$10 : {
    label$11 : {
     if (!((HEAP32[(0 + 90008 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     $83_1 = HEAP32[((HEAP32[(0 + 90008 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     break label$10;
    }
    $83_1 = -1;
   }
   $85_1 = $83_1;
   label$12 : {
    label$13 : {
     if (!((HEAP32[(0 + 90048 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$13
     }
     $97_1 = HEAP32[((HEAP32[(0 + 90048 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     break label$12;
    }
    $97_1 = -1;
   }
   $101_1 = HEAP32[(0 + 90176 | 0) >> 2] | 0;
   $103_1 = HEAP32[(0 + 90180 | 0) >> 2] | 0;
   HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = $103_1;
   HEAP32[($4_1 + 24 | 0) >> 2] = $101_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $97_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $85_1;
   HEAP32[($4_1 + 12 | 0) >> 2] = $71_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $57_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = $43_1;
   HEAP32[$4_1 >> 2] = $29_1;
   $396($16_1 | 0, 2066 | 0, 67813 | 0, $4_1 | 0);
  }
  label$14 : {
   if (!(HEAP32[($4_1 + 60 | 0) >> 2] | 0)) {
    break label$14
   }
   HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
   label$15 : while (1) {
    $128_1 = 0;
    label$16 : {
     if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$16
     }
     $128_1 = (HEAP32[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$17 : {
     if (!($128_1 & 1 | 0)) {
      break label$17
     }
     HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
     continue label$15;
    }
    break label$15;
   };
   HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
   label$18 : while (1) {
    $153_1 = 0;
    label$19 : {
     if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$19
     }
     $153_1 = (HEAP32[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$20 : {
     if (!($153_1 & 1 | 0)) {
      break label$20
     }
     HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$18;
    }
    break label$18;
   };
   HEAP32[(0 + 92472 | 0) >> 2] = (HEAP32[(0 + 92472 | 0) >> 2] | 0) + (HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0;
   label$21 : {
    if (!((HEAP32[(0 + 92480 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAP32[(0 + 92480 | 0) >> 2] = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
   }
   HEAP32[(0 + 91720 | 0) >> 2] = (HEAP32[(0 + 91720 | 0) >> 2] | 0) + (HEAP32[($4_1 + 40 | 0) >> 2] | 0) | 0;
   label$22 : {
    if (!((HEAP32[(0 + 91728 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$22
    }
    HEAP32[(0 + 91728 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
   }
  }
  HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
  label$23 : while (1) {
   $208_1 = 0;
   label$24 : {
    if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$24
    }
    $208_1 = (HEAP32[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$25 : {
    if (!($208_1 & 1 | 0)) {
     break label$25
    }
    $218_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
    HEAP8[($218_1 + 24 | 0) >> 0] = (HEAPU8[($218_1 + 24 | 0) >> 0] | 0) & -17 | 0;
    HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
    continue label$23;
   }
   break label$23;
  };
  $224_1 = 0;
  HEAP32[(0 + 90056 | 0) >> 2] = $224_1;
  HEAP32[(0 + 90088 | 0) >> 2] = $224_1;
  HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$26 : while (1) {
   $237_1 = 0;
   label$27 : {
    if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$27
    }
    $237_1 = (HEAP32[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$28 : {
    if (!($237_1 & 1 | 0)) {
     break label$28
    }
    $247_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    HEAP32[($247_1 + 80 | 0) >> 2] = (HEAP32[($247_1 + 80 | 0) >> 2] | 0) & -1025 | 0;
    $251_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    HEAP32[($251_1 + 80 | 0) >> 2] = (HEAP32[($251_1 + 80 | 0) >> 2] | 0) & -2097153 | 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$26;
   }
   break label$26;
  };
  HEAP32[(0 + 90012 | 0) >> 2] = 0;
  label$29 : {
   if (!(HEAP32[($4_1 + 56 | 0) >> 2] | 0)) {
    break label$29
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
   label$30 : while (1) {
    $270_1 = 0;
    label$31 : {
     if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$31
     }
     $270_1 = (((HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
    }
    label$32 : {
     if (!($270_1 & 1 | 0)) {
      break label$32
     }
     HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
     $286_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
     HEAP32[($286_1 + 80 | 0) >> 2] = (HEAP32[($286_1 + 80 | 0) >> 2] | 0) & -2049 | 0;
     HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$30;
    }
    break label$30;
   };
   HEAP32[(0 + 90020 | 0) >> 2] = 0;
  }
  $294_1 = 0;
  HEAP32[(0 + 90016 | 0) >> 2] = $294_1;
  HEAP32[(0 + 90176 | 0) >> 2] = $294_1;
  HEAP32[(0 + 90180 | 0) >> 2] = $294_1;
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $307($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $31_1 = 0, $45_1 = 0, $58_1 = 0, $61_1 = 0, $67_1 = 0, $153_1 = 0, $154_1 = 0, $156_1 = 0, $160_1 = 0, $177_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  label$1 : {
   if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
    break label$1
   }
   $205();
  }
  HEAP32[(0 + 90012 | 0) >> 2] = HEAP32[(0 + 90004 | 0) >> 2] | 0;
  HEAP32[(0 + 90056 | 0) >> 2] = HEAP32[(0 + 90052 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $303(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  $248(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[(0 + 90016 | 0) >> 2] | 0;
  label$2 : while (1) {
   $31_1 = 0;
   label$3 : {
    if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $31_1 = (((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0 | 0) != (0 | 0);
   }
   label$4 : {
    if (!($31_1 & 1 | 0)) {
     break label$4
    }
    $45_1 = 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = $45_1;
    label$5 : {
     if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($45_1 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     label$6 : {
      label$7 : while (1) {
       $58_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       HEAP32[($3_1 + 24 | 0) >> 2] = $58_1 + 4 | 0;
       $61_1 = HEAP32[$58_1 >> 2] | 0;
       HEAP32[($3_1 + 28 | 0) >> 2] = $61_1;
       if (!(($61_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       $67_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
       HEAP32[($67_1 + 80 | 0) >> 2] = (HEAP32[($67_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
       continue label$7;
      };
     }
    }
    label$8 : {
     if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
     HEAP32[($3_1 + 32 | 0) >> 2] = $261(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    }
    label$9 : {
     if (!(((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = $262(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    }
    label$10 : {
     if (HEAP32[(0 + 90180 | 0) >> 2] | 0) {
      break label$10
     }
     label$11 : {
      if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     }
     label$12 : {
      label$13 : {
       if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
       break label$12;
      }
      HEAP32[(0 + 91408 | 0) >> 2] = (HEAP32[(0 + 91408 | 0) >> 2] | 0) + 1 | 0;
     }
     label$14 : {
      if (!((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$14
      }
      HEAP32[((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
     }
     HEAP32[((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
    }
    HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$2;
   }
   break label$2;
  };
  label$15 : {
   if (HEAP32[(0 + 90180 | 0) >> 2] | 0) {
    break label$15
   }
   HEAP32[(0 + 90176 | 0) >> 2] = 1;
  }
  label$16 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$16
   }
   $153_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $154_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   $156_1 = HEAP32[(0 + 90088 | 0) >> 2] | 0;
   $160_1 = (HEAP32[(0 + 90076 | 0) >> 2] | 0) - 1 | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $267(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $160_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $156_1;
   HEAP32[$3_1 >> 2] = $154_1;
   $396($153_1 | 0, 1032 | 0, 65048 | 0, $3_1 | 0);
  }
  label$17 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$17
   }
   $389(HEAP32[(0 + 90012 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0);
  }
  $177_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return $177_1 | 0;
 }
 
 function $308($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $9_1 = 0, $924 = 0.0, $87_1 = 0, $268_1 = 0, $305_1 = 0, $332_1 = 0, $391_1 = 0, $436_1 = 0, $439_1 = 0, $745 = 0, $753 = 0, $842 = 0, $886 = 0, $35_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $158_1 = 0, $160_1 = 0, $161_1 = 0, $163_1 = 0, $206_1 = 0, $208_1 = 0, $209_1 = 0, $211_1 = 0, $212_1 = 0, $213_1 = 0, $280_1 = 0, $282_1 = 0, $283_1 = 0, $285_1 = 0, $344_1 = 0, $346_1 = 0, $347_1 = 0, $349_1 = 0, $350_1 = 0, $352_1 = 0, $353_1 = 0, $355_1 = 0, $356_1 = 0, $403_1 = 0, $405_1 = 0, $406_1 = 0, $408_1 = 0, $409_1 = 0, $497_1 = 0, $499_1 = 0, $500_1 = 0, $502_1 = 0, $503_1 = 0, $944 = 0.0, $556 = 0, $558 = 0, $559 = 0, $561 = 0, $562 = 0, $951 = 0.0, $615 = 0, $617 = 0, $618 = 0, $620 = 0, $621 = 0, $958 = 0.0, $674 = 0, $676 = 0, $677 = 0, $679 = 0, $680 = 0, $965 = 0.0, $727 = 0, $729 = 0, $730 = 0, $732 = 0, $733 = 0, $773 = 0, $775 = 0, $776 = 0, $777 = 0, $804 = 0, $806 = 0, $807 = 0, $808 = 0, $898 = 0, $900 = 0, $901 = 0, $903 = 0, $904 = 0, $981 = 0.0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $9_1 = 0;
  $924 = +($9_1 | 0);
  HEAP32[($6_1 + 548 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 544 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 540 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 536 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 524 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 500 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 496 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 492 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 488 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 476 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 468 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 464 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 460 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 456 | 0) >> 2] = $9_1;
  HEAPF64[($6_1 + 448 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAPF64[($6_1 + 440 | 0) >> 3] = $924;
  HEAPF64[($6_1 + 392 | 0) >> 3] = $924;
  HEAPF64[($6_1 + 400 | 0) >> 3] = 50.0 * (+HEAPF64[(0 + 89544 | 0) >> 3] + +HEAPF64[(0 + 89440 | 0) >> 3]);
  HEAP32[($6_1 + 520 | 0) >> 2] = $255(HEAP32[($6_1 + 540 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 548 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(((HEAP32[((HEAP32[($6_1 + 548 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 544 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
    break label$1
   }
   $35_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $37_1 = HEAP32[((HEAP32[($6_1 + 548 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $38_1 = HEAP32[($6_1 + 544 | 0) >> 2] | 0;
   $39_1 = HEAP32[($6_1 + 520 | 0) >> 2] | 0;
   HEAP32[($6_1 + 380 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 536 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($6_1 + 376 | 0) >> 2] = $39_1;
   HEAP32[($6_1 + 372 | 0) >> 2] = $38_1;
   HEAP32[($6_1 + 368 | 0) >> 2] = $37_1;
   $396($35_1 | 0, 2046 | 0, 65124 | 0, $6_1 + 368 | 0 | 0);
  }
  HEAP32[($6_1 + 472 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($6_1 + 508 | 0) >> 2] = HEAP32[($6_1 + 548 | 0) >> 2] | 0;
    HEAP32[($6_1 + 480 | 0) >> 2] = HEAP32[($6_1 + 544 | 0) >> 2] | 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($6_1 + 508 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[(0 + 91376 | 0) >> 2] = (HEAP32[(0 + 91376 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($6_1 + 504 | 0) >> 2] = 0;
      HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
      HEAP32[($6_1 + 516 | 0) >> 2] = HEAP32[($6_1 + 520 | 0) >> 2] | 0;
      label$6 : {
       label$7 : while (1) {
        $87_1 = HEAP32[(((HEAP32[(0 + 90284 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 516 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        HEAP32[($6_1 + 512 | 0) >> 2] = $87_1;
        if (!(($87_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        label$8 : {
         label$9 : {
          label$10 : {
           if (!(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 21 | 0) & 1 | 0)) {
            break label$10
           }
           if (!((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 90256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$9
           }
          }
          break label$8;
         }
         HEAP32[(0 + 91400 | 0) >> 2] = (HEAP32[(0 + 91400 | 0) >> 2] | 0) + 1 | 0;
         label$11 : {
          if (!($264(1 | 0, HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 480 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, $6_1 + 484 | 0 | 0, $6_1 + 532 | 0 | 0) | 0)) {
           break label$11
          }
          label$12 : {
           if (!((HEAP32[(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 480 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 484 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$12
           }
           label$13 : {
            if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
             break label$13
            }
            $158_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
            $160_1 = HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            $161_1 = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
            $163_1 = HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
            HEAP32[($6_1 + 316 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
            HEAP32[($6_1 + 312 | 0) >> 2] = $163_1;
            HEAP32[($6_1 + 308 | 0) >> 2] = $161_1;
            HEAP32[($6_1 + 304 | 0) >> 2] = $160_1;
            $396($158_1 | 0, 3053 | 0, 65202 | 0, $6_1 + 304 | 0 | 0);
           }
           HEAP32[($6_1 + 524 | 0) >> 2] = 1;
          }
          HEAP32[($6_1 + 528 | 0) >> 2] = (HEAP32[($6_1 + 532 | 0) >> 2] | 0 | 0) == ((((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ (((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) | 0 | 0) & 1 | 0;
          label$14 : {
           label$15 : {
            if (!((HEAP32[(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 484 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
             break label$15
            }
            label$16 : {
             if (HEAP32[($6_1 + 472 | 0) >> 2] | 0) {
              break label$16
             }
             $206_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
             $208_1 = HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             $209_1 = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
             $211_1 = HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
             $212_1 = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
             $213_1 = HEAP32[($6_1 + 520 | 0) >> 2] | 0;
             HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 528 | 0) >> 2] | 0;
             HEAP32[($6_1 + 16 | 0) >> 2] = $213_1;
             HEAP32[($6_1 + 12 | 0) >> 2] = $212_1;
             HEAP32[($6_1 + 8 | 0) >> 2] = $211_1;
             HEAP32[($6_1 + 4 | 0) >> 2] = $209_1;
             HEAP32[$6_1 >> 2] = $208_1;
             $396($206_1 | 0, 6155 | 0, 65362 | 0, $6_1 | 0);
             $150(7 | 0, HEAP32[($6_1 + 512 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 508 | 0) >> 2] | 0 | 0);
            }
            break label$14;
           }
           label$17 : {
            label$18 : {
             if (HEAP32[($6_1 + 528 | 0) >> 2] | 0) {
              break label$18
             }
             HEAP32[($6_1 + 504 | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
             HEAP32[($6_1 + 476 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
             break label$17;
            }
            label$19 : {
             if (!((HEAP32[(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 480 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
              break label$19
             }
             label$20 : {
              label$21 : {
               if (!(HEAP32[($6_1 + 472 | 0) >> 2] | 0)) {
                break label$21
               }
               label$22 : {
                label$23 : {
                 if (!(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
                  break label$23
                 }
                 HEAP32[(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 484 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                 HEAP32[(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 480 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
                 $268_1 = HEAP32[($6_1 + 536 | 0) >> 2] | 0;
                 HEAP32[$268_1 >> 2] = (HEAP32[$268_1 >> 2] | 0) - 2 | 0;
                 label$24 : {
                  if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
                   break label$24
                  }
                  $280_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                  $282_1 = HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                  $283_1 = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                  $285_1 = HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                  HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                  HEAP32[($6_1 + 40 | 0) >> 2] = $285_1;
                  HEAP32[($6_1 + 36 | 0) >> 2] = $283_1;
                  HEAP32[($6_1 + 32 | 0) >> 2] = $282_1;
                  $396($280_1 | 0, 2075 | 0, 65510 | 0, $6_1 + 32 | 0 | 0);
                 }
                 break label$22;
                }
                label$25 : {
                 label$26 : {
                  if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                   break label$26
                  }
                  if (!((HEAP32[($6_1 + 488 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                   break label$26
                  }
                  $305_1 = 2;
                  HEAP32[(((HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 456 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $305_1;
                  HEAP32[(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 484 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                  HEAP32[(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 480 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
                  $332_1 = HEAP32[($6_1 + 536 | 0) >> 2] | 0;
                  HEAP32[$332_1 >> 2] = (HEAP32[$332_1 >> 2] | 0) - 2 | 0;
                  label$27 : {
                   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= ($305_1 | 0) & 1 | 0)) {
                    break label$27
                   }
                   $344_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                   $346_1 = HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                   $347_1 = HEAP32[($6_1 + 460 | 0) >> 2] | 0;
                   $349_1 = HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                   $350_1 = HEAP32[($6_1 + 456 | 0) >> 2] | 0;
                   $352_1 = HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                   $353_1 = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                   $355_1 = HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                   $356_1 = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                   HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[($6_1 + 392 | 0) >> 3];
                   HEAP32[($6_1 + 76 | 0) >> 2] = $356_1;
                   HEAP32[($6_1 + 72 | 0) >> 2] = $355_1;
                   HEAP32[($6_1 + 68 | 0) >> 2] = $353_1;
                   HEAP32[($6_1 + 64 | 0) >> 2] = $352_1;
                   HEAP32[($6_1 + 60 | 0) >> 2] = $350_1;
                   HEAP32[($6_1 + 56 | 0) >> 2] = $349_1;
                   HEAP32[($6_1 + 52 | 0) >> 2] = $347_1;
                   HEAP32[($6_1 + 48 | 0) >> 2] = $346_1;
                   $396($344_1 | 0, 2105 | 0, 65592 | 0, $6_1 + 48 | 0 | 0);
                  }
                  HEAP32[($6_1 + 488 | 0) >> 2] = 0;
                  break label$25;
                 }
                 HEAP32[(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 484 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                 HEAP32[(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 480 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 2;
                 $391_1 = HEAP32[($6_1 + 536 | 0) >> 2] | 0;
                 HEAP32[$391_1 >> 2] = (HEAP32[$391_1 >> 2] | 0) - 2 | 0;
                 label$28 : {
                  if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
                   break label$28
                  }
                  $403_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                  $405_1 = HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                  $406_1 = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                  $408_1 = HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                  $409_1 = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                  HEAPF64[($6_1 + 112 | 0) >> 3] = +HEAPF64[($6_1 + 440 | 0) >> 3];
                  HEAP32[($6_1 + 108 | 0) >> 2] = $409_1;
                  HEAP32[($6_1 + 104 | 0) >> 2] = $408_1;
                  HEAP32[($6_1 + 100 | 0) >> 2] = $406_1;
                  HEAP32[($6_1 + 96 | 0) >> 2] = $405_1;
                  $396($403_1 | 0, 3073 | 0, 65725 | 0, $6_1 + 96 | 0 | 0);
                 }
                }
               }
               break label$20;
              }
              label$29 : {
               if ((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                break label$29
               }
               $17(HEAP32[($6_1 + 512 | 0) >> 2] | 0 | 0);
              }
              label$30 : {
               if ((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                break label$30
               }
               $17(HEAP32[($6_1 + 508 | 0) >> 2] | 0 | 0);
              }
              $436_1 = $6_1 + 416 | 0;
              $439_1 = $6_1 + 408 | 0;
              HEAPF64[($6_1 + 432 | 0) >> 3] = +$14(HEAP32[($6_1 + 512 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 508 | 0) >> 2] | 0 | 0, $436_1 | 0, $439_1 | 0);
              HEAPF64[($6_1 + 424 | 0) >> 3] = +$14(HEAP32[($6_1 + 508 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 512 | 0) >> 2] | 0 | 0, $436_1 | 0, $439_1 | 0);
              label$31 : {
               if (!(HEAP32[($6_1 + 524 | 0) >> 2] | 0)) {
                break label$31
               }
               HEAP32[($6_1 + 492 | 0) >> 2] = 0;
               label$32 : {
                if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] > +HEAPF64[($6_1 + 424 | 0) >> 3] & 1 | 0)) {
                 break label$32
                }
                HEAPF64[($6_1 + 432 | 0) >> 3] = +HEAPF64[($6_1 + 424 | 0) >> 3];
               }
               HEAPF64[($6_1 + 448 | 0) >> 3] = +HEAPF64[($6_1 + 432 | 0) >> 3];
               HEAPF64[($6_1 + 440 | 0) >> 3] = 8988465674311578540726371.0e283;
               HEAP32[($6_1 + 500 | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
               HEAP32[($6_1 + 468 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
               HEAP32[($6_1 + 496 | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
               HEAP32[($6_1 + 464 | 0) >> 2] = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
               break label$6;
              }
              label$33 : {
               label$34 : {
                if (!(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                 break label$34
                }
                if (((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
                 break label$34
                }
                if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] < +HEAPF64[($6_1 + 400 | 0) >> 3] & 1 | 0)) {
                 break label$34
                }
                label$35 : {
                 label$36 : {
                  if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                   break label$36
                  }
                  if (!(((HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                   break label$36
                  }
                  if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] < +HEAPF64[($6_1 + 392 | 0) >> 3] & 1 | 0)) {
                   break label$35
                  }
                 }
                 HEAP32[($6_1 + 492 | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 460 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 488 | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 456 | 0) >> 2] = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                 HEAPF64[($6_1 + 392 | 0) >> 3] = +HEAPF64[($6_1 + 432 | 0) >> 3];
                 label$37 : {
                  if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
                   break label$37
                  }
                  $497_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                  $499_1 = HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                  $500_1 = HEAP32[($6_1 + 460 | 0) >> 2] | 0;
                  $502_1 = HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                  $503_1 = HEAP32[($6_1 + 456 | 0) >> 2] | 0;
                  $944 = +HEAPF64[($6_1 + 392 | 0) >> 3];
                  HEAPF64[($6_1 + 296 | 0) >> 3] = +HEAPF64[($6_1 + 424 | 0) >> 3];
                  HEAPF64[($6_1 + 288 | 0) >> 3] = $944;
                  HEAP32[($6_1 + 284 | 0) >> 2] = $503_1;
                  HEAP32[($6_1 + 280 | 0) >> 2] = $502_1;
                  HEAP32[($6_1 + 276 | 0) >> 2] = $500_1;
                  HEAP32[($6_1 + 272 | 0) >> 2] = $499_1;
                  $396($497_1 | 0, 3070 | 0, 65844 | 0, $6_1 + 272 | 0 | 0);
                 }
                }
                break label$33;
               }
               label$38 : {
                label$39 : {
                 if (!(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                  break label$39
                 }
                 if (((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
                  break label$39
                 }
                 if (!(+HEAPF64[($6_1 + 424 | 0) >> 3] < +HEAPF64[($6_1 + 400 | 0) >> 3] & 1 | 0)) {
                  break label$39
                 }
                 label$40 : {
                  label$41 : {
                   if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                    break label$41
                   }
                   if (!(((HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                    break label$41
                   }
                   if (!(+HEAPF64[($6_1 + 424 | 0) >> 3] < +HEAPF64[($6_1 + 392 | 0) >> 3] & 1 | 0)) {
                    break label$40
                   }
                  }
                  HEAP32[($6_1 + 492 | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                  HEAP32[($6_1 + 460 | 0) >> 2] = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                  HEAP32[($6_1 + 488 | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
                  HEAP32[($6_1 + 456 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                  HEAPF64[($6_1 + 392 | 0) >> 3] = +HEAPF64[($6_1 + 424 | 0) >> 3];
                  label$42 : {
                   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
                    break label$42
                   }
                   $556 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                   $558 = HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                   $559 = HEAP32[($6_1 + 460 | 0) >> 2] | 0;
                   $561 = HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                   $562 = HEAP32[($6_1 + 456 | 0) >> 2] | 0;
                   $951 = +HEAPF64[($6_1 + 392 | 0) >> 3];
                   HEAPF64[($6_1 + 264 | 0) >> 3] = +HEAPF64[($6_1 + 432 | 0) >> 3];
                   HEAPF64[($6_1 + 256 | 0) >> 3] = $951;
                   HEAP32[($6_1 + 252 | 0) >> 2] = $562;
                   HEAP32[($6_1 + 248 | 0) >> 2] = $561;
                   HEAP32[($6_1 + 244 | 0) >> 2] = $559;
                   HEAP32[($6_1 + 240 | 0) >> 2] = $558;
                   $396($556 | 0, 3071 | 0, 65952 | 0, $6_1 + 240 | 0 | 0);
                  }
                 }
                 break label$38;
                }
                label$43 : {
                 label$44 : {
                  if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] < +HEAPF64[($6_1 + 400 | 0) >> 3] & 1 | 0)) {
                   break label$44
                  }
                  label$45 : {
                   if (!(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                    break label$45
                   }
                   if (!(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                    break label$44
                   }
                  }
                  label$46 : {
                   label$47 : {
                    if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                     break label$47
                    }
                    if (((HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
                     break label$46
                    }
                    if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] < +HEAPF64[($6_1 + 392 | 0) >> 3] & 1 | 0)) {
                     break label$46
                    }
                   }
                   HEAP32[($6_1 + 492 | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
                   HEAP32[($6_1 + 460 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                   HEAP32[($6_1 + 488 | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                   HEAP32[($6_1 + 456 | 0) >> 2] = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                   HEAPF64[($6_1 + 392 | 0) >> 3] = +HEAPF64[($6_1 + 432 | 0) >> 3];
                   label$48 : {
                    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
                     break label$48
                    }
                    $615 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                    $617 = HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                    $618 = HEAP32[($6_1 + 460 | 0) >> 2] | 0;
                    $620 = HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                    $621 = HEAP32[($6_1 + 456 | 0) >> 2] | 0;
                    $958 = +HEAPF64[($6_1 + 392 | 0) >> 3];
                    HEAPF64[($6_1 + 168 | 0) >> 3] = +HEAPF64[($6_1 + 424 | 0) >> 3];
                    HEAPF64[($6_1 + 160 | 0) >> 3] = $958;
                    HEAP32[($6_1 + 156 | 0) >> 2] = $621;
                    HEAP32[($6_1 + 152 | 0) >> 2] = $620;
                    HEAP32[($6_1 + 148 | 0) >> 2] = $618;
                    HEAP32[($6_1 + 144 | 0) >> 2] = $617;
                    $396($615 | 0, 3072 | 0, 66060 | 0, $6_1 + 144 | 0 | 0);
                   }
                  }
                  break label$43;
                 }
                 label$49 : {
                  label$50 : {
                   if (!(+HEAPF64[($6_1 + 424 | 0) >> 3] < +HEAPF64[($6_1 + 400 | 0) >> 3] & 1 | 0)) {
                    break label$50
                   }
                   label$51 : {
                    if (!(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                     break label$51
                    }
                    if (!(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                     break label$50
                    }
                   }
                   label$52 : {
                    label$53 : {
                     if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                      break label$53
                     }
                     if (((HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
                      break label$52
                     }
                     if (!(+HEAPF64[($6_1 + 424 | 0) >> 3] < +HEAPF64[($6_1 + 392 | 0) >> 3] & 1 | 0)) {
                      break label$52
                     }
                    }
                    HEAP32[($6_1 + 492 | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                    HEAP32[($6_1 + 460 | 0) >> 2] = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                    HEAP32[($6_1 + 488 | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
                    HEAP32[($6_1 + 456 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                    HEAPF64[($6_1 + 392 | 0) >> 3] = +HEAPF64[($6_1 + 424 | 0) >> 3];
                    label$54 : {
                     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
                      break label$54
                     }
                     $674 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                     $676 = HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                     $677 = HEAP32[($6_1 + 460 | 0) >> 2] | 0;
                     $679 = HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                     $680 = HEAP32[($6_1 + 456 | 0) >> 2] | 0;
                     $965 = +HEAPF64[($6_1 + 392 | 0) >> 3];
                     HEAPF64[($6_1 + 200 | 0) >> 3] = +HEAPF64[($6_1 + 432 | 0) >> 3];
                     HEAPF64[($6_1 + 192 | 0) >> 3] = $965;
                     HEAP32[($6_1 + 188 | 0) >> 2] = $680;
                     HEAP32[($6_1 + 184 | 0) >> 2] = $679;
                     HEAP32[($6_1 + 180 | 0) >> 2] = $677;
                     HEAP32[($6_1 + 176 | 0) >> 2] = $676;
                     $396($674 | 0, 3018 | 0, 66160 | 0, $6_1 + 176 | 0 | 0);
                    }
                   }
                   break label$49;
                  }
                  label$55 : {
                   if ((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                    break label$55
                   }
                   label$56 : {
                    label$57 : {
                     if (!(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                      break label$57
                     }
                     if (!(((HEAP32[((HEAP32[($6_1 + 512 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
                      break label$56
                     }
                    }
                    label$58 : {
                     if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] > +HEAPF64[($6_1 + 424 | 0) >> 3] & 1 | 0)) {
                      break label$58
                     }
                     HEAPF64[($6_1 + 432 | 0) >> 3] = +HEAPF64[($6_1 + 424 | 0) >> 3];
                    }
                   }
                   label$59 : {
                    label$60 : {
                     if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] > +HEAPF64[($6_1 + 448 | 0) >> 3] & 1 | 0)) {
                      break label$60
                     }
                     HEAPF64[($6_1 + 440 | 0) >> 3] = +HEAPF64[($6_1 + 448 | 0) >> 3];
                     HEAPF64[($6_1 + 448 | 0) >> 3] = +HEAPF64[($6_1 + 432 | 0) >> 3];
                     HEAP32[($6_1 + 500 | 0) >> 2] = HEAP32[($6_1 + 512 | 0) >> 2] | 0;
                     HEAP32[($6_1 + 468 | 0) >> 2] = HEAP32[($6_1 + 484 | 0) >> 2] | 0;
                     HEAP32[($6_1 + 496 | 0) >> 2] = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
                     HEAP32[($6_1 + 464 | 0) >> 2] = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
                     label$61 : {
                      if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
                       break label$61
                      }
                      $727 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
                      $729 = HEAP32[((HEAP32[($6_1 + 500 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                      $730 = HEAP32[($6_1 + 468 | 0) >> 2] | 0;
                      $732 = HEAP32[((HEAP32[($6_1 + 496 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
                      $733 = HEAP32[($6_1 + 464 | 0) >> 2] | 0;
                      HEAPF64[($6_1 + 224 | 0) >> 3] = +HEAPF64[($6_1 + 448 | 0) >> 3];
                      HEAP32[($6_1 + 220 | 0) >> 2] = $733;
                      HEAP32[($6_1 + 216 | 0) >> 2] = $732;
                      HEAP32[($6_1 + 212 | 0) >> 2] = $730;
                      HEAP32[($6_1 + 208 | 0) >> 2] = $729;
                      $396($727 | 0, 3055 | 0, 66260 | 0, $6_1 + 208 | 0 | 0);
                     }
                     break label$59;
                    }
                    label$62 : {
                     if (!(+HEAPF64[($6_1 + 432 | 0) >> 3] > +HEAPF64[($6_1 + 440 | 0) >> 3] & 1 | 0)) {
                      break label$62
                     }
                     HEAPF64[($6_1 + 440 | 0) >> 3] = +HEAPF64[($6_1 + 432 | 0) >> 3];
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
        $745 = (HEAP32[($6_1 + 516 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($6_1 + 516 | 0) >> 2] = $745;
        label$63 : {
         label$64 : {
          if (!(($745 | 0) >= (HEAP32[($6_1 + 540 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$64
          }
          $753 = 0;
          break label$63;
         }
         $753 = HEAP32[($6_1 + 516 | 0) >> 2] | 0;
        }
        HEAP32[($6_1 + 516 | 0) >> 2] = $753;
        continue label$7;
       };
      }
      label$65 : {
       if (!(HEAP32[($6_1 + 472 | 0) >> 2] | 0)) {
        break label$65
       }
       if (!((HEAP32[(((HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 480 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$65
       }
       $773 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $775 = HEAP32[((HEAP32[($6_1 + 508 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $776 = HEAP32[($6_1 + 480 | 0) >> 2] | 0;
       $777 = HEAP32[($6_1 + 520 | 0) >> 2] | 0;
       HEAP32[($6_1 + 140 | 0) >> 2] = HEAP32[($6_1 + 516 | 0) >> 2] | 0;
       HEAP32[($6_1 + 136 | 0) >> 2] = $777;
       HEAP32[($6_1 + 132 | 0) >> 2] = $776;
       HEAP32[($6_1 + 128 | 0) >> 2] = $775;
       $396($773 | 0, 6156 | 0, 66343 | 0, $6_1 + 128 | 0 | 0);
       $382(5 | 0, HEAP32[($6_1 + 508 | 0) >> 2] | 0 | 0, 0 | 0);
      }
      HEAP32[($6_1 + 508 | 0) >> 2] = HEAP32[($6_1 + 504 | 0) >> 2] | 0;
      HEAP32[($6_1 + 480 | 0) >> 2] = HEAP32[($6_1 + 476 | 0) >> 2] | 0;
      continue label$5;
     };
    }
    label$66 : {
     if (HEAP32[($6_1 + 472 | 0) >> 2] | 0) {
      break label$66
     }
     label$67 : {
      if ((HEAP32[($6_1 + 500 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$67
      }
      if ((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$67
      }
      $804 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
      $806 = HEAP32[((HEAP32[($6_1 + 548 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      $807 = HEAP32[($6_1 + 544 | 0) >> 2] | 0;
      $808 = HEAP32[($6_1 + 520 | 0) >> 2] | 0;
      HEAP32[($6_1 + 364 | 0) >> 2] = HEAP32[($6_1 + 516 | 0) >> 2] | 0;
      HEAP32[($6_1 + 360 | 0) >> 2] = $808;
      HEAP32[($6_1 + 356 | 0) >> 2] = $807;
      HEAP32[($6_1 + 352 | 0) >> 2] = $806;
      $396($804 | 0, 6157 | 0, 66449 | 0, $6_1 + 352 | 0 | 0);
      $382(5 | 0, HEAP32[($6_1 + 548 | 0) >> 2] | 0 | 0, 0 | 0);
     }
     label$68 : {
      label$69 : {
       if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$69
       }
       HEAP32[(((HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 460 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 488 | 0) >> 2] | 0;
       HEAP32[(((HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 456 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 492 | 0) >> 2] | 0;
       $842 = HEAP32[($6_1 + 536 | 0) >> 2] | 0;
       HEAP32[$842 >> 2] = (HEAP32[$842 >> 2] | 0) - 2 | 0;
       label$70 : {
        if (!(((HEAP32[((HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0)) {
         break label$70
        }
        label$71 : {
         label$72 : {
          if (((HEAP32[((HEAP32[($6_1 + 488 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 16 | 0) & 1 | 0) {
           break label$72
          }
          HEAP32[(0 + 91232 | 0) >> 2] = (HEAP32[(0 + 91232 | 0) >> 2] | 0) + 1 | 0;
          break label$71;
         }
         HEAP32[(0 + 91240 | 0) >> 2] = (HEAP32[(0 + 91240 | 0) >> 2] | 0) + 1 | 0;
        }
       }
       break label$68;
      }
      HEAP32[(((HEAP32[((HEAP32[($6_1 + 500 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 468 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 496 | 0) >> 2] | 0;
      HEAP32[(((HEAP32[((HEAP32[($6_1 + 496 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 464 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 500 | 0) >> 2] | 0;
      $886 = HEAP32[($6_1 + 536 | 0) >> 2] | 0;
      HEAP32[$886 >> 2] = (HEAP32[$886 >> 2] | 0) - 2 | 0;
      HEAP32[(0 + 91672 | 0) >> 2] = (HEAP32[(0 + 91672 | 0) >> 2] | 0) + 1 | 0;
      label$73 : {
       if (!(HEAP32[(0 + 87832 | 0) >> 2] | 0)) {
        break label$73
       }
       $898 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $900 = HEAP32[((HEAP32[($6_1 + 496 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $901 = HEAP32[($6_1 + 464 | 0) >> 2] | 0;
       $903 = HEAP32[((HEAP32[($6_1 + 500 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       $904 = HEAP32[($6_1 + 468 | 0) >> 2] | 0;
       HEAPF64[($6_1 + 336 | 0) >> 3] = +HEAPF64[($6_1 + 448 | 0) >> 3];
       HEAP32[($6_1 + 332 | 0) >> 2] = $904;
       HEAP32[($6_1 + 328 | 0) >> 2] = $903;
       HEAP32[($6_1 + 324 | 0) >> 2] = $901;
       HEAP32[($6_1 + 320 | 0) >> 2] = $900;
       $396($898 | 0, 25 | 0, 66560 | 0, $6_1 + 320 | 0 | 0);
      }
     }
    }
    HEAP32[($6_1 + 472 | 0) >> 2] = (HEAP32[($6_1 + 472 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  label$74 : {
   label$75 : {
    if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$75
    }
    HEAPF64[($6_1 + 552 | 0) >> 3] = +HEAPF64[($6_1 + 392 | 0) >> 3];
    break label$74;
   }
   HEAPF64[($6_1 + 552 | 0) >> 3] = +HEAPF64[($6_1 + 440 | 0) >> 3];
  }
  $981 = +HEAPF64[($6_1 + 552 | 0) >> 3];
  global$0 = $6_1 + 560 | 0;
  return +$981;
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $32_1 = 0, $26_1 = 0, $27_1 = 0, $49_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 1 | 0 | 1 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    $26_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
    $27_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $27_1;
    $396($26_1 | 0, 6236 | 0, 66859 | 0, $3_1 | 0);
    $32_1 = 0;
    $382(4 | 0, $32_1 | 0, $32_1 | 0);
   }
   label$4 : {
    label$5 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) % (3 | 0) | 0)) {
      break label$5
     }
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) % (5 | 0) | 0)) {
      break label$5
     }
     break label$4;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 2 | 0;
    continue label$1;
   }
   break label$1;
  };
  HEAP32[(0 + 90284 | 0) >> 2] = $323(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $353(HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $49_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $49_1 | 0;
 }
 
 function $310() {
  var $2_1 = 0, $26_1 = 0, $36_1 = 0, $49_1 = 0, $52_1 = 0, $69_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1033 | 0, 67106 | 0, 0 | 0);
  }
  HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$2 : while (1) {
   $26_1 = 0;
   label$3 : {
    if (!((HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $26_1 = (HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$4 : {
    if (!($26_1 & 1 | 0)) {
     break label$4
    }
    $36_1 = 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = $36_1;
    label$5 : {
     if (!((HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != ($36_1 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($2_1 + 24 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 4 | 0;
     label$6 : {
      label$7 : while (1) {
       $49_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = $49_1 + 4 | 0;
       $52_1 = HEAP32[$49_1 >> 2] | 0;
       HEAP32[($2_1 + 28 | 0) >> 2] = $52_1;
       if (!(($52_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 90068 | 0) >> 2] = (HEAP32[(0 + 90068 | 0) >> 2] | 0) + -1 | 0;
       label$8 : {
        label$9 : {
         if (HEAP32[(0 + 87840 | 0) >> 2] | 0) {
          break label$9
         }
         if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
          break label$8
         }
        }
        $69_1 = $2_1 + 8 | 0;
        $4(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0, $69_1 | 0);
        HEAP32[(0 + 91928 | 0) >> 2] = (HEAP32[(0 + 91928 | 0) >> 2] | 0) + 1 | 0;
        $147(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0, $69_1 | 0, HEAP32[(0 + 90184 | 0) >> 2] | 0 | 0);
       }
       continue label$7;
      };
     }
    }
    $324((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 64 | 0 | 0);
    HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$2;
   }
   break label$2;
  };
  global$0 = $2_1 + 32 | 0;
  return;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $33_1 = 0, $82_1 = 0, $102_1 = 0, $115_1 = 0, $118_1 = 0, $133_1 = 0, $180_1 = 0, $195_1 = 0, $210_1 = 0, $79_1 = 0, $94_1 = 0, $95_1 = 0, $124_1 = 0, $183_1 = 0, $192_1 = 0, $207_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 52 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 60 | 0) >> 2] = 0;
   HEAP32[($3_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90284 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = $337(HEAP32[(0 + 90284 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!((HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $33_1 = 0;
       HEAP32[($3_1 + 68 | 0) >> 2] = $33_1;
       label$6 : {
        if (!((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($33_1 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[($3_1 + 52 | 0) >> 2] = 0;
        HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($3_1 + 48 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
        label$7 : {
         label$8 : while (1) {
          if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$7
          }
          label$9 : {
           label$10 : {
            if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$10
            }
            if ((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
             break label$10
            }
            if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
             break label$9
            }
           }
           break label$7;
          }
          $79_1 = (HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
          $82_1 = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($3_1 + 52 | 0) >> 2] = $82_1;
          HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($79_1 + ($82_1 << 2 | 0) | 0) >> 2] | 0;
          continue label$8;
         };
        }
       }
       label$11 : {
        if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$11
        }
        break label$4;
       }
       $94_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
       $95_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
       HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($3_1 + 32 | 0) >> 2] = $95_1;
       $396($94_1 | 0, 9283 | 0, 67339 | 0, $3_1 + 32 | 0 | 0);
       $102_1 = 0;
       HEAP32[($3_1 + 44 | 0) >> 2] = $102_1;
       label$12 : {
        if (!((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($102_1 | 0) & 1 | 0)) {
         break label$12
        }
        HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
        label$13 : {
         label$14 : while (1) {
          $115_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
          HEAP32[($3_1 + 40 | 0) >> 2] = $115_1 + 4 | 0;
          $118_1 = HEAP32[$115_1 >> 2] | 0;
          HEAP32[($3_1 + 44 | 0) >> 2] = $118_1;
          if (!(($118_1 | 0) != (0 | 0) & 1 | 0)) {
           break label$13
          }
          $124_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
          HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          $396($124_1 | 0, 9284 | 0, 67352 | 0, $3_1 | 0);
          continue label$14;
         };
        }
       }
       $396(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, 9285 | 0, 67357 | 0, 0 | 0);
       $133_1 = 0;
       HEAP32[($3_1 + 68 | 0) >> 2] = $133_1;
       label$15 : {
        if (!((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($133_1 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($3_1 + 52 | 0) >> 2] = 0;
        HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($3_1 + 48 | 0) >> 2] = $337(HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
        label$16 : {
         label$17 : while (1) {
          if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          label$18 : {
           label$19 : {
            if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
             break label$19
            }
            HEAP32[($3_1 + 64 | 0) >> 2] = -3;
            break label$18;
           }
           label$20 : {
            label$21 : {
             if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
              break label$21
             }
             HEAP32[($3_1 + 64 | 0) >> 2] = -2;
             break label$20;
            }
            label$22 : {
             label$23 : {
              if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
               break label$23
              }
              $180_1 = HEAP32[((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
              break label$22;
             }
             $180_1 = -1;
            }
            HEAP32[($3_1 + 64 | 0) >> 2] = $180_1;
           }
          }
          $183_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
          HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
          $396($183_1 | 0, 9286 | 0, 67370 | 0, $3_1 + 16 | 0 | 0);
          $192_1 = (HEAP32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
          $195_1 = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($3_1 + 52 | 0) >> 2] = $195_1;
          HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($192_1 + ($195_1 << 2 | 0) | 0) >> 2] | 0;
          continue label$17;
         };
        }
       }
       $396(HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, 9287 | 0, 67374 | 0, 0 | 0);
      }
     }
     $207_1 = (HEAP32[(0 + 90284 | 0) >> 2] | 0) + 4 | 0;
     $210_1 = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 60 | 0) >> 2] = $210_1;
     HEAP32[($3_1 + 72 | 0) >> 2] = HEAP32[($207_1 + ($210_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$3;
    };
   }
  }
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $312($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $174_1 = 0, $7_1 = 0, $45_1 = 0, $120_1 = 0, $17_1 = 0, $19_1 = 0, $21_1 = 0, $35_1 = 0, $94_1 = 0, $96_1 = 0, $117_1 = 0, $133_1 = 0, $135_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $7_1 = -1;
  HEAP32[($5_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $19_1 = HEAP32[((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $21_1 = HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 52 | 0) >> 2] = $21_1;
   HEAP32[($5_1 + 48 | 0) >> 2] = $19_1;
   $396($17_1 | 0, 3038 | 0, 67540 | 0, $5_1 + 48 | 0 | 0);
  }
  label$2 : {
   if (((HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
    break label$2
   }
   $35_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($35_1 | 0, 6283 | 0, 67592 | 0, $5_1 + 32 | 0 | 0);
   $382(5 | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  $45_1 = 0;
  HEAP32[($5_1 + 80 | 0) >> 2] = $45_1;
  label$3 : {
   if (!((HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($45_1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($5_1 + 72 | 0) >> 2] = 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 68 | 0) >> 2] = $337(HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      label$7 : {
       if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
        break label$7
       }
       if (!((HEAP32[((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$7
       }
       HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
       break label$6;
      }
      label$8 : {
       if (!((HEAP32[((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$8
       }
       $94_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
       $96_1 = HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       HEAP32[$5_1 >> 2] = $96_1;
       $396($94_1 | 0, 6281 | 0, 67661 | 0, $5_1 | 0);
       $382(5 | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0, 0 | 0);
      }
     }
     label$9 : {
      if (!((HEAP32[((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
     }
     $117_1 = (HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     $120_1 = (HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = $120_1;
     HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[($117_1 + ($120_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$5;
    };
   }
  }
  label$10 : {
   if (!((HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
    break label$10
   }
   $133_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $135_1 = HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $135_1;
   $396($133_1 | 0, 6282 | 0, 67737 | 0, $5_1 + 16 | 0 | 0);
   $382(5 | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0, 0 | 0);
  }
  label$11 : {
   if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
    break label$11
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
  }
  label$12 : {
   if (!((HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$12
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + -1 | 0;
  }
  label$13 : {
   if (!(((HEAP32[($5_1 + 64 | 0) >> 2] | 0) & 1 | 0 | 0) != ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) & 1 | 0 | 0) & 1 | 0)) {
    break label$13
   }
   $174_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
   HEAP32[($174_1 + 80 | 0) >> 2] = (HEAP32[($174_1 + 80 | 0) >> 2] | 0) & -4097 | 0 | ((((((HEAP32[($174_1 + 80 | 0) >> 2] | 0) >>> 12 | 0) & 1 | 0) ^ 1 | 0) & 1 | 0) << 12 | 0) | 0;
  }
  $335(HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  $319((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 52 | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[(((HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  $335(HEAP32[((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  $319((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 60 | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 96 | 0;
  return;
 }
 
 function $313() {
  var $2_1 = 0, $3_1 = 0, $267_1 = 0, $52_1 = 0, $108_1 = 0, $124_1 = 0, $212_1 = 0, $259_1 = 0, $289_1 = 0, $325_1 = 0, $347_1 = 0, $400_1 = 0, $412_1 = 0, $440_1 = 0, $450_1 = 0, $552 = 0, $577 = 0, $581 = 0, $597 = 0, $606 = 0, $99_1 = 0, $160_1 = 0, $198_1 = 0, $250_1 = 0, $280_1 = 0, $409_1 = 0, $503_1 = 0, $541 = 0, $543 = 0, $634 = 0;
  $2_1 = global$0 - 192 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 172 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 160 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 156 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 148 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 128 | 0) >> 2] = HEAP32[(0 + 87932 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 90128 | 0) >> 2] | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
     break label$3
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 1034 | 0, 67978 | 0, 0 | 0);
   }
   label$4 : {
    if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$4
    }
    break label$1;
   }
   label$5 : {
    if (!(HEAP32[(0 + 88284 | 0) >> 2] | 0)) {
     break label$5
    }
    $285(1 | 0);
    $294();
   }
   HEAP32[(0 + 87932 | 0) >> 2] = 0;
   HEAP32[(0 + 90256 | 0) >> 2] = (HEAP32[(0 + 90256 | 0) >> 2] | 0) + 1 | 0;
   $236();
   HEAP32[(0 + 90056 | 0) >> 2] = HEAP32[(0 + 90052 | 0) >> 2] | 0;
   HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$6 : while (1) {
    $52_1 = 0;
    label$7 : {
     if (!((HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     $52_1 = (HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$8 : {
     if (!($52_1 & 1 | 0)) {
      break label$8
     }
     HEAP32[($2_1 + 184 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     label$9 : {
      label$10 : {
       label$11 : {
        if (((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
         break label$11
        }
        if (!(((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0)) {
         break label$10
        }
       }
       break label$9;
      }
      label$12 : {
       if ((HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$12
       }
       HEAP32[($2_1 + 160 | 0) >> 2] = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
      }
      $314(HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0, $2_1 + 148 | 0 | 0);
     }
     HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[($2_1 + 184 | 0) >> 2] | 0;
     continue label$6;
    }
    break label$6;
   };
   label$13 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$13
    }
    $99_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$14 : {
     label$15 : {
      if (!((HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$15
      }
      $108_1 = HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$14;
     }
     $108_1 = -1;
    }
    HEAP32[($2_1 + 112 | 0) >> 2] = $108_1;
    $396($99_1 | 0, 2047 | 0, 68029 | 0, $2_1 + 112 | 0 | 0);
   }
   HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
   label$16 : while (1) {
    $124_1 = 0;
    label$17 : {
     if (!((HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$17
     }
     $124_1 = (HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$18 : {
     if (!($124_1 & 1 | 0)) {
      break label$18
     }
     HEAP32[($2_1 + 184 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     label$19 : {
      label$20 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$20
       }
       break label$19;
      }
      label$21 : {
       if (!((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$21
       }
       label$22 : {
        if (!(($337(HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
         break label$22
        }
        $160_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        HEAP32[$2_1 >> 2] = HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        $396($160_1 | 0, 6161 | 0, 68145 | 0, $2_1 | 0);
        $382(5 | 0, HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0, 0 | 0);
       }
       $324((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 56 | 0 | 0);
      }
      label$23 : {
       if (!((HEAP32[((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       HEAP32[(0 + 92344 | 0) >> 2] = (HEAP32[(0 + 92344 | 0) >> 2] | 0) + 1 | 0;
       $315(HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0);
      }
     }
     HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[($2_1 + 184 | 0) >> 2] | 0;
     continue label$16;
    }
    break label$16;
   };
   label$24 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$24
    }
    $198_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($2_1 + 96 | 0) >> 2] = $337(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
    $396($198_1 | 0, 2048 | 0, 68214 | 0, $2_1 + 96 | 0 | 0);
   }
   HEAP32[(0 + 90016 | 0) >> 2] = HEAP32[(0 + 90004 | 0) >> 2] | 0;
   label$25 : {
    label$26 : while (1) {
     $212_1 = $333(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($2_1 + 144 | 0) >> 2] = $212_1;
     if (!(($212_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$25
     }
     HEAP32[($2_1 + 168 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 144 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     HEAP32[($2_1 + 164 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 144 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
     HEAP32[($2_1 + 140 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 144 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
     $158(HEAP32[($2_1 + 144 | 0) >> 2] | 0 | 0, 48 | 0);
     label$27 : {
      if (!((HEAP32[($2_1 + 140 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
       break label$27
      }
      HEAP32[(0 + 92336 | 0) >> 2] = (HEAP32[(0 + 92336 | 0) >> 2] | 0) + 1 | 0;
      $316(HEAP32[($2_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 164 | 0) >> 2] | 0 | 0);
     }
     continue label$26;
    };
   }
   $231();
   label$28 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$28
    }
    $250_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$29 : {
     label$30 : {
      if (!((HEAP32[($2_1 + 148 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$30
      }
      $259_1 = HEAP32[((HEAP32[($2_1 + 148 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      break label$29;
     }
     $259_1 = -1;
    }
    HEAP32[($2_1 + 80 | 0) >> 2] = $259_1;
    $396($250_1 | 0, 2049 | 0, 68326 | 0, $2_1 + 80 | 0 | 0);
   }
   $267_1 = 0;
   HEAP32[(0 + 90056 | 0) >> 2] = HEAP32[($2_1 + 148 | 0) >> 2] | 0;
   HEAP32[(0 + 90016 | 0) >> 2] = $267_1;
   $268();
   $306($267_1 | 0, $267_1 | 0);
   label$31 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$31
    }
    $280_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    label$32 : {
     label$33 : {
      if (!((HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$33
      }
      $289_1 = HEAP32[((HEAP32[($2_1 + 160 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
      break label$32;
     }
     $289_1 = -1;
    }
    HEAP32[($2_1 + 64 | 0) >> 2] = $289_1;
    $396($280_1 | 0, 2050 | 0, 68387 | 0, $2_1 + 64 | 0 | 0);
   }
   label$34 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$34
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2051 | 0, 68452 | 0, 0 | 0);
   }
   label$35 : {
    if (!((HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$35
    }
    HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
    label$36 : while (1) {
     $325_1 = 0;
     label$37 : {
      if (!((HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$37
      }
      $325_1 = (HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$38 : {
      if (!($325_1 & 1 | 0)) {
       break label$38
      }
      label$39 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
        break label$39
       }
       if (((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0) {
        break label$39
       }
       $347_1 = 0;
       HEAP32[($2_1 + 176 | 0) >> 2] = $347_1;
       label$40 : {
        if (!((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($347_1 | 0) & 1 | 0)) {
         break label$40
        }
        HEAP32[($2_1 + 136 | 0) >> 2] = 0;
        HEAP32[($2_1 + 176 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($2_1 + 132 | 0) >> 2] = $337(HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
        label$41 : {
         label$42 : while (1) {
          if (!((HEAP32[($2_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$41
          }
          label$43 : {
           label$44 : {
            if (HEAP32[($2_1 + 136 | 0) >> 2] | 0) {
             break label$44
            }
            label$45 : {
             label$46 : {
              if (!(((HEAP32[((HEAP32[($2_1 + 176 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
               break label$46
              }
              HEAP32[($2_1 + 156 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 176 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
              break label$45;
             }
             HEAP32[($2_1 + 156 | 0) >> 2] = HEAP32[($2_1 + 176 | 0) >> 2] | 0;
            }
            break label$43;
           }
           label$47 : {
            label$48 : {
             if (!(((HEAP32[((HEAP32[($2_1 + 176 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
              break label$48
             }
             HEAP32[($2_1 + 152 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 176 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
             break label$47;
            }
            HEAP32[($2_1 + 152 | 0) >> 2] = HEAP32[($2_1 + 176 | 0) >> 2] | 0;
           }
           label$49 : {
            if (!((HEAP32[($2_1 + 156 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$49
            }
            HEAP32[(0 + 92328 | 0) >> 2] = (HEAP32[(0 + 92328 | 0) >> 2] | 0) + 1 | 0;
            $400_1 = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
            HEAP32[($400_1 + 80 | 0) >> 2] = (HEAP32[($400_1 + 80 | 0) >> 2] | 0) & -1073741825 | 0 | 1073741824 | 0;
            break label$41;
           }
          }
          $409_1 = (HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
          $412_1 = (HEAP32[($2_1 + 136 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($2_1 + 136 | 0) >> 2] = $412_1;
          HEAP32[($2_1 + 176 | 0) >> 2] = HEAP32[($409_1 + ($412_1 << 2 | 0) | 0) >> 2] | 0;
          continue label$42;
         };
        }
       }
      }
      HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$36;
     }
     break label$36;
    };
   }
   label$50 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
     break label$50
    }
    $281();
   }
   label$51 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$51
    }
    $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 2052 | 0, 68553 | 0, 0 | 0);
   }
   $440_1 = 0;
   HEAP32[($2_1 + 180 | 0) >> 2] = $440_1;
   HEAP32[($2_1 + 172 | 0) >> 2] = $440_1;
   HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
   label$52 : while (1) {
    $450_1 = 0;
    label$53 : {
     if (!((HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$53
     }
     $450_1 = (HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$54 : {
     if (!($450_1 & 1 | 0)) {
      break label$54
     }
     HEAP32[($2_1 + 184 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     label$55 : {
      label$56 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$56
       }
       label$57 : {
        label$58 : {
         if (!(((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
          break label$58
         }
         $251(HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0);
         HEAP32[(0 + 90020 | 0) >> 2] = (HEAP32[(0 + 90020 | 0) >> 2] | 0) + -1 | 0;
         break label$57;
        }
        label$59 : {
         if (!((HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$59
         }
         if ((HEAP32[($2_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
          break label$59
         }
         label$60 : {
          if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
           break label$60
          }
          $503_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
          HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          $396($503_1 | 0, 2053 | 0, 68637 | 0, $2_1 + 16 | 0 | 0);
         }
         $251(HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0);
         HEAP32[(0 + 90020 | 0) >> 2] = (HEAP32[(0 + 90020 | 0) >> 2] | 0) + -1 | 0;
        }
        HEAP32[($2_1 + 172 | 0) >> 2] = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
        HEAP32[($2_1 + 180 | 0) >> 2] = 0;
       }
       break label$55;
      }
      label$61 : {
       if (!(((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 9 | 0) & 1 | 0)) {
        break label$61
       }
       label$62 : {
        label$63 : {
         if ((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0) {
          break label$63
         }
         if (!((HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
          break label$62
         }
        }
        $541 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
        $543 = HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
        label$64 : {
         label$65 : {
          if (!((HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$65
          }
          $552 = HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
          break label$64;
         }
         $552 = -1;
        }
        HEAP32[($2_1 + 36 | 0) >> 2] = $552;
        HEAP32[($2_1 + 32 | 0) >> 2] = $543;
        $396($541 | 0, 6162 | 0, 68726 | 0, $2_1 + 32 | 0 | 0);
        $150(5 | 0, HEAP32[($2_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0);
       }
       label$66 : {
        label$67 : {
         if (!((HEAP32[($2_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$67
         }
         HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($2_1 + 180 | 0) >> 2] | 0;
         break label$66;
        }
        label$68 : {
         if (((HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 30 | 0) & 1 | 0) {
          break label$68
         }
         $577 = 0;
         HEAP32[($2_1 + 180 | 0) >> 2] = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
         HEAP32[($2_1 + 184 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
         $581 = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
         HEAP32[($581 + 80 | 0) >> 2] = (HEAP32[($581 + 80 | 0) >> 2] | 0) & -268435457 | 0 | 268435456 | 0;
         HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 68 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0;
         HEAP32[((HEAP32[($2_1 + 188 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
         HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 68 | 0) >> 2] = $577;
         HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 64 | 0) >> 2] = $577;
         label$69 : {
          if (HEAP32[(0 + 88264 | 0) >> 2] | 0) {
           break label$69
          }
          $597 = 0;
          HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 2] = $597;
          HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 2] = $597;
         }
         $251(HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0);
         HEAP32[(0 + 90020 | 0) >> 2] = (HEAP32[(0 + 90020 | 0) >> 2] | 0) + -1 | 0;
        }
       }
      }
     }
     $606 = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
     HEAP32[($606 + 80 | 0) >> 2] = (HEAP32[($606 + 80 | 0) >> 2] | 0) & -1073741825 | 0;
     HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[($2_1 + 184 | 0) >> 2] | 0;
     continue label$52;
    }
    break label$52;
   };
   label$70 : {
    if (!((HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$70
    }
    if ((HEAP32[($2_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$70
    }
    label$71 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
      break label$71
     }
     $634 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 172 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $396($634 | 0, 2054 | 0, 68839 | 0, $2_1 + 48 | 0 | 0);
    }
    $251(HEAP32[($2_1 + 172 | 0) >> 2] | 0 | 0);
    HEAP32[(0 + 90020 | 0) >> 2] = (HEAP32[(0 + 90020 | 0) >> 2] | 0) + -1 | 0;
   }
   HEAP32[(0 + 87932 | 0) >> 2] = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
   label$72 : {
    if (!(HEAP32[(0 + 87764 | 0) >> 2] | 0)) {
     break label$72
    }
    $278(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0);
   }
   HEAP32[(0 + 90128 | 0) >> 2] = 1;
  }
  global$0 = $2_1 + 192 | 0;
  return;
 }
 
 function $314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $308_1 = 0, $34_1 = 0, $47_1 = 0, $50_1 = 0, $56_1 = 0, $60_1 = 0, $317_1 = 0.0, $124_1 = 0, $146_1 = 0, $156_1 = 0, $164_1 = 0, $174_1 = 0, $189_1 = 0, $201_1 = 0, $261_1 = 0, $15_1 = 0, $117_1 = 0, $216_1 = 0, $233_1 = 0, $253_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($15_1 | 0, 3020 | 0, 68924 | 0, $4_1 | 0);
  }
  HEAP32[(0 + 90088 | 0) >> 2] = HEAP32[(0 + 90076 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$2
   }
   $93(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
  }
  $34_1 = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $34_1;
  label$3 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($34_1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $47_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $47_1 + 4 | 0;
     $50_1 = HEAP32[$47_1 >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $50_1;
     if (!(($50_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $56_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($56_1 + 80 | 0) >> 2] = (HEAP32[($56_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
     $60_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($60_1 + 80 | 0) >> 2] = (HEAP32[($60_1 + 80 | 0) >> 2] | 0) & -16777217 | 0;
     continue label$5;
    };
   }
  }
  label$6 : {
   if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$6
   }
   if ((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$6
   }
   label$7 : {
    label$8 : {
     if (!(+HEAPF64[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$8
     }
     $317_1 = -+HEAPF64[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
     break label$7;
    }
    $317_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
   }
   if (!($317_1 >= +HEAPF64[(0 + 89416 | 0) >> 3] * 2.0 & 1 | 0)) {
    break label$6
   }
   $117_1 = $32(HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] = $117_1;
  }
  $124_1 = HEAP32[(0 + 90004 | 0) >> 2] | 0;
  HEAP32[(0 + 90012 | 0) >> 2] = $124_1;
  HEAP32[(0 + 90016 | 0) >> 2] = $124_1;
  HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[(0 + 90256 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $261(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
  $196(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0);
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(0 + 90012 | 0) >> 2] | 0;
  label$9 : while (1) {
   $146_1 = 0;
   label$10 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$10
    }
    $146_1 = (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$11 : {
    if (!($146_1 & 1 | 0)) {
     break label$11
    }
    $156_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($156_1 + 80 | 0) >> 2] = (HEAP32[($156_1 + 80 | 0) >> 2] | 0) & -513 | 0 | 512 | 0;
    HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    $164_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($164_1 + 80 | 0) >> 2] = (HEAP32[($164_1 + 80 | 0) >> 2] | 0) & -1073741825 | 0;
    $174_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($174_1 + 80 | 0) >> 2] = (HEAP32[($174_1 + 80 | 0) >> 2] | 0) & -131073 | 0 | (((((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0) & 1 | 0) << 17 | 0) | 0;
    $189_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($189_1 + 80 | 0) >> 2] = (HEAP32[($189_1 + 80 | 0) >> 2] | 0) & -524289 | 0 | (((((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 19 | 0) & 1 | 0) & 1 | 0) << 19 | 0) | 0;
    label$12 : {
     label$13 : {
      if (!(HEAP32[(0 + 88264 | 0) >> 2] | 0)) {
       break label$13
      }
      $201_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      HEAP32[($201_1 + 80 | 0) >> 2] = (HEAP32[($201_1 + 80 | 0) >> 2] | 0) & -268435457 | 0 | 268435456 | 0;
      label$14 : {
       if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$14
       }
       $216_1 = $156(HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = $216_1;
       $512(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0 | 0) | 0;
      }
      label$15 : {
       label$16 : {
        if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$16
        }
        $233_1 = $12(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] = $233_1;
        break label$15;
       }
       label$17 : {
        if (!((HEAP32[(0 + 90104 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$17
        }
        if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$17
        }
        $253_1 = $156(HEAP32[(0 + 89992 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] = $253_1;
        $512(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89992 | 0) >> 2] | 0 | 0) | 0;
       }
      }
      break label$12;
     }
     $261_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     HEAP32[($261_1 + 80 | 0) >> 2] = (HEAP32[($261_1 + 80 | 0) >> 2] | 0) & -268435457 | 0;
     HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    }
    HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 3];
    HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 3];
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$9;
   }
   break label$9;
  };
  +$265();
  HEAP32[(0 + 92304 | 0) >> 2] = (HEAP32[(0 + 92304 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 92320 | 0) >> 2] = (HEAP32[(0 + 92320 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0;
  label$18 : {
   if (!((HEAP32[(0 + 92312 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$18
   }
   HEAP32[(0 + 92312 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  label$19 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$19
   }
   HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 90056 | 0) >> 2] | 0;
  }
  $308_1 = 0;
  HEAP32[(0 + 90056 | 0) >> 2] = $308_1;
  HEAP32[(0 + 90016 | 0) >> 2] = $308_1;
  $268();
  $306($308_1 | 0, $308_1 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $396($13_1 | 0, 3023 | 0, 69330 | 0, $3_1 | 0);
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $317(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
  $196(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $102_1 = 0, $107_1 = 0, $14_1 = 0, $16_1 = 0, $99_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $16_1 = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $16_1;
   $396($14_1 | 0, 3022 | 0, 69246 | 0, $4_1 | 0);
  }
  $21_1 = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $21_1;
  label$2 : {
   if (!((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($21_1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $337(HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     label$5 : {
      label$6 : {
       if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       break label$5;
      }
      label$7 : {
       if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
        break label$7
       }
       if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
        break label$7
       }
       label$8 : {
        if (!($235(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0, 12 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0)) {
         break label$8
        }
        break label$5;
       }
      }
      label$9 : {
       if (!(((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$9
       }
       if (!(((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
        break label$9
       }
       break label$5;
      }
      $317(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
     }
     $99_1 = (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
     $102_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $102_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($99_1 + ($102_1 << 2 | 0) | 0) >> 2] | 0;
     continue label$4;
    };
   }
  }
  $107_1 = 0;
  $196(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $107_1 | 0);
  $196(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $107_1 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $317($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $24_1 = 0, $26_1 = 0, $28_1 = 0, $44_1 = 0, $46_1 = 0, $48_1 = 0, $50_1 = 0, $91_1 = 0, $93_1 = 0, $95_1 = 0, $97_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$3
     }
     $24_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
     $26_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     $28_1 = HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $28_1;
     HEAP32[($6_1 + 16 | 0) >> 2] = $26_1;
     $396($24_1 | 0, 3052 | 0, 68969 | 0, $6_1 + 16 | 0 | 0);
    }
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[(0 + 87832 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$4
    }
    $44_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $46_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $48_1 = HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    $50_1 = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    HEAP32[($6_1 + 40 | 0) >> 2] = $50_1;
    HEAP32[($6_1 + 36 | 0) >> 2] = $48_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $46_1;
    $396($44_1 | 0, 3021 | 0, 69038 | 0, $6_1 + 32 | 0 | 0);
   }
  }
  label$5 : {
   label$6 : {
    if (!($342(HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) | 0)) {
     break label$6
    }
    label$7 : {
     label$8 : {
      if ($342(HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0) {
       break label$8
      }
      HEAP32[($6_1 + 60 | 0) >> 2] = 1;
      break label$7;
     }
     label$9 : {
      label$10 : {
       if (!((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
        break label$10
       }
       if (!((HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 31 | 0)) {
        break label$10
       }
       if ($235(HEAP32[(0 + 90276 | 0) >> 2] | 0 | 0, 12 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) | 0) {
        break label$9
       }
      }
      $174(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, 12 | 0, +(+(0 | 0)), +(1.0));
     }
    }
    break label$5;
   }
   label$11 : {
    if (!($342(HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0)) {
     break label$11
    }
    HEAP32[($6_1 + 60 | 0) >> 2] = 1;
   }
  }
  label$12 : {
   if (!(HEAP32[($6_1 + 60 | 0) >> 2] | 0)) {
    break label$12
   }
   $91_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $93_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $95_1 = HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $97_1 = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = $97_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $95_1;
   HEAP32[$6_1 >> 2] = $93_1;
   $396($91_1 | 0, 6163 | 0, 69120 | 0, $6_1 | 0);
   $150(5 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0);
  }
  $346(HEAP32[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0);
  $346(HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $318($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $284(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $348(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $350(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $60_1 = 0, $66_1 = 0, $86_1 = 0, $89_1 = 0, $93_1 = 0, $55_1 = 0, $92_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $23_1 = ((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $23_1;
    if (HEAP32[$23_1 >> 2] | 0) {
     break label$1
    }
   }
   $320(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 24 | 0) >> 2] = ((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
  }
  HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$4
    }
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
   }
   $55_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   $396($55_1 | 0, 6171 | 0, 69442 | 0, $5_1 | 0);
   $60_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69513 | 0, HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0 | 0);
   $382(5 | 0, $60_1 | 0, $60_1 | 0);
  }
  $66_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[$66_1 >> 2] = (HEAP32[$66_1 >> 2] | 0) + 1 | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = ((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) - (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) + 1 | 0;
  label$5 : {
   label$6 : while (1) {
    $86_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $86_1 + -1 | 0;
    if (!$86_1) {
     break label$5
    }
    $89_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $89_1 + -4 | 0;
    $92_1 = HEAP32[$89_1 >> 2] | 0;
    $93_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $93_1 + -4 | 0;
    HEAP32[$93_1 >> 2] = $92_1;
    continue label$6;
   };
  }
  HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $29_1 = 0, $85_1 = 0, $88_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = 1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0;
    $23_1 = HEAP32[(((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($3_1 + 20 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 40 | 0) >> 2] = $23_1;
    label$3 : {
     label$4 : {
      if (!$23_1) {
       break label$4
      }
      HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + -1 | 0;
      break label$3;
     }
     HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    }
    $29_1 = 0;
    HEAP32[(0 + 90516 | 0) >> 2] = (HEAP32[(0 + 90516 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 90520 | 0) >> 2] = (HEAP32[(0 + 90520 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0) | 0;
    $322(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, $3_1 + 36 | 0 | 0) | 0;
    HEAP32[($3_1 + 32 | 0) >> 2] = $323(HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0;
    $512(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 2 | 0 | 0) | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = ((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAP32[(HEAP32[($3_1 + 16 | 0) >> 2] | 0) >> 2] = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = $29_1;
    label$5 : {
     if (!((HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) != ($29_1 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[(0 + 90456 | 0) >> 2] | 0) + 4 | 0;
     label$6 : {
      label$7 : while (1) {
       $85_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       HEAP32[($3_1 + 24 | 0) >> 2] = $85_1 + 4 | 0;
       $88_1 = HEAP32[$85_1 >> 2] | 0;
       HEAP32[($3_1 + 28 | 0) >> 2] = $88_1;
       if (!(($88_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       label$8 : {
        if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + -4 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       }
       continue label$7;
      };
     }
    }
    $324(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($3_1 + 32 | 0) >> 2] = $323(3 | 0) | 0;
  }
  HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return;
 }
 
 function $321($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0, $13_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $37_1 = 0, $63_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    $13_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
    $396($13_1 | 0, 9346 | 0, 69923 | 0, $5_1 + 32 | 0 | 0);
    break label$1;
   }
   $27_1 = HEAP32[(((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = $27_1;
   label$3 : {
    label$4 : {
     if (!$27_1) {
      break label$4
     }
     HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[($5_1 + 48 | 0) >> 2] | 0) + -1 | 0;
     break label$3;
    }
    HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
   }
   $33_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
   $34_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
   $35_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   $37_1 = HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = $37_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $35_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $34_1;
   $396($33_1 | 0, 9347 | 0, 69939 | 0, $5_1 + 16 | 0 | 0);
   label$5 : {
    if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $63_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
     HEAP32[$5_1 >> 2] = HEAP32[(((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     $396($63_1 | 0, 9348 | 0, 69975 | 0, $5_1 | 0);
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   $396(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 9349 | 0, 69979 | 0, 0 | 0);
  }
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $322($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 1 | 0;
  HEAP32[$4_1 >> 2] = ((HEAP32[(0 + 90424 | 0) >> 2] | 0) - 8 | 0 | 0) / (4 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) <= (HEAP32[$4_1 >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (!(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0) > (HEAP32[$4_1 >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$4 : {
    if (!(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) / (3 | 0) | 0) | 0 | 0) <= (HEAP32[$4_1 >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $323($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $71_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$1 : {
   if (HEAP32[($3_1 + 28 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) + 8 | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) <= (HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = $156(HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[(0 + 90436 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[(0 + 90440 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$4 : {
     if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) > (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) - (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0 | 0) / (4 | 0) | 0) | 0;
    }
    break label$2;
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $156(HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  HEAP32[(((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
  HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  $71_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $71_1 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) + 8 | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     $158(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
     break label$2;
    }
    $158(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $325($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $29_1 = 0, $43_1 = 0, $44_1 = 0, $58_1 = 0, $57_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $29_1 = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $29_1;
     if (HEAP32[$29_1 >> 2] | 0) {
      break label$3
     }
    }
    $320(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 20 | 0) >> 2] = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
   }
   $43_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   $44_1 = HEAP32[$43_1 >> 2] | 0;
   HEAP32[$43_1 >> 2] = $44_1 + 1 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = $44_1 - 1 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0;
   $57_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   $58_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $58_1 + 4 | 0;
   HEAP32[$58_1 >> 2] = $57_1;
   HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0, $48_1 = 0, $35_1 = 0, $73_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   $20_1 = HEAP32[(((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = $20_1;
   label$3 : {
    label$4 : {
     if (!$20_1) {
      break label$4
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0;
     break label$3;
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   }
   label$5 : {
    if ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    $35_1 = $323(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] = $35_1;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
   $48_1 = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $48_1;
   label$6 : {
    label$7 : {
     if ($48_1) {
      break label$7
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
     break label$6;
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + -1 | 0;
   }
   label$8 : {
    if (!(((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0 | 0) > (HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
    $73_1 = $327(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] = $73_1;
    $324($4_1 + 12 | 0 | 0);
    HEAP32[($4_1 + 8 | 0) >> 2] = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
   }
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0) + 1 | 0;
   $512(((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0, ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0) << 2 | 0 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $53_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  }
  $21_1 = HEAP32[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = $21_1;
  label$2 : {
   label$3 : {
    if (!$21_1) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -1 | 0;
    break label$2;
   }
   HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $323((HEAP32[$4_1 >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0) | 0;
  HEAP32[(((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
  $512((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0, ((HEAP32[$4_1 >> 2] | 0) + 1 | 0) << 2 | 0 | 0) | 0;
  $53_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $53_1 | 0;
 }
 
 function $328($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $22_1 = 0, $36_1 = 0, $37_1 = 0, $53_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $22_1 = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $22_1;
    if (HEAP32[$22_1 >> 2] | 0) {
     break label$1
    }
   }
   $320(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 20 | 0) >> 2] = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
  }
  $36_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $37_1 = HEAP32[$36_1 >> 2] | 0;
  HEAP32[$36_1 >> 2] = $37_1 + 1 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $37_1 - 1 | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + -4 | 0;
  $53_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $53_1 + 4 | 0;
  HEAP32[$53_1 >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $329($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $21_1 = 0, $75_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $66_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   $21_1 = HEAP32[(((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($5_1 + 44 | 0) >> 2] = $21_1;
   label$3 : {
    label$4 : {
     if (!$21_1) {
      break label$4
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + -1 | 0;
     break label$3;
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 2] | 0;
   }
   HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     label$7 : {
      if ((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$7
      }
      if (HEAP32[($5_1 + 48 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $38_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
     $39_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     $40_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
     $41_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $41_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $40_1;
     HEAP32[$5_1 >> 2] = $39_1;
     $396($38_1 | 0, 6172 | 0, 69514 | 0, $5_1 | 0);
     HEAP32[($5_1 + 40 | 0) >> 2] = 1;
     break label$5;
    }
    label$8 : {
     if (!((HEAP32[(((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     $61_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
     $62_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
     $63_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     $66_1 = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) - 1 | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
     HEAP32[($5_1 + 24 | 0) >> 2] = $66_1;
     HEAP32[($5_1 + 20 | 0) >> 2] = $63_1;
     HEAP32[($5_1 + 16 | 0) >> 2] = $62_1;
     $396($61_1 | 0, 6173 | 0, 69602 | 0, $5_1 + 16 | 0 | 0);
     HEAP32[($5_1 + 40 | 0) >> 2] = 1;
    }
   }
   if (!(HEAP32[($5_1 + 40 | 0) >> 2] | 0)) {
    break label$1
   }
   $75_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69684 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $75_1 | 0, $75_1 | 0);
  }
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $330($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $27_1 = 0, $19_1 = 0, $34_1 = 0, $37_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   $19_1 = HEAP32[(((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $19_1;
   label$3 : {
    label$4 : {
     if (!$19_1) {
      break label$4
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + -1 | 0;
     break label$3;
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
   }
   $27_1 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $27_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $27_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $27_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0;
   label$5 : {
    label$6 : while (1) {
     $34_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $34_1 + 4 | 0;
     $37_1 = HEAP32[$34_1 >> 2] | 0;
     $38_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = $38_1 + 4 | 0;
     HEAP32[$38_1 >> 2] = $37_1;
     label$7 : {
      if (($37_1 | 0) != (0 | 0) & 1 | 0) {
       break label$7
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + -4 | 0;
      label$8 : {
       if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 > (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$8
       }
       break label$5;
      }
     }
     continue label$6;
    };
   }
   $331(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 2 | 0 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $21_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $396($21_1 | 0, 6181 | 0, 70536 | 0, $4_1 | 0);
   $26_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69513 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $26_1 | 0, $26_1 | 0);
  }
  HEAP32[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $25_1 = 0, $54_1 = 0, $55_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
   label$3 : while (1) {
    $25_1 = 0;
    label$4 : {
     if (!((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $25_1 = (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($25_1 & 1 | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
     continue label$3;
    }
    break label$3;
   };
   label$6 : {
    if (!((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
    $54_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    $55_1 = HEAP32[$54_1 >> 2] | 0;
    HEAP32[$54_1 >> 2] = $55_1 + -1 | 0;
    label$7 : {
     if ($55_1) {
      break label$7
     }
     HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0;
    HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0, $50_1 = 0;
  $3_1 = global$0 - 32 | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
   $29_1 = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = $29_1;
   label$4 : {
    label$5 : {
     if (!$29_1) {
      break label$5
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) - 2 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[(((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) - 2 | 0) << 2 | 0) | 0) >> 2] = 0;
     $50_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     HEAP32[$50_1 >> 2] = (HEAP32[$50_1 >> 2] | 0) + -1 | 0;
     break label$4;
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[(((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  return HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $14_1 = 0, $41_1 = 0, $36_1 = 0, $70_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
  $13_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  $14_1 = HEAP32[$13_1 >> 2] | 0;
  HEAP32[$13_1 >> 2] = $14_1 + -1 | 0;
  label$1 : {
   if ($14_1) {
    break label$1
   }
   HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$3
    }
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) >= (HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
   }
   $36_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   $396($36_1 | 0, 6174 | 0, 69694 | 0, $4_1 | 0);
   $41_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69513 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $41_1 | 0, $41_1 | 0);
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  $70_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $70_1 | 0;
 }
 
 function $335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $46_1 = 0, $64_1 = 0, $67_1 = 0, $68_1 = 0, $76_1 = 0, $77_1 = 0, $41_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$2
    }
    label$3 : {
     if (!(HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0)) {
      break label$3
     }
     if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) >= ((HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0) {
      break label$2
     }
    }
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) >= (HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $41_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   $396($41_1 | 0, 6175 | 0, 69765 | 0, $4_1 | 0);
   $46_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69513 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $46_1 | 0, $46_1 | 0);
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
  label$4 : {
   label$5 : while (1) {
    $64_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $64_1 + 4 | 0;
    $67_1 = HEAP32[$64_1 >> 2] | 0;
    $68_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $68_1 + 4 | 0;
    HEAP32[$68_1 >> 2] = $67_1;
    if (!(($67_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    continue label$5;
   };
  }
  $76_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  $77_1 = HEAP32[$76_1 >> 2] | 0;
  HEAP32[$76_1 >> 2] = $77_1 + -1 | 0;
  label$6 : {
   if ($77_1) {
    break label$6
   }
   HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  }
  $83_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $83_1 | 0;
 }
 
 function $336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $25_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $70_1 = 0, $71_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
   label$3 : while (1) {
    $25_1 = 0;
    label$4 : {
     if (!((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $25_1 = (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($25_1 & 1 | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
     continue label$3;
    }
    break label$3;
   };
   label$6 : {
    if (!((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    label$7 : {
     label$8 : while (1) {
      $50_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = $50_1 + 4 | 0;
      $53_1 = HEAP32[$50_1 >> 2] | 0;
      $54_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = $54_1 + 4 | 0;
      HEAP32[$54_1 >> 2] = $53_1;
      if (!(($53_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      continue label$8;
     };
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
    $70_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    $71_1 = HEAP32[$70_1 >> 2] | 0;
    HEAP32[$70_1 >> 2] = $71_1 + -1 | 0;
    label$9 : {
     if ($71_1) {
      break label$9
     }
     HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $21_1 = 0, $41_1 = 0, $34_1 = 0, $35_1 = 0, $49_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
   $21_1 = HEAP32[(HEAP32[($3_1 + 16 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = $21_1;
   label$3 : {
    label$4 : {
     if (!$21_1) {
      break label$4
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + -1 | 0;
     label$5 : {
      if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      $34_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
      $35_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[$3_1 >> 2] = $35_1;
      $396($34_1 | 0, 6178 | 0, 70045 | 0, $3_1 | 0);
      $41_1 = 0;
      $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 70133 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
      $382(5 | 0, $41_1 | 0, $41_1 | 0);
     }
     break label$3;
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
  }
  $49_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $49_1 | 0;
 }
 
 function $338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0, $41_1 = 0, $71_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
    break label$1
   }
   $20_1 = HEAP32[(((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $20_1;
   label$2 : {
    label$3 : {
     if (!$20_1) {
      break label$3
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + -1 | 0;
     break label$2;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   }
  }
  label$4 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $41_1 = HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $41_1;
   label$5 : {
    label$6 : {
     if (!$41_1) {
      break label$6
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     break label$5;
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
   }
  }
  label$7 : {
   label$8 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$7;
   }
   label$9 : {
    if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
     break label$9
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 1;
    break label$7;
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0;
   label$10 : {
    if ($462(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0) | 0) {
     break label$10
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 1;
    break label$7;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $71_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $71_1 | 0;
 }
 
 function $339($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $62_1 = 0, $65_1 = 0, $80_1 = 0, $84_1 = 0, $83_1 = 0;
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 4 | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (!((HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0;
    }
    label$4 : {
     label$5 : {
      if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      label$6 : {
       if (!((HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + 1 | 0;
       HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 4 | 0;
      }
      break label$4;
     }
     label$7 : {
      if (!((HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + 1 | 0;
      $62_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = $62_1 + 4 | 0;
      $65_1 = HEAP32[$62_1 >> 2] | 0;
      HEAP32[($6_1 + 12 | 0) >> 2] = $65_1;
      label$8 : {
       if (($65_1 | 0) != (0 | 0) & 1 | 0) {
        break label$8
       }
       HEAP32[($6_1 + 28 | 0) >> 2] = 0;
       break label$1;
      }
     }
    }
    label$9 : {
     label$10 : {
      if ((HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$10
      }
      break label$9;
     }
     $80_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($6_1 + 8 | 0) >> 2] = $80_1 + 4 | 0;
     $83_1 = HEAP32[$80_1 >> 2] | 0;
     $84_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $84_1 + 4 | 0;
     label$11 : {
      if (!(($83_1 | 0) != (HEAP32[$84_1 >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     continue label$2;
    }
    break label$2;
   };
   label$12 : {
    label$13 : {
     if ((HEAP32[$6_1 >> 2] | 0 | 0) != (2 | 0) & 1 | 0) {
      break label$13
     }
     if (!((HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 1;
  }
  return HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $340($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $55_1 = 0, $59_1 = 0, $58_1 = 0;
  $6_1 = global$0 - 48 | 0;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($6_1 + 16 | 0) >> 2] = ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 4 | 0;
    }
    label$4 : {
     if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 4 | 0;
    }
    label$5 : {
     label$6 : {
      if ((HEAP32[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$6
      }
      break label$5;
     }
     $55_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $55_1 + 4 | 0;
     $58_1 = HEAP32[$55_1 >> 2] | 0;
     $59_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $59_1 + 4 | 0;
     label$7 : {
      if (!(($58_1 | 0) != (HEAP32[$59_1 >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = 0;
      break label$1;
     }
     continue label$2;
    }
    break label$2;
   };
   label$8 : {
    if (!((HEAP32[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = 1;
  }
  return HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) + 8 | 0;
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 90424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $158(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
   }
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 32 | 0;
  $5_1 = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
    label$3 : {
     label$4 : while (1) {
      $16_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = $16_1 + 4 | 0;
      $19_1 = HEAP32[$16_1 >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = $19_1;
      if (!(($19_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = 1;
       break label$1;
      }
      continue label$4;
     };
    }
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $47_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = -1;
    break label$1;
   }
   $21_1 = HEAP32[(((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = $21_1;
   label$3 : {
    label$4 : {
     if (!$21_1) {
      break label$4
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + -1 | 0;
     break label$3;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   }
   label$5 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = -1;
    break label$1;
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $47_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $47_1 + 4 | 0;
     label$8 : {
      if (!((HEAP32[$47_1 >> 2] | 0 | 0) == (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      break label$1;
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = -1;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $344($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[(((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (HEAP32[($3_1 + 4 | 0) >> 2] | 0) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     break label$1;
    }
    label$4 : {
     if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) + (((HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 2 | 0) << 2 | 0) | 0) >> 2] | 0;
     break label$1;
    }
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $345($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $45_1 = 0, $25_1 = 0, $40_1 = 0, $42_1 = 0, $54_1 = 0, $55_1 = 0, $59_1 = 0, $62_1 = 0, $66_1 = 0, $69_1 = 0, $73_1 = 0, $76_1 = 0, $80_1 = 0, $83_1 = 0, $87_1 = 0, $90_1 = 0, $94_1 = 0, $97_1 = 0, $101_1 = 0, $104_1 = 0, $108_1 = 0, $111_1 = 0, $115_1 = 0, $118_1 = 0, $122_1 = 0, $141_1 = 0, $143_1 = 0, $144_1 = 0, $148_1 = 0, $151_1 = 0, $155_1 = 0, $158_1 = 0, $162_1 = 0, $165_1 = 0, $169_1 = 0, $172_1 = 0, $176_1 = 0, $179_1 = 0, $183_1 = 0, $186_1 = 0, $190_1 = 0, $193_1 = 0, $197_1 = 0, $200_1 = 0, $204_1 = 0, $207_1 = 0, $211_1 = 0, $20_1 = 0, $58_1 = 0, $65_1 = 0, $72_1 = 0, $79_1 = 0, $86_1 = 0, $93_1 = 0, $100_1 = 0, $107_1 = 0, $114_1 = 0, $121_1 = 0, $147_1 = 0, $154_1 = 0, $161_1 = 0, $168_1 = 0, $175_1 = 0, $182_1 = 0, $189_1 = 0, $196_1 = 0, $203_1 = 0, $210_1 = 0, $226_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) - (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0) - 1 | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   $20_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
   $396($20_1 | 0, 6176 | 0, 69842 | 0, $6_1 | 0);
   $25_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69513 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $25_1 | 0, $25_1 | 0);
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + (HEAP32[($6_1 + 32 | 0) >> 2] | 0) | 0) + -1 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $323(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $40_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $42_1 = 2;
  $45_1 = 4;
  HEAP32[(($40_1 + ((HEAP32[$40_1 >> 2] | 0) << $42_1 | 0) | 0) + $45_1 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $45_1 | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 32 | 0) >> 2] | 0) << $42_1 | 0) | 0) + $45_1 | 0;
  $54_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    switch ($54_1 | 0) {
    case 0:
     break label$2;
    case 1:
     $55_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $55_1 + 4 | 0;
     $58_1 = HEAP32[$55_1 >> 2] | 0;
     $59_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $59_1 + 4 | 0;
     HEAP32[$59_1 >> 2] = $58_1;
     break label$2;
    case 2:
     $62_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $62_1 + 4 | 0;
     $65_1 = HEAP32[$62_1 >> 2] | 0;
     $66_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $66_1 + 4 | 0;
     HEAP32[$66_1 >> 2] = $65_1;
     $69_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $69_1 + 4 | 0;
     $72_1 = HEAP32[$69_1 >> 2] | 0;
     $73_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $73_1 + 4 | 0;
     HEAP32[$73_1 >> 2] = $72_1;
     break label$2;
    case 3:
     $76_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $76_1 + 4 | 0;
     $79_1 = HEAP32[$76_1 >> 2] | 0;
     $80_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $80_1 + 4 | 0;
     HEAP32[$80_1 >> 2] = $79_1;
     $83_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $83_1 + 4 | 0;
     $86_1 = HEAP32[$83_1 >> 2] | 0;
     $87_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $87_1 + 4 | 0;
     HEAP32[$87_1 >> 2] = $86_1;
     $90_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $90_1 + 4 | 0;
     $93_1 = HEAP32[$90_1 >> 2] | 0;
     $94_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $94_1 + 4 | 0;
     HEAP32[$94_1 >> 2] = $93_1;
     break label$2;
    case 4:
     $97_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $97_1 + 4 | 0;
     $100_1 = HEAP32[$97_1 >> 2] | 0;
     $101_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $101_1 + 4 | 0;
     HEAP32[$101_1 >> 2] = $100_1;
     $104_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $104_1 + 4 | 0;
     $107_1 = HEAP32[$104_1 >> 2] | 0;
     $108_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $108_1 + 4 | 0;
     HEAP32[$108_1 >> 2] = $107_1;
     $111_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $111_1 + 4 | 0;
     $114_1 = HEAP32[$111_1 >> 2] | 0;
     $115_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $115_1 + 4 | 0;
     HEAP32[$115_1 >> 2] = $114_1;
     $118_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $118_1 + 4 | 0;
     $121_1 = HEAP32[$118_1 >> 2] | 0;
     $122_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $122_1 + 4 | 0;
     HEAP32[$122_1 >> 2] = $121_1;
     break label$2;
    default:
     break label$3;
    };
   }
   $512(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0;
  }
  $141_1 = 4;
  HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + $141_1 | 0;
  $143_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  label$9 : {
   label$10 : {
    switch ($143_1 | 0) {
    case 0:
     break label$9;
    case 1:
     $144_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $144_1 + 4 | 0;
     $147_1 = HEAP32[$144_1 >> 2] | 0;
     $148_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $148_1 + 4 | 0;
     HEAP32[$148_1 >> 2] = $147_1;
     break label$9;
    case 2:
     $151_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $151_1 + 4 | 0;
     $154_1 = HEAP32[$151_1 >> 2] | 0;
     $155_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $155_1 + 4 | 0;
     HEAP32[$155_1 >> 2] = $154_1;
     $158_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $158_1 + 4 | 0;
     $161_1 = HEAP32[$158_1 >> 2] | 0;
     $162_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $162_1 + 4 | 0;
     HEAP32[$162_1 >> 2] = $161_1;
     break label$9;
    case 3:
     $165_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $165_1 + 4 | 0;
     $168_1 = HEAP32[$165_1 >> 2] | 0;
     $169_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $169_1 + 4 | 0;
     HEAP32[$169_1 >> 2] = $168_1;
     $172_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $172_1 + 4 | 0;
     $175_1 = HEAP32[$172_1 >> 2] | 0;
     $176_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $176_1 + 4 | 0;
     HEAP32[$176_1 >> 2] = $175_1;
     $179_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $179_1 + 4 | 0;
     $182_1 = HEAP32[$179_1 >> 2] | 0;
     $183_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $183_1 + 4 | 0;
     HEAP32[$183_1 >> 2] = $182_1;
     break label$9;
    case 4:
     $186_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $186_1 + 4 | 0;
     $189_1 = HEAP32[$186_1 >> 2] | 0;
     $190_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $190_1 + 4 | 0;
     HEAP32[$190_1 >> 2] = $189_1;
     $193_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $193_1 + 4 | 0;
     $196_1 = HEAP32[$193_1 >> 2] | 0;
     $197_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $197_1 + 4 | 0;
     HEAP32[$197_1 >> 2] = $196_1;
     $200_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $200_1 + 4 | 0;
     $203_1 = HEAP32[$200_1 >> 2] | 0;
     $204_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $204_1 + 4 | 0;
     HEAP32[$204_1 >> 2] = $203_1;
     $207_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $207_1 + 4 | 0;
     $210_1 = HEAP32[$207_1 >> 2] | 0;
     $211_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $211_1 + 4 | 0;
     HEAP32[$211_1 >> 2] = $210_1;
     break label$9;
    default:
     break label$10;
    };
   }
   $512(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  }
  HEAP32[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 2] = 0;
  $226_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $226_1 | 0;
 }
 
 function $346($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $18_1 = 0, $47_1 = 0, $42_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0;
  label$1 : while (1) {
   $18_1 = 0;
   label$2 : {
    if (!((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $18_1 = (HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($18_1 & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0;
    continue label$1;
   }
   break label$1;
  };
  label$4 : {
   label$5 : {
    if (!((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    break label$4;
   }
   $42_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   $396($42_1 | 0, 6177 | 0, 69981 | 0, $5_1 | 0);
   $47_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69513 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $47_1 | 0, $47_1 | 0);
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $20_1 = 0, $22_1 = 0, $28_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $323(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  $325(90408 + 48 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$1
   }
   $19_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   $20_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   $22_1 = HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $22_1;
   HEAP32[$3_1 >> 2] = $20_1;
   $396($19_1 | 0, 8123 | 0, 70139 | 0, $3_1 | 0);
  }
  $28_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $28_1 | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $42_1 = 0, $23_1 = 0, $25_1 = 0, $28_1 = 0, $33_1 = 0, $34_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $349() | 0;
   label$3 : {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $350(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
    $23_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
    $25_1 = HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
    $28_1 = $337(HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
    $33_1 = ($337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    $34_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = $337(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $34_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $33_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $28_1;
    HEAP32[$3_1 >> 2] = $25_1;
    $396($23_1 | 0, 6179 | 0, 70189 | 0, $3_1 | 0);
    $42_1 = 0;
    $382(5 | 0, $42_1 | 0, $42_1 | 0);
   }
   $324(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $349() {
  var $2_1 = 0, $19_1 = 0, $29_1 = 0, $34_1 = 0, $35_1 = 0, $40_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $333(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   $396(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 6180 | 0, 70305 | 0, 0 | 0);
   $19_1 = 0;
   $382(5 | 0, $19_1 | 0, $19_1 | 0);
  }
  label$2 : {
   if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$2
   }
   $29_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   $34_1 = ($337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   $35_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $337(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $35_1;
   HEAP32[$2_1 >> 2] = $34_1;
   $396($29_1 | 0, 8124 | 0, 70375 | 0, $2_1 | 0);
  }
  $40_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $40_1 | 0;
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0, $31_1 = 0, $34_1 = 0, $35_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   $396(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 6267 | 0, 70427 | 0, 0 | 0);
   $17_1 = 0;
   $382(5 | 0, $17_1 | 0, $17_1 | 0);
  }
  $325(90408 + 48 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$2 : {
   if (!((HEAP32[(0 + 90464 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$2
   }
   $31_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   $34_1 = $337(HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) | 0;
   $35_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $337(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $35_1;
   HEAP32[$3_1 >> 2] = $34_1;
   $396($31_1 | 0, 8125 | 0, 70483 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $351() {
  var $2_1 = 0, $3_1 = 0, $16_1 = 0, $19_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   if (!((HEAP32[(0 + 90456 | 0) >> 2] | 0 | 0) != ($3_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[(0 + 90456 | 0) >> 2] | 0) + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $16_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $16_1 + 4 | 0;
     $19_1 = HEAP32[$16_1 >> 2] | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = $19_1;
     if (!(($19_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     $324($2_1 + 12 | 0 | 0);
     continue label$3;
    };
   }
  }
  $324(90408 + 48 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ($342(HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $325(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $13_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $353($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $35_1 = 0, $29_1 = 0, $30_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $29_1 = HEAP32[(0 + 90460 | 0) >> 2] | 0;
   $30_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = $30_1;
   $396($29_1 | 0, 6182 | 0, 70607 | 0, $5_1 | 0);
   $35_1 = 0;
   $321(HEAP32[(0 + 90460 | 0) >> 2] | 0 | 0, 69513 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
   $382(5 | 0, $35_1 | 0, $35_1 | 0);
  }
  HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0) + 1 | 0;
  $513(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, 0 | 0, (HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $354($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $14_1 = 0, $24_1 = 0, $48_1 = 0, $57_1 = 0, $123_1 = 0, $126_1 = 0, $142_1 = 0, $153_1 = 0, $160_1 = 0, $163_1 = 0, $167_1 = 0, $172_1 = 0, $166_1 = 0, $192_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP8[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 0] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($6_1 + 40 | 0) >> 2] | 0)) {
      break label$3
     }
     $14_1 = $470(HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, 92 | 0) | 0;
     HEAP32[($6_1 + 16 | 0) >> 2] = $14_1;
     label$4 : {
      label$5 : {
       label$6 : {
        if (($14_1 | 0) != (0 | 0) & 1 | 0) {
         break label$6
        }
        $24_1 = $470(HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, 47 | 0) | 0;
        HEAP32[($6_1 + 16 | 0) >> 2] = $24_1;
        if (!(($24_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$5
        }
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
       break label$4;
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
     }
     label$7 : {
      label$8 : {
       if (!(($518(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$8
       }
       $467(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
       break label$7;
      }
      break label$2;
     }
     $48_1 = $471(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, 70686 | 0) | 0;
     HEAP32[($6_1 + 16 | 0) >> 2] = $48_1;
     label$9 : {
      label$10 : {
       if (($48_1 | 0) != (0 | 0) & 1 | 0) {
        break label$10
       }
       $57_1 = $471(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, 70691 | 0) | 0;
       HEAP32[($6_1 + 16 | 0) >> 2] = $57_1;
       if (!(($57_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$9
       }
      }
      HEAP8[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 0] = 0;
     }
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = 1;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($6_1 + 20 | 0) >> 2] = (((HEAP32[($6_1 + 28 | 0) >> 2] | 0) - ($518(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0) | 0) - ($518(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0) | 0) - 2 | 0;
      label$13 : {
       label$14 : {
        label$15 : {
         if (!(((HEAPU8[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$15
         }
         if (!(($464(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, 32 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$14
         }
        }
        HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ($518(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0) | 0;
        HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) - 2 | 0;
        label$16 : {
         if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
          break label$16
         }
         break label$2;
        }
        $123_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        HEAP32[($6_1 + 12 | 0) >> 2] = $123_1 + 1 | 0;
        HEAP8[$123_1 >> 0] = 32;
        $126_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        HEAP32[($6_1 + 12 | 0) >> 2] = $126_1 + 1 | 0;
        HEAP8[$126_1 >> 0] = 34;
        label$17 : {
         label$18 : while (1) {
          if (!(((HEAPU8[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
           break label$17
          }
          $142_1 = 24;
          label$19 : {
           if (!((((HEAPU8[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 0] | 0) << $142_1 | 0) >> $142_1 | 0 | 0) == (34 | 0) & 1 | 0)) {
            break label$19
           }
           $153_1 = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = $153_1;
           label$20 : {
            if (!(($153_1 | 0) < (0 | 0) & 1 | 0)) {
             break label$20
            }
            break label$2;
           }
           $160_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
           HEAP32[($6_1 + 12 | 0) >> 2] = $160_1 + 1 | 0;
           HEAP8[$160_1 >> 0] = 92;
          }
          $163_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
          HEAP32[($6_1 + 16 | 0) >> 2] = $163_1 + 1 | 0;
          $166_1 = HEAPU8[$163_1 >> 0] | 0;
          $167_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
          HEAP32[($6_1 + 12 | 0) >> 2] = $167_1 + 1 | 0;
          HEAP8[$167_1 >> 0] = $166_1;
          continue label$18;
         };
        }
        $172_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        HEAP32[($6_1 + 12 | 0) >> 2] = $172_1 + 1 | 0;
        HEAP8[$172_1 >> 0] = 34;
        HEAP8[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 0] = 0;
        break label$13;
       }
       label$21 : {
        if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
         break label$21
        }
        break label$2;
       }
       $463(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, 70696 | 0) | 0;
       $463(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  }
  $192_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $192_1 | 0;
 }
 
 function $355() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[(0 + 87016 | 0) >> 2] | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[$2_1 >> 2] | 0 | 0) / (127773 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[$2_1 >> 2] | 0 | 0) % (127773 | 0) | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($2_1 + 12 | 0) >> 2] | 0, 16807) - Math_imul(HEAP32[($2_1 + 8 | 0) >> 2] | 0, 2836) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 2147483647 | 0;
  }
  HEAP32[(0 + 87016 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return HEAP32[$2_1 >> 2] | 0 | 0;
 }
 
 function $356($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 87016 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) >= (2147483647 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[(0 + 87016 | 0) >> 2] = 2147483646;
     break label$3;
    }
    HEAP32[(0 + 87016 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   }
  }
  return;
 }
 
 function $357($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $13_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +($355() | 0 | 0);
  $13_1 = +HEAPF64[($4_1 + 8 | 0) >> 3] * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 16 | 0) >> 3];
  global$0 = $4_1 + 32 | 0;
  return +$13_1;
 }
 
 function $358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $18_1 = 0, $29_1 = 0, $17_1 = 0, $49_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $17_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    $18_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $18_1 + 4 | 0;
    HEAP32[$18_1 >> 2] = $17_1;
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[($5_1 + 8 | 0) >> 3] = +($355() | 0 | 0);
      $49_1 = 2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] / 2147483647.0 - 1.0;
      $29_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
      HEAP32[($5_1 + 20 | 0) >> 2] = $29_1 + 8 | 0;
      HEAPF64[$29_1 >> 3] = $49_1;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $359($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $29_1 = 0, $36_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF64[$4_1 >> 3] = +$457(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $21_1 = 24;
   if (!((((HEAPU8[((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $21_1 | 0) >> $21_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
    break label$1
   }
   $29_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[$29_1 >> 2] = (HEAP32[$29_1 >> 2] | 0) + -1 | 0;
  }
  $36_1 = +HEAPF64[$4_1 >> 3];
  global$0 = $4_1 + 16 | 0;
  return +$36_1;
 }
 
 function $360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $23_1 = 0, $31_1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $460(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 10 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $23_1 = 24;
   if (!((((HEAPU8[((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $23_1 | 0) >> $23_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
    break label$1
   }
   $31_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[$31_1 >> 2] = (HEAP32[$31_1 >> 2] | 0) + -1 | 0;
  }
  $35_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $35_1 | 0;
 }
 
 function $361() {
  var $1_1 = 0, $0_1 = 0, $26_1 = 0, $29_1 = 0, $34_1 = 0, $48_1 = 0, $56_1 = 0, $64_1 = 0, $72_1 = 0, $80_1 = 0, $88_1 = 0, $96_1 = 0, $107_1 = 0, $115_1 = 0, $123_1 = 0, $131_1 = 0, $139_1 = 0, $147_1 = 0, $155_1 = 0, $163_1 = 0, $171_1 = 0, $179_1 = 0, $187_1 = 0, $195_1 = 0, $203_1 = 0;
  $0_1 = 1;
  $1_1 = 65535;
  $26_1 = 0;
  $29_1 = 8;
  $34_1 = 7;
  $48_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $48_1 + 1 | 0;
  HEAP8[($48_1 + 92520 | 0) >> 0] = 66;
  HEAP32[(0 + 93044 | 0) >> 2] = 70698;
  HEAP16[(0 + 93908 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94340 | 0) >> 0] = $26_1;
  $56_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $56_1 + 1 | 0;
  HEAP8[($56_1 + 92520 | 0) >> 0] = 151;
  HEAP32[(0 + 93384 | 0) >> 2] = 0;
  HEAP16[(0 + 94078 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94425 | 0) >> 0] = $0_1;
  $64_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $64_1 + 1 | 0;
  HEAP8[($64_1 + 92520 | 0) >> 0] = 152;
  HEAP32[(0 + 93388 | 0) >> 2] = 70719;
  HEAP16[(0 + 94080 | 0) >> 1] = 151;
  HEAP8[(0 + 94426 | 0) >> 0] = 6;
  $72_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $72_1 + 1 | 0;
  HEAP8[($72_1 + 92520 | 0) >> 0] = 153;
  HEAP32[(0 + 93392 | 0) >> 2] = 70760;
  HEAP16[(0 + 94082 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94427 | 0) >> 0] = $34_1;
  $80_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $80_1 + 1 | 0;
  HEAP8[($80_1 + 92520 | 0) >> 0] = 233;
  HEAP32[(0 + 93712 | 0) >> 2] = 70801;
  HEAP16[(0 + 94242 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94507 | 0) >> 0] = $34_1;
  $88_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $88_1 + 1 | 0;
  HEAP8[($88_1 + 92520 | 0) >> 0] = 234;
  HEAP32[(0 + 93716 | 0) >> 2] = 70846;
  HEAP16[(0 + 94244 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94508 | 0) >> 0] = $29_1;
  $96_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $96_1 + 1 | 0;
  HEAP8[($96_1 + 92520 | 0) >> 0] = 140;
  HEAP32[(0 + 93340 | 0) >> 2] = 70891;
  HEAP16[(0 + 94056 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94414 | 0) >> 0] = $29_1;
  HEAP32[(0 + 94852 | 0) >> 2] = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  $107_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $107_1 + 1 | 0;
  HEAP8[($107_1 + 92520 | 0) >> 0] = 67;
  HEAP32[(0 + 93048 | 0) >> 2] = 70934;
  HEAP16[(0 + 93910 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94341 | 0) >> 0] = $26_1;
  $115_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $115_1 + 1 | 0;
  HEAP8[($115_1 + 92520 | 0) >> 0] = 41;
  HEAP32[(0 + 92944 | 0) >> 2] = 70989;
  HEAP16[(0 + 93858 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94315 | 0) >> 0] = $0_1;
  $123_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $123_1 + 1 | 0;
  HEAP8[($123_1 + 92520 | 0) >> 0] = 32;
  HEAP32[(0 + 92908 | 0) >> 2] = 71020;
  HEAP16[(0 + 93840 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94306 | 0) >> 0] = $0_1;
  $131_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $131_1 + 1 | 0;
  HEAP8[($131_1 + 92520 | 0) >> 0] = 87;
  HEAP32[(0 + 93128 | 0) >> 2] = 71050;
  HEAP16[(0 + 93950 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94361 | 0) >> 0] = $0_1;
  $139_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $139_1 + 1 | 0;
  HEAP8[($139_1 + 92520 | 0) >> 0] = 38;
  HEAP32[(0 + 92932 | 0) >> 2] = 71065;
  HEAP16[(0 + 93852 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94312 | 0) >> 0] = $0_1;
  $147_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $147_1 + 1 | 0;
  HEAP8[($147_1 + 92520 | 0) >> 0] = 40;
  HEAP32[(0 + 92940 | 0) >> 2] = 71106;
  HEAP16[(0 + 93856 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94314 | 0) >> 0] = $0_1;
  $155_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $155_1 + 1 | 0;
  HEAP8[($155_1 + 92520 | 0) >> 0] = 142;
  HEAP32[(0 + 93348 | 0) >> 2] = 71142;
  HEAP16[(0 + 94060 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94416 | 0) >> 0] = $0_1;
  $163_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $163_1 + 1 | 0;
  HEAP8[($163_1 + 92520 | 0) >> 0] = 144;
  HEAP32[(0 + 93356 | 0) >> 2] = 71202;
  HEAP16[(0 + 94064 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94418 | 0) >> 0] = $0_1;
  $171_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $171_1 + 1 | 0;
  HEAP8[($171_1 + 92520 | 0) >> 0] = 14;
  HEAP32[(0 + 92836 | 0) >> 2] = 71247;
  HEAP16[(0 + 93804 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94288 | 0) >> 0] = $0_1;
  $179_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $179_1 + 1 | 0;
  HEAP8[($179_1 + 92520 | 0) >> 0] = 104;
  HEAP32[(0 + 93196 | 0) >> 2] = 71284;
  HEAP16[(0 + 93984 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94378 | 0) >> 0] = $0_1;
  $187_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $187_1 + 1 | 0;
  HEAP8[($187_1 + 92520 | 0) >> 0] = 143;
  HEAP32[(0 + 93352 | 0) >> 2] = 71326;
  HEAP16[(0 + 94062 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94417 | 0) >> 0] = $0_1;
  $195_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $195_1 + 1 | 0;
  HEAP8[($195_1 + 92520 | 0) >> 0] = 88;
  HEAP32[(0 + 93132 | 0) >> 2] = 71360;
  HEAP16[(0 + 93952 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94362 | 0) >> 0] = $0_1;
  $203_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $203_1 + 1 | 0;
  HEAP8[($203_1 + 92520 | 0) >> 0] = 89;
  HEAP32[(0 + 93136 | 0) >> 2] = 71405;
  HEAP16[(0 + 93954 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94363 | 0) >> 0] = $0_1;
  return;
 }
 
 function $362() {
  var $1_1 = 0, $15_1 = 0, $17_1 = 0, $20_1 = 0, $7_1 = 0, $21_1 = 0, $0_1 = 0, $4_1 = 0, $34_1 = 0, $49_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $95_1 = 0, $103_1 = 0, $111_1 = 0, $119_1 = 0, $127_1 = 0, $135_1 = 0, $143_1 = 0, $151_1 = 0, $159_1 = 0, $167_1 = 0, $175_1 = 0, $183_1 = 0, $191_1 = 0, $199_1 = 0, $207_1 = 0, $215_1 = 0, $223_1 = 0, $231_1 = 0, $239_1 = 0, $247_1 = 0, $255_1 = 0, $263_1 = 0, $271_1 = 0, $279_1 = 0;
  $0_1 = 8;
  $1_1 = 65535;
  $4_1 = 7;
  $7_1 = 6;
  $15_1 = 1;
  $17_1 = 3;
  $20_1 = 2;
  $21_1 = 161;
  $34_1 = 71741;
  $49_1 = 165;
  $63_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $63_1 + 1 | 0;
  HEAP8[($63_1 + 92520 | 0) >> 0] = 65;
  HEAP32[(0 + 93040 | 0) >> 2] = 71455;
  HEAP16[(0 + 93906 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94339 | 0) >> 0] = 0;
  $71_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $71_1 + 1 | 0;
  HEAP8[($71_1 + 92520 | 0) >> 0] = 238;
  HEAP32[(0 + 93732 | 0) >> 2] = 71475;
  HEAP16[(0 + 94252 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94512 | 0) >> 0] = $15_1;
  $79_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $79_1 + 1 | 0;
  HEAP8[($79_1 + 92520 | 0) >> 0] = 161;
  HEAP32[(0 + 93424 | 0) >> 2] = 71504;
  HEAP16[(0 + 94098 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94435 | 0) >> 0] = $15_1;
  $87_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $87_1 + 1 | 0;
  HEAP8[($87_1 + 92520 | 0) >> 0] = 156;
  HEAP32[(0 + 93404 | 0) >> 2] = 71531;
  HEAP16[(0 + 94088 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94430 | 0) >> 0] = $15_1;
  $95_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $95_1 + 1 | 0;
  HEAP8[($95_1 + 92520 | 0) >> 0] = 157;
  HEAP32[(0 + 93408 | 0) >> 2] = 71573;
  HEAP16[(0 + 94090 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94431 | 0) >> 0] = $15_1;
  $103_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $103_1 + 1 | 0;
  HEAP8[($103_1 + 92520 | 0) >> 0] = $49_1;
  HEAP32[(0 + 93440 | 0) >> 2] = 71616;
  HEAP16[(0 + 94106 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94439 | 0) >> 0] = $15_1;
  $111_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $111_1 + 1 | 0;
  HEAP8[($111_1 + 92520 | 0) >> 0] = $49_1;
  HEAP32[(0 + 93440 | 0) >> 2] = 71643;
  HEAP16[(0 + 94106 | 0) >> 1] = $21_1;
  HEAP8[(0 + 94439 | 0) >> 0] = $20_1;
  $119_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $119_1 + 1 | 0;
  HEAP8[($119_1 + 92520 | 0) >> 0] = 119;
  HEAP32[(0 + 93256 | 0) >> 2] = 71678;
  HEAP16[(0 + 94014 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94393 | 0) >> 0] = $17_1;
  $127_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $127_1 + 1 | 0;
  HEAP8[($127_1 + 92520 | 0) >> 0] = 164;
  HEAP32[(0 + 93436 | 0) >> 2] = 71703;
  HEAP16[(0 + 94104 | 0) >> 1] = $21_1;
  HEAP8[(0 + 94438 | 0) >> 0] = $20_1;
  $135_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $135_1 + 1 | 0;
  HEAP8[($135_1 + 92520 | 0) >> 0] = 116;
  HEAP32[(0 + 93244 | 0) >> 2] = $34_1;
  HEAP16[(0 + 94008 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94390 | 0) >> 0] = $17_1;
  $143_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $143_1 + 1 | 0;
  HEAP8[($143_1 + 92520 | 0) >> 0] = 166;
  HEAP32[(0 + 93444 | 0) >> 2] = 71769;
  HEAP16[(0 + 94108 | 0) >> 1] = $21_1;
  HEAP8[(0 + 94440 | 0) >> 0] = $20_1;
  $151_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $151_1 + 1 | 0;
  HEAP8[($151_1 + 92520 | 0) >> 0] = 121;
  HEAP32[(0 + 93264 | 0) >> 2] = 71806;
  HEAP16[(0 + 94018 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94395 | 0) >> 0] = $17_1;
  $159_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $159_1 + 1 | 0;
  HEAP8[($159_1 + 92520 | 0) >> 0] = 168;
  HEAP32[(0 + 93452 | 0) >> 2] = 71833;
  HEAP16[(0 + 94112 | 0) >> 1] = 238;
  HEAP8[(0 + 94442 | 0) >> 0] = $20_1;
  $167_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $167_1 + 1 | 0;
  HEAP8[($167_1 + 92520 | 0) >> 0] = 122;
  HEAP32[(0 + 93268 | 0) >> 2] = $34_1;
  HEAP16[(0 + 94020 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94396 | 0) >> 0] = $17_1;
  $175_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $175_1 + 1 | 0;
  HEAP8[($175_1 + 92520 | 0) >> 0] = 42;
  HEAP32[(0 + 92948 | 0) >> 2] = 71872;
  HEAP16[(0 + 93860 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94316 | 0) >> 0] = $7_1;
  $183_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $183_1 + 1 | 0;
  HEAP8[($183_1 + 92520 | 0) >> 0] = 220;
  HEAP32[(0 + 93660 | 0) >> 2] = 71906;
  HEAP16[(0 + 94216 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94494 | 0) >> 0] = $15_1;
  $191_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $191_1 + 1 | 0;
  HEAP8[($191_1 + 92520 | 0) >> 0] = 212;
  HEAP32[(0 + 93628 | 0) >> 2] = 71934;
  HEAP16[(0 + 94200 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94486 | 0) >> 0] = $15_1;
  $199_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $199_1 + 1 | 0;
  HEAP8[($199_1 + 92520 | 0) >> 0] = 219;
  HEAP32[(0 + 93656 | 0) >> 2] = 71960;
  HEAP16[(0 + 94214 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94493 | 0) >> 0] = $15_1;
  $207_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $207_1 + 1 | 0;
  HEAP8[($207_1 + 92520 | 0) >> 0] = 185;
  HEAP32[(0 + 93520 | 0) >> 2] = 71986;
  HEAP16[(0 + 94146 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94459 | 0) >> 0] = $15_1;
  $215_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $215_1 + 1 | 0;
  HEAP8[($215_1 + 92520 | 0) >> 0] = 163;
  HEAP32[(0 + 93432 | 0) >> 2] = 72011;
  HEAP16[(0 + 94102 | 0) >> 1] = $21_1;
  HEAP8[(0 + 94437 | 0) >> 0] = $20_1;
  $223_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $223_1 + 1 | 0;
  HEAP8[($223_1 + 92520 | 0) >> 0] = 162;
  HEAP32[(0 + 93428 | 0) >> 2] = 72050;
  HEAP16[(0 + 94100 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94436 | 0) >> 0] = $17_1;
  $231_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $231_1 + 1 | 0;
  HEAP8[($231_1 + 92520 | 0) >> 0] = $17_1;
  HEAP32[(0 + 92792 | 0) >> 2] = 0;
  HEAP16[(0 + 93782 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94277 | 0) >> 0] = $15_1;
  $239_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $239_1 + 1 | 0;
  HEAP8[($239_1 + 92520 | 0) >> 0] = 4;
  HEAP32[(0 + 92796 | 0) >> 2] = 72093;
  HEAP16[(0 + 93784 | 0) >> 1] = 3;
  HEAP8[(0 + 94278 | 0) >> 0] = $7_1;
  $247_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $247_1 + 1 | 0;
  HEAP8[($247_1 + 92520 | 0) >> 0] = 5;
  HEAP32[(0 + 92800 | 0) >> 2] = 72148;
  HEAP16[(0 + 93786 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94279 | 0) >> 0] = $4_1;
  $255_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $255_1 + 1 | 0;
  HEAP8[($255_1 + 92520 | 0) >> 0] = $7_1;
  HEAP32[(0 + 92804 | 0) >> 2] = 72207;
  HEAP16[(0 + 93788 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94280 | 0) >> 0] = $0_1;
  $263_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $263_1 + 1 | 0;
  HEAP8[($263_1 + 92520 | 0) >> 0] = $0_1;
  HEAP32[(0 + 92812 | 0) >> 2] = 72267;
  HEAP16[(0 + 93792 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94282 | 0) >> 0] = $7_1;
  $271_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $271_1 + 1 | 0;
  HEAP8[($271_1 + 92520 | 0) >> 0] = 9;
  HEAP32[(0 + 92816 | 0) >> 2] = 72288;
  HEAP16[(0 + 93794 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94283 | 0) >> 0] = $4_1;
  $279_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $279_1 + 1 | 0;
  HEAP8[($279_1 + 92520 | 0) >> 0] = 10;
  HEAP32[(0 + 92820 | 0) >> 2] = 72309;
  HEAP16[(0 + 93796 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94284 | 0) >> 0] = $0_1;
  return;
 }
 
 function $363() {
  var $4_1 = 0, $0_1 = 0, $38_1 = 0, $31_1 = 0, $41_1 = 0, $44_1 = 0, $32_1 = 0, $49_1 = 0, $73_1 = 0, $81_1 = 0, $89_1 = 0, $97_1 = 0, $105_1 = 0, $113_1 = 0, $121_1 = 0, $129_1 = 0, $137_1 = 0, $145_1 = 0, $153_1 = 0, $161_1 = 0, $169_1 = 0, $177_1 = 0, $185_1 = 0, $193_1 = 0, $201_1 = 0, $209_1 = 0, $217_1 = 0, $225_1 = 0, $233_1 = 0, $241_1 = 0, $249_1 = 0, $257_1 = 0, $265_1 = 0, $273_1 = 0, $281_1 = 0, $289_1 = 0, $297_1 = 0, $305_1 = 0, $313_1 = 0, $321_1 = 0;
  $0_1 = 1;
  $4_1 = 65535;
  $31_1 = 6;
  $32_1 = 72761;
  $38_1 = 187;
  $41_1 = 3;
  $44_1 = 2;
  $49_1 = 72574;
  $73_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $73_1 + 1 | 0;
  HEAP8[($73_1 + 92520 | 0) >> 0] = 73;
  HEAP32[(0 + 93072 | 0) >> 2] = 72330;
  HEAP16[(0 + 93922 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94347 | 0) >> 0] = 0;
  $81_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $81_1 + 1 | 0;
  HEAP8[($81_1 + 92520 | 0) >> 0] = 187;
  HEAP32[(0 + 93528 | 0) >> 2] = 72352;
  HEAP16[(0 + 94150 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94461 | 0) >> 0] = $0_1;
  $89_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $89_1 + 1 | 0;
  HEAP8[($89_1 + 92520 | 0) >> 0] = 194;
  HEAP32[(0 + 93556 | 0) >> 2] = 72369;
  HEAP16[(0 + 94164 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94468 | 0) >> 0] = $0_1;
  $97_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $97_1 + 1 | 0;
  HEAP8[($97_1 + 92520 | 0) >> 0] = 195;
  HEAP32[(0 + 93560 | 0) >> 2] = 72403;
  HEAP16[(0 + 94166 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94469 | 0) >> 0] = 7;
  $105_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $105_1 + 1 | 0;
  HEAP8[($105_1 + 92520 | 0) >> 0] = 120;
  HEAP32[(0 + 93260 | 0) >> 2] = 72424;
  HEAP16[(0 + 94016 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94394 | 0) >> 0] = $41_1;
  $113_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $113_1 + 1 | 0;
  HEAP8[($113_1 + 92520 | 0) >> 0] = 221;
  HEAP32[(0 + 93664 | 0) >> 2] = 72454;
  HEAP16[(0 + 94218 | 0) >> 1] = $38_1;
  HEAP8[(0 + 94495 | 0) >> 0] = $0_1;
  $121_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $121_1 + 1 | 0;
  HEAP8[($121_1 + 92520 | 0) >> 0] = 110;
  HEAP32[(0 + 93220 | 0) >> 2] = 72488;
  HEAP16[(0 + 93996 | 0) >> 1] = $38_1;
  HEAP8[(0 + 94384 | 0) >> 0] = $0_1;
  $129_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $129_1 + 1 | 0;
  HEAP8[($129_1 + 92520 | 0) >> 0] = 239;
  HEAP32[(0 + 93736 | 0) >> 2] = 72538;
  HEAP16[(0 + 94254 | 0) >> 1] = $38_1;
  HEAP8[(0 + 94513 | 0) >> 0] = $44_1;
  $137_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $137_1 + 1 | 0;
  HEAP8[($137_1 + 92520 | 0) >> 0] = 240;
  HEAP32[(0 + 93740 | 0) >> 2] = $49_1;
  HEAP16[(0 + 94256 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94514 | 0) >> 0] = $41_1;
  $145_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $145_1 + 1 | 0;
  HEAP8[($145_1 + 92520 | 0) >> 0] = 243;
  HEAP32[(0 + 93752 | 0) >> 2] = 72586;
  HEAP16[(0 + 94262 | 0) >> 1] = $38_1;
  HEAP8[(0 + 94517 | 0) >> 0] = $44_1;
  $153_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $153_1 + 1 | 0;
  HEAP8[($153_1 + 92520 | 0) >> 0] = 244;
  HEAP32[(0 + 93756 | 0) >> 2] = $49_1;
  HEAP16[(0 + 94264 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94518 | 0) >> 0] = $41_1;
  $161_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $161_1 + 1 | 0;
  HEAP8[($161_1 + 92520 | 0) >> 0] = 215;
  HEAP32[(0 + 93640 | 0) >> 2] = 72622;
  HEAP16[(0 + 94206 | 0) >> 1] = $38_1;
  HEAP8[(0 + 94489 | 0) >> 0] = $0_1;
  $169_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $169_1 + 1 | 0;
  HEAP8[($169_1 + 92520 | 0) >> 0] = 149;
  HEAP32[(0 + 93376 | 0) >> 2] = 72656;
  HEAP16[(0 + 94074 | 0) >> 1] = $38_1;
  HEAP8[(0 + 94423 | 0) >> 0] = $44_1;
  $177_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $177_1 + 1 | 0;
  HEAP8[($177_1 + 92520 | 0) >> 0] = 150;
  HEAP32[(0 + 93380 | 0) >> 2] = 72696;
  HEAP16[(0 + 94076 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94424 | 0) >> 0] = $41_1;
  $185_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $185_1 + 1 | 0;
  HEAP8[($185_1 + 92520 | 0) >> 0] = 146;
  HEAP32[(0 + 93364 | 0) >> 2] = 72735;
  HEAP16[(0 + 94068 | 0) >> 1] = $38_1;
  HEAP8[(0 + 94420 | 0) >> 0] = $31_1;
  $193_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $193_1 + 1 | 0;
  HEAP8[($193_1 + 92520 | 0) >> 0] = 147;
  HEAP32[(0 + 93368 | 0) >> 2] = $32_1;
  HEAP16[(0 + 94070 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94421 | 0) >> 0] = $31_1;
  $201_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $201_1 + 1 | 0;
  HEAP8[($201_1 + 92520 | 0) >> 0] = 180;
  HEAP32[(0 + 93500 | 0) >> 2] = 72782;
  HEAP16[(0 + 94136 | 0) >> 1] = 179;
  HEAP8[(0 + 94454 | 0) >> 0] = $31_1;
  $209_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $209_1 + 1 | 0;
  HEAP8[($209_1 + 92520 | 0) >> 0] = 181;
  HEAP32[(0 + 93504 | 0) >> 2] = $32_1;
  HEAP16[(0 + 94138 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94455 | 0) >> 0] = $31_1;
  $217_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $217_1 + 1 | 0;
  HEAP8[($217_1 + 92520 | 0) >> 0] = 179;
  HEAP32[(0 + 93496 | 0) >> 2] = 72808;
  HEAP16[(0 + 94134 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94453 | 0) >> 0] = $0_1;
  $225_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $225_1 + 1 | 0;
  HEAP8[($225_1 + 92520 | 0) >> 0] = 211;
  HEAP32[(0 + 93624 | 0) >> 2] = 72816;
  HEAP16[(0 + 94198 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94485 | 0) >> 0] = $0_1;
  $233_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $233_1 + 1 | 0;
  HEAP8[($233_1 + 92520 | 0) >> 0] = 55;
  HEAP32[(0 + 93e3 | 0) >> 2] = 72859;
  HEAP16[(0 + 93886 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94329 | 0) >> 0] = $0_1;
  $241_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $241_1 + 1 | 0;
  HEAP8[($241_1 + 92520 | 0) >> 0] = 155;
  HEAP32[(0 + 93400 | 0) >> 2] = 72887;
  HEAP16[(0 + 94086 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94429 | 0) >> 0] = $0_1;
  $249_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $249_1 + 1 | 0;
  HEAP8[($249_1 + 92520 | 0) >> 0] = 56;
  HEAP32[(0 + 93004 | 0) >> 2] = 72938;
  HEAP16[(0 + 93888 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94330 | 0) >> 0] = $0_1;
  $257_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $257_1 + 1 | 0;
  HEAP8[($257_1 + 92520 | 0) >> 0] = 160;
  HEAP32[(0 + 93420 | 0) >> 2] = 72988;
  HEAP16[(0 + 94096 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94434 | 0) >> 0] = $0_1;
  $265_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $265_1 + 1 | 0;
  HEAP8[($265_1 + 92520 | 0) >> 0] = 183;
  HEAP32[(0 + 93512 | 0) >> 2] = 73024;
  HEAP16[(0 + 94142 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94457 | 0) >> 0] = $0_1;
  $273_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $273_1 + 1 | 0;
  HEAP8[($273_1 + 92520 | 0) >> 0] = 158;
  HEAP32[(0 + 93412 | 0) >> 2] = 73054;
  HEAP16[(0 + 94092 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94432 | 0) >> 0] = $0_1;
  $281_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $281_1 + 1 | 0;
  HEAP8[($281_1 + 92520 | 0) >> 0] = 159;
  HEAP32[(0 + 93416 | 0) >> 2] = 73091;
  HEAP16[(0 + 94094 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94433 | 0) >> 0] = $0_1;
  $289_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $289_1 + 1 | 0;
  HEAP8[($289_1 + 92520 | 0) >> 0] = 105;
  HEAP32[(0 + 93200 | 0) >> 2] = 73139;
  HEAP16[(0 + 93986 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94379 | 0) >> 0] = $0_1;
  $297_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $297_1 + 1 | 0;
  HEAP8[($297_1 + 92520 | 0) >> 0] = 167;
  HEAP32[(0 + 93448 | 0) >> 2] = 73157;
  HEAP16[(0 + 94110 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94441 | 0) >> 0] = $0_1;
  $305_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $305_1 + 1 | 0;
  HEAP8[($305_1 + 92520 | 0) >> 0] = 63;
  HEAP32[(0 + 93032 | 0) >> 2] = 73193;
  HEAP16[(0 + 93902 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94337 | 0) >> 0] = $0_1;
  $313_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $313_1 + 1 | 0;
  HEAP8[($313_1 + 92520 | 0) >> 0] = 214;
  HEAP32[(0 + 93636 | 0) >> 2] = 73233;
  HEAP16[(0 + 94204 | 0) >> 1] = $4_1;
  HEAP8[(0 + 94488 | 0) >> 0] = $0_1;
  $321_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $321_1 + 1 | 0;
  HEAP8[($321_1 + 92520 | 0) >> 0] = 22;
  HEAP32[(0 + 92868 | 0) >> 2] = 73273;
  HEAP16[(0 + 93820 | 0) >> 1] = 214;
  HEAP8[(0 + 94296 | 0) >> 0] = $0_1;
  return;
 }
 
 function $364() {
  var $1_1 = 0, $0_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $19_1 = 0, $12_1 = 0, $13_1 = 0, $25_1 = 0, $31_1 = 0, $54_1 = 0, $62_1 = 0, $70_1 = 0, $78_1 = 0, $86_1 = 0, $94_1 = 0, $102_1 = 0, $110_1 = 0, $118_1 = 0, $126_1 = 0, $134_1 = 0, $142_1 = 0, $150_1 = 0, $158_1 = 0, $166_1 = 0, $174_1 = 0, $182_1 = 0, $190_1 = 0, $198_1 = 0, $206_1 = 0, $214_1 = 0, $222_1 = 0, $230_1 = 0, $238_1 = 0, $246_1 = 0;
  $0_1 = 1;
  $1_1 = 65535;
  $12_1 = 95;
  $13_1 = 73610;
  $15_1 = 3;
  $16_1 = 73547;
  $18_1 = 2;
  $19_1 = 73527;
  $25_1 = 99;
  $31_1 = 90;
  $54_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $54_1 + 1 | 0;
  HEAP8[($54_1 + 92520 | 0) >> 0] = 241;
  HEAP32[(0 + 93744 | 0) >> 2] = 73305;
  HEAP16[(0 + 94258 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94515 | 0) >> 0] = $0_1;
  $62_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $62_1 + 1 | 0;
  HEAP8[($62_1 + 92520 | 0) >> 0] = 245;
  HEAP32[(0 + 93760 | 0) >> 2] = 73324;
  HEAP16[(0 + 94266 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94519 | 0) >> 0] = $0_1;
  $70_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $70_1 + 1 | 0;
  HEAP8[($70_1 + 92520 | 0) >> 0] = 242;
  HEAP32[(0 + 93748 | 0) >> 2] = 73349;
  HEAP16[(0 + 94260 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94516 | 0) >> 0] = $15_1;
  $78_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $78_1 + 1 | 0;
  HEAP8[($78_1 + 92520 | 0) >> 0] = 246;
  HEAP32[(0 + 93764 | 0) >> 2] = 73366;
  HEAP16[(0 + 94268 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94520 | 0) >> 0] = $15_1;
  $86_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $86_1 + 1 | 0;
  HEAP8[($86_1 + 92520 | 0) >> 0] = 68;
  HEAP32[(0 + 93052 | 0) >> 2] = 73387;
  HEAP16[(0 + 93912 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94342 | 0) >> 0] = 0;
  $94_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $94_1 + 1 | 0;
  HEAP8[($94_1 + 92520 | 0) >> 0] = 53;
  HEAP32[(0 + 92992 | 0) >> 2] = 73443;
  HEAP16[(0 + 93882 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94327 | 0) >> 0] = $18_1;
  $102_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $102_1 + 1 | 0;
  HEAP8[($102_1 + 92520 | 0) >> 0] = 54;
  HEAP32[(0 + 92996 | 0) >> 2] = 73466;
  HEAP16[(0 + 93884 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94328 | 0) >> 0] = $15_1;
  $110_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $110_1 + 1 | 0;
  HEAP8[($110_1 + 92520 | 0) >> 0] = 90;
  HEAP32[(0 + 93140 | 0) >> 2] = 73509;
  HEAP16[(0 + 93956 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94364 | 0) >> 0] = $0_1;
  $118_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $118_1 + 1 | 0;
  HEAP8[($118_1 + 92520 | 0) >> 0] = 92;
  HEAP32[(0 + 93148 | 0) >> 2] = $19_1;
  HEAP16[(0 + 93960 | 0) >> 1] = $31_1;
  HEAP8[(0 + 94366 | 0) >> 0] = $18_1;
  $126_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $126_1 + 1 | 0;
  HEAP8[($126_1 + 92520 | 0) >> 0] = 91;
  HEAP32[(0 + 93144 | 0) >> 2] = $16_1;
  HEAP16[(0 + 93958 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94365 | 0) >> 0] = $15_1;
  $134_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $134_1 + 1 | 0;
  HEAP8[($134_1 + 92520 | 0) >> 0] = 93;
  HEAP32[(0 + 93152 | 0) >> 2] = 73567;
  HEAP16[(0 + 93962 | 0) >> 1] = $31_1;
  HEAP8[(0 + 94367 | 0) >> 0] = $18_1;
  $142_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $142_1 + 1 | 0;
  HEAP8[($142_1 + 92520 | 0) >> 0] = 99;
  HEAP32[(0 + 93176 | 0) >> 2] = 73589;
  HEAP16[(0 + 93974 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94373 | 0) >> 0] = $0_1;
  $150_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $150_1 + 1 | 0;
  HEAP8[($150_1 + 92520 | 0) >> 0] = 101;
  HEAP32[(0 + 93184 | 0) >> 2] = $19_1;
  HEAP16[(0 + 93978 | 0) >> 1] = $25_1;
  HEAP8[(0 + 94375 | 0) >> 0] = $18_1;
  $158_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $158_1 + 1 | 0;
  HEAP8[($158_1 + 92520 | 0) >> 0] = 100;
  HEAP32[(0 + 93180 | 0) >> 2] = $16_1;
  HEAP16[(0 + 93976 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94374 | 0) >> 0] = $15_1;
  $166_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $166_1 + 1 | 0;
  HEAP8[($166_1 + 92520 | 0) >> 0] = 102;
  HEAP32[(0 + 93188 | 0) >> 2] = $13_1;
  HEAP16[(0 + 93980 | 0) >> 1] = $25_1;
  HEAP8[(0 + 94376 | 0) >> 0] = $0_1;
  $174_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $174_1 + 1 | 0;
  HEAP8[($174_1 + 92520 | 0) >> 0] = 103;
  HEAP32[(0 + 93192 | 0) >> 2] = 73631;
  HEAP16[(0 + 93982 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94377 | 0) >> 0] = $0_1;
  $182_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $182_1 + 1 | 0;
  HEAP8[($182_1 + 92520 | 0) >> 0] = 95;
  HEAP32[(0 + 93160 | 0) >> 2] = 73663;
  HEAP16[(0 + 93966 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94369 | 0) >> 0] = $0_1;
  $190_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $190_1 + 1 | 0;
  HEAP8[($190_1 + 92520 | 0) >> 0] = 97;
  HEAP32[(0 + 93168 | 0) >> 2] = $19_1;
  HEAP16[(0 + 93970 | 0) >> 1] = $12_1;
  HEAP8[(0 + 94371 | 0) >> 0] = $18_1;
  $198_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $198_1 + 1 | 0;
  HEAP8[($198_1 + 92520 | 0) >> 0] = 96;
  HEAP32[(0 + 93164 | 0) >> 2] = $16_1;
  HEAP16[(0 + 93968 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94370 | 0) >> 0] = $15_1;
  $206_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $206_1 + 1 | 0;
  HEAP8[($206_1 + 92520 | 0) >> 0] = 98;
  HEAP32[(0 + 93172 | 0) >> 2] = $13_1;
  HEAP16[(0 + 93972 | 0) >> 1] = $12_1;
  HEAP8[(0 + 94372 | 0) >> 0] = $0_1;
  $214_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $214_1 + 1 | 0;
  HEAP8[($214_1 + 92520 | 0) >> 0] = 148;
  HEAP32[(0 + 93372 | 0) >> 2] = 73684;
  HEAP16[(0 + 94072 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94422 | 0) >> 0] = $0_1;
  $222_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $222_1 + 1 | 0;
  HEAP8[($222_1 + 92520 | 0) >> 0] = 170;
  HEAP32[(0 + 93460 | 0) >> 2] = 73726;
  HEAP16[(0 + 94116 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94444 | 0) >> 0] = $0_1;
  $230_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $230_1 + 1 | 0;
  HEAP8[($230_1 + 92520 | 0) >> 0] = 172;
  HEAP32[(0 + 93468 | 0) >> 2] = 73772;
  HEAP16[(0 + 94120 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94446 | 0) >> 0] = $0_1;
  $238_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $238_1 + 1 | 0;
  HEAP8[($238_1 + 92520 | 0) >> 0] = 173;
  HEAP32[(0 + 93472 | 0) >> 2] = 73825;
  HEAP16[(0 + 94122 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94447 | 0) >> 0] = $0_1;
  $246_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $246_1 + 1 | 0;
  HEAP8[($246_1 + 92520 | 0) >> 0] = 178;
  HEAP32[(0 + 93492 | 0) >> 2] = 73878;
  HEAP16[(0 + 94132 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94452 | 0) >> 0] = $0_1;
  return;
 }
 
 function $365() {
  var $1_1 = 0, $0_1 = 0, $45_1 = 0, $53_1 = 0, $61_1 = 0, $69_1 = 0, $77_1 = 0, $85_1 = 0, $93_1 = 0, $101_1 = 0, $109_1 = 0, $117_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0, $149_1 = 0, $157_1 = 0, $165_1 = 0, $173_1 = 0, $181_1 = 0, $189_1 = 0, $197_1 = 0;
  $0_1 = 1;
  $1_1 = 65535;
  $45_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $45_1 + 1 | 0;
  HEAP8[($45_1 + 92520 | 0) >> 0] = 174;
  HEAP32[(0 + 93476 | 0) >> 2] = 73932;
  HEAP16[(0 + 94124 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94448 | 0) >> 0] = $0_1;
  $53_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $53_1 + 1 | 0;
  HEAP8[($53_1 + 92520 | 0) >> 0] = 177;
  HEAP32[(0 + 93488 | 0) >> 2] = 73946;
  HEAP16[(0 + 94130 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94451 | 0) >> 0] = $0_1;
  $61_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $61_1 + 1 | 0;
  HEAP8[($61_1 + 92520 | 0) >> 0] = 39;
  HEAP32[(0 + 92936 | 0) >> 2] = 73985;
  HEAP16[(0 + 93854 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94313 | 0) >> 0] = $0_1;
  $69_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $69_1 + 1 | 0;
  HEAP8[($69_1 + 92520 | 0) >> 0] = 17;
  HEAP32[(0 + 92848 | 0) >> 2] = 74033;
  HEAP16[(0 + 93810 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94291 | 0) >> 0] = $0_1;
  $77_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $77_1 + 1 | 0;
  HEAP8[($77_1 + 92520 | 0) >> 0] = 20;
  HEAP32[(0 + 92860 | 0) >> 2] = 74056;
  HEAP16[(0 + 93816 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94294 | 0) >> 0] = $0_1;
  $85_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $85_1 + 1 | 0;
  HEAP8[($85_1 + 92520 | 0) >> 0] = 18;
  HEAP32[(0 + 92852 | 0) >> 2] = 74090;
  HEAP16[(0 + 93812 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94292 | 0) >> 0] = $0_1;
  $93_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $93_1 + 1 | 0;
  HEAP8[($93_1 + 92520 | 0) >> 0] = 19;
  HEAP32[(0 + 92856 | 0) >> 2] = 74123;
  HEAP16[(0 + 93814 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94293 | 0) >> 0] = 3;
  $101_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $101_1 + 1 | 0;
  HEAP8[($101_1 + 92520 | 0) >> 0] = 117;
  HEAP32[(0 + 93248 | 0) >> 2] = 74157;
  HEAP16[(0 + 94010 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94391 | 0) >> 0] = 6;
  $109_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $109_1 + 1 | 0;
  HEAP8[($109_1 + 92520 | 0) >> 0] = 176;
  HEAP32[(0 + 93484 | 0) >> 2] = 74198;
  HEAP16[(0 + 94128 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94450 | 0) >> 0] = $0_1;
  $117_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $117_1 + 1 | 0;
  HEAP8[($117_1 + 92520 | 0) >> 0] = 218;
  HEAP32[(0 + 93652 | 0) >> 2] = 74235;
  HEAP16[(0 + 94212 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94492 | 0) >> 0] = $0_1;
  $125_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $125_1 + 1 | 0;
  HEAP8[($125_1 + 92520 | 0) >> 0] = 175;
  HEAP32[(0 + 93480 | 0) >> 2] = 74257;
  HEAP16[(0 + 94126 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94449 | 0) >> 0] = $0_1;
  $133_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $133_1 + 1 | 0;
  HEAP8[($133_1 + 92520 | 0) >> 0] = 57;
  HEAP32[(0 + 93008 | 0) >> 2] = 74289;
  HEAP16[(0 + 93890 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94331 | 0) >> 0] = $0_1;
  $141_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $141_1 + 1 | 0;
  HEAP8[($141_1 + 92520 | 0) >> 0] = 58;
  HEAP32[(0 + 93012 | 0) >> 2] = 74332;
  HEAP16[(0 + 93892 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94332 | 0) >> 0] = $0_1;
  $149_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $149_1 + 1 | 0;
  HEAP8[($149_1 + 92520 | 0) >> 0] = 59;
  HEAP32[(0 + 93016 | 0) >> 2] = 74370;
  HEAP16[(0 + 93894 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94333 | 0) >> 0] = $0_1;
  $157_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $157_1 + 1 | 0;
  HEAP8[($157_1 + 92520 | 0) >> 0] = 60;
  HEAP32[(0 + 93020 | 0) >> 2] = 74409;
  HEAP16[(0 + 93896 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94334 | 0) >> 0] = $0_1;
  $165_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $165_1 + 1 | 0;
  HEAP8[($165_1 + 92520 | 0) >> 0] = 62;
  HEAP32[(0 + 93028 | 0) >> 2] = 74435;
  HEAP16[(0 + 93900 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94336 | 0) >> 0] = $0_1;
  $173_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $173_1 + 1 | 0;
  HEAP8[($173_1 + 92520 | 0) >> 0] = 61;
  HEAP32[(0 + 93024 | 0) >> 2] = 74465;
  HEAP16[(0 + 93898 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94335 | 0) >> 0] = $0_1;
  $181_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $181_1 + 1 | 0;
  HEAP8[($181_1 + 92520 | 0) >> 0] = 217;
  HEAP32[(0 + 93648 | 0) >> 2] = 74496;
  HEAP16[(0 + 94210 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94491 | 0) >> 0] = $0_1;
  $189_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $189_1 + 1 | 0;
  HEAP8[($189_1 + 92520 | 0) >> 0] = 171;
  HEAP32[(0 + 93464 | 0) >> 2] = 74546;
  HEAP16[(0 + 94118 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94445 | 0) >> 0] = $0_1;
  $197_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $197_1 + 1 | 0;
  HEAP8[($197_1 + 92520 | 0) >> 0] = 23;
  HEAP32[(0 + 92872 | 0) >> 2] = 74585;
  HEAP16[(0 + 93822 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94297 | 0) >> 0] = $0_1;
  return;
 }
 
 function $366() {
  var $0_1 = 0, $1_1 = 0, $24_1 = 0, $44_1 = 0, $52_1 = 0, $60_1 = 0, $68_1 = 0, $76_1 = 0, $84_1 = 0, $92_1 = 0, $100_1 = 0, $108_1 = 0, $116_1 = 0, $124_1 = 0, $132_1 = 0, $140_1 = 0, $148_1 = 0, $156_1 = 0, $164_1 = 0, $172_1 = 0, $180_1 = 0, $188_1 = 0;
  $0_1 = 1;
  $1_1 = 65535;
  $24_1 = 0;
  $44_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $44_1 + 1 | 0;
  HEAP8[($44_1 + 92520 | 0) >> 0] = 69;
  HEAP32[(0 + 93056 | 0) >> 2] = 74623;
  HEAP16[(0 + 93914 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94343 | 0) >> 0] = $24_1;
  $52_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $52_1 + 1 | 0;
  HEAP8[($52_1 + 92520 | 0) >> 0] = 106;
  HEAP32[(0 + 93204 | 0) >> 2] = 74654;
  HEAP16[(0 + 93988 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94380 | 0) >> 0] = $0_1;
  $60_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $60_1 + 1 | 0;
  HEAP8[($60_1 + 92520 | 0) >> 0] = 109;
  HEAP32[(0 + 93216 | 0) >> 2] = 74702;
  HEAP16[(0 + 93994 | 0) >> 1] = 106;
  HEAP8[(0 + 94383 | 0) >> 0] = $0_1;
  $68_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $68_1 + 1 | 0;
  HEAP8[($68_1 + 92520 | 0) >> 0] = 107;
  HEAP32[(0 + 93208 | 0) >> 2] = 74743;
  HEAP16[(0 + 93990 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94381 | 0) >> 0] = $0_1;
  $76_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $76_1 + 1 | 0;
  HEAP8[($76_1 + 92520 | 0) >> 0] = 108;
  HEAP32[(0 + 93212 | 0) >> 2] = 74796;
  HEAP16[(0 + 93992 | 0) >> 1] = 107;
  HEAP8[(0 + 94382 | 0) >> 0] = $0_1;
  $84_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $84_1 + 1 | 0;
  HEAP8[($84_1 + 92520 | 0) >> 0] = 83;
  HEAP32[(0 + 93112 | 0) >> 2] = 74833;
  HEAP16[(0 + 93942 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94357 | 0) >> 0] = $0_1;
  $92_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $92_1 + 1 | 0;
  HEAP8[($92_1 + 92520 | 0) >> 0] = 79;
  HEAP32[(0 + 93096 | 0) >> 2] = 74871;
  HEAP16[(0 + 93934 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94353 | 0) >> 0] = $0_1;
  $100_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $100_1 + 1 | 0;
  HEAP8[($100_1 + 92520 | 0) >> 0] = 70;
  HEAP32[(0 + 93060 | 0) >> 2] = 74909;
  HEAP16[(0 + 93916 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94344 | 0) >> 0] = $24_1;
  $108_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $108_1 + 1 | 0;
  HEAP8[($108_1 + 92520 | 0) >> 0] = 7;
  HEAP32[(0 + 92808 | 0) >> 2] = 74943;
  HEAP16[(0 + 93790 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94281 | 0) >> 0] = $0_1;
  $116_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $116_1 + 1 | 0;
  HEAP8[($116_1 + 92520 | 0) >> 0] = 15;
  HEAP32[(0 + 92840 | 0) >> 2] = 74979;
  HEAP16[(0 + 93806 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94289 | 0) >> 0] = $0_1;
  $124_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $124_1 + 1 | 0;
  HEAP8[($124_1 + 92520 | 0) >> 0] = 16;
  HEAP32[(0 + 92844 | 0) >> 2] = 75024;
  HEAP16[(0 + 93808 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94290 | 0) >> 0] = $0_1;
  $132_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $132_1 + 1 | 0;
  HEAP8[($132_1 + 92520 | 0) >> 0] = 21;
  HEAP32[(0 + 92864 | 0) >> 2] = 75054;
  HEAP16[(0 + 93818 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94295 | 0) >> 0] = $0_1;
  $140_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $140_1 + 1 | 0;
  HEAP8[($140_1 + 92520 | 0) >> 0] = 232;
  HEAP32[(0 + 93708 | 0) >> 2] = 75091;
  HEAP16[(0 + 94240 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94506 | 0) >> 0] = $0_1;
  $148_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $148_1 + 1 | 0;
  HEAP8[($148_1 + 92520 | 0) >> 0] = 64;
  HEAP32[(0 + 93036 | 0) >> 2] = 75127;
  HEAP16[(0 + 93904 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94338 | 0) >> 0] = $0_1;
  $156_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $156_1 + 1 | 0;
  HEAP8[($156_1 + 92520 | 0) >> 0] = 36;
  HEAP32[(0 + 92924 | 0) >> 2] = 75176;
  HEAP16[(0 + 93848 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94310 | 0) >> 0] = $0_1;
  $164_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $164_1 + 1 | 0;
  HEAP8[($164_1 + 92520 | 0) >> 0] = 37;
  HEAP32[(0 + 92928 | 0) >> 2] = 75207;
  HEAP16[(0 + 93850 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94311 | 0) >> 0] = $0_1;
  $172_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $172_1 + 1 | 0;
  HEAP8[($172_1 + 92520 | 0) >> 0] = 31;
  HEAP32[(0 + 92904 | 0) >> 2] = 75252;
  HEAP16[(0 + 93838 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94305 | 0) >> 0] = $0_1;
  $180_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $180_1 + 1 | 0;
  HEAP8[($180_1 + 92520 | 0) >> 0] = 30;
  HEAP32[(0 + 92900 | 0) >> 2] = 75282;
  HEAP16[(0 + 93836 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94304 | 0) >> 0] = $0_1;
  $188_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $188_1 + 1 | 0;
  HEAP8[($188_1 + 92520 | 0) >> 0] = 231;
  HEAP32[(0 + 93704 | 0) >> 2] = 75321;
  HEAP16[(0 + 94238 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94505 | 0) >> 0] = $0_1;
  return;
 }
 
 function $367() {
  var $1_1 = 0, $4_1 = 0, $0_1 = 0, $55_1 = 0, $68_1 = 0, $76_1 = 0, $84_1 = 0, $92_1 = 0, $100_1 = 0, $108_1 = 0, $116_1 = 0, $124_1 = 0, $132_1 = 0, $140_1 = 0, $148_1 = 0, $156_1 = 0, $164_1 = 0, $172_1 = 0, $180_1 = 0, $188_1 = 0, $196_1 = 0, $204_1 = 0, $212_1 = 0, $220_1 = 0, $228_1 = 0, $236_1 = 0, $244_1 = 0, $252_1 = 0, $260_1 = 0, $268_1 = 0, $276_1 = 0, $284_1 = 0, $292_1 = 0;
  $0_1 = 2;
  $1_1 = 65535;
  $4_1 = 1;
  $55_1 = 186;
  $68_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $68_1 + 1 | 0;
  HEAP8[($68_1 + 92520 | 0) >> 0] = 71;
  HEAP32[(0 + 93064 | 0) >> 2] = 75351;
  HEAP16[(0 + 93918 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94345 | 0) >> 0] = 0;
  $76_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $76_1 + 1 | 0;
  HEAP8[($76_1 + 92520 | 0) >> 0] = 186;
  HEAP32[(0 + 93524 | 0) >> 2] = 75374;
  HEAP16[(0 + 94148 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94460 | 0) >> 0] = $4_1;
  $84_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $84_1 + 1 | 0;
  HEAP8[($84_1 + 92520 | 0) >> 0] = 129;
  HEAP32[(0 + 93296 | 0) >> 2] = 75391;
  HEAP16[(0 + 94034 | 0) >> 1] = $55_1;
  HEAP8[(0 + 94403 | 0) >> 0] = $0_1;
  $92_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $92_1 + 1 | 0;
  HEAP8[($92_1 + 92520 | 0) >> 0] = 130;
  HEAP32[(0 + 93300 | 0) >> 2] = 75436;
  HEAP16[(0 + 94036 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94404 | 0) >> 0] = $0_1;
  $100_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $100_1 + 1 | 0;
  HEAP8[($100_1 + 92520 | 0) >> 0] = 135;
  HEAP32[(0 + 93320 | 0) >> 2] = 75446;
  HEAP16[(0 + 94046 | 0) >> 1] = $55_1;
  HEAP8[(0 + 94409 | 0) >> 0] = $0_1;
  $108_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $108_1 + 1 | 0;
  HEAP8[($108_1 + 92520 | 0) >> 0] = 136;
  HEAP32[(0 + 93324 | 0) >> 2] = 75496;
  HEAP16[(0 + 94048 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94410 | 0) >> 0] = $0_1;
  $116_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $116_1 + 1 | 0;
  HEAP8[($116_1 + 92520 | 0) >> 0] = 131;
  HEAP32[(0 + 93304 | 0) >> 2] = 75529;
  HEAP16[(0 + 94038 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94405 | 0) >> 0] = $0_1;
  $124_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $124_1 + 1 | 0;
  HEAP8[($124_1 + 92520 | 0) >> 0] = 137;
  HEAP32[(0 + 93328 | 0) >> 2] = 75572;
  HEAP16[(0 + 94050 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94411 | 0) >> 0] = $0_1;
  $132_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $132_1 + 1 | 0;
  HEAP8[($132_1 + 92520 | 0) >> 0] = 118;
  HEAP32[(0 + 93252 | 0) >> 2] = 75603;
  HEAP16[(0 + 94012 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94392 | 0) >> 0] = 7;
  $140_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $140_1 + 1 | 0;
  HEAP8[($140_1 + 92520 | 0) >> 0] = 141;
  HEAP32[(0 + 93344 | 0) >> 2] = 75669;
  HEAP16[(0 + 94058 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94415 | 0) >> 0] = 8;
  $148_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $148_1 + 1 | 0;
  HEAP8[($148_1 + 92520 | 0) >> 0] = 247;
  HEAP32[(0 + 93768 | 0) >> 2] = 75718;
  HEAP16[(0 + 94270 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94521 | 0) >> 0] = $4_1;
  $156_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $156_1 + 1 | 0;
  HEAP8[($156_1 + 92520 | 0) >> 0] = 248;
  HEAP32[(0 + 93772 | 0) >> 2] = 75754;
  HEAP16[(0 + 94272 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94522 | 0) >> 0] = $4_1;
  $164_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $164_1 + 1 | 0;
  HEAP8[($164_1 + 92520 | 0) >> 0] = 216;
  HEAP32[(0 + 93644 | 0) >> 2] = 75792;
  HEAP16[(0 + 94208 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94490 | 0) >> 0] = $4_1;
  $172_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $172_1 + 1 | 0;
  HEAP8[($172_1 + 92520 | 0) >> 0] = 138;
  HEAP32[(0 + 93332 | 0) >> 2] = 75842;
  HEAP16[(0 + 94052 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94412 | 0) >> 0] = $4_1;
  $180_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $180_1 + 1 | 0;
  HEAP8[($180_1 + 92520 | 0) >> 0] = 169;
  HEAP32[(0 + 93456 | 0) >> 2] = 75859;
  HEAP16[(0 + 94114 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94443 | 0) >> 0] = $4_1;
  $188_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $188_1 + 1 | 0;
  HEAP8[($188_1 + 92520 | 0) >> 0] = 45;
  HEAP32[(0 + 92960 | 0) >> 2] = 75898;
  HEAP16[(0 + 93866 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94319 | 0) >> 0] = $4_1;
  $196_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $196_1 + 1 | 0;
  HEAP8[($196_1 + 92520 | 0) >> 0] = 44;
  HEAP32[(0 + 92956 | 0) >> 2] = 75944;
  HEAP16[(0 + 93864 | 0) >> 1] = 45;
  HEAP8[(0 + 94318 | 0) >> 0] = $0_1;
  $204_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $204_1 + 1 | 0;
  HEAP8[($204_1 + 92520 | 0) >> 0] = 43;
  HEAP32[(0 + 92952 | 0) >> 2] = 75968;
  HEAP16[(0 + 93862 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94317 | 0) >> 0] = 3;
  $212_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $212_1 + 1 | 0;
  HEAP8[($212_1 + 92520 | 0) >> 0] = 132;
  HEAP32[(0 + 93308 | 0) >> 2] = 75982;
  HEAP16[(0 + 94040 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94406 | 0) >> 0] = $4_1;
  $220_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $220_1 + 1 | 0;
  HEAP8[($220_1 + 92520 | 0) >> 0] = 133;
  HEAP32[(0 + 93312 | 0) >> 2] = 76022;
  HEAP16[(0 + 94042 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94407 | 0) >> 0] = $4_1;
  $228_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $228_1 + 1 | 0;
  HEAP8[($228_1 + 92520 | 0) >> 0] = 134;
  HEAP32[(0 + 93316 | 0) >> 2] = 76053;
  HEAP16[(0 + 94044 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94408 | 0) >> 0] = $4_1;
  $236_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $236_1 + 1 | 0;
  HEAP8[($236_1 + 92520 | 0) >> 0] = 128;
  HEAP32[(0 + 93292 | 0) >> 2] = 76071;
  HEAP16[(0 + 94032 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94402 | 0) >> 0] = $4_1;
  $244_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $244_1 + 1 | 0;
  HEAP8[($244_1 + 92520 | 0) >> 0] = 139;
  HEAP32[(0 + 93336 | 0) >> 2] = 76109;
  HEAP16[(0 + 94054 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94413 | 0) >> 0] = $4_1;
  $252_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $252_1 + 1 | 0;
  HEAP8[($252_1 + 92520 | 0) >> 0] = 46;
  HEAP32[(0 + 92964 | 0) >> 2] = 76137;
  HEAP16[(0 + 93868 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94320 | 0) >> 0] = $4_1;
  $260_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $260_1 + 1 | 0;
  HEAP8[($260_1 + 92520 | 0) >> 0] = 50;
  HEAP32[(0 + 92980 | 0) >> 2] = 76187;
  HEAP16[(0 + 93876 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94324 | 0) >> 0] = $4_1;
  $268_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $268_1 + 1 | 0;
  HEAP8[($268_1 + 92520 | 0) >> 0] = 127;
  HEAP32[(0 + 93288 | 0) >> 2] = 76224;
  HEAP16[(0 + 94030 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94401 | 0) >> 0] = $4_1;
  $276_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $276_1 + 1 | 0;
  HEAP8[($276_1 + 92520 | 0) >> 0] = 145;
  HEAP32[(0 + 93360 | 0) >> 2] = 76273;
  HEAP16[(0 + 94066 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94419 | 0) >> 0] = $4_1;
  $284_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $284_1 + 1 | 0;
  HEAP8[($284_1 + 92520 | 0) >> 0] = 190;
  HEAP32[(0 + 93540 | 0) >> 2] = 76307;
  HEAP16[(0 + 94156 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94464 | 0) >> 0] = $4_1;
  $292_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $292_1 + 1 | 0;
  HEAP8[($292_1 + 92520 | 0) >> 0] = 213;
  HEAP32[(0 + 93632 | 0) >> 2] = 76388;
  HEAP16[(0 + 94202 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94487 | 0) >> 0] = $0_1;
  return;
 }
 
 function $368() {
  var $1_1 = 0, $8_1 = 0, $0_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $51_1 = 0, $59_1 = 0, $67_1 = 0, $75_1 = 0, $83_1 = 0, $91_1 = 0, $99_1 = 0, $107_1 = 0, $115_1 = 0, $123_1 = 0, $131_1 = 0, $139_1 = 0, $147_1 = 0, $155_1 = 0, $163_1 = 0, $171_1 = 0, $179_1 = 0, $187_1 = 0, $195_1 = 0, $203_1 = 0, $211_1 = 0, $219_1 = 0, $227_1 = 0, $235_1 = 0, $243_1 = 0, $251_1 = 0, $259_1 = 0;
  $0_1 = 7;
  $1_1 = 65535;
  $2_1 = 76477;
  $4_1 = 6;
  $6_1 = 76452;
  $8_1 = 1;
  $51_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $51_1 + 1 | 0;
  HEAP8[($51_1 + 92520 | 0) >> 0] = 0;
  HEAP32[(0 + 92780 | 0) >> 2] = 76416;
  HEAP16[(0 + 93776 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94274 | 0) >> 0] = $8_1;
  $59_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $59_1 + 1 | 0;
  HEAP8[($59_1 + 92520 | 0) >> 0] = 2;
  HEAP32[(0 + 92788 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93780 | 0) >> 1] = 0;
  HEAP8[(0 + 94276 | 0) >> 0] = $4_1;
  $67_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $67_1 + 1 | 0;
  HEAP8[($67_1 + 92520 | 0) >> 0] = $8_1;
  HEAP32[(0 + 92784 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93778 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94275 | 0) >> 0] = $0_1;
  $75_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $75_1 + 1 | 0;
  HEAP8[($75_1 + 92520 | 0) >> 0] = 33;
  HEAP32[(0 + 92912 | 0) >> 2] = 76502;
  HEAP16[(0 + 93842 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94307 | 0) >> 0] = $8_1;
  $83_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $83_1 + 1 | 0;
  HEAP8[($83_1 + 92520 | 0) >> 0] = 35;
  HEAP32[(0 + 92920 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93846 | 0) >> 1] = 33;
  HEAP8[(0 + 94309 | 0) >> 0] = $4_1;
  $91_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $91_1 + 1 | 0;
  HEAP8[($91_1 + 92520 | 0) >> 0] = 34;
  HEAP32[(0 + 92916 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93844 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94308 | 0) >> 0] = $0_1;
  $99_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $99_1 + 1 | 0;
  HEAP8[($99_1 + 92520 | 0) >> 0] = 24;
  HEAP32[(0 + 92876 | 0) >> 2] = 76532;
  HEAP16[(0 + 93824 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94298 | 0) >> 0] = $8_1;
  $107_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $107_1 + 1 | 0;
  HEAP8[($107_1 + 92520 | 0) >> 0] = 26;
  HEAP32[(0 + 92884 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93828 | 0) >> 1] = 24;
  HEAP8[(0 + 94300 | 0) >> 0] = $4_1;
  $115_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $115_1 + 1 | 0;
  HEAP8[($115_1 + 92520 | 0) >> 0] = 25;
  HEAP32[(0 + 92880 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93826 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94299 | 0) >> 0] = $0_1;
  $123_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $123_1 + 1 | 0;
  HEAP8[($123_1 + 92520 | 0) >> 0] = 27;
  HEAP32[(0 + 92888 | 0) >> 2] = 76561;
  HEAP16[(0 + 93830 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94301 | 0) >> 0] = $8_1;
  $131_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $131_1 + 1 | 0;
  HEAP8[($131_1 + 92520 | 0) >> 0] = 29;
  HEAP32[(0 + 92896 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93834 | 0) >> 1] = 27;
  HEAP8[(0 + 94303 | 0) >> 0] = $4_1;
  $139_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $139_1 + 1 | 0;
  HEAP8[($139_1 + 92520 | 0) >> 0] = 28;
  HEAP32[(0 + 92892 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93832 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94302 | 0) >> 0] = $0_1;
  $147_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $147_1 + 1 | 0;
  HEAP8[($147_1 + 92520 | 0) >> 0] = 11;
  HEAP32[(0 + 92824 | 0) >> 2] = 76599;
  HEAP16[(0 + 93798 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94285 | 0) >> 0] = $8_1;
  $155_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $155_1 + 1 | 0;
  HEAP8[($155_1 + 92520 | 0) >> 0] = 13;
  HEAP32[(0 + 92832 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93802 | 0) >> 1] = 11;
  HEAP8[(0 + 94287 | 0) >> 0] = $4_1;
  $163_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $163_1 + 1 | 0;
  HEAP8[($163_1 + 92520 | 0) >> 0] = 12;
  HEAP32[(0 + 92828 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93800 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94286 | 0) >> 0] = $0_1;
  $171_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $171_1 + 1 | 0;
  HEAP8[($171_1 + 92520 | 0) >> 0] = 47;
  HEAP32[(0 + 92968 | 0) >> 2] = 76649;
  HEAP16[(0 + 93870 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94321 | 0) >> 0] = $8_1;
  $179_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $179_1 + 1 | 0;
  HEAP8[($179_1 + 92520 | 0) >> 0] = 49;
  HEAP32[(0 + 92976 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93874 | 0) >> 1] = 47;
  HEAP8[(0 + 94323 | 0) >> 0] = $4_1;
  $187_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $187_1 + 1 | 0;
  HEAP8[($187_1 + 92520 | 0) >> 0] = 48;
  HEAP32[(0 + 92972 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93872 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94322 | 0) >> 0] = $0_1;
  $195_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $195_1 + 1 | 0;
  HEAP8[($195_1 + 92520 | 0) >> 0] = 84;
  HEAP32[(0 + 93116 | 0) >> 2] = 76681;
  HEAP16[(0 + 93944 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94358 | 0) >> 0] = $8_1;
  $203_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $203_1 + 1 | 0;
  HEAP8[($203_1 + 92520 | 0) >> 0] = 86;
  HEAP32[(0 + 93124 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93948 | 0) >> 1] = 84;
  HEAP8[(0 + 94360 | 0) >> 0] = $4_1;
  $211_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $211_1 + 1 | 0;
  HEAP8[($211_1 + 92520 | 0) >> 0] = 85;
  HEAP32[(0 + 93120 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93946 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94359 | 0) >> 0] = $0_1;
  $219_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $219_1 + 1 | 0;
  HEAP8[($219_1 + 92520 | 0) >> 0] = 80;
  HEAP32[(0 + 93100 | 0) >> 2] = 76719;
  HEAP16[(0 + 93936 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94354 | 0) >> 0] = $8_1;
  $227_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $227_1 + 1 | 0;
  HEAP8[($227_1 + 92520 | 0) >> 0] = 82;
  HEAP32[(0 + 93108 | 0) >> 2] = $6_1;
  HEAP16[(0 + 93940 | 0) >> 1] = 80;
  HEAP8[(0 + 94356 | 0) >> 0] = $4_1;
  $235_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $235_1 + 1 | 0;
  HEAP8[($235_1 + 92520 | 0) >> 0] = 81;
  HEAP32[(0 + 93104 | 0) >> 2] = $2_1;
  HEAP16[(0 + 93938 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94355 | 0) >> 0] = $0_1;
  $243_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $243_1 + 1 | 0;
  HEAP8[($243_1 + 92520 | 0) >> 0] = 228;
  HEAP32[(0 + 93692 | 0) >> 2] = 76743;
  HEAP16[(0 + 94232 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94502 | 0) >> 0] = $8_1;
  $251_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $251_1 + 1 | 0;
  HEAP8[($251_1 + 92520 | 0) >> 0] = 229;
  HEAP32[(0 + 93696 | 0) >> 2] = $6_1;
  HEAP16[(0 + 94234 | 0) >> 1] = 228;
  HEAP8[(0 + 94503 | 0) >> 0] = $4_1;
  $259_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $259_1 + 1 | 0;
  HEAP8[($259_1 + 92520 | 0) >> 0] = 230;
  HEAP32[(0 + 93700 | 0) >> 2] = $2_1;
  HEAP16[(0 + 94236 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94504 | 0) >> 0] = $0_1;
  return;
 }
 
 function $369() {
  var $1_1 = 0, $19_1 = 0, $0_1 = 0, $13_1 = 0, $10_1 = 0, $68_1 = 0, $76_1 = 0, $84_1 = 0, $92_1 = 0, $100_1 = 0, $108_1 = 0, $116_1 = 0, $124_1 = 0, $132_1 = 0, $140_1 = 0, $148_1 = 0, $156_1 = 0, $164_1 = 0, $172_1 = 0, $180_1 = 0, $188_1 = 0, $196_1 = 0, $204_1 = 0, $212_1 = 0, $220_1 = 0, $228_1 = 0, $236_1 = 0, $244_1 = 0, $252_1 = 0, $260_1 = 0, $268_1 = 0, $276_1 = 0, $284_1 = 0, $292_1 = 0, $300_1 = 0;
  $0_1 = 2;
  $1_1 = 65535;
  $10_1 = 0;
  $13_1 = 3;
  $19_1 = 1;
  $68_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $68_1 + 1 | 0;
  HEAP8[($68_1 + 92520 | 0) >> 0] = 72;
  HEAP32[(0 + 93068 | 0) >> 2] = 76772;
  HEAP16[(0 + 93920 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94346 | 0) >> 0] = $10_1;
  $76_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $76_1 + 1 | 0;
  HEAP8[($76_1 + 92520 | 0) >> 0] = 182;
  HEAP32[(0 + 93508 | 0) >> 2] = 76801;
  HEAP16[(0 + 94140 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94456 | 0) >> 0] = $19_1;
  $84_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $84_1 + 1 | 0;
  HEAP8[($84_1 + 92520 | 0) >> 0] = 184;
  HEAP32[(0 + 93516 | 0) >> 2] = 76846;
  HEAP16[(0 + 94144 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94458 | 0) >> 0] = $19_1;
  $92_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $92_1 + 1 | 0;
  HEAP8[($92_1 + 92520 | 0) >> 0] = 193;
  HEAP32[(0 + 93552 | 0) >> 2] = 76884;
  HEAP16[(0 + 94162 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94467 | 0) >> 0] = $19_1;
  $100_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $100_1 + 1 | 0;
  HEAP8[($100_1 + 92520 | 0) >> 0] = 192;
  HEAP32[(0 + 93548 | 0) >> 2] = 76922;
  HEAP16[(0 + 94160 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94466 | 0) >> 0] = $19_1;
  $108_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $108_1 + 1 | 0;
  HEAP8[($108_1 + 92520 | 0) >> 0] = 191;
  HEAP32[(0 + 93544 | 0) >> 2] = 76958;
  HEAP16[(0 + 94158 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94465 | 0) >> 0] = $19_1;
  $116_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $116_1 + 1 | 0;
  HEAP8[($116_1 + 92520 | 0) >> 0] = 94;
  HEAP32[(0 + 93156 | 0) >> 2] = 77001;
  HEAP16[(0 + 93964 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94368 | 0) >> 0] = $19_1;
  $124_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $124_1 + 1 | 0;
  HEAP8[($124_1 + 92520 | 0) >> 0] = 154;
  HEAP32[(0 + 93396 | 0) >> 2] = 77042;
  HEAP16[(0 + 94084 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94428 | 0) >> 0] = $19_1;
  $132_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $132_1 + 1 | 0;
  HEAP8[($132_1 + 92520 | 0) >> 0] = 52;
  HEAP32[(0 + 92988 | 0) >> 2] = 77070;
  HEAP16[(0 + 93880 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94326 | 0) >> 0] = $19_1;
  $140_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $140_1 + 1 | 0;
  HEAP8[($140_1 + 92520 | 0) >> 0] = 78;
  HEAP32[(0 + 93092 | 0) >> 2] = 77109;
  HEAP16[(0 + 93932 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94352 | 0) >> 0] = $19_1;
  $148_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $148_1 + 1 | 0;
  HEAP8[($148_1 + 92520 | 0) >> 0] = 77;
  HEAP32[(0 + 93088 | 0) >> 2] = 77151;
  HEAP16[(0 + 93930 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94351 | 0) >> 0] = $19_1;
  $156_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $156_1 + 1 | 0;
  HEAP8[($156_1 + 92520 | 0) >> 0] = 51;
  HEAP32[(0 + 92984 | 0) >> 2] = 77200;
  HEAP16[(0 + 93878 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94325 | 0) >> 0] = $19_1;
  $164_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $164_1 + 1 | 0;
  HEAP8[($164_1 + 92520 | 0) >> 0] = 188;
  HEAP32[(0 + 93532 | 0) >> 2] = 77241;
  HEAP16[(0 + 94152 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94462 | 0) >> 0] = $19_1;
  $172_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $172_1 + 1 | 0;
  HEAP8[($172_1 + 92520 | 0) >> 0] = 189;
  HEAP32[(0 + 93536 | 0) >> 2] = 77287;
  HEAP16[(0 + 94154 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94463 | 0) >> 0] = $19_1;
  $180_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $180_1 + 1 | 0;
  HEAP8[($180_1 + 92520 | 0) >> 0] = 196;
  HEAP32[(0 + 93564 | 0) >> 2] = 77297;
  HEAP16[(0 + 94168 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94470 | 0) >> 0] = $19_1;
  $188_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $188_1 + 1 | 0;
  HEAP8[($188_1 + 92520 | 0) >> 0] = 198;
  HEAP32[(0 + 93572 | 0) >> 2] = 77342;
  HEAP16[(0 + 94172 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94472 | 0) >> 0] = $0_1;
  $196_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $196_1 + 1 | 0;
  HEAP8[($196_1 + 92520 | 0) >> 0] = 197;
  HEAP32[(0 + 93568 | 0) >> 2] = 77386;
  HEAP16[(0 + 94170 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94471 | 0) >> 0] = $13_1;
  $204_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $204_1 + 1 | 0;
  HEAP8[($204_1 + 92520 | 0) >> 0] = 114;
  HEAP32[(0 + 93236 | 0) >> 2] = 77432;
  HEAP16[(0 + 94004 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94388 | 0) >> 0] = $19_1;
  $212_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $212_1 + 1 | 0;
  HEAP8[($212_1 + 92520 | 0) >> 0] = 112;
  HEAP32[(0 + 93228 | 0) >> 2] = 77485;
  HEAP16[(0 + 94e3 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94386 | 0) >> 0] = $19_1;
  $220_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $220_1 + 1 | 0;
  HEAP8[($220_1 + 92520 | 0) >> 0] = 111;
  HEAP32[(0 + 93224 | 0) >> 2] = 77533;
  HEAP16[(0 + 93998 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94385 | 0) >> 0] = $19_1;
  $228_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $228_1 + 1 | 0;
  HEAP8[($228_1 + 92520 | 0) >> 0] = 115;
  HEAP32[(0 + 93240 | 0) >> 2] = 77572;
  HEAP16[(0 + 94006 | 0) >> 1] = 111;
  HEAP8[(0 + 94389 | 0) >> 0] = $0_1;
  $236_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $236_1 + 1 | 0;
  HEAP8[($236_1 + 92520 | 0) >> 0] = 113;
  HEAP32[(0 + 93232 | 0) >> 2] = 77604;
  HEAP16[(0 + 94002 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94387 | 0) >> 0] = $13_1;
  $244_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $244_1 + 1 | 0;
  HEAP8[($244_1 + 92520 | 0) >> 0] = 235;
  HEAP32[(0 + 93720 | 0) >> 2] = 0;
  HEAP16[(0 + 94246 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94509 | 0) >> 0] = $19_1;
  $252_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $252_1 + 1 | 0;
  HEAP8[($252_1 + 92520 | 0) >> 0] = 236;
  HEAP32[(0 + 93724 | 0) >> 2] = 77631;
  HEAP16[(0 + 94248 | 0) >> 1] = 235;
  HEAP8[(0 + 94510 | 0) >> 0] = $0_1;
  $260_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $260_1 + 1 | 0;
  HEAP8[($260_1 + 92520 | 0) >> 0] = 237;
  HEAP32[(0 + 93728 | 0) >> 2] = 77673;
  HEAP16[(0 + 94250 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94511 | 0) >> 0] = $13_1;
  $268_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $268_1 + 1 | 0;
  HEAP8[($268_1 + 92520 | 0) >> 0] = 74;
  HEAP32[(0 + 93076 | 0) >> 2] = 77715;
  HEAP16[(0 + 93924 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94348 | 0) >> 0] = $10_1;
  $276_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $276_1 + 1 | 0;
  HEAP8[($276_1 + 92520 | 0) >> 0] = 123;
  HEAP32[(0 + 93272 | 0) >> 2] = 77750;
  HEAP16[(0 + 94022 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94397 | 0) >> 0] = $0_1;
  $284_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $284_1 + 1 | 0;
  HEAP8[($284_1 + 92520 | 0) >> 0] = 126;
  HEAP32[(0 + 93284 | 0) >> 2] = 77805;
  HEAP16[(0 + 94028 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94400 | 0) >> 0] = $0_1;
  $292_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $292_1 + 1 | 0;
  HEAP8[($292_1 + 92520 | 0) >> 0] = 124;
  HEAP32[(0 + 93276 | 0) >> 2] = 77842;
  HEAP16[(0 + 94024 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94398 | 0) >> 0] = $0_1;
  $300_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $300_1 + 1 | 0;
  HEAP8[($300_1 + 92520 | 0) >> 0] = 125;
  HEAP32[(0 + 93280 | 0) >> 2] = 77895;
  HEAP16[(0 + 94026 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94399 | 0) >> 0] = $0_1;
  return;
 }
 
 function $370() {
  var $1_1 = 0, $0_1 = 0, $20_1 = 0, $23_1 = 0, $17_1 = 0, $21_1 = 0, $25_1 = 0, $54_1 = 0, $62_1 = 0, $70_1 = 0, $78_1 = 0, $86_1 = 0, $94_1 = 0, $102_1 = 0, $110_1 = 0, $118_1 = 0, $126_1 = 0, $134_1 = 0, $142_1 = 0, $150_1 = 0, $158_1 = 0, $166_1 = 0, $174_1 = 0, $182_1 = 0, $190_1 = 0, $198_1 = 0, $206_1 = 0;
  $0_1 = 1;
  $1_1 = 65535;
  $17_1 = 0;
  $20_1 = 7;
  $21_1 = 78191;
  $23_1 = 6;
  $25_1 = 78169;
  HEAP32[(0 + 94856 | 0) >> 2] = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  $54_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $54_1 + 1 | 0;
  HEAP8[($54_1 + 92520 | 0) >> 0] = 75;
  HEAP32[(0 + 93080 | 0) >> 2] = 77928;
  HEAP16[(0 + 93926 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94349 | 0) >> 0] = $17_1;
  $62_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $62_1 + 1 | 0;
  HEAP8[($62_1 + 92520 | 0) >> 0] = 199;
  HEAP32[(0 + 93576 | 0) >> 2] = 77953;
  HEAP16[(0 + 94174 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94473 | 0) >> 0] = $0_1;
  $70_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $70_1 + 1 | 0;
  HEAP8[($70_1 + 92520 | 0) >> 0] = 200;
  HEAP32[(0 + 93580 | 0) >> 2] = 78e3;
  HEAP16[(0 + 94176 | 0) >> 1] = 199;
  HEAP8[(0 + 94474 | 0) >> 0] = $23_1;
  $78_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $78_1 + 1 | 0;
  HEAP8[($78_1 + 92520 | 0) >> 0] = 201;
  HEAP32[(0 + 93584 | 0) >> 2] = 78025;
  HEAP16[(0 + 94178 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94475 | 0) >> 0] = $20_1;
  $86_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $86_1 + 1 | 0;
  HEAP8[($86_1 + 92520 | 0) >> 0] = 205;
  HEAP32[(0 + 93600 | 0) >> 2] = 78050;
  HEAP16[(0 + 94186 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94479 | 0) >> 0] = $0_1;
  $94_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $94_1 + 1 | 0;
  HEAP8[($94_1 + 92520 | 0) >> 0] = 206;
  HEAP32[(0 + 93604 | 0) >> 2] = 78065;
  HEAP16[(0 + 94188 | 0) >> 1] = 205;
  HEAP8[(0 + 94480 | 0) >> 0] = $23_1;
  $102_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $102_1 + 1 | 0;
  HEAP8[($102_1 + 92520 | 0) >> 0] = 207;
  HEAP32[(0 + 93608 | 0) >> 2] = 78102;
  HEAP16[(0 + 94190 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94481 | 0) >> 0] = $20_1;
  $110_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $110_1 + 1 | 0;
  HEAP8[($110_1 + 92520 | 0) >> 0] = 208;
  HEAP32[(0 + 93612 | 0) >> 2] = 78139;
  HEAP16[(0 + 94192 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94482 | 0) >> 0] = $0_1;
  $118_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $118_1 + 1 | 0;
  HEAP8[($118_1 + 92520 | 0) >> 0] = 209;
  HEAP32[(0 + 93616 | 0) >> 2] = $25_1;
  HEAP16[(0 + 94194 | 0) >> 1] = 208;
  HEAP8[(0 + 94483 | 0) >> 0] = $23_1;
  $126_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $126_1 + 1 | 0;
  HEAP8[($126_1 + 92520 | 0) >> 0] = 210;
  HEAP32[(0 + 93620 | 0) >> 2] = $21_1;
  HEAP16[(0 + 94196 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94484 | 0) >> 0] = $20_1;
  $134_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $134_1 + 1 | 0;
  HEAP8[($134_1 + 92520 | 0) >> 0] = 202;
  HEAP32[(0 + 93588 | 0) >> 2] = 78213;
  HEAP16[(0 + 94180 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94476 | 0) >> 0] = $0_1;
  $142_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $142_1 + 1 | 0;
  HEAP8[($142_1 + 92520 | 0) >> 0] = 203;
  HEAP32[(0 + 93592 | 0) >> 2] = $25_1;
  HEAP16[(0 + 94182 | 0) >> 1] = 202;
  HEAP8[(0 + 94477 | 0) >> 0] = $23_1;
  $150_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $150_1 + 1 | 0;
  HEAP8[($150_1 + 92520 | 0) >> 0] = 204;
  HEAP32[(0 + 93596 | 0) >> 2] = $21_1;
  HEAP16[(0 + 94184 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94478 | 0) >> 0] = $20_1;
  $158_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $158_1 + 1 | 0;
  HEAP8[($158_1 + 92520 | 0) >> 0] = 76;
  HEAP32[(0 + 93084 | 0) >> 2] = 78250;
  HEAP16[(0 + 93928 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94350 | 0) >> 0] = $17_1;
  $166_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $166_1 + 1 | 0;
  HEAP8[($166_1 + 92520 | 0) >> 0] = 222;
  HEAP32[(0 + 93668 | 0) >> 2] = 78282;
  HEAP16[(0 + 94220 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94496 | 0) >> 0] = $0_1;
  $174_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $174_1 + 1 | 0;
  HEAP8[($174_1 + 92520 | 0) >> 0] = 224;
  HEAP32[(0 + 93676 | 0) >> 2] = 78317;
  HEAP16[(0 + 94224 | 0) >> 1] = 222;
  HEAP8[(0 + 94498 | 0) >> 0] = 2;
  $182_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $182_1 + 1 | 0;
  HEAP8[($182_1 + 92520 | 0) >> 0] = 223;
  HEAP32[(0 + 93672 | 0) >> 2] = 78360;
  HEAP16[(0 + 94222 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94497 | 0) >> 0] = 3;
  $190_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $190_1 + 1 | 0;
  HEAP8[($190_1 + 92520 | 0) >> 0] = 227;
  HEAP32[(0 + 93688 | 0) >> 2] = 78386;
  HEAP16[(0 + 94230 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94501 | 0) >> 0] = $0_1;
  $198_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $198_1 + 1 | 0;
  HEAP8[($198_1 + 92520 | 0) >> 0] = 226;
  HEAP32[(0 + 93684 | 0) >> 2] = 78430;
  HEAP16[(0 + 94228 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94500 | 0) >> 0] = $0_1;
  $206_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
  HEAP32[(0 + 94848 | 0) >> 2] = $206_1 + 1 | 0;
  HEAP8[($206_1 + 92520 | 0) >> 0] = 225;
  HEAP32[(0 + 93680 | 0) >> 2] = 78483;
  HEAP16[(0 + 94226 | 0) >> 1] = $1_1;
  HEAP8[(0 + 94499 | 0) >> 0] = $0_1;
  return;
 }
 
 function $371() {
  var $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 249;
  label$1 : {
   label$2 : while (1) {
    $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $4_1 + -1 | 0;
    if (!$4_1) {
     break label$1
    }
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 94523 | 0) >> 0] = 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $372() {
  var $2_1 = 0, $3_1 = 0, $72_1 = 0, $83_1 = 0, $93_1 = 0, $111_1 = 0, $134_1 = 0, $152_1 = 0, $366_1 = 0, $367_1 = 0, $385_1 = 0, $388_1 = 0, $459_1 = 0, $472_1 = 0, $475_1 = 0, $514_1 = 0, $336_1 = 0, $355_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[(0 + 90328 | 0) >> 2] = HEAP32[(0 + 88140 | 0) >> 2] | 0;
  HEAP32[(0 + 88140 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91520 | 0) >> 2] = (Math_imul(HEAP32[(0 + 88324 | 0) >> 2] | 0, HEAP32[(0 + 89988 | 0) >> 2] | 0) + 2704 | 0) + 4344 | 0;
  HEAP32[(0 + 91512 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91528 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91536 | 0) >> 2] = $3_1;
  HEAP32[(0 + 90552 | 0) >> 2] = $3_1;
  HEAPF64[(0 + 90560 | 0) >> 3] = +($3_1 | 0);
  HEAP32[(0 + 91848 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91816 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91840 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91856 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91872 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91832 | 0) >> 2] = $3_1;
  HEAP32[(0 + 91824 | 0) >> 2] = $3_1;
  HEAP32[(0 + 92432 | 0) >> 2] = (HEAP32[(0 + 90064 | 0) >> 2] | 0) - ($337(HEAP32[(0 + 90292 | 0) >> 2] | 0 | 0) | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[(0 + 87724 | 0) >> 2] | 0) {
     break label$2
    }
    if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
     break label$1
    }
   }
   label$3 : {
    if (!(+HEAPF64[(0 + 91472 | 0) >> 3] < +HEAPF64[(0 + 90152 | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    HEAPF64[(0 + 91472 | 0) >> 3] = +HEAPF64[(0 + 90152 | 0) >> 3];
   }
  }
  label$4 : {
   if (!(HEAP32[(0 + 87884 | 0) >> 2] | 0)) {
    break label$4
   }
   label$5 : {
    if (!(+HEAPF64[(0 + 91656 | 0) >> 3] > +HEAPF64[(0 + 90168 | 0) >> 3] & 1 | 0)) {
     break label$5
    }
    HEAPF64[(0 + 91656 | 0) >> 3] = +HEAPF64[(0 + 90168 | 0) >> 3];
   }
  }
  label$6 : {
   if ($280(HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0) | 0) {
    break label$6
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 6373 | 0, 78528 | 0, 0 | 0);
   label$7 : {
    if (HEAP32[(0 + 90320 | 0) >> 2] | 0) {
     break label$7
    }
    $72_1 = 0;
    $382(5 | 0, $72_1 | 0, $72_1 | 0);
   }
  }
  HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$8 : while (1) {
   $83_1 = 0;
   label$9 : {
    if (!((HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$9
    }
    $83_1 = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$10 : {
    if (!($83_1 & 1 | 0)) {
     break label$10
    }
    $93_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
    HEAP32[($93_1 + 80 | 0) >> 2] = (HEAP32[($93_1 + 80 | 0) >> 2] | 0) & -16385 | 0;
    HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$8;
   }
   break label$8;
  };
  label$11 : {
   if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
    break label$11
   }
   HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
   label$12 : while (1) {
    $111_1 = 0;
    label$13 : {
     if (!((HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$13
     }
     $111_1 = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
    }
    label$14 : {
     if (!($111_1 & 1 | 0)) {
      break label$14
     }
     label$15 : {
      if (!((((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 17 | 0) & 1 | 0 | 0) != (HEAP32[(0 + 88268 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      $134_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
      HEAP32[($134_1 + 80 | 0) >> 2] = (HEAP32[($134_1 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
     }
     HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     continue label$12;
    }
    break label$12;
   };
  }
  HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$16 : while (1) {
   $152_1 = 0;
   label$17 : {
    if (!((HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$17
    }
    $152_1 = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$18 : {
    if (!($152_1 & 1 | 0)) {
     break label$18
    }
    label$19 : {
     label$20 : {
      if (!(((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 11 | 0) & 1 | 0)) {
       break label$20
      }
      if (!(HEAP32[(0 + 90176 | 0) >> 2] | 0)) {
       break label$20
      }
      break label$19;
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = $337(HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $337(HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $337(HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[(0 + 91816 | 0) >> 2] = (HEAP32[(0 + 91816 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 91856 | 0) >> 2] = (HEAP32[(0 + 91856 | 0) >> 2] | 0) + (HEAP32[($2_1 + 12 | 0) >> 2] | 0) | 0;
     label$21 : {
      if (!((HEAP32[(0 + 91496 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$21
      }
      HEAP32[(0 + 91496 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     }
     HEAP32[(0 + 91840 | 0) >> 2] = (HEAP32[(0 + 91840 | 0) >> 2] | 0) + (HEAP32[($2_1 + 20 | 0) >> 2] | 0) | 0;
     label$22 : {
      if (!((HEAP32[(0 + 91456 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$22
      }
      HEAP32[(0 + 91456 | 0) >> 2] = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     }
     HEAP32[(0 + 91832 | 0) >> 2] = (HEAP32[(0 + 91832 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0) | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) & 511 | 0;
     label$23 : {
      if (!((HEAP32[(0 + 91824 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      HEAP32[(0 + 91824 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     }
     label$24 : {
      if (((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 13 | 0) & 1 | 0) {
       break label$24
      }
      label$25 : {
       label$26 : {
        if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        HEAP32[(0 + 91784 | 0) >> 2] = (HEAP32[(0 + 91784 | 0) >> 2] | 0) + 1 | 0;
        break label$25;
       }
       HEAP32[(0 + 91776 | 0) >> 2] = (HEAP32[(0 + 91776 | 0) >> 2] | 0) + 1 | 0;
      }
     }
     label$27 : {
      if (!(HEAP32[($2_1 + 16 | 0) >> 2] | 0)) {
       break label$27
      }
      HEAP32[(0 + 91848 | 0) >> 2] = (HEAP32[(0 + 91848 | 0) >> 2] | 0) + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
      label$28 : {
       if (!((HEAP32[(0 + 91480 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$28
       }
       HEAP32[(0 + 91480 | 0) >> 2] = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
      }
     }
     HEAP32[(0 + 91512 | 0) >> 2] = (HEAP32[(0 + 91512 | 0) >> 2] | 0) + ((((HEAP32[(0 + 89988 | 0) >> 2] | 0) + 88 | 0) + 16 | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + (HEAP32[($2_1 + 12 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) | 0;
     label$29 : {
      if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[(0 + 91528 | 0) >> 2] = (HEAP32[(0 + 91528 | 0) >> 2] | 0) + ((((HEAP32[($2_1 + 16 | 0) >> 2] | 0) << 2 | 0) + 8 | 0) + ((Math_imul(HEAP32[($2_1 + 16 | 0) >> 2] | 0, (((HEAP32[(0 + 88316 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) + 28 | 0) | 0) / (2 | 0) | 0) | 0) | 0;
     }
     label$30 : {
      if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$30
      }
      $336_1 = (($337(HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) | 0) << 2 | 0) + 8 | 0;
      HEAP32[(0 + 91520 | 0) >> 2] = (HEAP32[(0 + 91520 | 0) >> 2] | 0) + $336_1 | 0;
     }
     label$31 : {
      if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$31
      }
      $355_1 = (($337(HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) | 0) << 2 | 0) + 8 | 0;
      HEAP32[(0 + 91520 | 0) >> 2] = (HEAP32[(0 + 91520 | 0) >> 2] | 0) + $355_1 | 0;
     }
     label$32 : {
      if (!(((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0)) {
       break label$32
      }
      break label$19;
     }
     $366_1 = 0;
     $367_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
     HEAP32[($367_1 + 80 | 0) >> 2] = (HEAP32[($367_1 + 80 | 0) >> 2] | 0) & -16385 | 0 | 16384 | 0;
     HEAP32[($2_1 + 56 | 0) >> 2] = $366_1;
     label$33 : {
      if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != ($366_1 | 0) & 1 | 0)) {
       break label$33
      }
      HEAP32[($2_1 + 52 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0;
      label$34 : {
       label$35 : while (1) {
        $385_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
        HEAP32[($2_1 + 52 | 0) >> 2] = $385_1 + 4 | 0;
        $388_1 = HEAP32[$385_1 >> 2] | 0;
        HEAP32[($2_1 + 56 | 0) >> 2] = $388_1;
        if (!(($388_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$34
        }
        label$36 : {
         label$37 : {
          if ((HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
           break label$37
          }
          if ((HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
           break label$37
          }
          if (((HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) >>> 14 | 0) & 1 | 0) {
           break label$37
          }
          if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$37
          }
          if ((HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$36
          }
         }
         continue label$35;
        }
        HEAPF64[($2_1 + 32 | 0) >> 3] = +$10(HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($2_1 + 56 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
        HEAP32[(0 + 90552 | 0) >> 2] = (HEAP32[(0 + 90552 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[(0 + 90560 | 0) >> 3] = +HEAPF64[(0 + 90560 | 0) >> 3] + +HEAPF64[($2_1 + 32 | 0) >> 3];
        label$38 : {
         if (!(+HEAPF64[(0 + 90568 | 0) >> 3] < +HEAPF64[($2_1 + 32 | 0) >> 3] & 1 | 0)) {
          break label$38
         }
         HEAPF64[(0 + 90568 | 0) >> 3] = +HEAPF64[($2_1 + 32 | 0) >> 3];
        }
        label$39 : {
         if (!(+HEAPF64[(0 + 90576 | 0) >> 3] > +HEAPF64[($2_1 + 32 | 0) >> 3] & 1 | 0)) {
          break label$39
         }
         HEAPF64[(0 + 90576 | 0) >> 3] = +HEAPF64[($2_1 + 32 | 0) >> 3];
        }
        continue label$35;
       };
      }
     }
     label$40 : {
      if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$40
      }
      $459_1 = 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = $459_1;
      label$41 : {
       if (!((HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($459_1 | 0) & 1 | 0)) {
        break label$41
       }
       HEAP32[($2_1 + 44 | 0) >> 2] = (HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
       label$42 : {
        label$43 : while (1) {
         $472_1 = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
         HEAP32[($2_1 + 44 | 0) >> 2] = $472_1 + 4 | 0;
         $475_1 = HEAP32[$472_1 >> 2] | 0;
         HEAP32[($2_1 + 48 | 0) >> 2] = $475_1;
         if (!(($475_1 | 0) != (0 | 0) & 1 | 0)) {
          break label$42
         }
         HEAP32[(0 + 91024 | 0) >> 2] = (HEAP32[(0 + 91024 | 0) >> 2] | 0) + 1 | 0;
         $4(HEAP32[((HEAP32[($2_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0);
         label$44 : {
          if (!(+HEAPF64[(0 + 92392 | 0) >> 3] < +HEAPF64[($2_1 + 24 | 0) >> 3] & 1 | 0)) {
           break label$44
          }
          HEAPF64[(0 + 92392 | 0) >> 3] = +HEAPF64[($2_1 + 24 | 0) >> 3];
         }
         label$45 : {
          if (!(+HEAPF64[(0 + 92400 | 0) >> 3] > +HEAPF64[($2_1 + 24 | 0) >> 3] & 1 | 0)) {
           break label$45
          }
          HEAPF64[(0 + 92400 | 0) >> 3] = +HEAPF64[($2_1 + 24 | 0) >> 3];
         }
         continue label$43;
        };
       }
      }
     }
    }
    HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$16;
   }
   break label$16;
  };
  HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[(0 + 90048 | 0) >> 2] | 0;
  label$46 : while (1) {
   $514_1 = 0;
   label$47 : {
    if (!((HEAP32[($2_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$47
    }
    $514_1 = (HEAP32[(HEAP32[($2_1 + 48 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$48 : {
    if (!($514_1 & 1 | 0)) {
     break label$48
    }
    label$49 : {
     label$50 : {
      if (!((((HEAPU8[((HEAP32[($2_1 + 48 | 0) >> 2] | 0) + 24 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0) & 255 | 0)) {
       break label$50
      }
      break label$49;
     }
     HEAP32[(0 + 91536 | 0) >> 2] = (HEAP32[(0 + 91536 | 0) >> 2] | 0) + 28 | 0;
     label$51 : {
      if (!((HEAP32[((HEAP32[($2_1 + 48 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$51
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = $337(HEAP32[((HEAP32[($2_1 + 48 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[(0 + 91872 | 0) >> 2] = (HEAP32[(0 + 91872 | 0) >> 2] | 0) + (HEAP32[($2_1 + 20 | 0) >> 2] | 0) | 0;
      label$52 : {
       if (!((HEAP32[(0 + 91504 | 0) >> 2] | 0 | 0) < (HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$52
       }
       HEAP32[(0 + 91504 | 0) >> 2] = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      }
      HEAP32[(0 + 91536 | 0) >> 2] = (HEAP32[(0 + 91536 | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) << 2 | 0) + 28 | 0) | 0;
     }
    }
    HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 48 | 0) >> 2] | 0) >> 2] | 0;
    continue label$46;
   }
   break label$46;
  };
  HEAP32[(0 + 88140 | 0) >> 2] = HEAP32[(0 + 90328 | 0) >> 2] | 0;
  global$0 = $2_1 + 64 | 0;
  return;
 }
 
 function $373() {
  return;
 }
 
 function $374() {
  var $2_1 = 0, $19_1 = 0, $39_1 = 0, $47_1 = 0, $63_1 = 0, $66_1 = 0, $14_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $371();
  HEAP32[(0 + 94848 | 0) >> 2] = 0;
  $361();
  $362();
  $363();
  $364();
  $365();
  $366();
  $367();
  $368();
  $369();
  $370();
  label$1 : {
   if (!((HEAP32[(0 + 94848 | 0) >> 2] | 0 | 0) > (259 | 0) & 1 | 0)) {
    break label$1
   }
   $14_1 = HEAP32[(0 + 94848 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = 259;
   HEAP32[$2_1 >> 2] = $14_1;
   $393(6184 | 0, 78596 | 0, $2_1 | 0);
   $392(5 | 0);
  }
  $19_1 = 0;
  HEAP32[(0 + 94784 | 0) >> 2] = $19_1;
  HEAP32[(0 + 94792 | 0) >> 2] = $19_1;
  HEAP32[(0 + 94808 | 0) >> 2] = 2147483647;
  HEAP32[(0 + 94800 | 0) >> 2] = -2147483648;
  HEAPF64[(0 + 94824 | 0) >> 3] = +($19_1 | 0);
  HEAPF64[(0 + 94840 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[(0 + 94832 | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAP32[($2_1 + 28 | 0) >> 2] = $19_1;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) < (249 | 0) & 1 | 0)) {
     break label$2
    }
    $39_1 = 24;
    label$4 : {
     label$5 : {
      if (!((((HEAPU8[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $39_1 | 0) >> $39_1 | 0 | 0) > (5 | 0) & 1 | 0)) {
       break label$5
      }
      $47_1 = 90528;
      HEAPF64[($2_1 + 16 | 0) >> 3] = +HEAPF64[(($47_1 + 4248 | 0) + (((HEAPU8[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) & 255 | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($47_1 + ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($2_1 + 16 | 0) >> 3];
      break label$4;
     }
     $63_1 = 24;
     label$6 : {
      if (!(((HEAPU8[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $63_1 | 0) >> $63_1 | 0)) {
       break label$6
      }
      $66_1 = 90528;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(($66_1 + 4248 | 0) + (((HEAPU8[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) & 255 | 0) << 3 | 0) | 0) >> 2] | 0;
      HEAP32[($66_1 + ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     }
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = (HEAP32[($2_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $2_1 + 32 | 0;
  return;
 }
 
 function $375($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $28_1 = 0, $35_1 = 0, $68_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  $11_1 = 24;
  label$1 : {
   label$2 : {
    if (((HEAPU8[(((HEAPU8[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 92520 | 0) >> 0] | 0) & 255 | 0) + 94274 | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  label$3 : while (1) {
   $28_1 = 0;
   label$4 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 94848 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $35_1 = 24;
    $28_1 = (((HEAPU8[(((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 92520 | 0) >> 0] | 0) & 255 | 0) + 94274 | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0 | 0) != (0 | 0);
   }
   label$5 : {
    if (!($28_1 & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if ($376((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 92520 | 0) >> 0] | 0) & 255 | 0 | 0) | 0) {
      break label$6
     }
     if (((HEAPU8[(((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 92520 | 0) >> 0] | 0) & 255 | 0) + 94523 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
      break label$6
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = 1;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   }
   break label$3;
  };
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $68_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $68_1 | 0;
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $15_1 = 0, $35_1 = 0, $43_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $7_1 = 24;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!((((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $7_1 | 0) >> $7_1 | 0 | 0) > (5 | 0) & 1 | 0)) {
       break label$4
      }
      $15_1 = 90528;
      if (+HEAPF64[($15_1 + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[(($15_1 + 4248 | 0) + (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) & 255 | 0) << 3 | 0) | 0) >> 3] & 1 | 0) {
       break label$3
      }
     }
     $35_1 = 24;
     if (!((((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0 | 0) < (5 | 0) & 1 | 0)) {
      break label$2
     }
     $43_1 = 90528;
     if (!((HEAP32[($43_1 + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(($43_1 + 4248 | 0) + (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) & 255 | 0) << 3 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $371();
  $372();
  $378(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $165(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $168_1 = 0.0, $39_1 = 0, $40_1 = 0, $51_1 = 0, $176_1 = 0.0, $177_1 = 0.0, $178_1 = 0.0, $179_1 = 0.0, $180_1 = 0.0, $181_1 = 0.0, $75_1 = 0, $85_1 = 0, $93_1 = 0, $103_1 = 0, $111_1 = 0, $117_1 = 0, $192_1 = 0.0, i64toi32_i32$0 = 0, $135_1 = 0;
  $4_1 = global$0 - 240 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 232 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[(0 + 88324 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 90064 | 0) >> 2] | 0 | 0) & 1 | 0) {
      break label$3
     }
     if (HEAP32[(0 + 91960 | 0) >> 2] | 0) {
      break label$2
     }
    }
    $168_1 = +(0 | 0);
    HEAPF64[(0 + 91968 | 0) >> 3] = $168_1;
    HEAPF64[(0 + 91976 | 0) >> 3] = $168_1;
    break label$1;
   }
   HEAPF64[(0 + 91976 | 0) >> 3] = +$379(HEAP32[(0 + 91960 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 91968 | 0) >> 3]), +(+HEAPF64[(0 + 91976 | 0) >> 3]), $4_1 + 216 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (HEAP32[(0 + 92024 | 0) >> 2] | 0) {
     break label$5
    }
    HEAPF64[(0 + 91704 | 0) >> 3] = +(0 | 0);
    break label$4;
   }
   HEAPF64[(0 + 91704 | 0) >> 3] = +$379(HEAP32[(0 + 92024 | 0) >> 2] | 0 | 0, +(+HEAPF64[(0 + 91696 | 0) >> 3]), +(+HEAPF64[(0 + 91704 | 0) >> 3]), $4_1 + 216 | 0 | 0);
  }
  $39_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
  $40_1 = HEAP32[($4_1 + 232 | 0) >> 2] | 0;
  HEAP32[($4_1 + 144 | 0) >> 2] = 88860;
  HEAP32[($4_1 + 140 | 0) >> 2] = 7840;
  HEAP32[($4_1 + 136 | 0) >> 2] = 88344;
  HEAP32[($4_1 + 132 | 0) >> 2] = 88604;
  HEAP32[($4_1 + 128 | 0) >> 2] = $40_1;
  $396($39_1 | 0, 9350 | 0, 78719 | 0, $4_1 + 128 | 0 | 0);
  $51_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
  $176_1 = +HEAPF64[(0 + 89448 | 0) >> 3];
  $177_1 = +HEAPF64[(0 + 89440 | 0) >> 3];
  $178_1 = +HEAPF64[(0 + 89416 | 0) >> 3];
  $179_1 = +HEAPF64[(0 + 87728 | 0) >> 3];
  $180_1 = +HEAPF64[(0 + 87912 | 0) >> 3];
  $181_1 = +HEAPF64[(0 + 87864 | 0) >> 3];
  HEAPF64[($4_1 + 208 | 0) >> 3] = +HEAPF64[(0 + 89560 | 0) >> 3];
  HEAPF64[($4_1 + 200 | 0) >> 3] = $181_1;
  HEAPF64[($4_1 + 192 | 0) >> 3] = $180_1;
  HEAPF64[($4_1 + 184 | 0) >> 3] = $179_1;
  HEAPF64[($4_1 + 176 | 0) >> 3] = $178_1;
  HEAPF64[($4_1 + 168 | 0) >> 3] = $177_1;
  HEAPF64[($4_1 + 160 | 0) >> 3] = $176_1;
  $396($51_1 | 0, 9351 | 0, 78772 | 0, $4_1 + 160 | 0 | 0);
  label$6 : {
   if (!(HEAP32[(0 + 88312 | 0) >> 2] | 0)) {
    break label$6
   }
   $75_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 112 | 0) >> 3] = +HEAPF64[(0 + 89536 | 0) >> 3];
   $396($75_1 | 0, 9352 | 0, 79168 | 0, $4_1 + 112 | 0 | 0);
  }
  label$7 : {
   if (!(+HEAPF64[(0 + 87768 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$7
   }
   $85_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 96 | 0) >> 3] = +HEAPF64[(0 + 87768 | 0) >> 3];
   $396($85_1 | 0, 9353 | 0, 79213 | 0, $4_1 + 96 | 0 | 0);
  }
  label$8 : {
   if (!(HEAP32[(0 + 87948 | 0) >> 2] | 0)) {
    break label$8
   }
   $93_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 80 | 0) >> 3] = +HEAPF64[(0 + 87888 | 0) >> 3];
   $396($93_1 | 0, 9354 | 0, 79253 | 0, $4_1 + 80 | 0 | 0);
  }
  label$9 : {
   if (!(+HEAPF64[(0 + 87776 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
    break label$9
   }
   $103_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 64 | 0) >> 3] = +HEAPF64[(0 + 87776 | 0) >> 3];
   $396($103_1 | 0, 9355 | 0, 79289 | 0, $4_1 + 64 | 0 | 0);
  }
  label$10 : {
   if (!(HEAP32[(0 + 87944 | 0) >> 2] | 0)) {
    break label$10
   }
   $111_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 48 | 0) >> 3] = +HEAPF64[(0 + 87896 | 0) >> 3];
   $396($111_1 | 0, 9356 | 0, 79330 | 0, $4_1 + 48 | 0 | 0);
  }
  $117_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
  $192_1 = +HEAPF64[(0 + 89544 | 0) >> 3];
  HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[(0 + 89496 | 0) >> 3];
  i64toi32_i32$0 = 1018167296;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $192_1;
  $396($117_1 | 0, 9357 | 0, 79367 | 0, $4_1 + 16 | 0 | 0);
  HEAP32[($4_1 + 224 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($4_1 + 224 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    $135_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
    HEAPF64[$4_1 >> 3] = +HEAPF64[((HEAP32[(0 + 89528 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 224 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    $396($135_1 | 0, 9358 | 0, 79540 | 0, $4_1 | 0);
    HEAP32[($4_1 + 224 | 0) >> 2] = (HEAP32[($4_1 + 224 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  $396(HEAP32[($4_1 + 236 | 0) >> 2] | 0 | 0, 9359 | 0, 79547 | 0, 0 | 0);
  HEAP32[($4_1 + 228 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($4_1 + 228 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 94848 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    $380(HEAP32[($4_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 228 | 0) >> 2] | 0 | 0, $4_1 + 228 | 0 | 0);
    continue label$14;
   };
  }
  global$0 = $4_1 + 240 | 0;
  return;
 }
 
 function $379($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $16_1 = 0, $29_1 = 0.0, $45_1 = 0.0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $0_1;
  HEAPF64[($6_1 + 56 | 0) >> 3] = $1_1;
  HEAPF64[($6_1 + 48 | 0) >> 3] = $2_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
     break label$2
    }
    $15_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    $16_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
    $29_1 = +HEAPF64[($6_1 + 56 | 0) >> 3];
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 48 | 0) >> 3];
    HEAPF64[($6_1 + 8 | 0) >> 3] = $29_1;
    HEAP32[$6_1 >> 2] = $16_1;
    $396($15_1 | 0, 7101 | 0, 79586 | 0, $6_1 | 0);
    HEAPF64[($6_1 + 72 | 0) >> 3] = +(0 | 0);
    break label$1;
   }
   HEAPF64[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3] / +(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0);
   HEAPF64[($6_1 + 32 | 0) >> 3] = Math_sqrt(Math_abs(+HEAPF64[($6_1 + 48 | 0) >> 3] / +(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) - +HEAPF64[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 3]));
   HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3];
  }
  $45_1 = +HEAPF64[($6_1 + 72 | 0) >> 3];
  global$0 = $6_1 + 80 | 0;
  return +$45_1;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   if (!($375(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
    break label$1
   }
   $396(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 9367 | 0, 79584 | 0, 0 | 0);
   HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $381(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 92520 | 0) >> 0] | 0) & 255 | 0 | 0);
     HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  label$4 : {
   if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $381($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $152_1 = 0, $242_1 = 0, $14_1 = 0, $19_1 = 0, $60_1 = 0, $68_1 = 0, $89_1 = 0, $106_1 = 0, $127_1 = 0, $144_1 = 0, $178_1 = 0, $195_1 = 0, $217_1 = 0, $234_1 = 0, $25_1 = 0, $115_1 = 0, $155_1 = 0, $204_1 = 0, $245_1 = 0, $269_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) >= (249 | 0) & 1 | 0) {
      break label$3
     }
     $14_1 = 24;
     if (!(((HEAPU8[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 94523 | 0) >> 0] | 0) << $14_1 | 0) >> $14_1 | 0)) {
      break label$2
     }
    }
    break label$1;
   }
   $19_1 = 24;
   label$4 : {
    if (((HEAPU8[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $19_1 | 0) >> $19_1 | 0) {
     break label$4
    }
    $25_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
    HEAP32[$4_1 >> 2] = HEAP32[((90528 + 2252 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    $396($25_1 | 0, 9360 | 0, 79550 | 0, $4_1 | 0);
    break label$1;
   }
   label$5 : {
    label$6 : {
     if ($376(HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) {
      break label$6
     }
     if ((HEAP32[((90528 + 2252 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$5
     }
    }
    break label$1;
   }
   HEAP8[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 94523 | 0) >> 0] = 1;
   $60_1 = 16;
   label$7 : {
    label$8 : {
     if (!((((HEAPU16[((90528 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $60_1 | 0) >> $60_1 | 0 | 0) != (-1 | 0) & 1 | 0)) {
      break label$8
     }
     $68_1 = 90528;
     if (HEAP32[($68_1 + (((HEAPU16[(($68_1 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 255 | 0) << 3 | 0) | 0) >> 2] | 0) {
      break label$8
     }
     $396(HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0, 9361 | 0, 79554 | 0, 0 | 0);
     break label$7;
    }
    $89_1 = 24;
    label$9 : {
     label$10 : {
      if (!((((HEAPU8[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $89_1 | 0) >> $89_1 | 0 | 0) >= (5 | 0) & 1 | 0)) {
       break label$10
      }
      $106_1 = 16;
      if (!((((HEAPU16[((90528 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $106_1 | 0) >> $106_1 | 0 | 0) == (-1 | 0) & 1 | 0)) {
       break label$10
      }
      $115_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
      HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[(90528 + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $396($115_1 | 0, 9362 | 0, 79563 | 0, $4_1 + 32 | 0 | 0);
      break label$9;
     }
     $127_1 = 24;
     label$11 : {
      label$12 : {
       if (!((((HEAPU8[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $127_1 | 0) >> $127_1 | 0 | 0) >= (5 | 0) & 1 | 0)) {
        break label$12
       }
       $144_1 = 16;
       if (!((((HEAPU16[((90528 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $144_1 | 0) >> $144_1 | 0 | 0) != (-1 | 0) & 1 | 0)) {
        break label$12
       }
       $152_1 = 90528;
       $155_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
       HEAPF64[($4_1 + 48 | 0) >> 3] = +HEAPF64[($152_1 + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +(HEAP32[($152_1 + (((HEAPU16[(($152_1 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 255 | 0) << 3 | 0) | 0) >> 2] | 0 | 0);
       $396($155_1 | 0, 9363 | 0, 79563 | 0, $4_1 + 48 | 0 | 0);
       break label$11;
      }
      $178_1 = 24;
      label$13 : {
       label$14 : {
        if (!((((HEAPU8[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $178_1 | 0) >> $178_1 | 0 | 0) < (5 | 0) & 1 | 0)) {
         break label$14
        }
        $195_1 = 16;
        if (!((((HEAPU16[((90528 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $195_1 | 0) >> $195_1 | 0 | 0) == (-1 | 0) & 1 | 0)) {
         break label$14
        }
        $204_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
        HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(90528 + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] | 0;
        $396($204_1 | 0, 9364 | 0, 79569 | 0, $4_1 + 64 | 0 | 0);
        break label$13;
       }
       $217_1 = 24;
       label$15 : {
        if (!((((HEAPU8[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 94274 | 0) >> 0] | 0) << $217_1 | 0) >> $217_1 | 0 | 0) < (5 | 0) & 1 | 0)) {
         break label$15
        }
        $234_1 = 16;
        if (!((((HEAPU16[((90528 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $234_1 | 0) >> $234_1 | 0 | 0) != (-1 | 0) & 1 | 0)) {
         break label$15
        }
        $242_1 = 90528;
        $245_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
        HEAPF64[($4_1 + 80 | 0) >> 3] = +(HEAP32[($242_1 + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] | 0 | 0) / +(HEAP32[($242_1 + (((HEAPU16[(($242_1 + 3248 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 255 | 0) << 3 | 0) | 0) >> 2] | 0 | 0);
        $396($245_1 | 0, 9365 | 0, 79573 | 0, $4_1 + 80 | 0 | 0);
       }
      }
     }
    }
   }
   $269_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((90528 + 2252 | 0) + ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   $396($269_1 | 0, 9366 | 0, 79579 | 0, $4_1 + 16 | 0 | 0);
  }
  global$0 = $4_1 + 96 | 0;
  return;
 }
 
 function $382($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $28_1 = 0, $276_1 = 0, $36_1 = 0, $44_1 = 0, $60_1 = 0, $70_1 = 0, $256_1 = 0, $266_1 = 0, $268_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($5_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[(0 + 90028 | 0) >> 2] = $6_1;
  HEAP32[(0 + 90036 | 0) >> 2] = $6_1;
  HEAP32[(0 + 90044 | 0) >> 2] = $6_1;
  label$1 : {
   if (!(HEAP32[(0 + 90320 | 0) >> 2] | 0)) {
    break label$1
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8126 | 0, 79684 | 0, 0 | 0);
   $392(6 | 0);
  }
  HEAP32[(0 + 90320 | 0) >> 2] = 1;
  label$2 : {
   if (HEAP32[(0 + 90236 | 0) >> 2] | 0) {
    break label$2
   }
   HEAP32[(0 + 90092 | 0) >> 2] = (fimport$1() | 0) - (HEAP32[(0 + 90092 | 0) >> 2] | 0) | 0;
  }
  $28_1 = 0;
  $383(79757 | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, $28_1 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, $28_1 | 0);
  $73(79767 | 0, $28_1 | 0, 87704 + 1760 | 0 | 0);
  $36_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = 88344;
  HEAP32[($5_1 + 64 | 0) >> 2] = 88604;
  $396($36_1 | 0, 8127 | 0, 79779 | 0, $5_1 + 64 | 0 | 0);
  $44_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
  HEAP32[($5_1 + 84 | 0) >> 2] = 88860;
  HEAP32[($5_1 + 80 | 0) >> 2] = 7840;
  $396($44_1 | 0, 8128 | 0, 79806 | 0, $5_1 + 80 | 0 | 0);
  label$3 : {
   if (!((HEAP32[(0 + 90108 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$3
   }
   $60_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[(0 + 90108 | 0) >> 2] | 0;
   $396($60_1 | 0, 8129 | 0, 79841 | 0, $5_1 + 48 | 0 | 0);
   label$4 : {
    if (!(HEAP32[(0 + 92256 | 0) >> 2] | 0)) {
     break label$4
    }
    $70_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[(0 + 92256 | 0) >> 2] | 0;
    $396($70_1 | 0, 8130 | 0, 79875 | 0, $5_1 + 32 | 0 | 0);
   }
   label$5 : {
    label$6 : {
     if (!(HEAP32[(0 + 90236 | 0) >> 2] | 0)) {
      break label$6
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8131 | 0, 79897 | 0, 0 | 0);
     break label$5;
    }
    label$7 : {
     if (!(HEAP32[(0 + 90216 | 0) >> 2] | 0)) {
      break label$7
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8132 | 0, 79940 | 0, 0 | 0);
    }
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8133 | 0, 79973 | 0, 0 | 0);
  }
  label$8 : {
   label$9 : {
    if (!(HEAP32[(0 + 87800 | 0) >> 2] | 0)) {
     break label$9
    }
    label$10 : {
     if (HEAP32[(0 + 90236 | 0) >> 2] | 0) {
      break label$10
     }
     if ((HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$9
     }
     if ((HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$9
     }
    }
    $75();
    break label$8;
   }
   label$11 : {
    if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
      break label$12
     }
     if (!((HEAP32[(0 + 92224 | 0) >> 2] | 0 | 0) > ((HEAP32[(0 + 88316 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
      break label$12
     }
     $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8134 | 0, 79975 | 0, 0 | 0);
     $155(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
     label$13 : {
      if (!(HEAP32[(0 + 88120 | 0) >> 2] | 0)) {
       break label$13
      }
      $372();
      $371();
      $378(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 79992 | 0);
      $165(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
     }
    }
    label$14 : {
     if (!(HEAP32[(0 + 87992 | 0) >> 2] | 0)) {
      break label$14
     }
     $380(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[(0 + 94852 | 0) >> 2] | 0 | 0, 0 | 0);
    }
   }
  }
  label$15 : {
   label$16 : {
    if (HEAP32[($5_1 + 108 | 0) >> 2] | 0) {
     break label$16
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = 6;
    break label$15;
   }
   label$17 : {
    label$18 : {
     if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$18
     }
     if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
      break label$18
     }
     $384(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
     break label$17;
    }
    label$19 : {
     label$20 : {
      if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
       break label$20
      }
      $385(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
      break label$19;
     }
     label$21 : {
      label$22 : {
       if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
        break label$22
       }
       $386(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
       break label$21;
      }
      label$23 : {
       label$24 : {
        if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
         break label$24
        }
        $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8016 | 0, 80006 | 0, 0 | 0);
        break label$23;
       }
       label$25 : {
        label$26 : {
         label$27 : {
          if ((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0) {
           break label$27
          }
          if ((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0) {
           break label$27
          }
          if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
           break label$26
          }
         }
         label$28 : {
          label$29 : {
           if (!(HEAP32[(0 + 87928 | 0) >> 2] | 0)) {
            break label$29
           }
           if (HEAP32[(0 + 87884 | 0) >> 2] | 0) {
            break label$29
           }
           $384(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
           break label$28;
          }
          label$30 : {
           label$31 : {
            if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
             break label$31
            }
            $387(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
            break label$30;
           }
           label$32 : {
            if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
             break label$32
            }
            $388(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0);
           }
          }
         }
         break label$25;
        }
        label$33 : {
         if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) > (255 | 0) & 1 | 0)) {
          break label$33
         }
         $256_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
         HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
         $396($256_1 | 0, 6426 | 0, 80037 | 0, $5_1 + 16 | 0 | 0);
         HEAP32[($5_1 + 108 | 0) >> 2] = 255;
        }
       }
      }
     }
    }
   }
  }
  label$34 : {
   if (!(HEAP32[(0 + 90192 | 0) >> 2] | 0)) {
    break label$34
   }
   $266_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   $268_1 = HEAP32[(0 + 90112 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = $268_1;
   $396($266_1 | 0, 6187 | 0, 80156 | 0, $5_1 | 0);
   $392(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0);
  }
  $276_1 = 0;
  HEAP32[(0 + 90320 | 0) >> 2] = $276_1;
  HEAP32[(0 + 90192 | 0) >> 2] = 1;
  HEAP32[(0 + 90096 | 0) >> 2] = $276_1;
  fimport$4(87704 + 1876 | 0 | 0, HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function $383($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $68_1 = 0, $16_1 = 0, $33_1 = 0, $136_1 = 0, $153_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $396($16_1 | 0, 8138 | 0, 80311 | 0, $7_1 + 48 | 0 | 0);
   $96(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $33_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $396($33_1 | 0, 8137 | 0, 80323 | 0, $7_1 + 32 | 0 | 0);
   $134(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0);
   label$3 : {
    if ((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    HEAP32[($7_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   }
   label$4 : {
    if ((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      $68_1 = HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      break label$5;
     }
     $68_1 = HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    }
    HEAP32[($7_1 + 68 | 0) >> 2] = $68_1;
   }
   label$7 : {
    if (!((HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    if (!((HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    if (!((HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $93(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   }
   label$8 : {
    if (!((HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    if (!((HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    if (!((HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    $93(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
   }
  }
  label$9 : {
   if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   $136_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $396($136_1 | 0, 8135 | 0, 80334 | 0, $7_1 + 16 | 0 | 0);
   $93(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0);
  }
  label$10 : {
   if (!((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$10
   }
   $153_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$7_1 >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $396($153_1 | 0, 8136 | 0, 80345 | 0, $7_1 | 0);
   $93(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0);
  }
  label$11 : {
   if (!((HEAP32[(0 + 89976 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$11
   }
   if (!(HEAP32[(0 + 87800 | 0) >> 2] | 0)) {
    break label$11
   }
   if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$11
   }
   if (HEAP32[(0 + 90236 | 0) >> 2] | 0) {
    break label$11
   }
   if (HEAP32[(0 + 87832 | 0) >> 2] | 0) {
    break label$11
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 8139 | 0, 80362 | 0, 0 | 0);
   HEAP32[($7_1 + 56 | 0) >> 2] = 0;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (29 | 0) & 1 | 0)) {
      break label$12
     }
     $138(HEAP32[(0 + 89976 | 0) >> 2] | 0 | 0, HEAP32[((87704 + 292 | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, 0 | 0);
     HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
  }
  global$0 = $7_1 + 80 | 0;
  return;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[(0 + 87876 | 0) >> 2] | 0) {
      break label$3
     }
     if (HEAP32[(0 + 87948 | 0) >> 2] | 0) {
      break label$3
     }
     if (!(+HEAPF64[(0 + 90136 | 0) >> 3] < 8988465674311578540726371.0e283 & 1 | 0)) {
      break label$2
     }
    }
    $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9368 | 0, 80507 | 0, 0 | 0);
    break label$1;
   }
   $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9369 | 0, 80661 | 0, 0 | 0);
   label$4 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$4
    }
    if (HEAP32[(0 + 88192 | 0) >> 2] | 0) {
     break label$4
    }
    if (!(+HEAPF64[(0 + 89448 | 0) >> 3] > 1.0e4 & 1 | 0)) {
     break label$4
    }
    $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9371 | 0, 81426 | 0, 0 | 0);
   }
   label$5 : {
    if (!(HEAP32[(0 + 87784 | 0) >> 2] | 0)) {
     break label$5
    }
    if (HEAP32[(0 + 87740 | 0) >> 2] | 0) {
     break label$5
    }
    $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9372 | 0, 81570 | 0, 0 | 0);
   }
   $40_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAPF64[$3_1 >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
   $396($40_1 | 0, 9373 | 0, 81689 | 0, $3_1 | 0);
   $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9374 | 0, 82332 | 0, 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9426 | 0, 82618 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $44_1 = 0, $58_1 = 0, $71_1 = 0, $74_1 = 0, $147_1 = 0, $4_1 = 0, $17_1 = 0, $80_1 = 0, $97_1 = 0, $166_1 = 0, $167_1 = 0, $201_1 = 0.0, $202_1 = 0.0, $179_1 = 0;
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 156 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
  HEAP32[($3_1 + 80 | 0) >> 2] = HEAP32[(0 + 88316 | 0) >> 2] | 0;
  $396($4_1 | 0, 9376 | 0, 83191 | 0, $3_1 + 80 | 0 | 0);
  $127(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 83350 | 0, HEAP32[(0 + 9e4 | 0) >> 2] | 0 | 0, 0 | 0, 1 | 0);
  $17_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
  HEAPF64[($3_1 + 96 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
  $396($17_1 | 0, 9377 | 0, 83351 | 0, $3_1 + 96 | 0 | 0);
  $81(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 83586 | 0, HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, -1 | 0);
  $396(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 9378 | 0, 79973 | 0, 0 | 0);
  HEAP32[($3_1 + 152 | 0) >> 2] = HEAP32[(0 + 9e4 | 0) >> 2] | 0;
  label$1 : while (1) {
   $44_1 = 0;
   label$2 : {
    if (!((HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $44_1 = (HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($44_1 & 1 | 0)) {
     break label$3
    }
    $396(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 9379 | 0, 83599 | 0, 0 | 0);
    $58_1 = 0;
    HEAP32[($3_1 + 148 | 0) >> 2] = $58_1;
    label$4 : {
     if (!((HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0) != ($58_1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 144 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) + 4 | 0;
     label$5 : {
      label$6 : while (1) {
       $71_1 = HEAP32[($3_1 + 144 | 0) >> 2] | 0;
       HEAP32[($3_1 + 144 | 0) >> 2] = $71_1 + 4 | 0;
       $74_1 = HEAP32[$71_1 >> 2] | 0;
       HEAP32[($3_1 + 148 | 0) >> 2] = $74_1;
       if (!(($74_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $80_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
       HEAP32[$3_1 >> 2] = $267(HEAP32[((HEAP32[($3_1 + 148 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
       $396($80_1 | 0, 9380 | 0, 83605 | 0, $3_1 | 0);
       continue label$6;
      };
     }
    }
    HEAP32[(0 + 91008 | 0) >> 2] = (HEAP32[(0 + 91008 | 0) >> 2] | 0) + 1 | 0;
    $4(HEAP32[(0 + 89984 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0, $3_1 + 112 | 0 | 0);
    $97_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[($3_1 + 112 | 0) >> 3];
    $396($97_1 | 0, 9381 | 0, 83610 | 0, $3_1 + 16 | 0 | 0);
    HEAP32[($3_1 + 152 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 152 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  label$7 : {
   if (!(HEAP32[(0 + 87824 | 0) >> 2] | 0)) {
    break label$7
   }
   $396(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 9382 | 0, 83628 | 0, 0 | 0);
  }
  $396(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 9383 | 0, 83733 | 0, 0 | 0);
  label$8 : {
   if (!((HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) >= (8 | 0) & 1 | 0)) {
    break label$8
   }
   $396(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 9384 | 0, 83920 | 0, 0 | 0);
  }
  $396(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 9385 | 0, 84184 | 0, 0 | 0);
  HEAP32[($3_1 + 104 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 88316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAPF64[($3_1 + 136 | 0) >> 3] = 1797693134862315708145274.0e284;
    HEAPF64[($3_1 + 128 | 0) >> 3] = -2.2250738585072014e-308;
    HEAP32[($3_1 + 108 | 0) >> 2] = HEAP32[(0 + 88324 | 0) >> 2] | 0;
    HEAP32[($3_1 + 124 | 0) >> 2] = (HEAP32[(0 + 88328 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
    label$11 : {
     label$12 : while (1) {
      $147_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
      HEAP32[($3_1 + 108 | 0) >> 2] = $147_1 + -1 | 0;
      if (!$147_1) {
       break label$11
      }
      label$13 : {
       if (!(+HEAPF64[($3_1 + 128 | 0) >> 3] < +HEAPF64[(HEAP32[($3_1 + 124 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
        break label$13
       }
       HEAPF64[($3_1 + 128 | 0) >> 3] = +HEAPF64[(HEAP32[($3_1 + 124 | 0) >> 2] | 0) >> 3];
      }
      label$14 : {
       if (!(+HEAPF64[($3_1 + 136 | 0) >> 3] > +HEAPF64[(HEAP32[($3_1 + 124 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
        break label$14
       }
       HEAPF64[($3_1 + 136 | 0) >> 3] = +HEAPF64[(HEAP32[($3_1 + 124 | 0) >> 2] | 0) >> 3];
      }
      HEAP32[($3_1 + 124 | 0) >> 2] = (HEAP32[($3_1 + 124 | 0) >> 2] | 0) + ((HEAP32[(0 + 88316 | 0) >> 2] | 0) << 3 | 0) | 0;
      continue label$12;
     };
    }
    $166_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
    $167_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
    $201_1 = +HEAPF64[($3_1 + 136 | 0) >> 3];
    $202_1 = +HEAPF64[($3_1 + 128 | 0) >> 3];
    HEAPF64[($3_1 + 56 | 0) >> 3] = +HEAPF64[($3_1 + 128 | 0) >> 3] - +HEAPF64[($3_1 + 136 | 0) >> 3];
    HEAPF64[($3_1 + 48 | 0) >> 3] = $202_1;
    HEAPF64[($3_1 + 40 | 0) >> 3] = $201_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = $167_1;
    $396($166_1 | 0, 9386 | 0, 84238 | 0, $3_1 + 32 | 0 | 0);
    HEAP32[($3_1 + 104 | 0) >> 2] = (HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  $179_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
  HEAPF64[($3_1 + 64 | 0) >> 3] = +HEAPF64[(0 + 89440 | 0) >> 3];
  $396($179_1 | 0, 9387 | 0, 84278 | 0, $3_1 + 64 | 0 | 0);
  $396(HEAP32[($3_1 + 156 | 0) >> 2] | 0 | 0, 9389 | 0, 84766 | 0, 0 | 0);
  global$0 = $3_1 + 160 | 0;
  return;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9427 | 0, 85218 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 9428 | 0, 85460 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $389($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $53_1 = 0, $83_1 = 0, $94_1 = 0, $97_1 = 0, $78_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $280(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  }
  $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 9424 | 0, 80406 | 0, 0 | 0);
  $89(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  label$2 : {
   if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 9413 | 0, 80432 | 0, 0 | 0);
   label$3 : {
    if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    label$4 : while (1) {
     $53_1 = 0;
     label$5 : {
      if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      $53_1 = (HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0);
     }
     label$6 : {
      if (!($53_1 & 1 | 0)) {
       break label$6
      }
      $92(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
      continue label$4;
     }
     break label$4;
    };
   }
  }
  label$7 : {
   if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$7
   }
   $78_1 = HEAP32[(0 + 89980 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = $337(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   $396($78_1 | 0, 9414 | 0, 80459 | 0, $5_1 | 0);
   $83_1 = 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $83_1;
   label$8 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != ($83_1 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0;
    label$9 : {
     label$10 : while (1) {
      $94_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $94_1 + 4 | 0;
      $97_1 = HEAP32[$94_1 >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = $97_1;
      if (!(($97_1 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      $92(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
      continue label$10;
     };
    }
   }
  }
  $396(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 9412 | 0, 80486 | 0, 0 | 0);
  $90(HEAP32[(0 + 89980 | 0) >> 2] | 0 | 0, 5 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $390($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAPF64[$4_1 >> 3] = -+HEAPF64[($4_1 + 16 | 0) >> 3];
  $396($5_1 | 0, 7089 | 0, 82797 | 0, $4_1 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $391() {
  return;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$11(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function $393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   $11_1 = HEAP32[(0 + 85872 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $404($11_1 | 0, 85710 | 0, $5_1 | 0) | 0;
  }
  $425(HEAP32[(0 + 85872 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $503(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $502(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $396($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $18_1 = 0, $28_1 = 0, $45_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  label$1 : {
   if ((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   $393(6028 | 0, 85718 | 0, 0 | 0);
   $18_1 = 0;
   HEAP32[(0 + 90112 | 0) >> 2] = 6028;
   $382(5 | 0, $18_1 | 0, $18_1 | 0);
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (4e3 | 0) & 1 | 0)) {
     break label$3
    }
    $28_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
    $404($28_1 | 0, 85807 | 0, $6_1 | 0) | 0;
    break label$2;
   }
   label$4 : {
    if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) >= (6e3 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (8e3 | 0) & 1 | 0)) {
     break label$4
    }
    $45_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
    $404($45_1 | 0, 85816 | 0, $6_1 + 16 | 0 | 0) | 0;
   }
  }
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  $425(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  label$5 : {
   if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) >= (6e3 | 0) & 1 | 0)) {
    break label$5
   }
   if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (7e3 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[(0 + 90112 | 0) >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
  }
  label$6 : {
   if (!(HEAP32[(0 + 87796 | 0) >> 2] | 0)) {
    break label$6
   }
   $402(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $397($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $399($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $400($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $13_1 = 0.0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $15_1 = 0.0, $16_1 = 0.0, $7_1 = 0, $11_1 = 0, $14_1 = 0.0, $8_1 = 0, $9_1 = 0, $11$hi = 0, $17_1 = 0.0, $18_1 = 0.0, $6_1 = 0, $46_1 = 0, $12_1 = 0, $47_1 = 0, $10_1 = 0, $48_1 = 0, $49_1 = 0, $19_1 = 0.0, $20_1 = 0.0, $50_1 = 0, $21_1 = 0.0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $12$hi = 0, $275_1 = 0.0, $278$hi = 0, $281_1 = 0, $281$hi = 0, $301_1 = 0.0, $306_1 = 0.0, $309_1 = 0.0, $310_1 = 0.0, $311_1 = 0.0, $312_1 = 0.0, $510_1 = 0.0, $511_1 = 0.0, $525 = 0, $568 = 0.0, $595$hi = 0, $597 = 0, $597$hi = 0;
  $13_1 = 1.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $46_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $46_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $46_1;
   $3_1 = $2_1 & 2147483647 | 0;
   i64toi32_i32$1 = $11$hi;
   $4_1 = $11_1;
   if (!($3_1 | $4_1 | 0)) {
    break label$1
   }
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $12_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $5_1 = $47_1;
   label$2 : {
    i64toi32_i32$2 = $12$hi;
    $6_1 = $12_1;
    if ($6_1) {
     break label$2
    }
    if (($5_1 | 0) == (1072693248 | 0)) {
     break label$1
    }
   }
   label$3 : {
    label$4 : {
     $7_1 = $5_1 & 2147483647 | 0;
     if ($7_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($6_1 | 0) != (0 | 0) & ($7_1 | 0) == (2146435072 | 0) | 0) {
      break label$4
     }
     if ($3_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (!$4_1) {
      break label$3
     }
     if (($3_1 | 0) != (2146435072 | 0)) {
      break label$3
     }
    }
    return +($0_1 + $1_1);
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (($5_1 | 0) > (-1 | 0)) {
        break label$8
       }
       $8_1 = 2;
       if ($3_1 >>> 0 > 1128267775 >>> 0) {
        break label$7
       }
       if ($3_1 >>> 0 < 1072693248 >>> 0) {
        break label$8
       }
       $9_1 = $3_1 >>> 20 | 0;
       label$9 : {
        if ($3_1 >>> 0 < 1094713344 >>> 0) {
         break label$9
        }
        $8_1 = 0;
        $9_1 = 1075 - $9_1 | 0;
        $10_1 = $4_1 >>> $9_1 | 0;
        if (($10_1 << $9_1 | 0 | 0) != ($4_1 | 0)) {
         break label$7
        }
        $8_1 = 2 - ($10_1 & 1 | 0) | 0;
        break label$7;
       }
       $8_1 = 0;
       if ($4_1) {
        break label$5
       }
       $8_1 = 0;
       $4_1 = 1043 - $9_1 | 0;
       $9_1 = $3_1 >>> $4_1 | 0;
       if (($9_1 << $4_1 | 0 | 0) != ($3_1 | 0)) {
        break label$6
       }
       $8_1 = 2 - ($9_1 & 1 | 0) | 0;
       break label$6;
      }
      $8_1 = 0;
     }
     if ($4_1) {
      break label$5
     }
    }
    label$10 : {
     if (($3_1 | 0) != (2146435072 | 0)) {
      break label$10
     }
     if (!($7_1 + -1072693248 | 0 | $6_1 | 0)) {
      break label$1
     }
     label$11 : {
      if ($7_1 >>> 0 < 1072693248 >>> 0) {
       break label$11
      }
      return +(($2_1 | 0) > (-1 | 0) ? $1_1 : 0.0);
     }
     return +(($2_1 | 0) > (-1 | 0) ? 0.0 : -$1_1);
    }
    label$12 : {
     if (($3_1 | 0) != (1072693248 | 0)) {
      break label$12
     }
     label$13 : {
      if (($2_1 | 0) <= (-1 | 0)) {
       break label$13
      }
      return +$0_1;
     }
     return +(1.0 / $0_1);
    }
    label$14 : {
     if (($2_1 | 0) != (1073741824 | 0)) {
      break label$14
     }
     return +($0_1 * $0_1);
    }
    if (($5_1 | 0) < (0 | 0)) {
     break label$5
    }
    if (($2_1 | 0) != (1071644672 | 0)) {
     break label$5
    }
    return +(+$401(+$0_1));
   }
   $13_1 = +$399(+$0_1);
   label$15 : {
    if ($6_1) {
     break label$15
    }
    label$16 : {
     if (($5_1 & 1073741823 | 0 | 0) == (1072693248 | 0)) {
      break label$16
     }
     if ($7_1) {
      break label$15
     }
    }
    $13_1 = ($2_1 | 0) < (0 | 0) ? 1.0 / $13_1 : $13_1;
    if (($5_1 | 0) > (-1 | 0)) {
     break label$1
    }
    label$17 : {
     if ($8_1 | ($7_1 + -1072693248 | 0) | 0) {
      break label$17
     }
     $1_1 = $13_1 - $13_1;
     return +($1_1 / $1_1);
    }
    return +(($8_1 | 0) == (1 | 0) ? -$13_1 : $13_1);
   }
   $14_1 = 1.0;
   label$18 : {
    if (($5_1 | 0) > (-1 | 0)) {
     break label$18
    }
    label$19 : {
     switch ($8_1 | 0) {
     case 0:
      $1_1 = $0_1 - $0_1;
      return +($1_1 / $1_1);
     case 1:
      break label$19;
     default:
      break label$18;
     };
    }
    $14_1 = -1.0;
   }
   label$21 : {
    label$22 : {
     if ($3_1 >>> 0 < 1105199105 >>> 0) {
      break label$22
     }
     label$23 : {
      if ($3_1 >>> 0 < 1139802113 >>> 0) {
       break label$23
      }
      label$24 : {
       if ($7_1 >>> 0 > 1072693247 >>> 0) {
        break label$24
       }
       return +(($2_1 | 0) < (0 | 0) ? infinity : 0.0);
      }
      return +(($2_1 | 0) > (0 | 0) ? infinity : 0.0);
     }
     label$25 : {
      if ($7_1 >>> 0 > 1072693246 >>> 0) {
       break label$25
      }
      return +(($2_1 | 0) < (0 | 0) ? $14_1 * 1.e+300 * 1.e+300 : $14_1 * 1.0e-300 * 1.0e-300);
     }
     label$26 : {
      if ($7_1 >>> 0 < 1072693249 >>> 0) {
       break label$26
      }
      return +(($2_1 | 0) > (0 | 0) ? $14_1 * 1.e+300 * 1.e+300 : $14_1 * 1.0e-300 * 1.0e-300);
     }
     $0_1 = $13_1 + -1.0;
     $13_1 = $0_1 * 1.4426950216293335;
     $15_1 = $0_1 * 1.9259629911266175e-08 + $0_1 * $0_1 * (.5 - $0_1 * ($0_1 * -.25 + .3333333333333333)) * -1.4426950408889634;
     wasm2js_scratch_store_f64(+($13_1 + $15_1));
     i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $16_1 = $0_1 - $13_1;
     break label$21;
    }
    $0_1 = $13_1 * 9007199254740992.0;
    $3_1 = $7_1 >>> 0 < 1048576 >>> 0;
    $13_1 = $3_1 ? $0_1 : $13_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $48_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $48_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $3_1 ? $48_1 : $7_1;
    $4_1 = $2_1 & 1048575 | 0;
    $5_1 = $4_1 | 1072693248 | 0;
    $2_1 = ($3_1 ? -1076 : -1023) + ($2_1 >> 20 | 0) | 0;
    $3_1 = 0;
    label$27 : {
     if ($4_1 >>> 0 < 235663 >>> 0) {
      break label$27
     }
     label$28 : {
      if ($4_1 >>> 0 >= 767610 >>> 0) {
       break label$28
      }
      $3_1 = 1;
      break label$27;
     }
     $5_1 = $5_1 + -1048576 | 0;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $3_1 << 3 | 0;
    $17_1 = +HEAPF64[($4_1 + 85856 | 0) >> 3];
    $275_1 = $17_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $278$hi = i64toi32_i32$2;
    wasm2js_scratch_store_f64(+$13_1);
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $281_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $281$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $278$hi;
    i64toi32_i32$2 = $49_1;
    i64toi32_i32$1 = $281$hi;
    i64toi32_i32$3 = $281_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $15_1 = +wasm2js_scratch_load_f64();
    $16_1 = +HEAPF64[($4_1 + 85824 | 0) >> 3];
    $18_1 = $15_1 - $16_1;
    $19_1 = 1.0 / ($16_1 + $15_1);
    $13_1 = $18_1 * $19_1;
    wasm2js_scratch_store_f64(+$13_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $301_1 = $0_1;
    $20_1 = $0_1 * $0_1;
    $306_1 = $20_1 + 3.0;
    $309_1 = $13_1 + $0_1;
    $310_1 = $19_1;
    $311_1 = $18_1;
    $312_1 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = (($5_1 >> 1 | 0 | 536870912 | 0) + ($3_1 << 18 | 0) | 0) + 524288 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $50_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $50_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $50_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $21_1 = +wasm2js_scratch_load_f64();
    $15_1 = $310_1 * ($311_1 - $312_1 * $21_1 - $0_1 * ($15_1 - ($21_1 - $16_1)));
    $0_1 = $13_1 * $13_1;
    $16_1 = $309_1 * $15_1 + $0_1 * $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
    wasm2js_scratch_store_f64(+($306_1 + $16_1));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $18_1 = $301_1 * $0_1;
    $13_1 = $15_1 * $0_1 + $13_1 * ($16_1 - ($0_1 + -3.0 - $20_1));
    wasm2js_scratch_store_f64(+($18_1 + $13_1));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $16_1 = $0_1 * .9617967009544373;
    $15_1 = +HEAPF64[($4_1 + 85840 | 0) >> 3] + (($13_1 - ($0_1 - $18_1)) * .9617966939259756 + $0_1 * -7.028461650952758e-09);
    $13_1 = +($2_1 | 0);
    wasm2js_scratch_store_f64(+($275_1 + ($16_1 + $15_1) + $13_1));
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $16_1 = $0_1 - $13_1 - $17_1 - $16_1;
   }
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $17_1 = +wasm2js_scratch_load_f64();
   $13_1 = $0_1 * $17_1;
   $1_1 = ($15_1 - $16_1) * $1_1 + ($1_1 - $17_1) * $0_1;
   $0_1 = $13_1 + $1_1;
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $11$hi = i64toi32_i32$1;
   $3_1 = $11_1;
   label$29 : {
    label$30 : {
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $51_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $51_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $5_1 = $51_1;
     if (($5_1 | 0) < (1083179008 | 0)) {
      break label$30
     }
     label$31 : {
      if (!($5_1 + -1083179008 | 0 | $3_1 | 0)) {
       break label$31
      }
      return +($14_1 * 1.e+300 * 1.e+300);
     }
     if ($1_1 + 8.008566259537294e-17 > $0_1 - $13_1 ^ 1 | 0) {
      break label$29
     }
     return +($14_1 * 1.e+300 * 1.e+300);
    }
    if (($5_1 & 2147482624 | 0) >>> 0 < 1083231232 >>> 0) {
     break label$29
    }
    label$32 : {
     if (!($5_1 + 1064252416 | 0 | $3_1 | 0)) {
      break label$32
     }
     return +($14_1 * 1.0e-300 * 1.0e-300);
    }
    if ($1_1 <= $0_1 - $13_1 ^ 1 | 0) {
     break label$29
    }
    return +($14_1 * 1.0e-300 * 1.0e-300);
   }
   $3_1 = 0;
   label$33 : {
    $4_1 = $5_1 & 2147483647 | 0;
    if ($4_1 >>> 0 < 1071644673 >>> 0) {
     break label$33
    }
    $4_1 = (1048576 >>> (($4_1 >>> 20 | 0) + -1022 | 0) | 0) + $5_1 | 0;
    $2_1 = ($4_1 >>> 20 | 0) & 2047 | 0;
    $3_1 = ($4_1 & 1048575 | 0 | 1048576 | 0) >>> (1043 - $2_1 | 0) | 0;
    $3_1 = ($5_1 | 0) < (0 | 0) ? 0 - $3_1 | 0 : $3_1;
    $510_1 = $1_1;
    $511_1 = $13_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = (-1048576 >> ($2_1 + -1023 | 0) | 0) & $4_1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $52_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $52_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $52_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $13_1 = $511_1 - +wasm2js_scratch_load_f64();
    wasm2js_scratch_store_f64(+($510_1 + $13_1));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $11$hi = i64toi32_i32$0;
   }
   label$34 : {
    label$35 : {
     $525 = $3_1 << 20 | 0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $15_1 = $0_1 * .6931471824645996;
     $13_1 = ($1_1 - ($0_1 - $13_1)) * .6931471805599453 + $0_1 * -1.904654299957768e-09;
     $1_1 = $15_1 + $13_1;
     $0_1 = $1_1 * $1_1;
     $0_1 = $1_1 - $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
     $568 = $1_1 * $0_1 / ($0_1 + -2.0);
     $0_1 = $13_1 - ($1_1 - $15_1);
     $1_1 = $1_1 - ($568 - ($0_1 + $1_1 * $0_1)) + 1.0;
     wasm2js_scratch_store_f64(+$1_1);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $53_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $5_1 = $525 + $53_1 | 0;
     if (($5_1 | 0) > (1048575 | 0)) {
      break label$35
     }
     $1_1 = +$510(+$1_1, $3_1 | 0);
     break label$34;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $54_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $54_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $595$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $597 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $597$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $595$hi;
    i64toi32_i32$0 = $54_1;
    i64toi32_i32$2 = $597$hi;
    i64toi32_i32$3 = $597;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $1_1 = +wasm2js_scratch_load_f64();
   }
   $13_1 = $14_1 * $1_1;
  }
  return +$13_1;
 }
 
 function $401($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $403($0_1 | 0) | 0 | 0;
    }
    $1_1 = $516($0_1 | 0) | 0;
    $2_1 = $403($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $517($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 87456 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $402(HEAP32[(0 + 87456 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($406() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $516($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $403($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $517($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $407();
  }
  return $2_1 | 0;
 }
 
 function $403($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $404($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $425($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $405() {
  return 94872 | 0;
 }
 
 function $406() {
  $480(94876 | 0);
  return 94884 | 0;
 }
 
 function $407() {
  $481(94876 | 0);
 }
 
 function $408($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $431($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $410($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $411() {
  return 87460 | 0;
 }
 
 function $412($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($413() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($405() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($405() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $413() {
  return $411() | 0 | 0;
 }
 
 function $414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $412($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $415($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$415(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $416($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $513($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($417(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $516($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $417($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $417($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $517($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $417($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $275_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$4
      }
      HEAP32[($405() | 0) >> 2] = 61;
      $11_1 = -1;
      break label$3;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$13
             }
             $13_1 = $1_1;
             break label$12;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$11
            }
            $13_1 = $1_1;
            label$14 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$15 : {
            if (!$0_1) {
             break label$15
            }
            $418($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$2
           }
           $1_1 = $397(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$16 : {
            label$17 : {
             if (!$1_1) {
              break label$17
             }
             if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
              break label$17
             }
             $1_1 = $13_1 + 3 | 0;
             $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
             $10_1 = 1;
             break label$16;
            }
            $1_1 = $13_1 + 1 | 0;
            $16_1 = -1;
           }
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $17_1 = 0;
           label$18 : {
            label$19 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 <= 31 >>> 0) {
              break label$19
             }
             $13_1 = $1_1;
             break label$18;
            }
            $17_1 = 0;
            $13_1 = $1_1;
            $14_1 = 1 << $14_1 | 0;
            if (!($14_1 & 75913 | 0)) {
             break label$18
            }
            label$20 : while (1) {
             $13_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
             $17_1 = $14_1 | $17_1 | 0;
             $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 >= 32 >>> 0) {
              break label$18
             }
             $1_1 = $13_1;
             $14_1 = 1 << $14_1 | 0;
             if ($14_1 & 75913 | 0) {
              continue label$20
             }
             break label$20;
            };
           }
           label$21 : {
            label$22 : {
             if (($15_1 | 0) != (42 | 0)) {
              break label$22
             }
             label$23 : {
              label$24 : {
               if (!($397(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$24
               }
               $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$24
               }
               HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $13_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$23;
              }
              if ($10_1) {
               break label$8
              }
              $10_1 = 0;
              $18_1 = 0;
              label$25 : {
               if (!$0_1) {
                break label$25
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$21
             }
             $18_1 = 0 - $18_1 | 0;
             $17_1 = $17_1 | 8192 | 0;
             break label$21;
            }
            $18_1 = $419($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$8
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$26 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$26
            }
            label$27 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$27
             }
             label$28 : {
              if (!($397(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$28
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$28
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$26;
             }
             if ($10_1) {
              break label$8
             }
             label$29 : {
              label$30 : {
               if ($0_1) {
                break label$30
               }
               $19_1 = 0;
               break label$29;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$26;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $419($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $13_1 = 0;
           label$31 : while (1) {
            $14_1 = $13_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
            $13_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $15_1;
            $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 85839 | 0) >> 0] | 0;
            if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$31
            }
            break label$31;
           };
           label$32 : {
            label$33 : {
             label$34 : {
              if (($13_1 | 0) == (19 | 0)) {
               break label$34
              }
              if (!$13_1) {
               break label$1
              }
              label$35 : {
               if (($16_1 | 0) < (0 | 0)) {
                break label$35
               }
               HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
               i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $275_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $275_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$33;
              }
              if (!$0_1) {
               break label$5
              }
              $420($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
              $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              break label$32;
             }
             $20_1 = -1;
             if (($16_1 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1_1 = 0;
            if (!$0_1) {
             continue label$2
            }
           }
           $21_1 = $17_1 & -65537 | 0;
           $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
           $20_1 = 0;
           $16_1 = 85884;
           $17_1 = $9_1;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                label$41 : {
                 label$42 : {
                  label$43 : {
                   label$44 : {
                    label$45 : {
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         label$50 : {
                          label$51 : {
                           $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$36;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$37;
                           case 27:
                            break label$42;
                           case 12:
                           case 17:
                            break label$45;
                           case 23:
                            break label$46;
                           case 0:
                           case 32:
                            break label$47;
                           case 24:
                            break label$48;
                           case 22:
                            break label$49;
                           case 29:
                            break label$50;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          $17_1 = $9_1;
                          label$52 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$37;
                           case 2:
                            break label$40;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$52;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$41
                          }
                          break label$7;
                         }
                         $20_1 = 0;
                         $16_1 = 85884;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $22_1 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$44;
                        }
                        $1_1 = 0;
                        label$53 : {
                         switch ($14_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 7:
                          break label$53;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      $20_1 = 0;
                      $16_1 = 85884;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $421(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      if (!($13_1 & 8 | 0)) {
                       break label$43
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$43
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 85884 | 0;
                      $20_1 = 2;
                      break label$43;
                     }
                     $20_1 = 0;
                     $16_1 = 85884;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $422(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$43
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$43;
                    }
                    label$60 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31_1 = 0
                       } else {
                        $31_1 = 1
                       }
                       $32_1 = $31_1;
                      } else {
                       $32_1 = 0
                      }
                      $30_1 = $32_1;
                     }
                     if ($30_1) {
                      break label$60
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 85884;
                     break label$44;
                    }
                    label$61 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$61
                     }
                     $20_1 = 1;
                     $16_1 = 85885;
                     break label$44;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 85886 : 85884;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12_1 = $423($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $22_1 = i64toi32_i32$5;
                  $22$hi = i64toi32_i32$3;
                  label$62 : {
                   if ($19_1) {
                    break label$62
                   }
                   i64toi32_i32$3 = $22$hi;
                   if (!!($22_1 | i64toi32_i32$3 | 0)) {
                    break label$62
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$7;
                  }
                  i64toi32_i32$3 = $22$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$3 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$7;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 85894;
                 $1_1 = $461($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$6;
                }
                label$63 : {
                 if (!$19_1) {
                  break label$63
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$39;
                }
                $1_1 = 0;
                $424($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$38;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$64 : {
               label$65 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$64
                }
                label$66 : {
                 $15_1 = $414($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$66
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$66
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$65
                 }
                 break label$64;
                }
                break label$65;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$1
               }
              }
              $424($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$67 : {
               if ($1_1) {
                break label$67
               }
               $1_1 = 0;
               break label$38;
              }
              $15_1 = 0;
              $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$68 : while (1) {
               $12_1 = HEAP32[$14_1 >> 2] | 0;
               if (!$12_1) {
                break label$38
               }
               $12_1 = $414($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $15_1 = $12_1 + $15_1 | 0;
               if (($15_1 | 0) > ($1_1 | 0)) {
                break label$38
               }
               $418($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $14_1 = $14_1 + 4 | 0;
               if ($15_1 >>> 0 < $1_1 >>> 0) {
                continue label$68
               }
               break label$68;
              };
             }
             $424($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$2;
            }
            $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$2;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19_1 = 1;
           $12_1 = $8_1;
           $17_1 = $9_1;
           $13_1 = $21_1;
           break label$6;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$10;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$1
        }
        if (!$10_1) {
         break label$5
        }
        $1_1 = 1;
        label$69 : {
         label$70 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$69
          }
          $420($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$70
          }
          break label$1;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$71 : while (1) {
         if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20_1 = 1;
         $1_1 = $1_1 + 1 | 0;
         if (($1_1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$71;
        };
       }
       $20_1 = -1;
       break label$1;
      }
      $17_1 = $9_1;
     }
     $15_1 = $17_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $424($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $418($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $424($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $424($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $418($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $424($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20_1 = 0;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $418($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $515($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($397(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($397(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $420($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $421($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 86368 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $422($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $423($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $424($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $513($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $418($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $418($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $425($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $416($0_1 | 0, $1_1 | 0, $2_1 | 0, 25 | 0, 26 | 0) | 0 | 0;
 }
 
 function $426($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $22_1 = 0, $16_1 = 0, $12_1 = 0, $19_1 = 0, $26_1 = 0.0, $24_1 = 0, $9_1 = 0, $24$hi = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $158_1 = 0, $160$hi = 0, $162$hi = 0, $164_1 = 0, $164$hi = 0, $166$hi = 0, $170_1 = 0, $170$hi = 0, $818 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $428(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 86384;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $428(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   $8_1 = 1;
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $9_1 = 86387;
    break label$1;
   }
   $9_1 = 86390;
   if ($4_1 & 1 | 0) {
    break label$1
   }
   $8_1 = 0;
   $7_1 = 1;
   $9_1 = 86385;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $424($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $418($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $418($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 86411 : 86415) : $11_1 ? 86403 : 86407) | 0, 3 | 0);
    $424($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$415(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $158_1 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $160$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $160$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $162$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $164_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $164$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $162$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$3 = $164_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $166$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $170_1 = i64toi32_i32$1;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $166$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $170$hi;
        i64toi32_i32$3 = $170_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$158_1 >> 2] = i64toi32_i32$2;
        $11_1 = $11_1 + -4 | 0;
        if ($11_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$18 : {
       label$19 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = (($14_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $11_1 >>> 0) {
         break label$23
        }
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        break label$22;
       }
       $21_1 = 1e9 >>> $10_1 | 0;
       $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $17_1 = $18_1;
       label$24 : while (1) {
        $23_1 = HEAP32[$17_1 >> 2] | 0;
        HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
        $17_1 = $17_1 + 4 | 0;
        if ($17_1 >>> 0 < $11_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$11_1 >> 2] = $3_1;
       $11_1 = $11_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $17_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$25
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($23_1 >>> 0 >= $3_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($14_1 | 0) != (0 | 0) & ($13_1 | 0) == (103 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$28 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $21_1 = HEAP32[$10_1 >> 2] | 0;
     $22_1 = ($21_1 >>> 0) / ($3_1 >>> 0) | 0;
     $23_1 = $21_1 - Math_imul($22_1, $3_1) | 0;
     label$30 : {
      label$31 : {
       $19_1 = $10_1 + 4 | 0;
       if (($19_1 | 0) != ($11_1 | 0)) {
        break label$31
       }
       if (!$23_1) {
        break label$30
       }
      }
      $20_1 = $3_1 >>> 1 | 0;
      $26_1 = $23_1 >>> 0 < $20_1 >>> 0 ? .5 : ($19_1 | 0) == ($11_1 | 0) ? (($23_1 | 0) == ($20_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $22_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7_1) {
        break label$32
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $21_1 - $23_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$33 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$35 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$35
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($23_1 >>> 0 >= $3_1 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$37 : {
     label$38 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$37
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$40
      }
      $22_1 = $4_1 & 8 | 0;
      break label$39;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$39
     }
     $11_1 = -9;
     label$41 : {
      if ($23_1) {
       break label$41
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$41
      }
      $23_1 = 10;
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $21_1 = $11_1;
       $11_1 = $11_1 + 1 | 0;
       $23_1 = Math_imul($23_1, 10);
       if (!(($10_1 >>> 0) % ($23_1 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $11_1 = $21_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$39;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $20_1 = $14_1 | $22_1 | 0;
    $23_1 = ($20_1 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break label$45
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$44;
     }
     label$46 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11_1 = $423(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $19_1 = $11_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $19_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $23_1 | 0) + $11_1 | 0) + 1 | 0;
    $424($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $418($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $424($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($21_1 | 0) != (70 | 0)) {
         break label$51
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$52 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11_1 = $423(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $17_1 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$54
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$53
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $418($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        label$56 : {
         if (!$20_1) {
          break label$56
         }
         $418($0_1 | 0, 86419 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$50
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$50
        }
        label$57 : while (1) {
         label$58 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11_1 = $423(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$58
          }
          label$59 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$59
           }
           break label$59;
          };
         }
         $418($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$49
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$57
         }
         break label$49;
        };
       }
       label$60 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$60
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $17_1 = $18_1;
        label$61 : while (1) {
         label$62 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11_1 = $423(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$62
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$63 : {
          label$64 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$64
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$63
           }
           label$65 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$65
            }
            break label$63;
           };
          }
          $418($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$66 : {
           if ($22_1) {
            break label$66
           }
           if (($14_1 | 0) < (1 | 0)) {
            break label$63
           }
          }
          $418($0_1 | 0, 86419 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $418($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$60
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$61
         }
         break label$61;
        };
       }
       $424($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $418($0_1 | 0, $19_1 | 0, $12_1 - $19_1 | 0 | 0);
       break label$48;
      }
      $11_1 = $14_1;
     }
     $424($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $424($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$67 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$67
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$67
    }
    $26_1 = 8.0;
    label$68 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$68
     }
     break label$68;
    };
    label$69 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$69
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$67;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$70 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $818 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11_1 = $423(($818 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$70
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$71 : while (1) {
    $11_1 = $18_1;
    label$72 : {
     label$73 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$73
      }
      $18_1 = ~~$1_1;
      break label$72;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 86368 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$74 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$74
     }
     label$75 : {
      if ($23_1) {
       break label$75
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$75
      }
      if ($1_1 == 0.0) {
       break label$74
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$71
    }
    break label$71;
   };
   label$76 : {
    label$77 : {
     if (!$3_1) {
      break label$77
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$77
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$76;
    }
    $11_1 = (($12_1 - ($6_1 + 16 | 0) | 0) - $21_1 | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $424($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $418($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $424($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $418($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $424($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $418($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $424($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$498($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $428($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $429($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $512($4_1 + 8 | 0 | 0, 86424 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $425($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($405() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $430($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $512($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $431($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $429($0_1 | 0, 2147483647 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$12($432(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $434($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  $4_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($482(fimport$13(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$2
     }
    }
    HEAP32[$0_1 >> 2] = ($4_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$1;
   }
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $435($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $0_1 = $482($524(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0_1 ? -1 : $1_1;
  i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $436($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($482(fimport$14(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($482(fimport$14(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $437($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $438($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($437($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 >> 31 | 0;
  return ($0_1 + $1_1 | 0) ^ $1_1 | 0 | 0;
 }
 
 function $440($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $33_1 = 0;
  $4_1 = global$0 - 208 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   $5_1 = Math_imul($2_1, $1_1);
   if (!$5_1) {
    break label$1
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
   $6_1 = 0 - $2_1 | 0;
   $1_1 = $2_1;
   $7_1 = $1_1;
   $8_1 = 2;
   label$2 : while (1) {
    $33_1 = $7_1 + $2_1 | 0;
    $7_1 = $1_1;
    $1_1 = $33_1 + $1_1 | 0;
    HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] = $1_1;
    $8_1 = $8_1 + 1 | 0;
    if ($1_1 >>> 0 < $5_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    label$4 : {
     $7_1 = ($0_1 + $5_1 | 0) + $6_1 | 0;
     if ($7_1 >>> 0 > $0_1 >>> 0) {
      break label$4
     }
     $8_1 = 1;
     $1_1 = 1;
     break label$3;
    }
    $8_1 = 1;
    $1_1 = 1;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($8_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$7
       }
       $441($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
       $442($4_1 + 8 | 0 | 0, 2 | 0);
       $1_1 = $1_1 + 2 | 0;
       break label$6;
      }
      label$8 : {
       label$9 : {
        $8_1 = $1_1 + -1 | 0;
        if ((HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($7_1 - $0_1 | 0) >>> 0) {
         break label$9
        }
        $443($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
        break label$8;
       }
       $441($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
      }
      label$10 : {
       if (($1_1 | 0) != (1 | 0)) {
        break label$10
       }
       $444($4_1 + 8 | 0 | 0, 1 | 0);
       $1_1 = 0;
       break label$6;
      }
      $444($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = 1;
     }
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $0_1 = $0_1 + $2_1 | 0;
     if ($0_1 >>> 0 < $7_1 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $443($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        if (($1_1 | 0) != (1 | 0)) {
         break label$15
        }
        if (($8_1 | 0) != (1 | 0)) {
         break label$15
        }
        if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
         break label$14
        }
        break label$1;
       }
       if (($1_1 | 0) > (1 | 0)) {
        break label$13
       }
      }
      $8_1 = $445($4_1 + 8 | 0 | 0) | 0;
      $442($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = $8_1 + $1_1 | 0;
      $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      break label$12;
     }
     $444($4_1 + 8 | 0 | 0, 2 | 0);
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     $442($4_1 + 8 | 0 | 0, 1 | 0);
     $5_1 = $0_1 + $6_1 | 0;
     $7_1 = $1_1 + -2 | 0;
     $443($5_1 - (HEAP32[(($4_1 + 16 | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 + -1 | 0 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $444($4_1 + 8 | 0 | 0, 1 | 0);
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $443($5_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $7_1 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $1_1 = $7_1;
    }
    $0_1 = $0_1 + $6_1 | 0;
    continue label$11;
   };
  }
  global$0 = $4_1 + 208 | 0;
 }
 
 function $441($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 240 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 >> 2] = $0_1;
  $6_1 = 1;
  label$1 : {
   if (($3_1 | 0) < (2 | 0)) {
    break label$1
   }
   $7_1 = 0 - $1_1 | 0;
   $6_1 = 1;
   $8_1 = $0_1;
   label$2 : while (1) {
    label$3 : {
     $8_1 = $8_1 + $7_1 | 0;
     $9_1 = $3_1 + -2 | 0;
     $10_1 = $8_1 - (HEAP32[($4_1 + ($9_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2_1 | 0]($0_1, $10_1) | 0 | 0) < (0 | 0)) {
      break label$3
     }
     if ((FUNCTION_TABLE[$2_1 | 0]($0_1, $8_1) | 0 | 0) > (-1 | 0)) {
      break label$1
     }
    }
    $0_1 = (FUNCTION_TABLE[$2_1 | 0]($10_1, $8_1) | 0 | 0) > (-1 | 0);
    $8_1 = $0_1 ? $10_1 : $8_1;
    HEAP32[($5_1 + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
    $6_1 = $6_1 + 1 | 0;
    $3_1 = $0_1 ? $3_1 + -1 | 0 : $9_1;
    if (($3_1 | 0) < (2 | 0)) {
     break label$1
    }
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    continue label$2;
   };
  }
  $446($1_1 | 0, $5_1 | 0, $6_1 | 0);
  global$0 = $5_1 + 240 | 0;
 }
 
 function $442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = $0_1;
    break label$1;
   }
   $3_1 = $0_1 + 4 | 0;
   $1_1 = $1_1 + -32 | 0;
   $2_1 = 0;
  }
  $3_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 >>> $1_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1 << (32 - $1_1 | 0) | 0 | ($3_1 >>> $1_1 | 0) | 0;
 }
 
 function $443($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 240 | 0;
  global$0 = $7_1;
  $8_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($7_1 + 232 | 0) >> 2] = $8_1;
  $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = $0_1;
  HEAP32[($7_1 + 236 | 0) >> 2] = $3_1;
  $9_1 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($8_1 | 0) != (1 | 0)) {
        break label$5
       }
       if (!$3_1) {
        break label$4
       }
      }
      $9_1 = 1;
      $8_1 = $0_1 - (HEAP32[($6_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      if ((FUNCTION_TABLE[$2_1 | 0]($8_1, $0_1) | 0 | 0) < (1 | 0)) {
       break label$4
      }
      $10_1 = 0 - $1_1 | 0;
      $11_1 = !$5_1;
      $9_1 = 1;
      label$6 : {
       label$7 : while (1) {
        $3_1 = $8_1;
        label$8 : {
         if (!($11_1 & 1 | 0)) {
          break label$8
         }
         if (($4_1 | 0) < (2 | 0)) {
          break label$8
         }
         $8_1 = HEAP32[((($4_1 << 2 | 0) + $6_1 | 0) + -8 | 0) >> 2] | 0;
         $11_1 = $0_1 + $10_1 | 0;
         if ((FUNCTION_TABLE[$2_1 | 0]($11_1, $3_1) | 0 | 0) > (-1 | 0)) {
          break label$6
         }
         if ((FUNCTION_TABLE[$2_1 | 0]($11_1 - $8_1 | 0, $3_1) | 0 | 0) > (-1 | 0)) {
          break label$6
         }
        }
        HEAP32[($7_1 + ($9_1 << 2 | 0) | 0) >> 2] = $3_1;
        $0_1 = $445($7_1 + 232 | 0 | 0) | 0;
        $442($7_1 + 232 | 0 | 0, $0_1 | 0);
        $9_1 = $9_1 + 1 | 0;
        $4_1 = $0_1 + $4_1 | 0;
        label$9 : {
         if ((HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
          break label$9
         }
         if (!(HEAP32[($7_1 + 236 | 0) >> 2] | 0)) {
          break label$2
         }
        }
        $5_1 = 0;
        $11_1 = 1;
        $0_1 = $3_1;
        $8_1 = $3_1 - (HEAP32[($6_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
        if ((FUNCTION_TABLE[$2_1 | 0]($8_1, HEAP32[$7_1 >> 2] | 0) | 0 | 0) > (0 | 0)) {
         continue label$7
        }
        break label$3;
       };
      }
      $3_1 = $0_1;
      break label$2;
     }
     $3_1 = $0_1;
    }
    if ($5_1) {
     break label$1
    }
   }
   $446($1_1 | 0, $7_1 | 0, $9_1 | 0);
   $441($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $6_1 | 0);
  }
  global$0 = $7_1 + 240 | 0;
 }
 
 function $444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = $0_1 + 4 | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $1_1 = $1_1 + -32 | 0;
   $3_1 = 0;
   $2_1 = $0_1;
  }
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $3_1 << $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 >>> (32 - $1_1 | 0) | 0 | ($2_1 << $1_1 | 0) | 0;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = __wasm_ctz_i32((HEAP32[$0_1 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $0_1 = __wasm_ctz_i32(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   return ($0_1 ? $0_1 + 32 | 0 : 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $446($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($2_1 | 0) < (2 | 0)) {
    break label$1
   }
   $4_1 = $1_1 + ($2_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = $3_1;
   if (!$0_1) {
    break label$1
   }
   $5_1 = $3_1;
   label$2 : while (1) {
    $6_1 = $0_1 >>> 0 < 256 >>> 0 ? $0_1 : 256;
    $512($5_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    $5_1 = 0;
    label$3 : while (1) {
     $7_1 = $1_1 + ($5_1 << 2 | 0) | 0;
     $5_1 = $5_1 + 1 | 0;
     $512(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($1_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0 | 0, $6_1 | 0) | 0;
     HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + $6_1 | 0;
     if (($5_1 | 0) != ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $0_1 = $0_1 - $6_1 | 0;
    if (!$0_1) {
     break label$1
    }
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 256 | 0;
 }
 
 function $447($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21_1 = $3_1 + $1_1 | 0;
  $22_1 = $2_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15_1 = 0
    } else {
     $15_1 = 1
    }
    $16_1 = $15_1;
   } else {
    $16_1 = 0
   }
   $14_1 = $16_1;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17_1 + 104 | 0) >> 2] = ($1_1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14_1 ? $21_1 : $22_1) : $2_1;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $11$hi = 0, $30_1 = 0, $30$hi = 0, $38_1 = 0, $38$hi = 0, $50_1 = 0, $52_1 = 0, $52$hi = 0, $57_1 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$2
     }
    }
    $1_1 = $438($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$4 : {
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $3_1 = $2_1;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$5;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2_1 - $4_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38_1 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   if ($26_1) {
    break label$4
   }
   i64toi32_i32$0 = $5$hi;
   $3_1 = $4_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $50_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57_1 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50_1;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $449($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $450($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $495($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $495($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $495($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $495($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $495($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $451($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $452($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 86652 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 86640 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $448($1_1 | 0) | 0;
     }
     if ($398($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $448($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 86568 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $448($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $489($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 86577 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $448($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $448($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $453($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $454($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($405() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $448($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $448($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[($405() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $447($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $453($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $258$hi = 0, $265$hi = 0, $274_1 = 0, $274$hi = 0, $278_1 = 0, $278$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $296_1 = 0, $296$hi = 0, $313_1 = 0, $313$hi = 0, $317_1 = 0, $317$hi = 0, $322_1 = 0, $322$hi = 0, $324_1 = 0, $324$hi = 0, $342$hi = 0, $350_1 = 0, $351_1 = 0, $354$hi = 0, $378_1 = 0, $378$hi = 0, $382_1 = 0, $382$hi = 0, $416_1 = 0, $416$hi = 0, $420_1 = 0, $420$hi = 0, $424_1 = 0, $424$hi = 0, $428_1 = 0, $428$hi = 0, $435_1 = 0, $435$hi = 0, $438_1 = 0, $438$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $458_1 = 0, $458$hi = 0, $462_1 = 0, $462$hi = 0, $492_1 = 0, $492$hi = 0, $496_1 = 0, $496$hi = 0, $500_1 = 0, $500$hi = 0, $504_1 = 0, $504$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $448($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $448($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $448($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $448($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$16
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $106_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $107_1 = 0
         } else {
          $107_1 = 1
         }
         $108_1 = $107_1;
        } else {
         $108_1 = 0
        }
        $106_1 = $108_1;
       }
       if ($106_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$19
       }
       $490($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $495($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $133_1 = i64toi32_i32$5;
       $133$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$2;
       $137$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = $133$hi;
       i64toi32_i32$3 = $137$hi;
       $495($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $142_1 = i64toi32_i32$3;
       $142$hi = i64toi32_i32$0;
       i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $146_1 = i64toi32_i32$0;
       $146$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $142$hi;
       i64toi32_i32$5 = $146$hi;
       $483($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if ($11_1) {
       break label$17
      }
      if (!$7_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $495($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$3;
      $164$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168_1 = i64toi32_i32$0;
      $168$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $164$hi;
      i64toi32_i32$5 = $168$hi;
      $483($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $448($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    label$23 : {
     label$24 : {
      if ($9_1) {
       break label$24
      }
      label$25 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$25
       }
       if ($5_1) {
        break label$22
       }
       break label$23;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$22
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$22;
     }
     label$26 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$26
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$27 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$27
       }
       break label$27;
      };
     }
     label$28 : {
      label$29 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$29
       }
       i64toi32_i32$5 = $455($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$28
       }
       label$30 : {
        if (!$5_1) {
         break label$30
        }
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$28
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$28;
       }
       i64toi32_i32$0 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $447($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$0;
       break label$21;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$28
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$31 : {
      if ($10_1) {
       break label$31
      }
      $488($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[($6_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$21;
     }
     label$32 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 2;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $258$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $258$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -32;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $265$hi;
      i64toi32_i32$1 = 0 - $3_1 | 0;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$32
      }
      HEAP32[($405() | 0) >> 2] = 68;
      $490($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 164 | 0) >> 2] | 0;
      $274_1 = i64toi32_i32$2;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$1 = ($6_1 + 160 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $278_1 = i64toi32_i32$0;
      $278$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$0 = $278$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$5 = 2147418111;
      $495($6_1 + 144 | 0 | 0, $274_1 | 0, i64toi32_i32$2 | 0, $278_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
      $282_1 = i64toi32_i32$5;
      $282$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $286_1 = i64toi32_i32$1;
      $286$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $282$hi;
      i64toi32_i32$1 = $286$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$2 = 2147418111;
      $495($6_1 + 128 | 0 | 0, $282_1 | 0, i64toi32_i32$5 | 0, $286_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$1 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6_1 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$2;
      break label$21;
     }
     label$33 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $296_1 = i64toi32_i32$0;
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$0 = $296$hi;
      i64toi32_i32$5 = $296_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$33
      }
      label$34 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$34
       }
       label$35 : while (1) {
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = -1073807360;
        $483($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 1073610752;
        $7_1 = $486($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $313_1 = i64toi32_i32$1;
        $313$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$1 = $313$hi;
        i64toi32_i32$0 = i64toi32_i32$3 ? $16_1 : $313_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
        $317_1 = i64toi32_i32$0;
        $317$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $322_1 = i64toi32_i32$5;
        $322$hi = i64toi32_i32$0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$5 = $322$hi;
        i64toi32_i32$1 = i64toi32_i32$2 ? $17_1 : $322_1;
        i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$0 : i64toi32_i32$5;
        $324_1 = i64toi32_i32$1;
        $324$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$2 = $317$hi;
        i64toi32_i32$5 = $324$hi;
        $483($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $317_1 | 0, i64toi32_i32$2 | 0, $324_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$5 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$1;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$35
        }
        break label$35;
       };
      }
      label$36 : {
       label$37 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $342$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$1 = $342$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $14_1 = i64toi32_i32$1;
        $14$hi = i64toi32_i32$2;
        $7_1 = i64toi32_i32$1;
        $350_1 = (i64toi32_i32$1 | 0) > (0 | 0) ? i64toi32_i32$1 : 0;
        $351_1 = $2_1;
        i64toi32_i32$2 = 0;
        $354$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$4 = $354$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $350_1 : $351_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$37
        }
        $490($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$0;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$2;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$2 = HEAP32[($6_1 + 384 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($6_1 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$0;
        break label$36;
       }
       $488($6_1 + 352 | 0 | 0, +(+$510(+(1.0), 144 - $7_1 | 0 | 0)));
       $490($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$0 = HEAP32[($6_1 + 352 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($6_1 + 356 | 0) >> 2] | 0;
       $378_1 = i64toi32_i32$0;
       $378$hi = i64toi32_i32$2;
       i64toi32_i32$3 = ($6_1 + 352 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $382_1 = i64toi32_i32$2;
       $382$hi = i64toi32_i32$0;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$0 = HEAP32[($6_1 + 336 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($6_1 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$0;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$3 = ($6_1 + 336 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$2;
       $14$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $378$hi;
       i64toi32_i32$2 = $382$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $449($6_1 + 368 | 0 | 0, $378_1 | 0, i64toi32_i32$0 | 0, $382_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 380 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 0;
      $7_1 = !($10_1 & 1 | 0) & (($485($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0 | 0) != (0 | 0) & ($7_1 | 0) < (32 | 0) | 0) | 0;
      $491($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 320 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6_1 + 324 | 0) >> 2] | 0;
      $416_1 = i64toi32_i32$0;
      $416$hi = i64toi32_i32$2;
      i64toi32_i32$3 = ($6_1 + 320 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $420_1 = i64toi32_i32$2;
      $420$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$3 = $416$hi;
      i64toi32_i32$4 = $420$hi;
      $495($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$2 | 0, $416_1 | 0, i64toi32_i32$3 | 0, $420_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 308 | 0) >> 2] | 0;
      $424_1 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$2 = (i64toi32_i32$2 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $428_1 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = $20$hi;
      $483($6_1 + 272 | 0 | 0, $424_1 | 0, i64toi32_i32$4 | 0, $428_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$5 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$2;
      $435_1 = i64toi32_i32$4;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $438_1 = i64toi32_i32$2;
      $438$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$5 = $435$hi;
      i64toi32_i32$2 = $438$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$4 = $14$hi;
      $495($6_1 + 288 | 0 | 0, $435_1 | 0, i64toi32_i32$5 | 0, $438_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] | 0;
      $444_1 = i64toi32_i32$4;
      $444$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $448_1 = i64toi32_i32$0;
      $448$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 276 | 0) >> 2] | 0;
      $450_1 = i64toi32_i32$4;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $444$hi;
      i64toi32_i32$0 = $448$hi;
      i64toi32_i32$2 = $450$hi;
      i64toi32_i32$5 = $454$hi;
      $483($6_1 + 256 | 0 | 0, $444_1 | 0, i64toi32_i32$4 | 0, $448_1 | 0, i64toi32_i32$0 | 0, $450_1 | 0, i64toi32_i32$2 | 0, $454_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $458_1 = i64toi32_i32$5;
      $458$hi = i64toi32_i32$2;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $462_1 = i64toi32_i32$2;
      $462$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $458$hi;
      i64toi32_i32$2 = $462$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      $497($6_1 + 240 | 0 | 0, $458_1 | 0, i64toi32_i32$5 | 0, $462_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
      label$38 : {
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$4;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$2 = (i64toi32_i32$2 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 0;
       if ($485($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
        break label$38
       }
       HEAP32[($405() | 0) >> 2] = 68;
      }
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      $450($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$2;
      break label$21;
     }
     HEAP32[($405() | 0) >> 2] = 68;
     $490($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $492_1 = i64toi32_i32$2;
     $492$hi = i64toi32_i32$5;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $496_1 = i64toi32_i32$5;
     $496$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $492$hi;
     i64toi32_i32$5 = $496$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 65536;
     $495($6_1 + 192 | 0 | 0, $492_1 | 0, i64toi32_i32$2 | 0, $496_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] | 0;
     $500_1 = i64toi32_i32$4;
     $500$hi = i64toi32_i32$0;
     i64toi32_i32$5 = (i64toi32_i32$5 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $504_1 = i64toi32_i32$0;
     $504$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $500$hi;
     i64toi32_i32$0 = $504$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 65536;
     $495($6_1 + 176 | 0 | 0, $500_1 | 0, i64toi32_i32$4 | 0, $504_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$2;
     break label$21;
    }
    i64toi32_i32$2 = 0;
    $447($1_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   }
   $488($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$2;
   $19$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$5;
   $16$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $454($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, $11_1 = 0, $19_1 = 0, $20$hi = 0, i64toi32_i32$4 = 0, $14_1 = 0, $20_1 = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $22$hi = 0, $16_1 = 0, $21$hi = 0, $22_1 = 0, $21_1 = 0, $12_1 = 0, $17_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $9_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $127_1 = 0, $235_1 = 0, $235$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $245_1 = 0, $245$hi = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $286_1 = 0, $286$hi = 0, $295_1 = 0, $295$hi = 0, $299_1 = 0, $299$hi = 0, $303_1 = 0, $303$hi = 0, $307_1 = 0, $307$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $385_1 = 0, $385$hi = 0, $389_1 = 0, $389$hi = 0, $391_1 = 0, $391$hi = 0, $395_1 = 0, $395$hi = 0, $406_1 = 0, $406$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $416_1 = 0, $416$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $474$hi = 0, $513_1 = 0, $591$hi = 0, $593$hi = 0, $601 = 0, $601$hi = 0, $742 = 0, $742$hi = 0, $746 = 0, $746$hi = 0, $748 = 0, $748$hi = 0, $752 = 0, $752$hi = 0, $771 = 0, $771$hi = 0, $775 = 0, $775$hi = 0, $817 = 0, $879 = 0, $879$hi = 0, $883 = 0, $883$hi = 0, $900 = 0, $900$hi = 0, $904 = 0, $904$hi = 0, $920 = 0, $920$hi = 0, $924 = 0, $924$hi = 0, $961 = 0, $961$hi = 0, $965 = 0, $965$hi = 0, $984 = 0, $984$hi = 0, $988 = 0, $988$hi = 0, $1011 = 0, $1011$hi = 0, $1015 = 0, $1015$hi = 0, $1031 = 0, $1031$hi = 0, $1035 = 0, $1035$hi = 0, $1049 = 0, $1049$hi = 0, $1051 = 0, $1051$hi = 0, $1071 = 0, $1071$hi = 0, $1075 = 0, $1075$hi = 0, $1098 = 0, $1098$hi = 0, $1100 = 0, $1100$hi = 0, $1106 = 0, $1106$hi = 0, $1113 = 0, $1113$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $448($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $448($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $448($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           break label$17
          }
          i64toi32_i32$5 = 0;
          $20_1 = 0;
          $20$hi = i64toi32_i32$5;
          if ($13_1 >>> 0 <= 9 >>> 0) {
           break label$17
          }
          $15_1 = 0;
          $16_1 = 0;
          break label$16;
         }
         i64toi32_i32$5 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$5;
         $16_1 = 0;
         $15_1 = 0;
         $12_1 = 0;
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            if (!($14_1 & 1 | 0)) {
             break label$20
            }
            label$21 : {
             if ($8_1) {
              break label$21
             }
             i64toi32_i32$5 = $20$hi;
             $19_1 = $20_1;
             $19$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$19;
            }
            $11_1 = !$11_1;
            break label$15;
           }
           i64toi32_i32$5 = $20$hi;
           i64toi32_i32$0 = $20_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           label$22 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$22
            }
            $14_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $20$hi;
            $17_1 = $20_1;
            $11_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$23 : {
             if (!$16_1) {
              break label$23
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$11_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $12_1 = $14_1 ? $12_1 : $17_1;
            HEAP32[$11_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $16_1 + 1 | 0;
            $127_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $16_1 = $2_1 ? 0 : $127_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$19;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$19
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $12_1 = 18396;
          }
          label$24 : {
           label$25 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$25
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$24;
           }
           $2_1 = $448($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$18
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$18
          }
          break label$18;
         };
        }
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$5;
        label$26 : {
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
         }
         if (!$11_1) {
          break label$26
         }
         label$27 : {
          i64toi32_i32$5 = $455($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $21_1 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$27
          }
          if (!$6_1) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $21_1 = 0;
          $21$hi = i64toi32_i32$2;
          if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
           break label$27
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$13
         }
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$2 = $19$hi;
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$0 = $21_1;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $19_1;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $19_1 = i64toi32_i32$4;
         $19$hi = i64toi32_i32$1;
         break label$11;
        }
        $11_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$11_1) {
       break label$11
      }
     }
     HEAP32[($405() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $447($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$28 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$28
    }
    $488($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$29 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$29
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$0 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$29
    }
    label$30 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$30
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$29
     }
    }
    $490($7_1 + 48 | 0 | 0, $5_1 | 0);
    $491($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
    $235_1 = i64toi32_i32$5;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$2;
    $239$hi = i64toi32_i32$5;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $241_1 = i64toi32_i32$5;
    $241$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $245_1 = i64toi32_i32$2;
    $245$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $235$hi;
    i64toi32_i32$2 = $239$hi;
    i64toi32_i32$0 = $241$hi;
    i64toi32_i32$1 = $245$hi;
    $495($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$5 | 0, $239_1 | 0, i64toi32_i32$2 | 0, $241_1 | 0, i64toi32_i32$0 | 0, $245_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $255$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$0 = $255$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $171_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $172_1 = 0
      } else {
       $172_1 = 1
      }
      $173_1 = $172_1;
     } else {
      $173_1 = 0
     }
     $171_1 = $173_1;
    }
    if ($171_1) {
     break label$31
    }
    HEAP32[($405() | 0) >> 2] = 68;
    $490($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$2;
    $264$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $268_1 = i64toi32_i32$1;
    $268$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$1 = $268$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$0 = 2147418111;
    $495($7_1 + 80 | 0 | 0, $264_1 | 0, i64toi32_i32$2 | 0, $268_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $272_1 = i64toi32_i32$0;
    $272$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $276_1 = i64toi32_i32$5;
    $276$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $272$hi;
    i64toi32_i32$5 = $276$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $495($7_1 + 64 | 0 | 0, $272_1 | 0, i64toi32_i32$0 | 0, $276_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $286_1 = i64toi32_i32$1;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$0 = $286_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $174_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       $175_1 = 0
      } else {
       $175_1 = 1
      }
      $176_1 = $175_1;
     } else {
      $176_1 = 0
     }
     $174_1 = $176_1;
    }
    if ($174_1) {
     break label$32
    }
    HEAP32[($405() | 0) >> 2] = 68;
    $490($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    $295_1 = i64toi32_i32$5;
    $295$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $299_1 = i64toi32_i32$2;
    $299$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $295$hi;
    i64toi32_i32$2 = $299$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 65536;
    $495($7_1 + 128 | 0 | 0, $295_1 | 0, i64toi32_i32$5 | 0, $299_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $303_1 = i64toi32_i32$1;
    $303$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $307_1 = i64toi32_i32$0;
    $307$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $303$hi;
    i64toi32_i32$0 = $307$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $495($7_1 + 112 | 0 | 0, $303_1 | 0, i64toi32_i32$1 | 0, $307_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$0 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$10;
   }
   label$33 : {
    if (!$16_1) {
     break label$33
    }
    label$34 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$34
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$35 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$35
      }
      break label$35;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$36 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$36
    }
    if (($12_1 | 0) > ($8_1 | 0)) {
     break label$36
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$36
    }
    label$37 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$37
     }
     $490($7_1 + 192 | 0 | 0, $5_1 | 0);
     $491($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $356_1 = i64toi32_i32$5;
     $356$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$2;
     $360$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $362_1 = i64toi32_i32$5;
     $362$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $366_1 = i64toi32_i32$2;
     $366$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $356$hi;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $362$hi;
     i64toi32_i32$1 = $366$hi;
     $495($7_1 + 160 | 0 | 0, $356_1 | 0, i64toi32_i32$5 | 0, $360_1 | 0, i64toi32_i32$2 | 0, $362_1 | 0, i64toi32_i32$0 | 0, $366_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    label$38 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$38
     }
     $490($7_1 + 272 | 0 | 0, $5_1 | 0);
     $491($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $385_1 = i64toi32_i32$1;
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$0;
     $389$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $391_1 = i64toi32_i32$1;
     $391$hi = i64toi32_i32$0;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $395_1 = i64toi32_i32$0;
     $395$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $385$hi;
     i64toi32_i32$0 = $389$hi;
     i64toi32_i32$2 = $391$hi;
     i64toi32_i32$5 = $395$hi;
     $495($7_1 + 240 | 0 | 0, $385_1 | 0, i64toi32_i32$1 | 0, $389_1 | 0, i64toi32_i32$0 | 0, $391_1 | 0, i64toi32_i32$2 | 0, $395_1 | 0, i64toi32_i32$5 | 0);
     $490($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 86608 | 0) >> 2] | 0 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     $406_1 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$2;
     $410$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     $412_1 = i64toi32_i32$5;
     $412$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $416_1 = i64toi32_i32$2;
     $416$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $406$hi;
     i64toi32_i32$2 = $410$hi;
     i64toi32_i32$0 = $412$hi;
     i64toi32_i32$1 = $416$hi;
     $487($7_1 + 208 | 0 | 0, $406_1 | 0, i64toi32_i32$5 | 0, $410_1 | 0, i64toi32_i32$2 | 0, $412_1 | 0, i64toi32_i32$0 | 0, $416_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$39 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$39
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$36
     }
    }
    $490($7_1 + 352 | 0 | 0, $5_1 | 0);
    $491($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $444_1 = i64toi32_i32$1;
    $444$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $448_1 = i64toi32_i32$0;
    $448$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $450_1 = i64toi32_i32$1;
    $450$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $454_1 = i64toi32_i32$0;
    $454$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $444$hi;
    i64toi32_i32$0 = $448$hi;
    i64toi32_i32$2 = $450$hi;
    i64toi32_i32$5 = $454$hi;
    $495($7_1 + 320 | 0 | 0, $444_1 | 0, i64toi32_i32$1 | 0, $448_1 | 0, i64toi32_i32$0 | 0, $450_1 | 0, i64toi32_i32$2 | 0, $454_1 | 0, i64toi32_i32$5 | 0);
    $490($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 86568 | 0) >> 2] | 0 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 324 | 0) >> 2] | 0;
    $464_1 = i64toi32_i32$5;
    $464$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$2;
    $468$hi = i64toi32_i32$5;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    $470_1 = i64toi32_i32$5;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $474_1 = i64toi32_i32$2;
    $474$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $464$hi;
    i64toi32_i32$2 = $468$hi;
    i64toi32_i32$0 = $470$hi;
    i64toi32_i32$1 = $474$hi;
    $495($7_1 + 288 | 0 | 0, $464_1 | 0, i64toi32_i32$5 | 0, $468_1 | 0, i64toi32_i32$2 | 0, $470_1 | 0, i64toi32_i32$0 | 0, $474_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$40 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$40
    }
    break label$40;
   };
   $16_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $11_1 = 0;
     break label$41;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$43 : {
     label$44 : {
      if ($2_1) {
       break label$44
      }
      $11_1 = 0;
      $2_1 = 0;
      break label$43;
     }
     $13_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 86608 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($13_1 | 0) | 0;
     $14_1 = 0;
     $1_1 = 0;
     $11_1 = 0;
     label$45 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $513_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $12_1 = ($15_1 >>> 0) / ($13_1 >>> 0) | 0;
      $14_1 = $12_1 + $14_1 | 0;
      HEAP32[$513_1 >> 2] = $14_1;
      $14_1 = ($1_1 | 0) == ($11_1 | 0) & !$14_1 | 0;
      $11_1 = $14_1 ? ($11_1 + 1 | 0) & 2047 | 0 : $11_1;
      $8_1 = $14_1 ? $8_1 + -9 | 0 : $8_1;
      $14_1 = Math_imul($17_1, $15_1 - Math_imul($12_1, $13_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$14_1) {
      break label$43
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $14_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $12_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$12_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $15_1 = $2_1 + 2047 | 0;
      $14_1 = 0;
      $13_1 = $2_1;
      label$50 : while (1) {
       $2_1 = $13_1;
       label$51 : {
        label$52 : {
         $1_1 = $15_1 & 2047 | 0;
         $13_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $13_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $177_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
          $177_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $591$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $593$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $591$hi;
         i64toi32_i32$0 = $177_1;
         i64toi32_i32$2 = $593$hi;
         i64toi32_i32$5 = $14_1;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
         i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $19_1 = i64toi32_i32$3;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$0 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$52
         }
         $14_1 = 0;
         break label$51;
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$4;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $601 = i64toi32_i32$4;
        $601$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$4 = $601$hi;
        i64toi32_i32$0 = $601;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $14_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $15_1 = $19_1;
       HEAP32[$13_1 >> 2] = $19_1;
       $13_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($11_1 | 0) ? $2_1 : $19_1 ? $2_1 : $1_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($11_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$14_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $11_1 = ($11_1 + -1 | 0) & 2047 | 0;
      if (($11_1 | 0) != ($13_1 | 0)) {
       break label$53
      }
      $1_1 = ($7_1 + 784 | 0) + ((($13_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $2_1 = ($13_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $14_1;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $6_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $13_1 = $11_1;
        $1_1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $11_1 = ($1_1 + $13_1 | 0) & 2047 | 0;
           if (($11_1 | 0) == ($2_1 | 0)) {
            break label$60
           }
           $11_1 = HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0;
           $14_1 = HEAP32[(($1_1 << 2 | 0) + 86592 | 0) >> 2] | 0;
           if ($11_1 >>> 0 < $14_1 >>> 0) {
            break label$60
           }
           if ($11_1 >>> 0 > $14_1 >>> 0) {
            break label$59
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $11_1 = ($1_1 + $13_1 | 0) & 2047 | 0;
           if (($11_1 | 0) != ($2_1 | 0)) {
            break label$63
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$0 = 1075633366;
          $495($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$0 | 0);
          $491($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$0 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $742 = i64toi32_i32$0;
          $742$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $746 = i64toi32_i32$1;
          $746$hi = i64toi32_i32$0;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$0 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $748 = i64toi32_i32$0;
          $748$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $752 = i64toi32_i32$1;
          $752$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $742$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$5 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $483($7_1 + 736 | 0 | 0, $742 | 0, i64toi32_i32$0 | 0, $746 | 0, i64toi32_i32$1 | 0, $748 | 0, i64toi32_i32$5 | 0, $752 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         $490($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $771 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $775 = i64toi32_i32$5;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $771$hi;
         i64toi32_i32$0 = $775$hi;
         $495($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $771 | 0, i64toi32_i32$1 | 0, $775 | 0, i64toi32_i32$0 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$0;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$0;
         $14_1 = $16_1 + 113 | 0;
         $1_1 = $14_1 - $4_1 | 0;
         $15_1 = ($1_1 | 0) < ($3_1 | 0);
         $11_1 = $15_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($11_1 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$0 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$0;
         break label$54;
        }
        $16_1 = $15_1 + $16_1 | 0;
        $11_1 = $2_1;
        if (($13_1 | 0) == ($2_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $12_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $11_1 = $13_1;
       label$64 : while (1) {
        $14_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
        $817 = $14_1;
        $14_1 = HEAP32[$14_1 >> 2] | 0;
        $1_1 = ($14_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$817 >> 2] = $1_1;
        $1_1 = ($13_1 | 0) == ($11_1 | 0) & !$1_1 | 0;
        $11_1 = $1_1 ? ($11_1 + 1 | 0) & 2047 | 0 : $11_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($14_1 & $17_1 | 0, $12_1);
        $13_1 = ($13_1 + 1 | 0) & 2047 | 0;
        if (($13_1 | 0) != ($2_1 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1_1) {
        continue label$56
       }
       label$65 : {
        if (($6_1 | 0) == ($11_1 | 0)) {
         break label$65
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $6_1;
        continue label$55;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $11_1 = $6_1;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    $488($7_1 + 656 | 0 | 0, +(+$510(+(1.0), 225 - $11_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $879 = i64toi32_i32$0;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $883 = i64toi32_i32$1;
    $883$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$0 = $879$hi;
    i64toi32_i32$1 = $883$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $449($7_1 + 688 | 0 | 0, $879 | 0, i64toi32_i32$0 | 0, $883 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 696 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 700 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $488($7_1 + 640 | 0 | 0, +(+$510(+(1.0), 113 - $11_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $900 = i64toi32_i32$3;
    $900$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $904 = i64toi32_i32$5;
    $904$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $900$hi;
    i64toi32_i32$0 = $904$hi;
    $509($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $900 | 0, i64toi32_i32$1 | 0, $904 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$0;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $497($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $920 = i64toi32_i32$3;
    $920$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $924 = i64toi32_i32$5;
    $924$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $920$hi;
    i64toi32_i32$0 = $924$hi;
    $483($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $920 | 0, i64toi32_i32$1 | 0, $924 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$0;
   }
   label$66 : {
    $8_1 = ($13_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($2_1 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8_1 = HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8_1) {
        break label$69
       }
       if ((($13_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$67
       }
      }
      $488($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $961 = i64toi32_i32$0;
      $961$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $965 = i64toi32_i32$1;
      $965$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $961$hi;
      i64toi32_i32$3 = $965$hi;
      $483($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $961 | 0, i64toi32_i32$5 | 0, $965 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$70
      }
      $488($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $984 = i64toi32_i32$3;
      $984$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $988 = i64toi32_i32$5;
      $988$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $984$hi;
      i64toi32_i32$0 = $988$hi;
      $483($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $984 | 0, i64toi32_i32$1 | 0, $988 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$0;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$0;
      break label$67;
     }
     $25_1 = +($5_1 | 0);
     label$71 : {
      if ((($13_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$71
      }
      $488($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1011 = i64toi32_i32$0;
      $1011$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1015 = i64toi32_i32$1;
      $1015$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1011$hi;
      i64toi32_i32$3 = $1015$hi;
      $483($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1011 | 0, i64toi32_i32$5 | 0, $1015 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$67;
     }
     $488($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1031 = i64toi32_i32$3;
     $1031$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1035 = i64toi32_i32$5;
     $1035$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1031$hi;
     i64toi32_i32$0 = $1035$hi;
     $483($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1031 | 0, i64toi32_i32$1 | 0, $1035 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$0;
    }
    if (($11_1 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $509($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1049 = i64toi32_i32$3;
    $1049$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 476 | 0) >> 2] | 0;
    $1051 = i64toi32_i32$5;
    $1051$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1049$hi;
    i64toi32_i32$5 = $1051$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    if ($485($1049 | 0, i64toi32_i32$3 | 0, $1051 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $483($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 456 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$0 = $22$hi;
   $483($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$0 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1071 = i64toi32_i32$0;
   $1071$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1075 = i64toi32_i32$1;
   $1075$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$0 = $1071$hi;
   i64toi32_i32$1 = $1075$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $497($7_1 + 416 | 0 | 0, $1071 | 0, i64toi32_i32$0 | 0, $1075 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$72 : {
    if (($14_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $451($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 1073610752;
    $495($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1098 = i64toi32_i32$0;
    $1098$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $1100 = i64toi32_i32$1;
    $1100$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1098$hi;
    i64toi32_i32$1 = $1100$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2_1 = $486($1098 | 0, i64toi32_i32$0 | 0, $1100 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1106 = i64toi32_i32$5;
    $1106$hi = i64toi32_i32$3;
    $14_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$4 = $14_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1106$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? $20_1 : $1106;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1113 = i64toi32_i32$1;
    $1113$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $14_1;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$1 = $1113$hi;
    i64toi32_i32$5 = i64toi32_i32$3 ? $21_1 : $1113;
    i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$4;
    $16_1 = $16_1 + (($2_1 | 0) > (-1 | 0)) | 0;
    label$73 : {
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 0;
     if (($485($19_1 | 0, $19$hi | 0, $22_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0 | 0) != (0 | 0) & ($15_1 & ($14_1 | ($11_1 | 0) != ($1_1 | 0) | 0) | 0) | 0) {
      break label$73
     }
     if (($16_1 + 110 | 0 | 0) <= ($10_1 | 0)) {
      break label$72
     }
    }
    HEAP32[($405() | 0) >> 2] = 68;
   }
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   $450($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$3 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $20$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $455($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $448($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $448($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   $3_1 = $5_1 + -48 | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3_1 = 0;
    label$11 : while (1) {
     $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $448($0_1 | 0) | 0;
     }
     $3_1 = $3_1 + -48 | 0;
     label$14 : {
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $448($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $448($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $456($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $36$hi = 0, $42_1 = 0, $42$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $513($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $447($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $452($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $32_1 = $2_1;
   $33_1 = $1_1;
   $34_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $36$hi;
   i64toi32_i32$2 = $36_1;
   i64toi32_i32$0 = $42$hi;
   i64toi32_i32$3 = $42_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$32_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $33_1 : $34_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $456($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$498($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $458($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $7_1 = 0, $11_1 = 0, $6_1 = 0, $4_1 = 0, $12_1 = 0, $12$hi = 0, $8_1 = 0, $32_1 = 0, $33_1 = 0, $185_1 = 0, $185$hi = 0, $242_1 = 0, $242$hi = 0, $324$hi = 0, $327_1 = 0, $327$hi = 0, $406$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$9;
           }
           $5_1 = $448($0_1 | 0) | 0;
          }
          if ($398($5_1 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6_1 = 0;
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$11;
          }
          $5_1 = $448($0_1 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1_1 & -17 | 0) {
            break label$15
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$16;
            }
            $5_1 = $448($0_1 | 0) | 0;
           }
           label$18 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$19;
             }
             $5_1 = $448($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 86673 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$2
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 86673 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $447($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($405() | 0) >> 2] = 28;
          break label$1;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $9_1 = 0;
         $9$hi = i64toi32_i32$0;
         label$23 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1_1 = 0;
          label$24 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$25 : {
            label$26 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$25;
            }
            $5_1 = $448($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$27 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$24
            }
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $10_1 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11_1 = $2_1;
         $11$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$29;
           }
           $5_1 = $448($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $9_1 = i64toi32_i32$4;
          $9$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $9$hi;
          i64toi32_i32$0 = $9_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $11_1 = $2_1;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1_1 = 10;
         break label$4;
        }
        HEAP32[($405() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       label$32 : {
        $2_1 = HEAPU8[($5_1 + 86673 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$32
        }
        $7_1 = 0;
        label$33 : while (1) {
         $7_1 = $2_1 + Math_imul($7_1, $1_1) | 0;
         label$34 : {
          label$35 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$34;
          }
          $5_1 = $448($0_1 | 0) | 0;
         }
         $2_1 = HEAPU8[($5_1 + 86673 | 0) >> 0] | 0;
         label$36 : {
          if ($7_1 >>> 0 > 119304646 >>> 0) {
           break label$36
          }
          if ($1_1 >>> 0 > $2_1 >>> 0) {
           continue label$33
          }
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $9_1 = $7_1;
        $9$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $10_1 = $1_1;
       $10$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $242_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $242$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $242$hi;
        i64toi32_i32$3 = $242_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$38;
         }
         $5_1 = $448($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        $2_1 = HEAPU8[($5_1 + 86673 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$0 = 0;
        $496($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 86929 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$40 : {
       $2_1 = HEAPU8[($5_1 + 86673 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$40
       }
       $7_1 = 0;
       label$41 : while (1) {
        $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
        label$42 : {
         label$43 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$42;
         }
         $5_1 = $448($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($5_1 + 86673 | 0) >> 0] | 0;
        label$44 : {
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$44
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$41
         }
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $7_1;
       $9$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $10_1 = $8_1;
      $10$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$0 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $32_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $32_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $11_1 = $32_1;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$0 = $9_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $33_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $33_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $324$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $327_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $324$hi;
       i64toi32_i32$5 = $33_1;
       i64toi32_i32$3 = $327$hi;
       i64toi32_i32$4 = $327_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $9$hi = i64toi32_i32$3;
       label$46 : {
        label$47 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$46;
        }
        $5_1 = $448($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$4 = $11_1;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$4
       }
       $2_1 = HEAPU8[($5_1 + 86673 | 0) >> 0] | 0;
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 86673 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $448($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 86673 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     HEAP32[($405() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$53
      }
      if ($6_1) {
       break label$53
      }
      HEAP32[($405() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($9$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($9$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     HEAP32[($405() | 0) >> 2] = 68;
     break label$1;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $406$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $406$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $447($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $459($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 | 0) < (0 | 0) ? -1 : $0_1 + 2147483647 | 0;
  i64toi32_i32$0 = 0;
  $447($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $458($4_1 | 0, $2_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $0_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 120 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  }
  global$0 = $4_1 + 144 | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $460($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $459($0_1 | 0, $1_1 | 0, $2_1 | 0, -2147483648 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $461($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      if (!$2_1) {
       break label$3
      }
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $462($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$0_1 >> 0] | 0;
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $4_1 - $5_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $467($0_1 + ($518($0_1 | 0) | 0) | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $464($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $465($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($518($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $467($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $466($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $468($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $0_1 + ($518($0_1 | 0) | 0) | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = $4_1;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[$3_1 >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $469($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $1_1 = $1_1 & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return 0 | 0;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $0_1 + $2_1 | 0;
   if ((HEAPU8[$3_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $3_1 | 0;
 }
 
 function $470($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $469($0_1 | 0, $1_1 | 0, ($518($0_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0;
 }
 
 function $471($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP8[$1_1 >> 0] | 0;
   if ($2_1) {
    break label$1
   }
   return $0_1 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $0_1 = $464($0_1 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$2
   }
   label$3 : {
    if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
     break label$3
    }
    return $0_1 | 0;
   }
   if (!(HEAPU8[($0_1 + 1 | 0) >> 0] | 0)) {
    break label$2
   }
   label$4 : {
    if (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) {
     break label$4
    }
    return $472($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 2 | 0) >> 0] | 0)) {
    break label$2
   }
   label$5 : {
    if (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) {
     break label$5
    }
    return $473($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 3 | 0) >> 0] | 0)) {
    break label$2
   }
   label$6 : {
    if (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) {
     break label$6
    }
    return $474($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   $3_1 = $475($0_1 | 0, $1_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $472($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $3_1 = !$2_1;
  label$1 : {
   $4_1 = (HEAPU8[$0_1 >> 0] | 0) << 8 | 0 | $2_1 | 0;
   $5_1 = (HEAPU8[$1_1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) | 0;
   if (($4_1 | 0) == ($5_1 | 0)) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $2_1 = $0_1 + 1 | 0;
   label$2 : while (1) {
    $0_1 = $2_1;
    $1_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $3_1 = !$1_1;
    $4_1 = ($4_1 << 8 | 0) & 65280 | 0 | $1_1 | 0;
    if (($4_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    $2_1 = $0_1 + 1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($3_1 ? 0 : $0_1) | 0;
 }
 
 function $473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = $0_1 + 2 | 0;
  $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
  $4_1 = !$3_1;
  label$1 : {
   label$2 : {
    $5_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ($3_1 << 8 | 0) | 0;
    $6_1 = (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$1_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0;
    if (($5_1 | 0) == ($6_1 | 0)) {
     break label$2
    }
    if (!$3_1) {
     break label$2
    }
    label$3 : while (1) {
     $1_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = !$0_1;
     $5_1 = ($5_1 | $0_1 | 0) << 8 | 0;
     if (($5_1 | 0) == ($6_1 | 0)) {
      break label$1
     }
     $2_1 = $1_1;
     if ($0_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $1_1 = $2_1;
  }
  return ($4_1 ? 0 : $1_1 + -2 | 0) | 0;
 }
 
 function $474($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $2_1 = $0_1 + 3 | 0;
  $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $4_1 = !$3_1;
  label$1 : {
   label$2 : {
    $5_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | $3_1 | 0;
    $6_1 = $1_1;
    $0_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1_1 = $0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0;
    if (($5_1 | 0) == ($1_1 | 0)) {
     break label$2
    }
    if (!$3_1) {
     break label$2
    }
    label$3 : while (1) {
     $3_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = !$0_1;
     $5_1 = $5_1 << 8 | 0 | $0_1 | 0;
     if (($5_1 | 0) == ($1_1 | 0)) {
      break label$1
     }
     $2_1 = $3_1;
     if ($0_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $2_1;
  }
  return ($4_1 ? 0 : $3_1 + -3 | 0) | 0;
 }
 
 function $475($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $7_1 = 0, $2_1 = 0, $11_1 = 0, $5_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $2_1 = global$0 - 1056 | 0;
  global$0 = $2_1;
  i64toi32_i32$1 = $2_1 + 1048 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 1040 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1032 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1036 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1024 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4_1 = HEAPU8[$1_1 >> 0] | 0;
        if ($4_1) {
         break label$6
        }
        $5_1 = -1;
        $6_1 = 1;
        break label$5;
       }
       label$7 : while (1) {
        if (!(HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0)) {
         break label$2
        }
        $4_1 = $4_1 & 255 | 0;
        $3_1 = $3_1 + 1 | 0;
        HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
        $6_1 = ($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | (1 << ($4_1 & 31 | 0) | 0) | 0;
        $4_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
        if ($4_1) {
         continue label$7
        }
        break label$7;
       };
       $6_1 = 1;
       $5_1 = -1;
       if ($3_1 >>> 0 > 1 >>> 0) {
        break label$4
       }
      }
      $7_1 = -1;
      $8_1 = 1;
      break label$3;
     }
     $8_1 = 0;
     $9_1 = 1;
     $4_1 = 1;
     label$8 : while (1) {
      label$9 : {
       label$10 : {
        $7_1 = HEAPU8[($1_1 + ($4_1 + $5_1 | 0) | 0) >> 0] | 0;
        $10_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
        if (($7_1 | 0) != ($10_1 | 0)) {
         break label$10
        }
        label$11 : {
         if (($4_1 | 0) != ($9_1 | 0)) {
          break label$11
         }
         $8_1 = $9_1 + $8_1 | 0;
         $4_1 = 1;
         break label$9;
        }
        $4_1 = $4_1 + 1 | 0;
        break label$9;
       }
       label$12 : {
        if ($7_1 >>> 0 <= $10_1 >>> 0) {
         break label$12
        }
        $9_1 = $6_1 - $5_1 | 0;
        $4_1 = 1;
        $8_1 = $6_1;
        break label$9;
       }
       $4_1 = 1;
       $5_1 = $8_1;
       $8_1 = $8_1 + 1 | 0;
       $9_1 = 1;
      }
      $6_1 = $4_1 + $8_1 | 0;
      if ($6_1 >>> 0 < $3_1 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     $8_1 = 1;
     $7_1 = -1;
     label$13 : {
      if ($3_1 >>> 0 > 1 >>> 0) {
       break label$13
      }
      $6_1 = $9_1;
      break label$3;
     }
     $6_1 = 0;
     $11_1 = 1;
     $4_1 = 1;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $10_1 = HEAPU8[($1_1 + ($4_1 + $7_1 | 0) | 0) >> 0] | 0;
        $12_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
        if (($10_1 | 0) != ($12_1 | 0)) {
         break label$16
        }
        label$17 : {
         if (($4_1 | 0) != ($11_1 | 0)) {
          break label$17
         }
         $6_1 = $11_1 + $6_1 | 0;
         $4_1 = 1;
         break label$15;
        }
        $4_1 = $4_1 + 1 | 0;
        break label$15;
       }
       label$18 : {
        if ($10_1 >>> 0 >= $12_1 >>> 0) {
         break label$18
        }
        $11_1 = $8_1 - $7_1 | 0;
        $4_1 = 1;
        $6_1 = $8_1;
        break label$15;
       }
       $4_1 = 1;
       $7_1 = $6_1;
       $6_1 = $6_1 + 1 | 0;
       $11_1 = 1;
      }
      $8_1 = $4_1 + $6_1 | 0;
      if ($8_1 >>> 0 < $3_1 >>> 0) {
       continue label$14
      }
      break label$14;
     };
     $6_1 = $9_1;
     $8_1 = $11_1;
    }
    label$19 : {
     label$20 : {
      $4_1 = ($7_1 + 1 | 0) >>> 0 > ($5_1 + 1 | 0) >>> 0;
      $11_1 = $4_1 ? $8_1 : $6_1;
      $13_1 = $4_1 ? $7_1 : $5_1;
      $9_1 = $13_1 + 1 | 0;
      if (!($462($1_1 | 0, $1_1 + $11_1 | 0 | 0, $9_1 | 0) | 0)) {
       break label$20
      }
      $4_1 = $3_1 + ($13_1 ^ -1 | 0) | 0;
      $11_1 = ($13_1 >>> 0 > $4_1 >>> 0 ? $13_1 : $4_1) + 1 | 0;
      $14_1 = $3_1 - $11_1 | 0;
      $15_1 = 0;
      break label$19;
     }
     $14_1 = $3_1 - $11_1 | 0;
     $15_1 = $14_1;
    }
    $10_1 = $3_1 + -1 | 0;
    $12_1 = $3_1 | 63 | 0;
    $7_1 = 0;
    $6_1 = $0_1;
    label$21 : while (1) {
     label$22 : {
      if (($0_1 - $6_1 | 0) >>> 0 >= $3_1 >>> 0) {
       break label$22
      }
      label$23 : {
       $4_1 = $461($0_1 | 0, 0 | 0, $12_1 | 0) | 0;
       if (!$4_1) {
        break label$23
       }
       $0_1 = $4_1;
       if (($4_1 - $6_1 | 0) >>> 0 < $3_1 >>> 0) {
        break label$2
       }
       break label$22;
      }
      $0_1 = $0_1 + $12_1 | 0;
     }
     label$24 : {
      label$25 : {
       label$26 : {
        $4_1 = HEAPU8[($6_1 + $10_1 | 0) >> 0] | 0;
        if (((HEAP32[(($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($4_1 & 31 | 0) | 0) & 1 | 0) {
         break label$26
        }
        $4_1 = $3_1;
        break label$25;
       }
       label$27 : {
        $4_1 = $3_1 - (HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
        if (!$4_1) {
         break label$27
        }
        $4_1 = $15_1 ? ($7_1 ? ($4_1 >>> 0 < $11_1 >>> 0 ? $14_1 : $4_1) : $4_1) : $4_1;
        break label$25;
       }
       $4_1 = $9_1;
       label$28 : {
        label$29 : {
         $8_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $4_1 : $7_1;
         $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
         if (!$5_1) {
          break label$29
         }
         label$30 : while (1) {
          if (($5_1 & 255 | 0 | 0) != (HEAPU8[($6_1 + $8_1 | 0) >> 0] | 0 | 0)) {
           break label$28
          }
          $8_1 = $8_1 + 1 | 0;
          $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
          if ($5_1) {
           continue label$30
          }
          break label$30;
         };
         $4_1 = $9_1;
        }
        label$31 : while (1) {
         if ($4_1 >>> 0 <= $7_1 >>> 0) {
          break label$1
         }
         $4_1 = $4_1 + -1 | 0;
         if ((HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0 | 0) == (HEAPU8[($6_1 + $4_1 | 0) >> 0] | 0 | 0)) {
          continue label$31
         }
         break label$31;
        };
        $4_1 = $11_1;
        $7_1 = $15_1;
        break label$24;
       }
       $4_1 = $8_1 - $13_1 | 0;
      }
      $7_1 = 0;
     }
     $6_1 = $6_1 + $4_1 | 0;
     continue label$21;
    };
   }
   $6_1 = 0;
  }
  global$0 = $2_1 + 1056 | 0;
  return $6_1 | 0;
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$15($0_1 | 0, 97032 | 0) | 0 | 0;
 }
 
 function $477() {
  return 97076 | 0;
 }
 
 function $478() {
  return 97084 | 0;
 }
 
 function $479() {
  return 97088 | 0;
 }
 
 function $480($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($405() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $483($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $12_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $354_1 = 0, $354$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $363$hi = 0, $369_1 = 0, $369$hi = 0, $371$hi = 0, $375$hi = 0, $377_1 = 0, $377$hi = 0, $380$hi = 0, $386_1 = 0, $386$hi = 0, $390$hi = 0, $394_1 = 0, $395$hi = 0, $400_1 = 0, $400$hi = 0, $408_1 = 0, $409$hi = 0, $411_1 = 0, $411$hi = 0, $417_1 = 0, $418$hi = 0, $422_1 = 0, $423$hi = 0, $426_1 = 0, $426$hi = 0, $432_1 = 0, $433$hi = 0, $437_1 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$5 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $93_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
    $93$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$5 = $93$hi;
    i64toi32_i32$4 = $93_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1_1;
   $121_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $1_1;
   i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$4;
   $9_1 = i64toi32_i32$2;
   $9$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1 ? $4_1 : $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $135_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $135_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8_1 = $135_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $136_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $136_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $136_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$4 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$0;
    i64toi32_i32$0 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$0 | 0) == (32 | 0)) {
     $137_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $137_1 = i64toi32_i32$0
    }
    $160$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $163$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $160$hi;
    i64toi32_i32$1 = $137_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$0 = $6_1 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$5;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $484($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$0 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    $185_1 = $4_1;
    $185$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $4_1;
    i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$2;
    i64toi32_i32$2 = Math_clz32(i64toi32_i32$4);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$2 | 0) == (32 | 0)) {
     $138_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $138_1 = i64toi32_i32$2
    }
    $192$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $195$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $192$hi;
    i64toi32_i32$3 = $138_1;
    i64toi32_i32$4 = $195$hi;
    i64toi32_i32$2 = $7_1 << 6 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7_1 = i64toi32_i32$0;
    i64toi32_i32$5 = $184$hi;
    i64toi32_i32$3 = $185$hi;
    $484($183_1 | 0, $184_1 | 0, i64toi32_i32$5 | 0, $185_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $139_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
    $139_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $208_1 = $139_1;
   $208$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 61;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $140_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    $140_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $210$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $208$hi;
   i64toi32_i32$5 = $208_1;
   i64toi32_i32$3 = $210$hi;
   i64toi32_i32$2 = $140_1;
   i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 524288;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    $141_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $141_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
   }
   $214_1 = $141_1;
   $214$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 61;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $142_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $142_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $216$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $214$hi;
   i64toi32_i32$1 = $214_1;
   i64toi32_i32$5 = $216$hi;
   i64toi32_i32$2 = $142_1;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $143_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
   }
   $3_1 = $143_1;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $10_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$3;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$3 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$3;
     break label$10;
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $484($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $494($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$3;
    $242$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$5;
    $244$hi = i64toi32_i32$3;
    i64toi32_i32$1 = (i64toi32_i32$1 + 64 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$3;
    $248$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $244$hi;
    i64toi32_i32$1 = $244_1;
    i64toi32_i32$3 = $248$hi;
    i64toi32_i32$2 = $248_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    $250_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$5 = 0;
    $251$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $242$hi;
    i64toi32_i32$2 = $242_1;
    i64toi32_i32$3 = $251$hi;
    i64toi32_i32$1 = $250_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$3 = 524288;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $12_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
    $144_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $2_1 = $144_1;
   $2$hi = i64toi32_i32$5;
   label$12 : {
    label$13 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
      $145_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $146_1 = 0
       } else {
        $146_1 = 1
       }
       $147_1 = $146_1;
      } else {
       $147_1 = 0
      }
      $145_1 = $147_1;
     }
     if ($145_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$4;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
      $269$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$2 = $3_1;
      $272_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $273$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $269$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $273$hi;
      i64toi32_i32$3 = $272_1;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      $4_1 = i64toi32_i32$1;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$14
      }
      i64toi32_i32$2 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$0 = 524287;
     i64toi32_i32$3 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$5 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $284_1 = $4_1;
     $284$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $4_1;
     i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$2;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$3);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $148_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
     } else {
      $148_1 = i64toi32_i32$2
     }
     $291$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $294$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $291$hi;
     i64toi32_i32$0 = $148_1;
     i64toi32_i32$3 = $294$hi;
     i64toi32_i32$2 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$1 = $283$hi;
     i64toi32_i32$0 = $284$hi;
     $484($282_1 | 0, $283_1 | 0, i64toi32_i32$1 | 0, $284_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$4 = $5_1 + 40 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$0;
     break label$12;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$3;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $3_1;
    $315_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$2 = $309_1;
    i64toi32_i32$3 = $316$hi;
    i64toi32_i32$0 = $315_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = 1048576;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$12
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $149_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $149_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
    }
    $322_1 = $149_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $150_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $150_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $324$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$2 = $324$hi;
    i64toi32_i32$0 = $150_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $325$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$2 = $325_1;
    i64toi32_i32$1 = $327$hi;
    i64toi32_i32$0 = $327_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $1$hi = i64toi32_i32$1;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $154_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $154_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $4_1 = $154_1;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$1;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $4$hi;
    $484($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $494($5_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354_1 = i64toi32_i32$1;
    $354$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356_1 = i64toi32_i32$2;
    $356$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$1;
    $360$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $356$hi;
    i64toi32_i32$5 = $356_1;
    i64toi32_i32$1 = $360$hi;
    i64toi32_i32$0 = $360_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 0;
    $362_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = 0;
    $363$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $354$hi;
    i64toi32_i32$0 = $354_1;
    i64toi32_i32$1 = $363$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $155_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $155_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $369_1 = $155_1;
   $369$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $156_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
    $156_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $371$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $369$hi;
   i64toi32_i32$1 = $369_1;
   i64toi32_i32$0 = $371$hi;
   i64toi32_i32$5 = $156_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $157_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $157_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   i64toi32_i32$0 = $157_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $375$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $375$hi;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $377_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $377$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
    $158_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $380$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $377$hi;
   i64toi32_i32$0 = $377_1;
   i64toi32_i32$2 = $380$hi;
   i64toi32_i32$5 = $158_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($492() | 0 | 0) {
      case 0:
       i64toi32_i32$2 = $4$hi;
       $386_1 = $4_1;
       $386$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$2 = 0;
       $390$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$3;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$2 = 0;
       $395$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $386$hi;
       i64toi32_i32$5 = $386_1;
       i64toi32_i32$4 = $395$hi;
       i64toi32_i32$1 = $394_1;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$3;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$3 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$3;
        break label$19;
       }
       i64toi32_i32$3 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1$hi;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $3_1 = i64toi32_i32$4;
       $3$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$1 = $2_1;
       $408_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$1 = $400_1;
       i64toi32_i32$0 = $409$hi;
       i64toi32_i32$3 = $408_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$4;
       break label$18;
      case 1:
       i64toi32_i32$4 = $4$hi;
       $411_1 = $4_1;
       $411$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       $417_1 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$4 = $418$hi;
       i64toi32_i32$1 = $417_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1_1 = i64toi32_i32$0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$1 = $3_1;
       $422_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$1 = $411_1;
       i64toi32_i32$2 = $423$hi;
       i64toi32_i32$3 = $422_1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$0;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$0 = $4$hi;
     $426_1 = $4_1;
     $426$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     $432_1 = !($2_1 | i64toi32_i32$0 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $433$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $433$hi;
     i64toi32_i32$3 = $432_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$3 = $3_1;
     $437_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $438$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $426$hi;
     i64toi32_i32$3 = $426_1;
     i64toi32_i32$4 = $438$hi;
     i64toi32_i32$5 = $437_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $493() | 0;
  }
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $484($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $485($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $486($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $487($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $15$hi = 0, $13$hi = 0, $15_1 = 0, $16$hi = 0, $13_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $18$hi = 0, $19$hi = 0, $17$hi = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $11$hi = 0, $17_1 = 0, $12$hi = 0, $20$hi = 0, $11_1 = 0, $12_1 = 0, $20_1 = 0, $10$hi = 0, $10_1 = 0, $8_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $7_1 = 0, $21$hi = 0, $9_1 = 0, $470_1 = 0, $471_1 = 0, $475_1 = 0, $476_1 = 0, $478_1 = 0, $479_1 = 0, $480_1 = 0, $481_1 = 0, $482_1 = 0, $484_1 = 0, $485_1 = 0, $486_1 = 0, $488_1 = 0, $489_1 = 0, $490_1 = 0, $491_1 = 0, $494_1 = 0, $495_1 = 0, $496_1 = 0, $497_1 = 0, $498_1 = 0, $499_1 = 0, $501_1 = 0, $502_1 = 0, $503_1 = 0, $504_1 = 0, $505_1 = 0, $507_1 = 0, $508_1 = 0, $512_1 = 0, $513_1 = 0, $514_1 = 0, $515_1 = 0, $516_1 = 0, $518_1 = 0, $521_1 = 0, $522_1 = 0, $523_1 = 0, $524_1 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $530 = 0, $21_1 = 0, $531 = 0, $532 = 0, $533 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $560 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $572 = 0, $573 = 0, $575 = 0, $576 = 0, $48_1 = 0, $52_1 = 0, $59_1 = 0, $63_1 = 0, $72_1 = 0, $72$hi = 0, $77_1 = 0, $77$hi = 0, $85_1 = 0, $85$hi = 0, $101_1 = 0, $102_1 = 0, $102$hi = 0, $103_1 = 0, $103$hi = 0, $110$hi = 0, $113$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $155_1 = 0, $157_1 = 0, $157$hi = 0, $161$hi = 0, $172_1 = 0, $172$hi = 0, $173$hi = 0, $176_1 = 0, $179_1 = 0, $179$hi = 0, $184$hi = 0, $194_1 = 0, $194$hi = 0, $195$hi = 0, $197_1 = 0, $200_1 = 0, $200$hi = 0, $205$hi = 0, $215_1 = 0, $215$hi = 0, $216$hi = 0, $218_1 = 0, $221_1 = 0, $221$hi = 0, $226$hi = 0, $236_1 = 0, $236$hi = 0, $237$hi = 0, $239_1 = 0, $242_1 = 0, $242$hi = 0, $247$hi = 0, $256_1 = 0, $256$hi = 0, $257$hi = 0, $265_1 = 0, $265$hi = 0, $269$hi = 0, $274_1 = 0, $274$hi = 0, $279_1 = 0, $279$hi = 0, $286_1 = 0, $286$hi = 0, $289_1 = 0, $289$hi = 0, $292_1 = 0, $294$hi = 0, $295_1 = 0, $295$hi = 0, $298_1 = 0, $298$hi = 0, $299_1 = 0, $299$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $325_1 = 0, $325$hi = 0, $332_1 = 0, $332$hi = 0, $333$hi = 0, $335_1 = 0, $336_1 = 0, $336$hi = 0, $338_1 = 0, $338$hi = 0, $341_1 = 0, $343$hi = 0, $344_1 = 0, $344$hi = 0, $347_1 = 0, $347$hi = 0, $348$hi = 0, $349$hi = 0, $353_1 = 0, $354$hi = 0, $355$hi = 0, $357_1 = 0, $358$hi = 0, $359$hi = 0, $366_1 = 0, $366$hi = 0, $370_1 = 0, $370$hi = 0, $371_1 = 0, $371$hi = 0, $375_1 = 0, $375$hi = 0, $378$hi = 0, $383_1 = 0, $383$hi = 0, $385_1 = 0, $385$hi = 0, $388_1 = 0, $390$hi = 0, $391_1 = 0, $391$hi = 0, $394_1 = 0, $394$hi = 0, $395$hi = 0, $396_1 = 0, $396$hi = 0, $397_1 = 0, $397$hi = 0, $410_1 = 0, $410$hi = 0, $417_1 = 0, $417$hi = 0, $418$hi = 0, $420_1 = 0, $421_1 = 0, $421$hi = 0, $423_1 = 0, $423$hi = 0, $426_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $432_1 = 0, $432$hi = 0, $433$hi = 0, $434$hi = 0, $438_1 = 0, $439$hi = 0, $440_1 = 0, $440$hi = 0, $445_1 = 0, $446$hi = 0, $451_1 = 0, $451$hi = 0, $453_1 = 0, $453$hi = 0, $455$hi = 0, $460_1 = 0, $460$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $473_1 = 0, $473$hi = 0, $474_1 = 0, $474$hi = 0, $477_1 = 0, $477$hi = 0, $483_1 = 0, $483$hi = 0, $487_1 = 0, $488$hi = 0, $489$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $506_1 = 0, $506$hi = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $510_1 = 0, $510$hi = 0, $511_1 = 0, $511$hi = 0, $513$hi = 0, $517_1 = 0, $518$hi = 0, $519_1 = 0, $519$hi = 0, $520_1 = 0, $520$hi = 0, $529 = 0, $529$hi = 0, $534 = 0, $534$hi = 0, $535 = 0, $535$hi = 0, $536 = 0, $536$hi = 0, $541 = 0, $541$hi = 0, $545 = 0, $546$hi = 0, $547$hi = 0, $551 = 0, $552$hi = 0, $553 = 0, $553$hi = 0, $554 = 0, $554$hi = 0, $561 = 0, $561$hi = 0, $566 = 0, $566$hi = 0, $571 = 0, $571$hi = 0, $574 = 0, $574$hi = 0, $577 = 0, $578$hi = 0, $581 = 0, $582$hi = 0, $583$hi = 0, $586 = 0, $587$hi = 0, $589$hi = 0, $590 = 0, $590$hi = 0, $594 = 0, $595$hi = 0, $596 = 0, $596$hi = 0, $597 = 0, $597$hi = 0, $598 = 0, $598$hi = 0, $605 = 0, $605$hi = 0, $608 = 0, $608$hi = 0, $611 = 0, $613$hi = 0, $614 = 0, $614$hi = 0, $618 = 0, $619 = 0, $619$hi = 0, $620 = 0, $620$hi = 0, $622$hi = 0, $623$hi = 0, $625 = 0, $626$hi = 0, $627$hi = 0, $631 = 0, $632$hi = 0, $637$hi = 0, $646 = 0, $647$hi = 0, $648 = 0, $648$hi = 0, $651 = 0, $651$hi = 0, $657 = 0, $657$hi = 0, $658 = 0, $658$hi = 0, $662 = 0, $662$hi = 0, $667 = 0, $668$hi = 0, $669 = 0, $669$hi = 0, $670 = 0, $670$hi = 0, $672$hi = 0, $673 = 0, $673$hi = 0, $674 = 0, $674$hi = 0, $676$hi = 0, $677 = 0, $677$hi = 0, $678$hi = 0, $681 = 0, $681$hi = 0, $682$hi = 0, $685 = 0, $685$hi = 0, $687 = 0, $687$hi = 0, $689$hi = 0, $578 = 0, $691 = 0, $691$hi = 0, $694 = 0, $694$hi = 0, $695 = 0, $695$hi = 0, $696$hi = 0, $699 = 0, $699$hi = 0, $700 = 0, $700$hi = 0, $702 = 0, $702$hi = 0, $705 = 0, $707$hi = 0, $708 = 0, $708$hi = 0, $709$hi = 0, $710$hi = 0, $720 = 0, $720$hi = 0, $722 = 0, $722$hi = 0, $724$hi = 0, $734 = 0, $735$hi = 0, $736 = 0, $736$hi = 0, $739 = 0, $739$hi = 0, $740 = 0, $740$hi = 0, $745 = 0, $745$hi = 0, $746 = 0, $746$hi = 0, $748$hi = 0, $754 = 0, $754$hi = 0, $759 = 0, $760$hi = 0, $761 = 0, $761$hi = 0, $762 = 0, $762$hi = 0, $764$hi = 0, $765 = 0, $765$hi = 0, $766 = 0, $766$hi = 0, $768$hi = 0, $769 = 0, $769$hi = 0, $770 = 0, $770$hi = 0, $775 = 0, $775$hi = 0, $776$hi = 0, $779 = 0, $779$hi = 0, $781 = 0, $781$hi = 0, $784 = 0, $784$hi = 0, $786$hi = 0, $579 = 0, $788 = 0, $788$hi = 0, $789$hi = 0, $792 = 0, $792$hi = 0, $793 = 0, $793$hi = 0, $794 = 0, $794$hi = 0, $796 = 0, $796$hi = 0, $799 = 0, $801$hi = 0, $802 = 0, $802$hi = 0, $803$hi = 0, $804$hi = 0, $820 = 0, $820$hi = 0, $821 = 0, $821$hi = 0, $823$hi = 0, $825 = 0, $827 = 0, $827$hi = 0, $829$hi = 0, $833 = 0, $837 = 0, $838$hi = 0, $842 = 0, $843$hi = 0, $853$hi = 0, $855 = 0, $855$hi = 0, $856 = 0, $856$hi = 0, $857 = 0, $857$hi = 0, $859$hi = 0, $861 = 0, $863 = 0, $863$hi = 0, $865$hi = 0, $869 = 0, $873 = 0, $874$hi = 0, $878 = 0, $879$hi = 0, $880$hi = 0, $896 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $470_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $470_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $470_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $471_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $471_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $471_1 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$3
      }
     }
     label$5 : {
      i64toi32_i32$0 = $1$hi;
      $48_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $52_1) {
       break label$5
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12$hi = i64toi32_i32$0;
      break label$2;
     }
     label$6 : {
      i64toi32_i32$0 = $3$hi;
      $59_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $63_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $59_1 : $63_1) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$2;
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $72_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$2 = $72_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$7
      }
      label$8 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$0 = $77_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$8
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $12_1 = 0;
       $12$hi = i64toi32_i32$2;
       break label$2;
      }
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$2;
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $85_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $85$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $85$hi;
      i64toi32_i32$0 = $85_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$9
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$2;
     }
     $8_1 = 0;
     label$11 : {
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$11
      }
      $101_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $102_1 = $1_1;
      $102$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      $103_1 = $11_1;
      $103$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $11$hi;
      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $11_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$2 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$2 | 0) == (32 | 0)) {
       $475_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $475_1 = i64toi32_i32$2
      }
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $113$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $110$hi;
      i64toi32_i32$0 = $475_1;
      i64toi32_i32$3 = $113$hi;
      i64toi32_i32$2 = $8_1 << 6 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$1;
      i64toi32_i32$5 = $102$hi;
      i64toi32_i32$0 = $103$hi;
      $484($101_1 | 0, $102_1 | 0, i64toi32_i32$5 | 0, $103_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$1 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$3
     }
     $128_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $129_1 = $3_1;
     $129$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     $130_1 = $10_1;
     $130$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $10$hi;
     $9_1 = !($10_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $10_1;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $476_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476_1 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $140$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $137$hi;
     i64toi32_i32$5 = $476_1;
     i64toi32_i32$2 = $140$hi;
     i64toi32_i32$0 = $9_1 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $9_1 = i64toi32_i32$4;
     i64toi32_i32$1 = $129$hi;
     i64toi32_i32$5 = $130$hi;
     $484($128_1 | 0, $129_1 | 0, i64toi32_i32$1 | 0, $130_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$4 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$5;
    }
    $155_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 49;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $478_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $478_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $157_1 = $478_1;
    $157$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $14$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 15;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $479_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
     $479_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $161$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $157$hi;
    i64toi32_i32$3 = $157_1;
    i64toi32_i32$1 = $161$hi;
    i64toi32_i32$0 = $479_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = 0;
    $496($155_1 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $172_1 = i64toi32_i32$0;
    $172$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $172$hi;
    i64toi32_i32$4 = $172_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $173$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $173$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$4 = 0;
    $496($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    $176_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $480_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $480_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $179_1 = $480_1;
    $179$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $481_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $481_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $184$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $179$hi;
    i64toi32_i32$5 = $179_1;
    i64toi32_i32$1 = $184$hi;
    i64toi32_i32$2 = $481_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$2 = 0;
    $496($176_1 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $194_1 = i64toi32_i32$2;
    $194$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $195$hi;
    i64toi32_i32$1 = 0;
    $496($5_1 + 96 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    $197_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $482_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $482_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
    }
    $200_1 = $482_1;
    $200$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     $484_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $484_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    }
    $205$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $200$hi;
    i64toi32_i32$5 = $200_1;
    i64toi32_i32$4 = $205$hi;
    i64toi32_i32$3 = $484_1;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = 0;
    $496($197_1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215_1 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$4 = $215_1;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    $216$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $216$hi;
    i64toi32_i32$4 = 0;
    $496($5_1 + 64 | 0 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    $218_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $485_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $485_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $221_1 = $485_1;
    $221$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     $486_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $486_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    }
    $226$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $221$hi;
    i64toi32_i32$5 = $221_1;
    i64toi32_i32$1 = $226$hi;
    i64toi32_i32$0 = $486_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$0 = 0;
    $496($218_1 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$0;
    $236$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $236$hi;
    i64toi32_i32$1 = $236_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
    $237$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $237$hi;
    i64toi32_i32$1 = 0;
    $496($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    $239_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $488_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     $488_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $242_1 = $488_1;
    $242$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     $489_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $489_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    }
    $247$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$4 = $247$hi;
    i64toi32_i32$2 = $489_1;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    $496($239_1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $256_1 = i64toi32_i32$2;
    $256$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $256$hi;
    i64toi32_i32$4 = $256_1;
    i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    $257$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $257$hi;
    i64toi32_i32$4 = 0;
    $496($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$12 : {
     label$13 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $490_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $490_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
      }
      $265_1 = $490_1;
      $265$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $5_1 + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $491_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
       $491_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $269$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $265$hi;
      i64toi32_i32$5 = $265_1;
      i64toi32_i32$1 = $269$hi;
      i64toi32_i32$3 = $491_1;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$4;
      $274_1 = $4_1;
      $274$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $494_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $494_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $15_1 = $494_1;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $274$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = __wasm_i64_mul($274_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$1;
      $279_1 = i64toi32_i32$0;
      $279$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $495_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $495_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $13_1 = $495_1;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $17_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $286_1 = i64toi32_i32$1;
      $286$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $279$hi;
      i64toi32_i32$0 = $279_1;
      i64toi32_i32$1 = $286$hi;
      i64toi32_i32$3 = $286_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $496_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $496_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      $289_1 = $496_1;
      $289$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $292_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = $292_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $497_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $497_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $294$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $289$hi;
      i64toi32_i32$2 = $289_1;
      i64toi32_i32$3 = $294$hi;
      i64toi32_i32$4 = $497_1;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $295_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $295$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $298_1 = i64toi32_i32$2;
      $298$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $295$hi;
      i64toi32_i32$0 = $295_1;
      i64toi32_i32$2 = $298$hi;
      i64toi32_i32$4 = $298_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $299_1 = i64toi32_i32$1;
      $299$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $498_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
       $498_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $15_1 = $498_1;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $305_1 = i64toi32_i32$3;
      $305$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$3 = $305$hi;
      i64toi32_i32$4 = $305_1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$4 = $15_1;
      $309_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $310$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $299$hi;
      i64toi32_i32$4 = $299_1;
      i64toi32_i32$1 = $310$hi;
      i64toi32_i32$5 = $309_1;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $311_1 = i64toi32_i32$3;
      $311$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      $312_1 = $2_1;
      $312$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      $313_1 = $4_1;
      $313$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 17;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $499_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $499_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      i64toi32_i32$2 = $499_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $313$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($313_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$0;
      $319_1 = i64toi32_i32$2;
      $319$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      $320_1 = $13_1;
      $320$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 15;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $501_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
       $501_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      i64toi32_i32$0 = $501_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -32768;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $18_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $320$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $325_1 = i64toi32_i32$0;
      $325$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $319$hi;
      i64toi32_i32$2 = $319_1;
      i64toi32_i32$0 = $325$hi;
      i64toi32_i32$5 = $325_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $502_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
       $502_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $19_1 = $502_1;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $332_1 = i64toi32_i32$4;
      $332$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$4 = $332$hi;
      i64toi32_i32$5 = $332_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $333$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $333$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $335_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $336_1 = $335_1;
      $336$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $503_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $503_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $338_1 = $503_1;
      $338$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$2 = $15_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = $17_1;
      $341_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = $341_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $504_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $504_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $343$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $338$hi;
      i64toi32_i32$2 = $338_1;
      i64toi32_i32$3 = $343$hi;
      i64toi32_i32$5 = $504_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $344_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $344$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $347_1 = i64toi32_i32$2;
      $347$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $344$hi;
      i64toi32_i32$1 = $344_1;
      i64toi32_i32$2 = $347$hi;
      i64toi32_i32$5 = $347_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $348$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $336$hi;
      i64toi32_i32$3 = $336_1;
      i64toi32_i32$1 = $348$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $349$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $312$hi;
      i64toi32_i32$0 = $312_1;
      i64toi32_i32$3 = $349$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $15_1 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2_1;
      $353_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $354$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $311$hi;
      i64toi32_i32$5 = $311_1;
      i64toi32_i32$2 = $354$hi;
      i64toi32_i32$0 = $353_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $355$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$4 = $15_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 0;
      $357_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = 0;
      $358$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $355$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$1 = $358$hi;
      i64toi32_i32$5 = $357_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $359$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $359$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $16_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$4;
      $366_1 = i64toi32_i32$3;
      $366$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      $370_1 = i64toi32_i32$3;
      $370$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      $371_1 = $4_1;
      $371$hi = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $505_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
       $505_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $19_1 = $505_1;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $371$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = __wasm_i64_mul($371_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $375_1 = i64toi32_i32$2;
      $375$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $370$hi;
      i64toi32_i32$4 = $370_1;
      i64toi32_i32$2 = $375$hi;
      i64toi32_i32$5 = $375_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $507_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $507_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $378$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $366$hi;
      i64toi32_i32$1 = $366_1;
      i64toi32_i32$3 = $378$hi;
      i64toi32_i32$5 = $507_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$4 = 0;
      $383_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $383$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $508_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $508_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $385_1 = $508_1;
      $385$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$1 = $18_1;
      $388_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $388_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
       $512_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $512_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $390$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $385$hi;
      i64toi32_i32$4 = $385_1;
      i64toi32_i32$1 = $390$hi;
      i64toi32_i32$5 = $512_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $391_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $391$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $394_1 = i64toi32_i32$4;
      $394$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $391$hi;
      i64toi32_i32$0 = $391_1;
      i64toi32_i32$4 = $394$hi;
      i64toi32_i32$5 = $394_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $395$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $383$hi;
      i64toi32_i32$1 = $383_1;
      i64toi32_i32$0 = $395$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $396_1 = i64toi32_i32$4;
      $396$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      $397_1 = $16_1;
      $397$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $513_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
       $513_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $15_1 = $513_1;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $410_1 = i64toi32_i32$4;
      $410$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$4 = $410$hi;
      i64toi32_i32$5 = $410_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $514_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $514_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $19_1 = $514_1;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $417_1 = i64toi32_i32$3;
      $417$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$3 = $417$hi;
      i64toi32_i32$5 = $417_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $418$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $418$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $420_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $421_1 = $420_1;
      $421$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $515_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $515_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $423_1 = $515_1;
      $423$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$0 = $17_1;
      $426_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = $426_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
       $516_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
       $516_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      }
      $428$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $423$hi;
      i64toi32_i32$2 = $423_1;
      i64toi32_i32$0 = $428$hi;
      i64toi32_i32$5 = $516_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $429_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $429$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $432_1 = i64toi32_i32$2;
      $432$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $429$hi;
      i64toi32_i32$1 = $429_1;
      i64toi32_i32$2 = $432$hi;
      i64toi32_i32$5 = $432_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $433$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $421$hi;
      i64toi32_i32$0 = $421_1;
      i64toi32_i32$1 = $433$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $397$hi;
      i64toi32_i32$4 = $397_1;
      i64toi32_i32$0 = $434$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$5 = $16_1;
      $438_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $439$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $396$hi;
      i64toi32_i32$5 = $396_1;
      i64toi32_i32$2 = $439$hi;
      i64toi32_i32$4 = $438_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $440_1 = i64toi32_i32$0;
      $440$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = -2;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $17_1 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $2_1;
      $445_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $446$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $440$hi;
      i64toi32_i32$4 = $440_1;
      i64toi32_i32$0 = $446$hi;
      i64toi32_i32$3 = $445_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $15_1 = i64toi32_i32$0;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$1;
      $451_1 = $2_1;
      $451$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 62;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $518_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $518_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $453_1 = $518_1;
      $453$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$1 = $11_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 2;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $521_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $521_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $453$hi;
      i64toi32_i32$2 = $453_1;
      i64toi32_i32$1 = $455$hi;
      i64toi32_i32$3 = $521_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $451$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = __wasm_i64_mul($451_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$2;
      $460_1 = i64toi32_i32$5;
      $460$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 30;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $522_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $522_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$2 = $522_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      $464_1 = $13_1;
      $464$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $523_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $523_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $15_1 = $523_1;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $464$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = __wasm_i64_mul($464_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $468_1 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $460$hi;
      i64toi32_i32$1 = $460_1;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$3 = $468_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $472_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $473_1 = $472_1;
      $473$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$0;
      $474_1 = i64toi32_i32$4;
      $474$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $524_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $524_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16_1 = $524_1;
      $16$hi = i64toi32_i32$0;
      $477_1 = $16_1;
      $477$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 30;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $525 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $525 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$0 = $525;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = -262145;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 262144;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $11$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $477$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($477_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $483_1 = i64toi32_i32$3;
      $483$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $474$hi;
      i64toi32_i32$2 = $474_1;
      i64toi32_i32$3 = $483$hi;
      i64toi32_i32$1 = $483_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$1 = $18_1;
      $487_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $488$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $473$hi;
      i64toi32_i32$1 = $473_1;
      i64toi32_i32$4 = $488$hi;
      i64toi32_i32$2 = $487_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $489$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $492_1 = i64toi32_i32$1;
      $492$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $489$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$1 = $492$hi;
      i64toi32_i32$2 = $492_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $493_1 = i64toi32_i32$4;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $500_1 = i64toi32_i32$0;
      $500$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$5 = $20_1;
      i64toi32_i32$0 = $500$hi;
      i64toi32_i32$2 = $500_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $526 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
       $526 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $506_1 = $526;
      $506$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $527 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
       $527 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $508$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $506$hi;
      i64toi32_i32$4 = $506_1;
      i64toi32_i32$3 = $508$hi;
      i64toi32_i32$5 = $527;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $509_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $509$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $493$hi;
      i64toi32_i32$2 = $493_1;
      i64toi32_i32$4 = $509$hi;
      i64toi32_i32$5 = $509_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $510_1 = i64toi32_i32$0;
      $510$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      $511_1 = $19_1;
      $511$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $528 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $528 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $513$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $511$hi;
      i64toi32_i32$1 = $511_1;
      i64toi32_i32$3 = $513$hi;
      i64toi32_i32$5 = $528;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $517_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $518$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $510$hi;
      i64toi32_i32$5 = $510_1;
      i64toi32_i32$0 = $518$hi;
      i64toi32_i32$1 = $517_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $519_1 = i64toi32_i32$3;
      $519$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      $520_1 = $18_1;
      $520$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $17_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $529 = i64toi32_i32$2;
      $529$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$4 = $20_1;
      i64toi32_i32$2 = $529$hi;
      i64toi32_i32$1 = $529;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$5 = 0;
      $534 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      $534$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$3;
      $535 = i64toi32_i32$0;
      $535$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $2$hi;
      $536 = $2_1;
      $536$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 2;
      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $530 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
       $530 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      i64toi32_i32$5 = $530;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = -4;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $20_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
      $20$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $536$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($536 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $541 = i64toi32_i32$5;
      $541$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $535$hi;
      i64toi32_i32$3 = $535;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$4 = $541;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $21_1 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$4 = $19_1;
      $545 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $546$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $534$hi;
      i64toi32_i32$4 = $534;
      i64toi32_i32$0 = $546$hi;
      i64toi32_i32$3 = $545;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $547$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $520$hi;
      i64toi32_i32$1 = $520_1;
      i64toi32_i32$4 = $547$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $551 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $552$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $519$hi;
      i64toi32_i32$3 = $519_1;
      i64toi32_i32$5 = $552$hi;
      i64toi32_i32$1 = $551;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $553 = i64toi32_i32$4;
      $553$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      $554 = $19_1;
      $554$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $561 = i64toi32_i32$3;
      $561$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$3 = $561$hi;
      i64toi32_i32$1 = $561;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $566 = i64toi32_i32$2;
      $566$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $566$hi;
      i64toi32_i32$1 = $566;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $571 = i64toi32_i32$0;
      $571$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$0 = $571$hi;
      i64toi32_i32$1 = $571;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $531 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       $531 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $574 = $531;
      $574$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$1 = $18_1;
      $577 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$5 = $15_1;
      $581 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $582$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $578$hi;
      i64toi32_i32$5 = $577;
      i64toi32_i32$3 = $582$hi;
      i64toi32_i32$4 = $581;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $583$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = $4_1;
      $586 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $587$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $583$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$2 = $587$hi;
      i64toi32_i32$5 = $586;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $532 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
       $532 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $589$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $574$hi;
      i64toi32_i32$0 = $574;
      i64toi32_i32$1 = $589$hi;
      i64toi32_i32$5 = $532;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $590 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $590$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $554$hi;
      i64toi32_i32$4 = $554;
      i64toi32_i32$0 = $590$hi;
      i64toi32_i32$5 = $590;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $594 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $595$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $553$hi;
      i64toi32_i32$5 = $553;
      i64toi32_i32$3 = $595$hi;
      i64toi32_i32$4 = $594;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $596 = i64toi32_i32$0;
      $596$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      $597 = $15_1;
      $597$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      $598 = $21_1;
      $598$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$2 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $605 = i64toi32_i32$5;
      $605$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$5 = $605$hi;
      i64toi32_i32$4 = $605;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $13_1 = i64toi32_i32$3;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $533 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $533 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $608 = $533;
      $608$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$4 = $4_1;
      $611 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $611;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $537 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
       $537 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $613$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $608$hi;
      i64toi32_i32$0 = $608;
      i64toi32_i32$4 = $613$hi;
      i64toi32_i32$2 = $537;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $614 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $614$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $598$hi;
      i64toi32_i32$1 = $598;
      i64toi32_i32$0 = $614$hi;
      i64toi32_i32$2 = $614;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$2 = $21_1;
      $618 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $619 = $618;
      $619$hi = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$3;
      $620 = i64toi32_i32$5;
      $620$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $538 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $538 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $622$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $620$hi;
      i64toi32_i32$4 = $620;
      i64toi32_i32$2 = $622$hi;
      i64toi32_i32$1 = $538;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $623$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $623$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $625 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $626$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $619$hi;
      i64toi32_i32$1 = $619;
      i64toi32_i32$5 = $626$hi;
      i64toi32_i32$4 = $625;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $627$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $597$hi;
      i64toi32_i32$3 = $597;
      i64toi32_i32$1 = $627$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$4 = $15_1;
      $631 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $632$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $596$hi;
      i64toi32_i32$4 = $596;
      i64toi32_i32$2 = $632$hi;
      i64toi32_i32$3 = $631;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$4 = 131071;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 49;
      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $539 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
       $539 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $637$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $1_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $1$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $13_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      $646 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = 0;
      $647$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $637$hi;
      i64toi32_i32$4 = $539;
      i64toi32_i32$0 = $647$hi;
      i64toi32_i32$5 = $646;
      i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $648 = i64toi32_i32$2;
      $648$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $17_1 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$2;
      $651 = i64toi32_i32$0;
      $651$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $540 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $540 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $15_1 = $540;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      $657 = i64toi32_i32$1;
      $657$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      $658 = $1_1;
      $658$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $542 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $542 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $16_1 = $542;
      $16$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $658$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($658 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $662 = i64toi32_i32$2;
      $662$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $657$hi;
      i64toi32_i32$3 = $657;
      i64toi32_i32$2 = $662$hi;
      i64toi32_i32$5 = $662;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $11_1 = i64toi32_i32$4;
      $11$hi = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $543 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
       $543 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $19_1 = $543;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $651$hi;
      i64toi32_i32$0 = $651;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $667 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $668$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $648$hi;
      i64toi32_i32$5 = $648;
      i64toi32_i32$3 = $668$hi;
      i64toi32_i32$1 = $667;
      i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
      $669 = i64toi32_i32$2;
      $669$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      $670 = $4_1;
      $670$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $544 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $544 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $672$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $670$hi;
      i64toi32_i32$0 = $672$hi;
      i64toi32_i32$0 = __wasm_i64_mul($670 | 0, i64toi32_i32$5 | 0, $544 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $673 = i64toi32_i32$0;
      $673$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $3$hi;
      $674 = $3_1;
      $674$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $546 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       $546 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $676$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $674$hi;
      i64toi32_i32$4 = $676$hi;
      i64toi32_i32$4 = __wasm_i64_mul($674 | 0, i64toi32_i32$0 | 0, $546 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $677 = i64toi32_i32$4;
      $677$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $673$hi;
      i64toi32_i32$5 = $673;
      i64toi32_i32$4 = $677$hi;
      i64toi32_i32$1 = $677;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $678$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $681 = i64toi32_i32$5;
      $681$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $678$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$5 = $681$hi;
      i64toi32_i32$1 = $681;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $682$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $685 = i64toi32_i32$0;
      $685$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $682$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $685$hi;
      i64toi32_i32$1 = $685;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $547 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $547 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $687 = $547;
      $687$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $689$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $689$hi;
      $578 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($578 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $691 = i64toi32_i32$4;
      $691$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $694 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $694$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $694$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $694 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $695 = i64toi32_i32$2;
      $695$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $691$hi;
      i64toi32_i32$3 = $691;
      i64toi32_i32$2 = $695$hi;
      i64toi32_i32$1 = $695;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $696$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $699 = i64toi32_i32$3;
      $699$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$3 = $699$hi;
      i64toi32_i32$1 = $699;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $700 = i64toi32_i32$2;
      $700$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $548 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $548 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $702 = $548;
      $702$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$1 = $18_1;
      $705 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = $705;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
       $549 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
       $549 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $707$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $702$hi;
      i64toi32_i32$0 = $702;
      i64toi32_i32$1 = $707$hi;
      i64toi32_i32$5 = $549;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $708 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $708$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $700$hi;
      i64toi32_i32$4 = $700;
      i64toi32_i32$0 = $708$hi;
      i64toi32_i32$5 = $708;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $709$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $687$hi;
      i64toi32_i32$1 = $687;
      i64toi32_i32$4 = $709$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $669$hi;
      i64toi32_i32$2 = $669;
      i64toi32_i32$1 = $710$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $13_1 = i64toi32_i32$4;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$4;
      $6_1 = $6_1 + -1 | 0;
      break label$12;
     }
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $550 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
      $550 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
     }
     $16_1 = $550;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 48;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
      $552 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $552 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     }
     $720 = $552;
     $720$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $555 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      $555 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $722 = $555;
     $722$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $556 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
      $556 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $724$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $722$hi;
     i64toi32_i32$4 = $722;
     i64toi32_i32$0 = $724$hi;
     i64toi32_i32$5 = $556;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $4_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     $734 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $735$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $720$hi;
     i64toi32_i32$5 = $720;
     i64toi32_i32$3 = $735$hi;
     i64toi32_i32$0 = $734;
     i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
     $736 = i64toi32_i32$2;
     $736$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     $739 = i64toi32_i32$3;
     $739$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $740 = $1_1;
     $740$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $557 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $557 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
     }
     $15_1 = $557;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $740$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = __wasm_i64_mul($740 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$4;
     $745 = i64toi32_i32$1;
     $745$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     $746 = $16_1;
     $746$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 31;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
      $558 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $558 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
     }
     $748$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $746$hi;
     i64toi32_i32$4 = $746;
     i64toi32_i32$2 = $748$hi;
     i64toi32_i32$0 = $558;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $18_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $19_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $754 = i64toi32_i32$1;
     $754$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $745$hi;
     i64toi32_i32$2 = $745;
     i64toi32_i32$1 = $754$hi;
     i64toi32_i32$0 = $754;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $559 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $559 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $20_1 = $559;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $739$hi;
     i64toi32_i32$3 = $739;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = $20_1;
     $759 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $760$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $736$hi;
     i64toi32_i32$0 = $736;
     i64toi32_i32$2 = $760$hi;
     i64toi32_i32$4 = $759;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $761 = i64toi32_i32$1;
     $761$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $762 = $4_1;
     $762$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $560 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $560 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $764$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $762$hi;
     i64toi32_i32$3 = $764$hi;
     i64toi32_i32$3 = __wasm_i64_mul($762 | 0, i64toi32_i32$0 | 0, $560 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $765 = i64toi32_i32$3;
     $765$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $766 = $3_1;
     $766$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 33;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $562 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      $562 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
     }
     $768$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $766$hi;
     i64toi32_i32$5 = $768$hi;
     i64toi32_i32$5 = __wasm_i64_mul($766 | 0, i64toi32_i32$3 | 0, $562 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $769 = i64toi32_i32$5;
     $769$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $765$hi;
     i64toi32_i32$0 = $765;
     i64toi32_i32$5 = $769$hi;
     i64toi32_i32$4 = $769;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $770 = i64toi32_i32$2;
     $770$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $563 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $563 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
     }
     $2_1 = $563;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $775 = i64toi32_i32$3;
     $775$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $770$hi;
     i64toi32_i32$1 = $770;
     i64toi32_i32$3 = $775$hi;
     i64toi32_i32$4 = $775;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $776$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $779 = i64toi32_i32$1;
     $779$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $776$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $779$hi;
     i64toi32_i32$4 = $779;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      $564 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
      $564 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     }
     $781 = $564;
     $781$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $784 = i64toi32_i32$2;
     $784$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $786$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $786$hi;
     $579 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($579 | 0, i64toi32_i32$2 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $788 = i64toi32_i32$5;
     $788$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $784$hi;
     i64toi32_i32$0 = $784;
     i64toi32_i32$5 = $788$hi;
     i64toi32_i32$4 = $788;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $789$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $792 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $792$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $792$hi;
     i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $792 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $793 = i64toi32_i32$2;
     $793$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $789$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $793$hi;
     i64toi32_i32$4 = $793;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $794 = i64toi32_i32$5;
     $794$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$0 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $565 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      $565 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
     }
     $796 = $565;
     $796$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$1 = $16_1;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$4 = $17_1;
     $799 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = $799;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
      $567 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
      $567 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     }
     $801$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $796$hi;
     i64toi32_i32$1 = $796;
     i64toi32_i32$4 = $801$hi;
     i64toi32_i32$0 = $567;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $802 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $802$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $794$hi;
     i64toi32_i32$3 = $794;
     i64toi32_i32$1 = $802$hi;
     i64toi32_i32$0 = $802;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $803$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $781$hi;
     i64toi32_i32$4 = $781;
     i64toi32_i32$3 = $803$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $804$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $761$hi;
     i64toi32_i32$5 = $761;
     i64toi32_i32$4 = $804$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     $2$hi = i64toi32_i32$3;
    }
    label$14 : {
     if (($6_1 | 0) < (16384 | 0)) {
      break label$14
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$2;
    }
    $7_1 = $6_1 + 16383 | 0;
    label$15 : {
     if (($6_1 | 0) > (-16383 | 0)) {
      break label$15
     }
     label$16 : {
      if ($7_1) {
       break label$16
      }
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = 65535;
      i64toi32_i32$0 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $820 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $820$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $821 = $4_1;
      $821$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
       $568 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
       $568 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
      }
      $823$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $823$hi;
      i64toi32_i32$1 = $568;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$0 = $3_1;
      $825 = i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
       $569 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
       $569 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $827 = $569;
      $827$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $570 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       $570 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      $829$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $827$hi;
      i64toi32_i32$3 = $827;
      i64toi32_i32$1 = $829$hi;
      i64toi32_i32$2 = $570;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $1$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$2 = $14_1;
      $833 = i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = $14_1;
      $837 = (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $825 : $833;
      i64toi32_i32$2 = 0;
      $838$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $821$hi;
      i64toi32_i32$3 = $821;
      i64toi32_i32$0 = $838$hi;
      i64toi32_i32$1 = $837;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $842 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $843$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $820$hi;
      i64toi32_i32$1 = $820;
      i64toi32_i32$4 = $843$hi;
      i64toi32_i32$3 = $842;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3_1 = i64toi32_i32$0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$1 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
      if (!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
       break label$16
      }
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      break label$2;
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$2;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $572 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $572 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $853$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $855 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $855$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $853$hi;
    i64toi32_i32$5 = $572;
    i64toi32_i32$2 = $855$hi;
    i64toi32_i32$3 = $855;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $856 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $856$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    $857 = $4_1;
    $857$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $573 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $573 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $859$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $859$hi;
    i64toi32_i32$2 = $573;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $861 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$3 = $13_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $575 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $575 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $863 = $575;
    $863$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $576 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $576 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $865$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $863$hi;
    i64toi32_i32$5 = $863;
    i64toi32_i32$2 = $865$hi;
    i64toi32_i32$1 = $576;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$1 = $14_1;
    $869 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$5 = $14_1;
    $873 = (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0 ? $861 : $869;
    i64toi32_i32$1 = 0;
    $874$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $857$hi;
    i64toi32_i32$5 = $857;
    i64toi32_i32$3 = $874$hi;
    i64toi32_i32$2 = $873;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    $878 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $856$hi;
    i64toi32_i32$2 = $856;
    i64toi32_i32$0 = $879$hi;
    i64toi32_i32$5 = $878;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $880$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $880$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $12_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $12$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = $12$hi;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $12_1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
   global$0 = $5_1 + 192 | 0;
   return;
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$2 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$4 = $3_1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
  i64toi32_i32$0 = !(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 2147450880;
  i64toi32_i32$4 = $12$hi;
  i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $12_1;
  i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$4;
  $896 = i64toi32_i32$5;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $896;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 192 | 0;
 }
 
 function $488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $484($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $484($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $484($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $2_1 = 0, $2$hi = 0, $16_1 = 0, $17_1 = 0, $5_1 = 0, $5$hi = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0, $18$hi = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $5_1 = $1_1;
   $5$hi = i64toi32_i32$0;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$0 = 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$3 = (($1_1 | 32 | 0) + 113 | 0) & 63 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $16_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $16_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
   $14_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 16414 - $1_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$2 = $14_1;
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$5;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$5 = 0;
  HEAP32[i64toi32_i32$2 >> 2] = 0;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
 }
 
 function $492() {
  return 0 | 0;
 }
 
 function $493() {
  return 0 | 0;
 }
 
 function $494($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $495($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $15$hi = 0, $13$hi = 0, $12$hi = 0, $5_1 = 0, $11$hi = 0, $14$hi = 0, $14_1 = 0, $15_1 = 0, $12_1 = 0, $16$hi = 0, $11_1 = 0, $18$hi = 0, $13_1 = 0, $8_1 = 0, $18_1 = 0, $16_1 = 0, $6_1 = 0, $10$hi = 0, $17$hi = 0, $7_1 = 0, $10_1 = 0, $17_1 = 0, $9_1 = 0, $221_1 = 0, $222_1 = 0, $223_1 = 0, $224_1 = 0, $225_1 = 0, $226_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $232_1 = 0, $235_1 = 0, $236_1 = 0, $237_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $264_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $269_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $28_1 = 0, $28$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $37$hi = 0, $64_1 = 0, $68_1 = 0, $75_1 = 0, $79_1 = 0, $88_1 = 0, $88$hi = 0, $100_1 = 0, $100$hi = 0, $122_1 = 0, $123_1 = 0, $123$hi = 0, $124_1 = 0, $124$hi = 0, $131$hi = 0, $134$hi = 0, $144_1 = 0, $144$hi = 0, $149$hi = 0, $156_1 = 0, $157_1 = 0, $157$hi = 0, $158_1 = 0, $158$hi = 0, $165$hi = 0, $168$hi = 0, $180_1 = 0, $180$hi = 0, $185$hi = 0, $188_1 = 0, $188$hi = 0, $190$hi = 0, $198_1 = 0, $213_1 = 0, $213$hi = 0, $217_1 = 0, $218_1 = 0, $218$hi = 0, $227_1 = 0, $227$hi = 0, $231_1 = 0, $232$hi = 0, $233_1 = 0, $233$hi = 0, $234_1 = 0, $234$hi = 0, $238_1 = 0, $238$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $249_1 = 0, $249$hi = 0, $255_1 = 0, $255$hi = 0, $259_1 = 0, $260$hi = 0, $261$hi = 0, $265_1 = 0, $266$hi = 0, $267$hi = 0, $270_1 = 0, $270$hi = 0, $271_1 = 0, $271$hi = 0, $278_1 = 0, $278$hi = 0, $284_1 = 0, $284$hi = 0, $286$hi = 0, $287_1 = 0, $287$hi = 0, $288_1 = 0, $288$hi = 0, $289_1 = 0, $289$hi = 0, $291$hi = 0, $295_1 = 0, $296$hi = 0, $297_1 = 0, $297$hi = 0, $298_1 = 0, $298$hi = 0, $305_1 = 0, $305$hi = 0, $310_1 = 0, $310$hi = 0, $315_1 = 0, $315$hi = 0, $318_1 = 0, $318$hi = 0, $321_1 = 0, $322$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $331$hi = 0, $333$hi = 0, $334_1 = 0, $334$hi = 0, $338_1 = 0, $339$hi = 0, $340_1 = 0, $340$hi = 0, $341_1 = 0, $341$hi = 0, $342_1 = 0, $342$hi = 0, $349_1 = 0, $349$hi = 0, $352_1 = 0, $352$hi = 0, $355_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $363_1 = 0, $363$hi = 0, $364_1 = 0, $364$hi = 0, $366$hi = 0, $370_1 = 0, $371$hi = 0, $372$hi = 0, $376_1 = 0, $377$hi = 0, $392_1 = 0, $392$hi = 0, $394$hi = 0, $395$hi = 0, $277_1 = 0, $406_1 = 0, $406$hi = 0, $411$hi = 0, $419_1 = 0, $419$hi = 0, $421$hi = 0, $424$hi = 0, $425$hi = 0, $428_1 = 0, $428$hi = 0, $430$hi = 0, $431$hi = 0, $279_1 = 0, $466_1 = 0, $466$hi = 0, $468_1 = 0, $468$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $477_1 = 0, $478$hi = 0, $483_1 = 0, $483$hi = 0, $487_1 = 0, $487$hi = 0, $496$hi = 0, $498_1 = 0, $498$hi = 0, $504_1 = 0, $510_1 = 0, $510$hi = 0, $515_1 = 0, $516$hi = 0, $520_1 = 0, $520$hi = 0, $524_1 = 0, $524$hi = 0, $527 = 0, $527$hi = 0, $531 = 0, $532$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $221_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $221_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $221_1;
  $23$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $222_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $222_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $25$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $23$hi;
  i64toi32_i32$1 = $23_1;
  i64toi32_i32$0 = $25$hi;
  i64toi32_i32$3 = $222_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $223_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $223_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $28_1 = $223_1;
  $28$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $224_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $224_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $30$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $28$hi;
  i64toi32_i32$1 = $28_1;
  i64toi32_i32$0 = $30$hi;
  i64toi32_i32$3 = $224_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $225_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $225_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $33_1 = $225_1;
  $33$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $226_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $226_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $37$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $33$hi;
  i64toi32_i32$2 = $33_1;
  i64toi32_i32$1 = $37$hi;
  i64toi32_i32$3 = $226_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $228_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $228_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $229_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $229_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $229_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $230_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $232_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $232_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $64_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $75_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $79_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $75_1 : $79_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $88_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $88$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $88$hi;
     i64toi32_i32$1 = $88_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $100_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $100$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $100$hi;
     i64toi32_i32$2 = $100_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $122_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $123_1 = $1_1;
     $123$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $124_1 = $15_1;
     $124$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $235_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $235_1 = i64toi32_i32$2
     }
     $131$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $134$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $131$hi;
     i64toi32_i32$3 = $235_1;
     i64toi32_i32$1 = $134$hi;
     i64toi32_i32$2 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $123$hi;
     i64toi32_i32$3 = $124$hi;
     $484($122_1 | 0, $123_1 | 0, i64toi32_i32$5 | 0, $124_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $236_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $236_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $144_1 = $236_1;
     $144$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $237_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $237_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $149$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $144$hi;
     i64toi32_i32$4 = $144_1;
     i64toi32_i32$5 = $149$hi;
     i64toi32_i32$2 = $237_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $239_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $239_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $239_1;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    $156_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $157_1 = $3_1;
    $157$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $158_1 = $12_1;
    $158$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$2 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$4 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$4 | 0) == (32 | 0)) {
     $240_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $240_1 = i64toi32_i32$4
    }
    $165$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $168$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $165$hi;
    i64toi32_i32$3 = $240_1;
    i64toi32_i32$2 = $168$hi;
    i64toi32_i32$4 = $9_1 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$5;
    i64toi32_i32$0 = $157$hi;
    i64toi32_i32$3 = $158$hi;
    $484($156_1 | 0, $157_1 | 0, i64toi32_i32$0 | 0, $158_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$5 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $241_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $241_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $180_1 = $241_1;
    $180$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $242_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $242_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $185$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $180$hi;
    i64toi32_i32$1 = $180_1;
    i64toi32_i32$0 = $185$hi;
    i64toi32_i32$4 = $242_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $13$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 17;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $243_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $243_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $188_1 = $243_1;
    $188$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 47;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $245_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $245_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $190$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $188$hi;
    i64toi32_i32$1 = $188_1;
    i64toi32_i32$0 = $190$hi;
    i64toi32_i32$4 = $245_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 17;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $246_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $246_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $17_1 = $246_1;
    $17$hi = i64toi32_i32$1;
   }
   label$13 : {
    $198_1 = ($7_1 + $6_1 | 0) + $8_1 | 0;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $2_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$1 = $15_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$0 = $16_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 65536;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $15_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $15$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $213_1 = i64toi32_i32$0;
    $213$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$0 = $213$hi;
    i64toi32_i32$4 = $213_1;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $13_1 = i64toi32_i32$2;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$4 = $18_1;
    $217_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $218_1 = $217_1;
    $218$hi = i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $10_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $227_1 = i64toi32_i32$5;
    $227$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = $227$hi;
    i64toi32_i32$1 = $227_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$1 = $13_1;
    $231_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $232$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $218$hi;
    i64toi32_i32$1 = $218_1;
    i64toi32_i32$2 = $232$hi;
    i64toi32_i32$4 = $231_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $233_1 = i64toi32_i32$5;
    $233$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $16$hi;
    $234_1 = $16_1;
    $234$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $17_1 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$0;
    $238_1 = i64toi32_i32$1;
    $238$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $247_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $247_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$0 = $247_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = -32768;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $3_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $244_1 = i64toi32_i32$0;
    $244$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $238$hi;
    i64toi32_i32$1 = $238_1;
    i64toi32_i32$0 = $244$hi;
    i64toi32_i32$4 = $244_1;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $13_1 = i64toi32_i32$2;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$4 = $17_1;
    $248_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $249_1 = $248_1;
    $249$hi = i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $255_1 = i64toi32_i32$4;
    $255$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$4 = $255$hi;
    i64toi32_i32$1 = $255_1;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $17_1 = i64toi32_i32$0;
    $17$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$1 = $13_1;
    $259_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $260$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $249$hi;
    i64toi32_i32$1 = $249_1;
    i64toi32_i32$2 = $260$hi;
    i64toi32_i32$3 = $259_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $261$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $234$hi;
    i64toi32_i32$5 = $234_1;
    i64toi32_i32$1 = $261$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $13_1 = i64toi32_i32$2;
    $13$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$3 = $16_1;
    $265_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $266$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $233$hi;
    i64toi32_i32$3 = $233_1;
    i64toi32_i32$4 = $266$hi;
    i64toi32_i32$5 = $265_1;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $267$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $270_1 = i64toi32_i32$3;
    $270$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $267$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$3 = $270$hi;
    i64toi32_i32$5 = $270_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $271_1 = i64toi32_i32$4;
    $271$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $18_1 = i64toi32_i32$0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $278_1 = i64toi32_i32$0;
    $278$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = $278$hi;
    i64toi32_i32$5 = $278_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $16_1 = i64toi32_i32$3;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $250_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $250_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $284_1 = $250_1;
    $284$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $251_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     $251_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $286$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $284$hi;
    i64toi32_i32$4 = $284_1;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$2 = $251_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $287_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $287$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $271$hi;
    i64toi32_i32$5 = $271_1;
    i64toi32_i32$4 = $287$hi;
    i64toi32_i32$2 = $287_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $288_1 = i64toi32_i32$0;
    $288$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $13$hi;
    $289_1 = $13_1;
    $289$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $252_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $252_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $291$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $289$hi;
    i64toi32_i32$3 = $289_1;
    i64toi32_i32$1 = $291$hi;
    i64toi32_i32$2 = $252_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $16_1 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$2 = $13_1;
    $295_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $296$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $288$hi;
    i64toi32_i32$2 = $288_1;
    i64toi32_i32$0 = $296$hi;
    i64toi32_i32$3 = $295_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $297_1 = i64toi32_i32$1;
    $297$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $16$hi;
    $298_1 = $16_1;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $13_1 = i64toi32_i32$2;
    $13$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $305_1 = i64toi32_i32$2;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$2 = $305$hi;
    i64toi32_i32$3 = $305_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $310_1 = i64toi32_i32$5;
    $310$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $310$hi;
    i64toi32_i32$3 = $310_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $315_1 = i64toi32_i32$4;
    $315$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$4 = $315$hi;
    i64toi32_i32$3 = $315_1;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $15_1 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $253_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $253_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $318_1 = $253_1;
    $318$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$3 = $13_1;
    $321_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $322$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = $4_1;
    $325_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $326$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$0 = $321_1;
    i64toi32_i32$2 = $326$hi;
    i64toi32_i32$1 = $325_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    $330_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $331$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$5 = $331$hi;
    i64toi32_i32$0 = $330_1;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 32;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $254_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $333$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $318$hi;
    i64toi32_i32$4 = $318_1;
    i64toi32_i32$3 = $333$hi;
    i64toi32_i32$0 = $254_1;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $334_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $334$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $298$hi;
    i64toi32_i32$1 = $298_1;
    i64toi32_i32$4 = $334$hi;
    i64toi32_i32$0 = $334_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$0 = $16_1;
    $338_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $339$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $297$hi;
    i64toi32_i32$0 = $297_1;
    i64toi32_i32$2 = $339$hi;
    i64toi32_i32$1 = $338_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $340_1 = i64toi32_i32$4;
    $340$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    $341_1 = $2_1;
    $341$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $17$hi;
    $342_1 = $17_1;
    $342$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $349_1 = i64toi32_i32$0;
    $349$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = $349$hi;
    i64toi32_i32$1 = $349_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $12_1 = i64toi32_i32$2;
    $12$hi = i64toi32_i32$4;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $256_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     $256_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $352_1 = $256_1;
    $352$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $355_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = $355_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 32;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $257_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $257_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $357$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $352$hi;
    i64toi32_i32$4 = $352_1;
    i64toi32_i32$1 = $357$hi;
    i64toi32_i32$5 = $257_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $358_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $358$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $342$hi;
    i64toi32_i32$3 = $342_1;
    i64toi32_i32$4 = $358$hi;
    i64toi32_i32$5 = $358_1;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$5 = $17_1;
    i64toi32_i32$1 = 0;
    $363_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    $363$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$2;
    $364_1 = i64toi32_i32$0;
    $364$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$5 = $15_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $258_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $258_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $366$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $364$hi;
    i64toi32_i32$1 = $364_1;
    i64toi32_i32$5 = $366$hi;
    i64toi32_i32$3 = $258_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    $370_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $371$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $363$hi;
    i64toi32_i32$3 = $363_1;
    i64toi32_i32$0 = $371$hi;
    i64toi32_i32$1 = $370_1;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $372$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $341$hi;
    i64toi32_i32$2 = $341_1;
    i64toi32_i32$3 = $372$hi;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    $376_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $377$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $340$hi;
    i64toi32_i32$1 = $340_1;
    i64toi32_i32$5 = $377$hi;
    i64toi32_i32$2 = $376_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 65536;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $11_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $260_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     $260_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $7_1 = $260_1;
    $6_1 = ($198_1 + $7_1 | 0) + -16383 | 0;
    if (($6_1 | 0) < (32767 | 0)) {
     break label$13
    }
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $14_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    $261_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
    $261_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
   }
   $392_1 = $261_1;
   $392$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 63;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $262_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    $262_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
   }
   $394$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $392$hi;
   i64toi32_i32$1 = $392_1;
   i64toi32_i32$0 = $394$hi;
   i64toi32_i32$2 = $262_1;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $395$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $11$hi;
   $8_1 = !($11_1 | i64toi32_i32$0 | 0);
   i64toi32_i32$5 = $8_1;
   i64toi32_i32$0 = $395$hi;
   $277_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $277_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$1;
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $263_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $263_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $263_1;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $406_1 = i64toi32_i32$5;
   $406$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = $406$hi;
   i64toi32_i32$1 = $406_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   $411$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$2 = $411$hi;
   i64toi32_i32$1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$4 = $15_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $12_1 = $7_1 ^ 1 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $264_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
    $264_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $419_1 = $264_1;
   $419$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $266_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    $266_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
   }
   $421$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $424$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $421$hi;
   i64toi32_i32$1 = $266_1;
   i64toi32_i32$0 = $424$hi;
   i64toi32_i32$4 = $7_1 | 62 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $267_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $267_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
   }
   $425$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $419$hi;
   i64toi32_i32$2 = $419_1;
   i64toi32_i32$1 = $425$hi;
   i64toi32_i32$4 = $267_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $268_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
    $268_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $428_1 = $268_1;
   $428$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $269_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $269_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
   }
   $430$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $428$hi;
   i64toi32_i32$2 = $428_1;
   i64toi32_i32$1 = $430$hi;
   i64toi32_i32$4 = $269_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $431$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $8_1;
   i64toi32_i32$1 = $431$hi;
   $279_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$3 ? $279_1 : $4_1;
   i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$2;
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $272_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $272_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $1_1 = $272_1;
   $1$hi = i64toi32_i32$4;
   label$14 : {
    label$15 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$15
     }
     label$16 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$16
      }
      i64toi32_i32$4 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$4;
      break label$1;
     }
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $2$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$3 = $2$hi;
     $484($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$4 = $11$hi;
     $484($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$4 | 0, $6_1 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$3 = $2$hi;
     $494($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$4 = $11$hi;
     $494($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$4 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $466_1 = i64toi32_i32$4;
     $466$hi = i64toi32_i32$3;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $468_1 = i64toi32_i32$3;
     $468$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $466$hi;
     i64toi32_i32$0 = $466_1;
     i64toi32_i32$3 = $468$hi;
     i64toi32_i32$2 = $468_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     $469_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $469$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
     $471_1 = i64toi32_i32$3;
     $471$hi = i64toi32_i32$0;
     i64toi32_i32$4 = (i64toi32_i32$4 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $475_1 = i64toi32_i32$0;
     $475$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $471$hi;
     i64toi32_i32$4 = $471_1;
     i64toi32_i32$0 = $475$hi;
     i64toi32_i32$2 = $475_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $477_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = 0;
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $469$hi;
     i64toi32_i32$2 = $469_1;
     i64toi32_i32$0 = $478$hi;
     i64toi32_i32$4 = $477_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $483_1 = i64toi32_i32$0;
     $483$hi = i64toi32_i32$2;
     i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $487_1 = i64toi32_i32$2;
     $487$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $483$hi;
     i64toi32_i32$3 = $483_1;
     i64toi32_i32$2 = $487$hi;
     i64toi32_i32$4 = $487_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     break label$14;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 48;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $496$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $498_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $498$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $496$hi;
    i64toi32_i32$3 = $273_1;
    i64toi32_i32$2 = $498$hi;
    i64toi32_i32$4 = $498_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $14_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14$hi = i64toi32_i32$3;
   label$17 : {
    i64toi32_i32$3 = $1$hi;
    $504_1 = !($1_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$4 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $274_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $275_1 = 0
      } else {
       $275_1 = 1
      }
      $276_1 = $275_1;
     } else {
      $276_1 = 0
     }
     $274_1 = $276_1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $504_1 : $274_1) {
     break label$17
    }
    i64toi32_i32$4 = $14$hi;
    $510_1 = $14_1;
    $510$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    $515_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $516$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $510$hi;
    i64toi32_i32$3 = $510_1;
    i64toi32_i32$5 = $516$hi;
    i64toi32_i32$0 = $515_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$1;
    break label$1;
   }
   label$18 : {
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $520_1 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $520$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = $520$hi;
    i64toi32_i32$0 = $520_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0) {
     break label$18
    }
    i64toi32_i32$3 = $4$hi;
    $1_1 = $4_1;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $14$hi;
   $524_1 = $14_1;
   $524$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $527 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $527$hi = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = $527$hi;
   i64toi32_i32$1 = $527;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$5;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $4_1;
   $531 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $532$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $524$hi;
   i64toi32_i32$1 = $524_1;
   i64toi32_i32$2 = $532$hi;
   i64toi32_i32$3 = $531;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $14$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $496($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $497($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $17_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $483($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $498($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $42_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $33$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $42_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $42_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $42_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $43_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $43_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $43_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $33$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $45_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $45_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $45_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $46_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $46_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $47_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $47_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $484($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $494($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $48_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $49_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $49_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $499($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = 0;
  $5_1 = (HEAP32[(0 + 97092 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 97092 | 0) >> 2] = $5_1;
  HEAP32[$0_1 >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    label$3 : while (1) {
     $6_1 = $2_1 + ($4_1 << 3 | 0) | 0;
     if (!(HEAP32[$6_1 >> 2] | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $4_1 = $3_1 << 1 | 0;
   $3_1 = $499($0_1 | 0, $1_1 | 0, $505($2_1 | 0, $3_1 << 4 | 0 | 8 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
   fimport$5($4_1 | 0);
   return $3_1 | 0;
  }
  HEAP32[$6_1 >> 2] = $5_1;
  $4_1 = $2_1 + ($4_1 << 3 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  fimport$5($3_1 | 0);
  return $2_1 | 0;
 }
 
 function $500($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = 0;
   label$2 : while (1) {
    $4_1 = HEAP32[($1_1 + ($3_1 << 3 | 0) | 0) >> 2] | 0;
    if (!$4_1) {
     break label$1
    }
    label$3 : {
     if (($4_1 | 0) != ($0_1 | 0)) {
      break label$3
     }
     return HEAP32[(($1_1 + ($3_1 << 3 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $501($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 97096 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 97100 | 0) >> 2] = $1_1;
   HEAP32[(0 + 97096 | 0) >> 2] = $0_1;
  }
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $9_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $83_1 = 0, $96_1 = 0, $107_1 = 0, $115_1 = 0, $123_1 = 0, $217_1 = 0, $228_1 = 0, $236_1 = 0, $244_1 = 0, $279_1 = 0, $354_1 = 0, $361_1 = 0, $368_1 = 0, $459_1 = 0, $470_1 = 0, $478_1 = 0, $486_1 = 0, $1194 = 0, $1201 = 0, $1208 = 0, $1330 = 0, $1332 = 0, $1393 = 0, $1400 = 0, $1407 = 0, $1640 = 0, $1647 = 0, $1654 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 97104 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $5_1 = $3_1 << 3 | 0;
                $4_1 = HEAP32[($5_1 + 97152 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 97144 | 0;
                  if (($6_1 | 0) != ($5_1 | 0)) {
                   break label$16
                  }
                  HEAP32[(0 + 97104 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                  break label$15;
                 }
                 HEAP32[(0 + 97120 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
                }
                $6_1 = $3_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                $4_1 = $4_1 + $6_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 97112 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $83_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $83_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $96_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $96_1 >>> $0_1 | 0;
                  $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $107_1 = $6_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $6_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $115_1 = $107_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $123_1 = $115_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $6_1 = ($123_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $5_1 = $6_1 << 3 | 0;
                  $4_1 = HEAP32[($5_1 + 97152 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 97144 | 0;
                  if (($0_1 | 0) != ($5_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                  HEAP32[(0 + 97104 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[(0 + 97120 | 0) >> 2] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $5_1 = $4_1 + $3_1 | 0;
                $8_1 = $6_1 << 3 | 0;
                $6_1 = $8_1 - $3_1 | 0;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 97144 | 0;
                 $4_1 = HEAP32[(0 + 97124 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 97104 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 97124 | 0) >> 2] = $5_1;
                HEAP32[(0 + 97112 | 0) >> 2] = $6_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 97108 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $217_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $217_1 >>> $0_1 | 0;
               $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $228_1 = $6_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $6_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $236_1 = $228_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $244_1 = $236_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $5_1 = HEAP32[(((($244_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 97408 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $5_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $279_1 = $6_1;
                 $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $6_1 ? $279_1 : $4_1;
                 $5_1 = $6_1 ? $0_1 : $5_1;
                 $6_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $5_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $5_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($5_1 | 0)) {
                 break label$26
                }
                label$27 : {
                 $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                 if ((HEAP32[(0 + 97120 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                  break label$27
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$28 : {
                $6_1 = $5_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 break label$28
                }
                $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $6_1 = $5_1 + 16 | 0;
               }
               label$29 : while (1) {
                $12_1 = $6_1;
                $8_1 = $0_1;
                $6_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                $6_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                break label$29;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 97108 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 31;
              label$30 : {
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$30
               }
               $0_1 = $0_1 >>> 8 | 0;
               $354_1 = $0_1;
               $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4_1 = $354_1 << $0_1 | 0;
               $361_1 = $4_1;
               $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $6_1 = $361_1 << $4_1 | 0;
               $368_1 = $6_1;
               $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($368_1 << $6_1 | 0) >>> 15 | 0) - ($4_1 | $0_1 | 0 | $6_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$31 : {
               label$32 : {
                label$33 : {
                 label$34 : {
                  $6_1 = HEAP32[(($12_1 << 2 | 0) + 97408 | 0) >> 2] | 0;
                  if ($6_1) {
                   break label$34
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$33;
                 }
                 $0_1 = 0;
                 $5_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$35 : while (1) {
                  label$36 : {
                   $2_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$36
                   }
                   $4_1 = $2_1;
                   $8_1 = $6_1;
                   if ($4_1) {
                    break label$36
                   }
                   $4_1 = 0;
                   $8_1 = $6_1;
                   $0_1 = $6_1;
                   break label$32;
                  }
                  $2_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  $6_1 = HEAP32[(($6_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($6_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $5_1 = $5_1 << 1 | 0;
                  if ($6_1) {
                   continue label$35
                  }
                  break label$35;
                 };
                }
                label$37 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$37
                 }
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $459_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $6_1 = $459_1 >>> $0_1 | 0;
                 $5_1 = ($6_1 >>> 5 | 0) & 8 | 0;
                 $470_1 = $5_1 | $0_1 | 0;
                 $0_1 = $6_1 >>> $5_1 | 0;
                 $6_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $478_1 = $470_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $486_1 = $478_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($486_1 | $6_1 | 0) + ($0_1 >>> $6_1 | 0) | 0) << 2 | 0) + 97408 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$31
                }
               }
               label$38 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $5_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$39 : {
                 $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($6_1) {
                  break label$39
                 }
                 $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $5_1 ? $2_1 : $4_1;
                $8_1 = $5_1 ? $0_1 : $8_1;
                $0_1 = $6_1;
                if ($0_1) {
                 continue label$38
                }
                break label$38;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 97112 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$40 : {
               $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($5_1 | 0) == ($8_1 | 0)) {
                break label$40
               }
               label$41 : {
                $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 97120 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$41
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$42 : {
               $6_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$42
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $6_1 = $8_1 + 16 | 0;
              }
              label$43 : while (1) {
               $2_1 = $6_1;
               $5_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               $6_1 = $5_1 + 16 | 0;
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               break label$43;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$44 : {
              $0_1 = HEAP32[(0 + 97112 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$44
              }
              $4_1 = HEAP32[(0 + 97124 | 0) >> 2] | 0;
              label$45 : {
               label$46 : {
                $6_1 = $0_1 - $3_1 | 0;
                if ($6_1 >>> 0 < 16 >>> 0) {
                 break label$46
                }
                HEAP32[(0 + 97112 | 0) >> 2] = $6_1;
                $5_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 97124 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$45;
               }
               HEAP32[(0 + 97124 | 0) >> 2] = 0;
               HEAP32[(0 + 97112 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$47 : {
              $5_1 = HEAP32[(0 + 97116 | 0) >> 2] | 0;
              if ($5_1 >>> 0 <= $3_1 >>> 0) {
               break label$47
              }
              $4_1 = $5_1 - $3_1 | 0;
              HEAP32[(0 + 97116 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 97128 | 0) >> 2] | 0;
              $6_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 97128 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$48 : {
              label$49 : {
               if (!(HEAP32[(0 + 97576 | 0) >> 2] | 0)) {
                break label$49
               }
               $4_1 = HEAP32[(0 + 97584 | 0) >> 2] | 0;
               break label$48;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 97588 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 97592 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 97580 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 97584 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 97576 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 97596 | 0) >> 2] = 0;
              HEAP32[(0 + 97548 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$50 : {
              $4_1 = HEAP32[(0 + 97544 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$50
              }
              $6_1 = HEAP32[(0 + 97536 | 0) >> 2] | 0;
              $9_1 = $6_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $6_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 97548 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$51 : {
              label$52 : {
               label$53 : {
                $4_1 = HEAP32[(0 + 97128 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$53
                }
                $0_1 = 97552;
                label$54 : while (1) {
                 label$55 : {
                  $6_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($6_1 >>> 0 > $4_1 >>> 0) {
                   break label$55
                  }
                  if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$52
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$54
                 }
                 break label$54;
                };
               }
               $5_1 = $508(0 | 0) | 0;
               if (($5_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$56 : {
                $0_1 = HEAP32[(0 + 97580 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $5_1 | 0)) {
                 break label$56
                }
                $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$57 : {
                $0_1 = HEAP32[(0 + 97544 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$57
                }
                $4_1 = HEAP32[(0 + 97536 | 0) >> 2] | 0;
                $6_1 = $4_1 + $2_1 | 0;
                if ($6_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($6_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $508($2_1 | 0) | 0;
               if (($0_1 | 0) != ($5_1 | 0)) {
                break label$51
               }
               break label$5;
              }
              $2_1 = ($2_1 - $5_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $5_1 = $508($2_1 | 0) | 0;
              if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $5_1;
             }
             label$58 : {
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$58
              }
              if (($0_1 | 0) == (-1 | 0)) {
               break label$58
              }
              label$59 : {
               $4_1 = HEAP32[(0 + 97584 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$59
               }
               $5_1 = $0_1;
               break label$5;
              }
              label$60 : {
               if (($508($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$60
               }
               $2_1 = $4_1 + $2_1 | 0;
               $5_1 = $0_1;
               break label$5;
              }
              $508(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $5_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $5_1 = 0;
          break label$3;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 97548 | 0) >> 2] = HEAP32[(0 + 97548 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5_1 = $508($8_1 | 0) | 0;
       $0_1 = $508(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 97536 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 97536 | 0) >> 2] = $0_1;
      label$61 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 97540 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 97540 | 0) >> 2] = $0_1;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4_1 = HEAP32[(0 + 97128 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$65
          }
          $0_1 = 97552;
          label$66 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0_1 = HEAP32[(0 + 97120 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$68
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 97120 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 97556 | 0) >> 2] = $2_1;
         HEAP32[(0 + 97552 | 0) >> 2] = $5_1;
         HEAP32[(0 + 97136 | 0) >> 2] = -1;
         HEAP32[(0 + 97140 | 0) >> 2] = HEAP32[(0 + 97576 | 0) >> 2] | 0;
         HEAP32[(0 + 97564 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 97144 | 0;
          HEAP32[($4_1 + 97152 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 97156 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 97116 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 97128 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 97132 | 0) >> 2] = HEAP32[(0 + 97592 | 0) >> 2] | 0;
         break label$62;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$63
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$63
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$63
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 97128 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 97116 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 97116 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 97132 | 0) >> 2] = HEAP32[(0 + 97592 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8_1 = HEAP32[(0 + 97120 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 97120 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 97552;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$77
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0_1 = 97552;
            label$79 : while (1) {
             label$80 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$80
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$74
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $0_1 = ($5_1 - $12_1 | 0) - $3_1 | 0;
           $6_1 = $12_1 + $3_1 | 0;
           label$81 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$81
            }
            HEAP32[(0 + 97128 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 97116 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 97116 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 97124 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 97112 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 97112 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$72;
           }
           label$83 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7_1 = $4_1 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$86 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 97144 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$87
               }
               HEAP32[(0 + 97104 | 0) >> 2] = (HEAP32[(0 + 97104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$84;
              }
              label$88 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$88
               }
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break label$84;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$90
               }
               label$91 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$91
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               break label$89;
              }
              label$92 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $2_1 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 97408 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$95
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$94
               }
               HEAP32[(0 + 97108 | 0) >> 2] = (HEAP32[(0 + 97108 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
               break label$84;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$84
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$96 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$96
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$84
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           label$97 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 97144 | 0;
            label$98 : {
             label$99 : {
              $3_1 = HEAP32[(0 + 97104 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$99
              }
              HEAP32[(0 + 97104 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$98;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$72;
           }
           $4_1 = 31;
           label$100 : {
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $4_1 = $0_1 >>> 8 | 0;
            $1194 = $4_1;
            $4_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $1194 << $4_1 | 0;
            $1201 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1201 << $3_1 | 0;
            $1208 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1208 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 97408 | 0;
           label$101 : {
            label$102 : {
             $5_1 = HEAP32[(0 + 97108 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 97108 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$3_1 >> 2] = $6_1;
             HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
             break label$101;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            label$103 : while (1) {
             $3_1 = $5_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$73
             }
             $5_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8_1 >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$72;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 97116 | 0) >> 2] = $12_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 97128 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 97132 | 0) >> 2] = HEAP32[(0 + 97592 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 97560 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 97564 | 0) >> 2] | 0;
          $1330 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1330;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 97552 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 97556 | 0) >> 2] | 0;
          $1332 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1332;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 97560 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 97556 | 0) >> 2] = $2_1;
          HEAP32[(0 + 97552 | 0) >> 2] = $5_1;
          HEAP32[(0 + 97564 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$62
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$105 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 97144 | 0;
           label$106 : {
            label$107 : {
             $5_1 = HEAP32[(0 + 97104 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$107
             }
             HEAP32[(0 + 97104 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$106;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$62;
          }
          $0_1 = 31;
          label$108 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1393 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $1393 << $0_1 | 0;
           $1400 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1400 << $6_1 | 0;
           $1407 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1407 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 97408 | 0;
          label$109 : {
           label$110 : {
            $5_1 = HEAP32[(0 + 97108 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$110
            }
            HEAP32[(0 + 97108 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$109;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$111 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$71
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$62;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 97116 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 97116 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 97128 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 97128 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($405() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$112 : {
     if (!$9_1) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $6_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($6_1 << 2 | 0) + 97408 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$113
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       HEAP32[(0 + 97108 | 0) >> 2] = $7_1;
       break label$112;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$112
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
     label$115 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$115
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$112
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$116 : {
     label$117 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$118 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 97144 | 0;
      label$119 : {
       label$120 : {
        $6_1 = HEAP32[(0 + 97104 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$120
        }
        HEAP32[(0 + 97104 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$119;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$116;
     }
     $0_1 = 31;
     label$121 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1640 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $6_1 = $1640 << $0_1 | 0;
      $1647 = $6_1;
      $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1647 << $6_1 | 0;
      $1654 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1654 << $3_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = ($0_1 << 2 | 0) + 97408 | 0;
     label$122 : {
      label$123 : {
       label$124 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$124
        }
        HEAP32[(0 + 97108 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$6_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
        break label$123;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$6_1 >> 2] | 0;
       label$125 : while (1) {
        $6_1 = $3_1;
        if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$122
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $5_1 = ($6_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         continue label$125
        }
        break label$125;
       };
       HEAP32[$5_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$116;
     }
     $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$126 : {
    if (!$11_1) {
     break label$126
    }
    label$127 : {
     label$128 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 97408 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$128
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$127
      }
      HEAP32[(0 + 97108 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$126;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$126
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$129 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$129
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$126
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$130 : {
    label$131 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$131
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$130;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$132 : {
     if (!$7_1) {
      break label$132
     }
     $3_1 = $7_1 >>> 3 | 0;
     $6_1 = ($3_1 << 3 | 0) + 97144 | 0;
     $0_1 = HEAP32[(0 + 97124 | 0) >> 2] | 0;
     label$133 : {
      label$134 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$134
       }
       HEAP32[(0 + 97104 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $6_1;
       break label$133;
      }
      $3_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 97124 | 0) >> 2] = $10_1;
    HEAP32[(0 + 97112 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $399_1 = 0, $406_1 = 0, $413_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 97120 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 97144 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 97104 | 0) >> 2] = (HEAP32[(0 + 97104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 97408 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 97108 | 0) >> 2] = (HEAP32[(0 + 97108 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 97112 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 97128 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 97128 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 97116 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 97116 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 97112 | 0) >> 2] = 0;
      HEAP32[(0 + 97124 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 97124 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 97112 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 97112 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 97144 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 97120 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 97104 | 0) >> 2] = (HEAP32[(0 + 97104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 97120 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 97120 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 97408 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 97108 | 0) >> 2] = (HEAP32[(0 + 97108 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 97112 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 97144 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 97104 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 97104 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$36 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = $0_1 >>> 8 | 0;
    $399_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $399_1 << $2_1 | 0;
    $406_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $406_1 << $4_1 | 0;
    $413_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($413_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 97408 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 97108 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 97108 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 97136 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 97136 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 97560;
   label$42 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$42
    }
    break label$42;
   };
   HEAP32[(0 + 97136 | 0) >> 2] = -1;
  }
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13_1 = 0, $6$hi = 0, $8$hi = 0, $3_1 = 0, $3$hi = 0, $16_1 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   $2_1 = i64toi32_i32$1;
   if (($1_1 | $0_1 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   $16_1 = $2_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $13_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = ($13_1 | 0) != (0 | 0) ? -1 : $16_1;
  }
  label$3 : {
   $0_1 = $502($2_1 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   if (!((HEAPU8[($0_1 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break label$3
   }
   $513($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $505($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $502($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($405() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $506($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $502($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $512($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $503($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & 3 | 0;
  $4_1 = $2_1 & -8 | 0;
  $5_1 = $0_1 + $4_1 | 0;
  label$1 : {
   $6_1 = HEAP32[(0 + 97120 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > $0_1 >>> 0) {
    break label$1
   }
   if (($3_1 | 0) == (1 | 0)) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($3_1) {
     break label$3
    }
    $3_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($4_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $3_1 = $0_1;
     if (($4_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 97584 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $4_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $507($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $3_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 97128 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $5_1 = (HEAP32[(0 + 97116 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $1_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 97116 | 0) >> 2] = $1_1;
     HEAP32[(0 + 97128 | 0) >> 2] = $3_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $5_1 = (HEAP32[(0 + 97112 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3_1 = $5_1 - $1_1 | 0;
       if ($3_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $5_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 97124 | 0) >> 2] = $1_1;
     HEAP32[(0 + 97112 | 0) >> 2] = $3_1;
     break label$5;
    }
    $3_1 = 0;
    $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($7_1 & 2 | 0) {
     break label$2
    }
    $8_1 = ($7_1 & -8 | 0) + $4_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $9_1 = $8_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$13 : {
       $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       $7_1 = $7_1 >>> 3 | 0;
       $4_1 = ($7_1 << 3 | 0) + 97144 | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3_1 | 0) != ($5_1 | 0)) {
        break label$14
       }
       HEAP32[(0 + 97104 | 0) >> 2] = (HEAP32[(0 + 97104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$11;
      }
      label$15 : {
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$15
       }
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($5_1 | 0)) {
        break label$17
       }
       label$18 : {
        $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($6_1 >>> 0 > $3_1 >>> 0) {
         break label$18
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
       break label$16;
      }
      label$19 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $7_1 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $6_1 = $3_1;
       $7_1 = $4_1;
       $3_1 = $7_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       $3_1 = $7_1 + 16 | 0;
       $4_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 97408 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$22
       }
       HEAP32[$3_1 >> 2] = $7_1;
       if ($7_1) {
        break label$21
       }
       HEAP32[(0 + 97108 | 0) >> 2] = (HEAP32[(0 + 97108 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$11
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $10_1;
     label$23 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$23
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
     }
     $5_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
    }
    label$24 : {
     if ($9_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $9_1 | 3 | 0;
    $5_1 = $0_1 + $8_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $507($1_1 | 0, $9_1 | 0);
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $382_1 = 0, $389_1 = 0, $396_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $3_1 | 0;
     if ((HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[(0 + 97120 | 0) >> 2] | 0;
     label$4 : {
      if ($3_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $7_1 = $3_1 >>> 3 | 0;
       $3_1 = ($7_1 << 3 | 0) + 97144 | 0;
       if (($6_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 97104 | 0) >> 2] = (HEAP32[(0 + 97104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($3_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($0_1 | 0)) {
        break label$9
       }
       label$10 : {
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $3_1 >>> 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$8;
      }
      label$11 : {
       $3_1 = $0_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $3_1 = $0_1 + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $6_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4_1 = $3_1;
       $6_1 = $5_1;
       $3_1 = $6_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       $3_1 = $6_1 + 16 | 0;
       $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($5_1 << 2 | 0) + 97408 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$14
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$13
       }
       HEAP32[(0 + 97108 | 0) >> 2] = (HEAP32[(0 + 97108 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$15
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 97112 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return;
   }
   label$16 : {
    label$17 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 97128 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 97128 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 97116 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 97116 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 97112 | 0) >> 2] = 0;
      HEAP32[(0 + 97124 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 97124 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 97112 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 97112 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $4_1 = HEAP32[(0 + 97120 | 0) >> 2] | 0;
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$20 : {
      label$21 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $2_1 = $3_1 >>> 3 | 0;
        $3_1 = ($2_1 << 3 | 0) + 97144 | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5_1 | 0) != ($6_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 97104 | 0) >> 2] = (HEAP32[(0 + 97104 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$24
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       break label$20;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$26
        }
        label$27 : {
         $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 > $3_1 >>> 0) {
          break label$27
         }
         HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$25;
       }
       label$28 : {
        $3_1 = $2_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $3_1 = $2_1 + 16 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $6_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4_1 = $3_1;
        $6_1 = $5_1;
        $3_1 = $6_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        $3_1 = $6_1 + 16 | 0;
        $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($5_1 << 2 | 0) + 97408 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$31
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$30
        }
        HEAP32[(0 + 97108 | 0) >> 2] = (HEAP32[(0 + 97108 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$20
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$32
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 97124 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 97112 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$33 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 97144 | 0;
    label$34 : {
     label$35 : {
      $5_1 = HEAP32[(0 + 97104 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($5_1 & $3_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 97104 | 0) >> 2] = $5_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$34;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$36 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3_1 = $1_1 >>> 8 | 0;
    $382_1 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5_1 = $382_1 << $3_1 | 0;
    $389_1 = $5_1;
    $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $389_1 << $5_1 | 0;
    $396_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($396_1 << $6_1 | 0) >>> 15 | 0) - ($5_1 | $3_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $5_1 = ($3_1 << 2 | 0) + 97408 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6_1 = HEAP32[(0 + 97108 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$39
      }
      HEAP32[(0 + 97108 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$5_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
      break label$38;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$40 : while (1) {
      $5_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$37
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 87692 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$16($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 87692 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($405() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $509($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64_1 = 0, $7_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $156_1 = 0, $156$hi = 0, $158$hi = 0, $161_1 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178_1 = 0, $179$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $219_1 = 0, $220_1 = 0, $220$hi = 0, $222_1 = 0, $222$hi = 0, $228$hi = 0, $229_1 = 0, $229$hi = 0, $236_1 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($485($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $511($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $495($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $487($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($485($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($485($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $495($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $495($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $495($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $495($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156_1 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156_1;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161_1 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161_1;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178_1 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $495($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208_1 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208_1;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219_1 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220_1 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222_1;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $495($219_1 | 0, $220_1 | 0, i64toi32_i32$0 | 0, $229_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8_1 | $6_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $510($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $511($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $512($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$17($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $513($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($514($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $512($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $516($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $517($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $519() {
  return global$0 | 0;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $521($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $522($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $523($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $522($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$5($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $524($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$18($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 var FUNCTION_TABLE = Table([null, $97, $99, $135, $136, $98, $396, $382, $61, $518, $73, $43, $302, $141, $279, $163, $184, $185, $206, $433, $436, $435, $434, $409, $410, $426, $427, $430]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__indirect_function_table": FUNCTION_TABLE, 
  "__wasm_call_ctors": $0, 
  "realloc": $505, 
  "run_qhull": $2, 
  "main": $3, 
  "malloc": $502, 
  "fflush": $402, 
  "saveSetjmp": $499, 
  "testSetjmp": $500, 
  "free": $503, 
  "__errno_location": $405, 
  "_get_tzname": $477, 
  "_get_daylight": $478, 
  "_get_timezone": $479, 
  "stackSave": $519, 
  "stackRestore": $520, 
  "stackAlloc": $521, 
  "setThrew": $501, 
  "__data_end": global$1, 
  "dynCall_jiji": $523
 };
}

var bufferView = new Uint8Array(wasmMemory.buffer);
for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    } 
  }
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 86944, "ABAAAAAAAAAAAAAAAAAAAIhsAACNbAAAlmwAAKRsAACsbAAAvGwAAMRsAADJbAAA0mwAANtsAADkbAAA6mwAAPRsAAD7bAAAAQAAAAAAAAAFAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAFQAAALByAQAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAAAAAAAABYAAAAAAAAAFQAAALhyAQAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAGAAAAMh2AQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQVQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwegEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEB9UQA=");
base64DecodeToExistingUint8Array(bufferView
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

// end include: runtime_strings_extra.js
// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STACK_BASE = 5340480,
    STACKTOP = STACK_BASE,
    STACK_MAX = 97600;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile = 'qhull.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(getBinary);
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      if (args && args.length) {
        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
      }
      return Module['dynCall_' + sig].call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.indexOf('j') != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for daylight savings.
      // This code uses the fact that getTimezoneOffset returns a greater value during Standard Time versus Daylight Saving Time (DST). 
      // Thus it determines the expected output during Standard Time, and it compares whether the output of the given date the same (Standard) or less (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=stdTimezoneOffset * 60;
  
      HEAP32[((__get_daylight())>>2)]=Number(winterOffset != summerOffset);
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocateUTF8(winterName);
      var summerNamePtr = allocateUTF8(summerName);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  function ___localtime_r(a0,a1
  ) {
  return _localtime_r(a0,a1);
  }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  function _longjmp(env, value) {
      _setThrew(env, value || 1);
      throw 'longjmp';
    }
  function _emscripten_longjmp(a0,a1
  ) {
  return _longjmp(a0,a1);
  }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 16384);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _getTempRet0() {
      return (getTempRet0() | 0);
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



__ATINIT__.push({ func: function() { ___wasm_call_ctors() } });
var asmLibraryArg = {
  "__localtime_r": ___localtime_r,
  "clock": _clock,
  "emscripten_longjmp": _emscripten_longjmp,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "invoke_ii": invoke_ii,
  "invoke_v": invoke_v,
  "invoke_vi": invoke_vi,
  "invoke_vii": invoke_vii,
  "invoke_viii": invoke_viii,
  "invoke_viiii": invoke_viiii,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0,
  "time": _time
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _realloc = Module["_realloc"] = createExportWrapper("realloc");

/** @type {function(...*):?} */
var _run_qhull = Module["_run_qhull"] = createExportWrapper("run_qhull");

/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("main");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _saveSetjmp = Module["_saveSetjmp"] = createExportWrapper("saveSetjmp");

/** @type {function(...*):?} */
var _testSetjmp = Module["_testSetjmp"] = createExportWrapper("testSetjmp");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var __get_tzname = Module["__get_tzname"] = createExportWrapper("_get_tzname");

/** @type {function(...*):?} */
var __get_daylight = Module["__get_daylight"] = createExportWrapper("_get_daylight");

/** @type {function(...*):?} */
var __get_timezone = Module["__get_timezone"] = createExportWrapper("_get_timezone");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");


function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    wasmTable.get(index)();
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}




// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];

  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;

  }
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;

  noExitRuntime = true;

run();





var bits = require("bit-twiddle");

var run_qhull = cwrap('run_qhull', 'pointer', ['pointer', 'number', 'number', 'pointer']);

var QHULL_POINT_BUFFER = _malloc(4096);
var QHULL_POINT_BUFFER_SIZE = 4096;
var FACET_COUNT_POINTER = _malloc(4);

function executeQHull(points, options) {
  if(points.length === 0) {
    return [];
  }
  if(!options) {
    options = {};
  }
  
  //Reallocate buffers
  var dimension = points[0].length;
  var count = points.length;
  var size = dimension * count;
  if(size * 8 > QHULL_POINT_BUFFER_SIZE) {
    _free(QHULL_POINT_BUFFER);
    QHULL_POINT_BUFFER_SIZE = bits.nextPow(size * 8);
    QHULL_POINT_BUFFER = _malloc(QHULL_POINT_BUFFER_SIZE);
  }
  
  //Copy points into buffer
  var offset = QHULL_POINT_BUFFER >>> 3;
  for(var i=0; i<count; ++i) {
    var p = points[i];
    for(var j=0; j<dimension; ++j) {
      Module.HEAPF64[offset++] = p[j];
    }
  }
  
  //Call the library
  var facets = run_qhull(QHULL_POINT_BUFFER, count, dimension, FACET_COUNT_POINTER);
  
  //Unbox facets back into native JS
  var facet_count = Module.HEAP32[FACET_COUNT_POINTER>>2];
  var result = new Array(facet_count);
  var cur_ptr = facets>>2;
  for(var i=0; i<facet_count; ++i) {
    var c_facet = [];
    while(true) {
      var idx = Module.HEAP32[cur_ptr++];
      if(idx < 0) {
        break;
      }
      c_facet.push(idx);
    }
    result[i] = c_facet;
  }
  
  return result;
}

module.exports = executeQHull;

}).call(this)}).call(this,require('_process'),require("buffer").Buffer,"/")
},{"_process":152,"bit-twiddle":190,"buffer":65,"crypto":73,"fs":1,"path":145}]},{},[191]);
