(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":3,"./asn1/base":5,"./asn1/constants":9,"./asn1/decoders":11,"./asn1/encoders":14,"bn.js":16}],3:[function(require,module,exports){
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./decoders":11,"./encoders":14,"inherits":134}],4:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base/reporter":7,"inherits":134,"safer-buffer":164}],5:[function(require,module,exports){
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":4,"./node":6,"./reporter":7}],6:[function(require,module,exports){
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/buffer":4,"../base/reporter":7,"minimalistic-assert":138}],7:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":134}],8:[function(require,module,exports){
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],9:[function(require,module,exports){
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":8}],10:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../base/buffer":4,"../base/node":6,"../constants/der":8,"bn.js":16,"inherits":134}],11:[function(require,module,exports){
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":10,"./pem":12}],12:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":10,"inherits":134,"safer-buffer":164}],13:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../base/node":6,"../constants/der":8,"inherits":134,"safer-buffer":164}],14:[function(require,module,exports){
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":13,"inherits":134}],16:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],17:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],18:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this._strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    var z = 0;
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      var b;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        b = c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }

      r |= b;
      z |= b;
    }

    assert(!(z & 0xf0), 'Invalid character in ' + str);
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],19:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":20}],20:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],21:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":163}],22:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":21,"./ghash":26,"./incr32":27,"buffer-xor":64,"cipher-base":66,"inherits":134,"safe-buffer":163}],23:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":24,"./encrypter":25,"./modes/list.json":35}],24:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":103,"inherits":134,"safe-buffer":163}],25:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":103,"inherits":134,"safe-buffer":163}],26:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":163}],27:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],28:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":64}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":64,"safe-buffer":163}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":163}],31:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":163}],32:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":27,"buffer-xor":64,"safe-buffer":163}],33:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],34:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":28,"./cfb":29,"./cfb1":30,"./cfb8":31,"./ctr":32,"./ecb":33,"./list.json":35,"./ofb":36}],35:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],36:[function(require,module,exports){
(function (Buffer){(function (){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":65,"buffer-xor":64}],37:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":21,"cipher-base":66,"inherits":134,"safe-buffer":163}],38:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":23,"browserify-aes/modes":34,"browserify-des":39,"browserify-des/modes":40,"evp_bytestokey":103}],39:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":66,"des.js":74,"inherits":134,"safe-buffer":163}],40:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],41:[function(require,module,exports){
(function (Buffer){(function (){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":42,"buffer":65,"randombytes":160}],42:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],43:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":44}],44:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],45:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],46:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var stream = require('readable-stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":44,"./sign":47,"./verify":48,"create-hash":69,"inherits":134,"readable-stream":63,"safe-buffer":163}],47:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":45,"bn.js":18,"browserify-rsa":41,"create-hmac":71,"elliptic":85,"parse-asn1":144,"safe-buffer":163}],48:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":45,"bn.js":18,"elliptic":85,"parse-asn1":144,"safe-buffer":163}],49:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],50:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":52,"./_stream_writable":54,"_process":152,"inherits":134}],51:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":53,"inherits":134}],52:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":49,"./_stream_duplex":50,"./internal/streams/async_iterator":55,"./internal/streams/buffer_list":56,"./internal/streams/destroy":57,"./internal/streams/from":59,"./internal/streams/state":61,"./internal/streams/stream":62,"_process":152,"buffer":65,"events":102,"inherits":134,"string_decoder/":188,"util":20}],53:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":49,"./_stream_duplex":50,"inherits":134}],54:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":49,"./_stream_duplex":50,"./internal/streams/destroy":57,"./internal/streams/state":61,"./internal/streams/stream":62,"_process":152,"buffer":65,"inherits":134,"util-deprecate":189}],55:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":58,"_process":152}],56:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":65,"util":20}],57:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":152}],58:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":49}],59:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],60:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":49,"./end-of-stream":58}],61:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":49}],62:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":102}],63:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":50,"./lib/_stream_passthrough.js":51,"./lib/_stream_readable.js":52,"./lib/_stream_transform.js":53,"./lib/_stream_writable.js":54,"./lib/internal/streams/end-of-stream.js":58,"./lib/internal/streams/pipeline.js":60}],64:[function(require,module,exports){
(function (Buffer){(function (){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":65}],65:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":17,"buffer":65,"ieee754":133}],66:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":134,"safe-buffer":163,"stream":173,"string_decoder":188}],67:[function(require,module,exports){
(function (Buffer){(function (){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":68,"buffer":65,"elliptic":85}],68:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],69:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":66,"inherits":134,"md5.js":135,"ripemd160":162,"sha.js":166}],70:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":135}],71:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":72,"cipher-base":66,"create-hash/md5":70,"inherits":134,"ripemd160":162,"safe-buffer":163,"sha.js":166}],72:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":66,"inherits":134,"safe-buffer":163}],73:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":38,"browserify-sign":46,"browserify-sign/algos":43,"create-ecdh":67,"create-hash":69,"create-hmac":71,"diffie-hellman":80,"pbkdf2":146,"public-encrypt":153,"randombytes":160,"randomfill":161}],74:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":75,"./des/cipher":76,"./des/des":77,"./des/ede":78,"./des/utils":79}],75:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":134,"minimalistic-assert":138}],76:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":138}],77:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":76,"./utils":79,"inherits":134,"minimalistic-assert":138}],78:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":76,"./des":77,"inherits":134,"minimalistic-assert":138}],79:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],80:[function(require,module,exports){
(function (Buffer){(function (){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/dh":81,"./lib/generatePrime":82,"./lib/primes.json":83,"buffer":65}],81:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./generatePrime":82,"bn.js":84,"buffer":65,"miller-rabin":136,"randombytes":160}],82:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":84,"miller-rabin":136,"randombytes":160}],83:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],84:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],85:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":101,"./elliptic/curve":88,"./elliptic/curves":91,"./elliptic/ec":92,"./elliptic/eddsa":95,"./elliptic/utils":99,"brorand":19}],86:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":99,"bn.js":100}],87:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],88:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":86,"./edwards":87,"./mont":89,"./short":90}],89:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],90:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],91:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"./curve":88,"./precomputed/secp256k1":98,"./utils":99,"hash.js":120}],92:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":91,"../utils":99,"./key":93,"./signature":94,"bn.js":100,"brorand":19,"hmac-drbg":132}],93:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":99,"bn.js":100}],94:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":99,"bn.js":100}],95:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":91,"../utils":99,"./key":96,"./signature":97,"hash.js":120}],96:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":99}],97:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":99,"bn.js":100}],98:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],99:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":100,"minimalistic-assert":138,"minimalistic-crypto-utils":139}],100:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],101:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.5.3",
  "_id": "elliptic@6.5.3",
  "_inBundle": false,
  "_integrity": "sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==",
  "_location": "/browserify/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.5.3",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.5.3",
    "saveSpec": null,
    "fetchSpec": "^6.5.3"
  },
  "_requiredBy": [
    "/browserify/browserify-sign",
    "/browserify/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz",
  "_shasum": "cb59eb2efdaf73a0bd78ccd7015a62ad6e0f93d6",
  "_spec": "elliptic@^6.5.3",
  "_where": "C:\\Users\\erici\\AppData\\Roaming\\npm\\node_modules\\browserify\\node_modules\\browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.3"
}

},{}],102:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}

},{}],103:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":135,"safe-buffer":163}],104:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":134,"readable-stream":119,"safe-buffer":163}],105:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],106:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_readable":108,"./_stream_writable":110,"_process":152,"dup":50,"inherits":134}],107:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_stream_transform":109,"dup":51,"inherits":134}],108:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"./internal/streams/async_iterator":111,"./internal/streams/buffer_list":112,"./internal/streams/destroy":113,"./internal/streams/from":115,"./internal/streams/state":117,"./internal/streams/stream":118,"_process":152,"buffer":65,"dup":52,"events":102,"inherits":134,"string_decoder/":188,"util":20}],109:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"dup":53,"inherits":134}],110:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"./internal/streams/destroy":113,"./internal/streams/state":117,"./internal/streams/stream":118,"_process":152,"buffer":65,"dup":54,"inherits":134,"util-deprecate":189}],111:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./end-of-stream":114,"_process":152,"dup":55}],112:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"buffer":65,"dup":56,"util":20}],113:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"_process":152,"dup":57}],114:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../../errors":105,"dup":58}],115:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],116:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":105,"./end-of-stream":114,"dup":60}],117:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../../errors":105,"dup":61}],118:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"events":102}],119:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":106,"./lib/_stream_passthrough.js":107,"./lib/_stream_readable.js":108,"./lib/_stream_transform.js":109,"./lib/_stream_writable.js":110,"./lib/internal/streams/end-of-stream.js":114,"./lib/internal/streams/pipeline.js":116,"dup":63}],120:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":121,"./hash/hmac":122,"./hash/ripemd":123,"./hash/sha":124,"./hash/utils":131}],121:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":131,"minimalistic-assert":138}],122:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":131,"minimalistic-assert":138}],123:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":121,"./utils":131}],124:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":125,"./sha/224":126,"./sha/256":127,"./sha/384":128,"./sha/512":129}],125:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":121,"../utils":131,"./common":130}],126:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":131,"./256":127}],127:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":121,"../utils":131,"./common":130,"minimalistic-assert":138}],128:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":131,"./512":129}],129:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":121,"../utils":131,"minimalistic-assert":138}],130:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":131}],131:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":134,"minimalistic-assert":138}],132:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":120,"minimalistic-assert":138,"minimalistic-crypto-utils":139}],133:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],134:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],135:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":104,"inherits":134,"safe-buffer":163}],136:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":137,"brorand":19}],137:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],138:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],139:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],140:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],141:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":142,"asn1.js":2}],142:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":2}],143:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":23,"evp_bytestokey":103,"safe-buffer":163}],144:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":140,"./asn1":141,"./fixProc":143,"browserify-aes":23,"pbkdf2":146,"safe-buffer":163}],145:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":152}],146:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":147,"./lib/sync":150}],147:[function(require,module,exports){
(function (process,global){(function (){
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var toBuffer = require('./to-buffer')

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":148,"./precondition":149,"./sync":150,"./to-buffer":151,"_process":152,"safe-buffer":163}],148:[function(require,module,exports){
(function (process){(function (){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else if (process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

}).call(this)}).call(this,require('_process'))
},{"_process":152}],149:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],150:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var toBuffer = require('./to-buffer')

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":148,"./precondition":149,"./to-buffer":151,"create-hash/md5":70,"ripemd160":162,"safe-buffer":163,"sha.js":166}],151:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}

},{"safe-buffer":163}],152:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],153:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":156,"./publicEncrypt":157}],154:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":69,"safe-buffer":163}],155:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],156:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":154,"./withPublic":158,"./xor":159,"bn.js":155,"browserify-rsa":41,"create-hash":69,"parse-asn1":144,"safe-buffer":163}],157:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":154,"./withPublic":158,"./xor":159,"bn.js":155,"browserify-rsa":41,"create-hash":69,"parse-asn1":144,"randombytes":160,"safe-buffer":163}],158:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":155,"safe-buffer":163}],159:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],160:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":152,"safe-buffer":163}],161:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":152,"randombytes":160,"safe-buffer":163}],162:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":65,"hash-base":104,"inherits":134}],163:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":65}],164:[function(require,module,exports){
(function (process){(function (){
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

}).call(this)}).call(this,require('_process'))
},{"_process":152,"buffer":65}],165:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":163}],166:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":167,"./sha1":168,"./sha224":169,"./sha256":170,"./sha384":171,"./sha512":172}],167:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":165,"inherits":134,"safe-buffer":163}],168:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":165,"inherits":134,"safe-buffer":163}],169:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":165,"./sha256":170,"inherits":134,"safe-buffer":163}],170:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":165,"inherits":134,"safe-buffer":163}],171:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":165,"./sha512":172,"inherits":134,"safe-buffer":163}],172:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":165,"inherits":134,"safe-buffer":163}],173:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":102,"inherits":134,"readable-stream/lib/_stream_duplex.js":175,"readable-stream/lib/_stream_passthrough.js":176,"readable-stream/lib/_stream_readable.js":177,"readable-stream/lib/_stream_transform.js":178,"readable-stream/lib/_stream_writable.js":179,"readable-stream/lib/internal/streams/end-of-stream.js":183,"readable-stream/lib/internal/streams/pipeline.js":185}],174:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],175:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_readable":177,"./_stream_writable":179,"_process":152,"dup":50,"inherits":134}],176:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_stream_transform":178,"dup":51,"inherits":134}],177:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":174,"./_stream_duplex":175,"./internal/streams/async_iterator":180,"./internal/streams/buffer_list":181,"./internal/streams/destroy":182,"./internal/streams/from":184,"./internal/streams/state":186,"./internal/streams/stream":187,"_process":152,"buffer":65,"dup":52,"events":102,"inherits":134,"string_decoder/":188,"util":20}],178:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":174,"./_stream_duplex":175,"dup":53,"inherits":134}],179:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"../errors":174,"./_stream_duplex":175,"./internal/streams/destroy":182,"./internal/streams/state":186,"./internal/streams/stream":187,"_process":152,"buffer":65,"dup":54,"inherits":134,"util-deprecate":189}],180:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./end-of-stream":183,"_process":152,"dup":55}],181:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"buffer":65,"dup":56,"util":20}],182:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"_process":152,"dup":57}],183:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../../errors":174,"dup":58}],184:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],185:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":174,"./end-of-stream":183,"dup":60}],186:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../../errors":174,"dup":61}],187:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"events":102}],188:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":163}],189:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],190:[function(require,module,exports){
(function (process,Buffer,__dirname){(function (){
var Module=typeof Module!=="undefined"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require("path").dirname(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",abort);quit_=function(status){process["exit"](status)};Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){arguments_=scriptArgs}else if(typeof arguments!="undefined"){arguments_=arguments}if(typeof quit==="function"){quit_=function(status){quit(status)}}if(typeof print!=="undefined"){if(typeof console==="undefined")console={};console.log=print;console.warn=console.error=typeof printErr!=="undefined"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var STACK_ALIGN=16;function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;return Math.ceil(size/factor)*factor}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];var WebAssembly={Memory:function(opts){this.buffer=new ArrayBuffer(opts["initial"]*65536)},Module:function(binary){},Instance:function(module,info){this.exports=(
// EMSCRIPTEN_START_ASM
function instantiate(zi,Ai){function ri(Bi){Bi.set=(function(Ci,Di){this[Ci]=Di});Bi.get=(function(Ci){return this[Ci]});return Bi}var a=new ArrayBuffer(16);var b=new Int32Array(a);var c=new Float32Array(a);var d=new Float64Array(a);function si(Ei){return b[Ei]}function ti(Ei,Fi){b[Ei]=Fi}function ui(){return d[0]}function vi(Fi){d[0]=Fi}function wi(Fi){c[2]=Fi}function xi(Gi,Hi){var e=Hi.a;var f=e.buffer;var g=new Gi.Int8Array(f);var h=new Gi.Int16Array(f);var i=new Gi.Int32Array(f);var j=new Gi.Uint8Array(f);var k=new Gi.Uint16Array(f);var l=new Gi.Uint32Array(f);var m=new Gi.Float32Array(f);var n=new Gi.Float64Array(f);var o=Gi.Math.imul;var p=Gi.Math.fround;var q=Gi.Math.abs;var r=Gi.Math.clz32;var s=Gi.Math.min;var t=Gi.Math.max;var u=Gi.Math.floor;var v=Gi.Math.ceil;var w=Gi.Math.sqrt;var x=Hi.abort;var y=Gi.NaN;var z=Gi.Infinity;var A=Hi.b;var B=Hi.c;var C=Hi.d;var D=Hi.e;var E=Hi.f;var F=Hi.g;var G=Hi.h;var H=Hi.i;var I=Hi.j;var J=Hi.k;var K=Hi.l;var L=Hi.m;var M=Hi.n;var N=Hi.o;var O=Hi.p;var P=Hi.q;var Q=Hi.r;var R=Hi.s;var S=5340192;var T=0;
// EMSCRIPTEN_START_FUNCS
function za(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,m=0,n=0,o=0,p=0;p=S-16|0;S=p;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{if(a>>>0<=244){g=i[24204];f=a>>>0<11?16:a+11&-8;a=f>>>3|0;b=g>>>a|0;if(b&3){c=a+((b^-1)&1)|0;f=c<<3;b=i[f+96864>>2];a=b+8|0;d=i[b+8>>2];f=f+96856|0;m:{if((d|0)==(f|0)){i[24204]=pi(c)&g;break m}i[d+12>>2]=f;i[f+8>>2]=d}c=c<<3;i[b+4>>2]=c|3;b=b+c|0;i[b+4>>2]=i[b+4>>2]|1;break a}k=i[24206];if(f>>>0<=k>>>0){break l}if(b){c=2<<a;a=(0-c|c)&b<<a;a=(0-a&a)+ -1|0;b=a>>>12&16;c=b;a=a>>>b|0;b=a>>>5&8;c=c|b;a=a>>>b|0;b=a>>>2&4;c=c|b;a=a>>>b|0;b=a>>>1&2;c=c|b;a=a>>>b|0;b=a>>>1&1;c=(c|b)+(a>>>b|0)|0;d=c<<3;b=i[d+96864>>2];a=i[b+8>>2];d=d+96856|0;n:{if((a|0)==(d|0)){g=pi(c)&g;i[24204]=g;break n}i[a+12>>2]=d;i[d+8>>2]=a}a=b+8|0;i[b+4>>2]=f|3;e=b+f|0;c=c<<3;f=c-f|0;i[e+4>>2]=f|1;i[b+c>>2]=f;if(k){c=k>>>3|0;b=(c<<3)+96856|0;d=i[24209];c=1<<c;o:{if(!(c&g)){i[24204]=c|g;c=b;break o}c=i[b+8>>2]}i[b+8>>2]=d;i[c+12>>2]=d;i[d+12>>2]=b;i[d+8>>2]=c}i[24209]=e;i[24206]=f;break a}n=i[24205];if(!n){break l}a=(n&0-n)+ -1|0;b=a>>>12&16;c=b;a=a>>>b|0;b=a>>>5&8;c=c|b;a=a>>>b|0;b=a>>>2&4;c=c|b;a=a>>>b|0;b=a>>>1&2;c=c|b;a=a>>>b|0;b=a>>>1&1;b=i[((c|b)+(a>>>b|0)<<2)+97120>>2];e=(i[b+4>>2]&-8)-f|0;c=b;while(1){p:{a=i[c+16>>2];if(!a){a=i[c+20>>2];if(!a){break p}}d=(i[a+4>>2]&-8)-f|0;c=d>>>0<e>>>0;e=c?d:e;b=c?a:b;c=a;continue}break}o=b+f|0;if(o>>>0<=b>>>0){break k}m=i[b+24>>2];d=i[b+12>>2];if((d|0)!=(b|0)){a=i[b+8>>2];i[a+12>>2]=d;i[d+8>>2]=a;break b}c=b+20|0;a=i[c>>2];if(!a){a=i[b+16>>2];if(!a){break j}c=b+16|0}while(1){h=c;d=a;c=a+20|0;a=i[c>>2];if(a){continue}c=d+16|0;a=i[d+16>>2];if(a){continue}break}i[h>>2]=0;break b}f=-1;if(a>>>0>4294967231){break l}a=a+11|0;f=a&-8;k=i[24205];if(!k){break l}h=31;e=0-f|0;if(f>>>0<=16777215){b=a>>>8|0;a=b+1048320>>>16&8;c=b<<a;b=c+520192>>>16&4;g=c<<b;c=g+245760>>>16&2;a=(g<<c>>>15|0)-(c|(a|b))|0;h=(a<<1|f>>>a+21&1)+28|0}c=i[(h<<2)+97120>>2];q:{r:{s:{if(!c){a=0;break s}a=0;b=f<<((h|0)==31?0:25-(h>>>1|0)|0);while(1){t:{g=(i[c+4>>2]&-8)-f|0;if(g>>>0>=e>>>0){break t}d=c;e=g;if(e){break t}e=0;a=c;break r}g=i[c+20>>2];c=i[((b>>>29&4)+c|0)+16>>2];a=g?(g|0)==(c|0)?a:g:a;b=b<<1;if(c){continue}break}}if(!(a|d)){a=2<<h;a=(0-a|a)&k;if(!a){break l}a=(a&0-a)+ -1|0;b=a>>>12&16;c=b;a=a>>>b|0;b=a>>>5&8;c=c|b;a=a>>>b|0;b=a>>>2&4;c=c|b;a=a>>>b|0;b=a>>>1&2;c=c|b;a=a>>>b|0;b=a>>>1&1;a=i[((c|b)+(a>>>b|0)<<2)+97120>>2]}if(!a){break q}}while(1){c=(i[a+4>>2]&-8)-f|0;b=c>>>0<e>>>0;e=b?c:e;d=b?a:d;b=i[a+16>>2];if(b){a=b}else{a=i[a+20>>2]}if(a){continue}break}}if(!d|e>>>0>=i[24206]-f>>>0){break l}h=d+f|0;if(h>>>0<=d>>>0){break k}m=i[d+24>>2];b=i[d+12>>2];if((d|0)!=(b|0)){a=i[d+8>>2];i[a+12>>2]=b;i[b+8>>2]=a;break c}c=d+20|0;a=i[c>>2];if(!a){a=i[d+16>>2];if(!a){break i}c=d+16|0}while(1){g=c;b=a;c=a+20|0;a=i[c>>2];if(a){continue}c=b+16|0;a=i[b+16>>2];if(a){continue}break}i[g>>2]=0;break c}b=i[24206];if(b>>>0>=f>>>0){a=i[24209];c=b-f|0;u:{if(c>>>0>=16){i[24206]=c;d=a+f|0;i[24209]=d;i[d+4>>2]=c|1;i[a+b>>2]=c;i[a+4>>2]=f|3;break u}i[24209]=0;i[24206]=0;i[a+4>>2]=b|3;b=a+b|0;i[b+4>>2]=i[b+4>>2]|1}a=a+8|0;break a}d=i[24207];if(d>>>0>f>>>0){b=d-f|0;i[24207]=b;a=i[24210];c=a+f|0;i[24210]=c;i[c+4>>2]=b|1;i[a+4>>2]=f|3;a=a+8|0;break a}a=0;e=f+47|0;c=e;if(i[24322]){b=i[24324]}else{i[24325]=-1;i[24326]=-1;i[24323]=4096;i[24324]=4096;i[24322]=p+12&-16^1431655768;i[24327]=0;i[24315]=0;b=4096}g=c+b|0;h=0-b|0;c=g&h;if(c>>>0<=f>>>0){break a}b=i[24314];if(b){k=i[24312];m=k+c|0;if(m>>>0<=k>>>0|m>>>0>b>>>0){break a}}if(j[97260]&4){break f}v:{w:{b=i[24210];if(b){a=97264;while(1){k=i[a>>2];if(k+i[a+4>>2]>>>0>b>>>0?k>>>0<=b>>>0:0){break w}a=i[a+8>>2];if(a){continue}break}}b=hb(0);if((b|0)==-1){break g}g=c;a=i[24323];d=a+ -1|0;if(d&b){g=(c-b|0)+(b+d&0-a)|0}if(g>>>0<=f>>>0|g>>>0>2147483646){break g}a=i[24314];if(a){d=i[24312];h=d+g|0;if(h>>>0<=d>>>0|h>>>0>a>>>0){break g}}a=hb(g);if((b|0)!=(a|0)){break v}break e}g=h&g-d;if(g>>>0>2147483646){break g}b=hb(g);if((b|0)==(i[a>>2]+i[a+4>>2]|0)){break h}a=b}if(!((a|0)==-1|f+48>>>0<=g>>>0)){b=i[24324];b=b+(e-g|0)&0-b;if(b>>>0>2147483646){b=a;break e}if((hb(b)|0)!=-1){g=b+g|0;b=a;break e}hb(0-g|0);break g}b=a;if((a|0)!=-1){break e}break g}x()}d=0;break b}b=0;break c}if((b|0)!=-1){break e}}i[24315]=i[24315]|4}if(c>>>0>2147483646){break d}b=hb(c);a=hb(0);if(b>>>0>=a>>>0|(b|0)==-1|(a|0)==-1){break d}g=a-b|0;if(g>>>0<=f+40>>>0){break d}}a=i[24312]+g|0;i[24312]=a;if(a>>>0>l[24313]){i[24313]=a}x:{y:{z:{e=i[24210];if(e){a=97264;while(1){c=i[a>>2];d=i[a+4>>2];if((c+d|0)==(b|0)){break z}a=i[a+8>>2];if(a){continue}break}break y}a=i[24208];if(!(b>>>0>=a>>>0?a:0)){i[24208]=b}a=0;i[24317]=g;i[24316]=b;i[24212]=-1;i[24213]=i[24322];i[24319]=0;while(1){c=a<<3;d=c+96856|0;i[c+96864>>2]=d;i[c+96868>>2]=d;a=a+1|0;if((a|0)!=32){continue}break}a=g+ -40|0;c=b+8&7?-8-b&7:0;d=a-c|0;i[24207]=d;c=b+c|0;i[24210]=c;i[c+4>>2]=d|1;i[(a+b|0)+4>>2]=40;i[24211]=i[24326];break x}if(j[a+12|0]&8|b>>>0<=e>>>0|c>>>0>e>>>0){break y}i[a+4>>2]=d+g;a=e+8&7?-8-e&7:0;b=a+e|0;i[24210]=b;c=i[24207]+g|0;a=c-a|0;i[24207]=a;i[b+4>>2]=a|1;i[(c+e|0)+4>>2]=40;i[24211]=i[24326];break x}d=i[24208];if(b>>>0<d>>>0){i[24208]=b;d=0}c=b+g|0;a=97264;A:{B:{C:{D:{E:{F:{while(1){if((c|0)!=i[a>>2]){a=i[a+8>>2];if(a){continue}break F}break}if(!(j[a+12|0]&8)){break E}}a=97264;while(1){c=i[a>>2];if(c>>>0<=e>>>0){d=c+i[a+4>>2]|0;if(d>>>0>e>>>0){break D}}a=i[a+8>>2];continue}}i[a>>2]=b;i[a+4>>2]=i[a+4>>2]+g;m=(b+8&7?-8-b&7:0)+b|0;i[m+4>>2]=f|3;b=c+(c+8&7?-8-c&7:0)|0;a=(b-m|0)-f|0;h=f+m|0;if((b|0)==(e|0)){i[24210]=h;a=i[24207]+a|0;i[24207]=a;i[h+4>>2]=a|1;break B}if(i[24209]==(b|0)){i[24209]=h;a=i[24206]+a|0;i[24206]=a;i[h+4>>2]=a|1;i[a+h>>2]=a;break B}c=i[b+4>>2];if((c&3)==1){n=c&-8;G:{if(c>>>0<=255){f=c>>>3|0;c=i[b+8>>2];d=i[b+12>>2];if((d|0)==(c|0)){i[24204]=i[24204]&pi(f);break G}i[c+12>>2]=d;i[d+8>>2]=c;break G}k=i[b+24>>2];g=i[b+12>>2];H:{if((g|0)!=(b|0)){c=i[b+8>>2];i[c+12>>2]=g;i[g+8>>2]=c;break H}I:{e=b+20|0;f=i[e>>2];if(f){break I}e=b+16|0;f=i[e>>2];if(f){break I}g=0;break H}while(1){c=e;g=f;e=f+20|0;f=i[e>>2];if(f){continue}e=g+16|0;f=i[g+16>>2];if(f){continue}break}i[c>>2]=0}if(!k){break G}c=i[b+28>>2];d=(c<<2)+97120|0;J:{if(i[d>>2]==(b|0)){i[d>>2]=g;if(g){break J}i[24205]=i[24205]&pi(c);break G}i[k+(i[k+16>>2]==(b|0)?16:20)>>2]=g;if(!g){break G}}i[g+24>>2]=k;c=i[b+16>>2];if(c){i[g+16>>2]=c;i[c+24>>2]=g}c=i[b+20>>2];if(!c){break G}i[g+20>>2]=c;i[c+24>>2]=g}b=b+n|0;a=a+n|0}i[b+4>>2]=i[b+4>>2]&-2;i[h+4>>2]=a|1;i[a+h>>2]=a;if(a>>>0<=255){b=a>>>3|0;a=(b<<3)+96856|0;c=i[24204];b=1<<b;K:{if(!(c&b)){i[24204]=b|c;b=a;break K}b=i[a+8>>2]}i[a+8>>2]=h;i[b+12>>2]=h;i[h+12>>2]=a;i[h+8>>2]=b;break B}e=31;if(a>>>0<=16777215){c=a>>>8|0;b=c+1048320>>>16&8;d=c<<b;c=d+520192>>>16&4;f=d<<c;d=f+245760>>>16&2;b=(f<<d>>>15|0)-(d|(b|c))|0;e=(b<<1|a>>>b+21&1)+28|0}i[h+28>>2]=e;i[h+16>>2]=0;i[h+20>>2]=0;b=(e<<2)+97120|0;c=i[24205];d=1<<e;L:{if(!(c&d)){i[24205]=c|d;i[b>>2]=h;i[h+24>>2]=b;break L}e=a<<((e|0)==31?0:25-(e>>>1|0)|0);b=i[b>>2];while(1){c=b;if((i[b+4>>2]&-8)==(a|0)){break C}b=e>>>29|0;e=e<<1;d=c+(b&4)|0;b=i[d+16>>2];if(b){continue}break}i[d+16>>2]=h;i[h+24>>2]=c}i[h+12>>2]=h;i[h+8>>2]=h;break B}a=g+ -40|0;c=b+8&7?-8-b&7:0;h=a-c|0;i[24207]=h;c=b+c|0;i[24210]=c;i[c+4>>2]=h|1;i[(a+b|0)+4>>2]=40;i[24211]=i[24326];a=(d+(d+ -39&7?39-d&7:0)|0)+ -47|0;c=a>>>0<e+16>>>0?e:a;i[c+4>>2]=27;a=i[24319];i[c+16>>2]=i[24318];i[c+20>>2]=a;a=i[24317];i[c+8>>2]=i[24316];i[c+12>>2]=a;i[24318]=c+8;i[24317]=g;i[24316]=b;i[24319]=0;a=c+24|0;while(1){i[a+4>>2]=7;b=a+8|0;a=a+4|0;if(d>>>0>b>>>0){continue}break}if((c|0)==(e|0)){break x}i[c+4>>2]=i[c+4>>2]&-2;d=c-e|0;i[e+4>>2]=d|1;i[c>>2]=d;if(d>>>0<=255){b=d>>>3|0;a=(b<<3)+96856|0;c=i[24204];b=1<<b;M:{if(!(c&b)){i[24204]=b|c;b=a;break M}b=i[a+8>>2]}i[a+8>>2]=e;i[b+12>>2]=e;i[e+12>>2]=a;i[e+8>>2]=b;break x}a=31;i[e+16>>2]=0;i[e+20>>2]=0;if(d>>>0<=16777215){b=d>>>8|0;a=b+1048320>>>16&8;c=b<<a;b=c+520192>>>16&4;g=c<<b;c=g+245760>>>16&2;a=(g<<c>>>15|0)-(c|(a|b))|0;a=(a<<1|d>>>a+21&1)+28|0}i[e+28>>2]=a;b=(a<<2)+97120|0;c=i[24205];g=1<<a;N:{if(!(c&g)){i[24205]=c|g;i[b>>2]=e;i[e+24>>2]=b;break N}a=d<<((a|0)==31?0:25-(a>>>1|0)|0);b=i[b>>2];while(1){c=b;if((d|0)==(i[b+4>>2]&-8)){break A}b=a>>>29|0;a=a<<1;g=c+(b&4)|0;b=i[g+16>>2];if(b){continue}break}i[g+16>>2]=e;i[e+24>>2]=c}i[e+12>>2]=e;i[e+8>>2]=e;break x}a=i[c+8>>2];i[a+12>>2]=h;i[c+8>>2]=h;i[h+24>>2]=0;i[h+12>>2]=c;i[h+8>>2]=a}a=m+8|0;break a}a=i[c+8>>2];i[a+12>>2]=e;i[c+8>>2]=e;i[e+24>>2]=0;i[e+12>>2]=c;i[e+8>>2]=a}a=i[24207];if(a>>>0<=f>>>0){break d}b=a-f|0;i[24207]=b;a=i[24210];c=a+f|0;i[24210]=c;i[c+4>>2]=b|1;i[a+4>>2]=f|3;a=a+8|0;break a}i[23646]=48;a=0;break a}O:{if(!m){break O}a=i[d+28>>2];c=(a<<2)+97120|0;P:{if(i[c>>2]==(d|0)){i[c>>2]=b;if(b){break P}k=pi(a)&k;i[24205]=k;break O}i[m+(i[m+16>>2]==(d|0)?16:20)>>2]=b;if(!b){break O}}i[b+24>>2]=m;a=i[d+16>>2];if(a){i[b+16>>2]=a;i[a+24>>2]=b}a=i[d+20>>2];if(!a){break O}i[b+20>>2]=a;i[a+24>>2]=b}Q:{if(e>>>0<=15){a=e+f|0;i[d+4>>2]=a|3;a=a+d|0;i[a+4>>2]=i[a+4>>2]|1;break Q}i[d+4>>2]=f|3;i[h+4>>2]=e|1;i[e+h>>2]=e;if(e>>>0<=255){b=e>>>3|0;a=(b<<3)+96856|0;c=i[24204];b=1<<b;R:{if(!(c&b)){i[24204]=b|c;b=a;break R}b=i[a+8>>2]}i[a+8>>2]=h;i[b+12>>2]=h;i[h+12>>2]=a;i[h+8>>2]=b;break Q}a=31;if(e>>>0<=16777215){b=e>>>8|0;a=b+1048320>>>16&8;c=b<<a;b=c+520192>>>16&4;f=c<<b;c=f+245760>>>16&2;a=(f<<c>>>15|0)-(c|(a|b))|0;a=(a<<1|e>>>a+21&1)+28|0}i[h+28>>2]=a;i[h+16>>2]=0;i[h+20>>2]=0;b=(a<<2)+97120|0;S:{c=1<<a;T:{if(!(c&k)){i[24205]=c|k;i[b>>2]=h;break T}a=e<<((a|0)==31?0:25-(a>>>1|0)|0);f=i[b>>2];while(1){b=f;if((i[b+4>>2]&-8)==(e|0)){break S}c=a>>>29|0;a=a<<1;c=(c&4)+b|0;f=i[c+16>>2];if(f){continue}break}i[c+16>>2]=h}i[h+24>>2]=b;i[h+12>>2]=h;i[h+8>>2]=h;break Q}a=i[b+8>>2];i[a+12>>2]=h;i[b+8>>2]=h;i[h+24>>2]=0;i[h+12>>2]=b;i[h+8>>2]=a}a=d+8|0;break a}U:{if(!m){break U}a=i[b+28>>2];c=(a<<2)+97120|0;V:{if(i[c>>2]==(b|0)){i[c>>2]=d;if(d){break V}i[24205]=pi(a)&n;break U}i[m+(i[m+16>>2]==(b|0)?16:20)>>2]=d;if(!d){break U}}i[d+24>>2]=m;a=i[b+16>>2];if(a){i[d+16>>2]=a;i[a+24>>2]=d}a=i[b+20>>2];if(!a){break U}i[d+20>>2]=a;i[a+24>>2]=d}W:{if(e>>>0<=15){a=e+f|0;i[b+4>>2]=a|3;a=a+b|0;i[a+4>>2]=i[a+4>>2]|1;break W}i[b+4>>2]=f|3;i[o+4>>2]=e|1;i[e+o>>2]=e;if(k){c=k>>>3|0;a=(c<<3)+96856|0;d=i[24209];c=1<<c;X:{if(!(c&g)){i[24204]=c|g;c=a;break X}c=i[a+8>>2]}i[a+8>>2]=d;i[c+12>>2]=d;i[d+12>>2]=a;i[d+8>>2]=c}i[24209]=o;i[24206]=e}a=b+8|0}S=p+16|0;return a|0}function Ed(a,b,c,d,e,f,g,h,j){var k=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;o=S-192|0;S=o;A=h;H=j&65535;p=d;s=e&65535;D=(e^j)&-2147483648;l=j>>>16&32767;a:{v=e>>>16&32767;b:{c:{if(l+ -1>>>0<32766?v+ -1>>>0<=32765:0){break c}n=e&2147483647;k=n;m=d;if(!(!d&(k|0)==2147418112?!(b|c):(k|0)==2147418112&d>>>0<0|k>>>0<2147418112)){K=d;D=e|32768;break b}n=j&2147483647;e=n;d=h;if(!(!d&(e|0)==2147418112?!(f|g):(e|0)==2147418112&d>>>0<0|e>>>0<2147418112)){K=h;D=j|32768;b=f;c=g;break b}if(!(b|m|(k^2147418112|c))){if(!(d|f|(e^2147418112|g))){b=0;c=0;D=2147450880;break b}D=D|2147418112;b=0;c=0;break b}if(!(d|f|(e^2147418112|g))){b=0;c=0;break b}if(!(b|m|(c|k))){break a}if(!(d|f|(e|g))){D=D|2147418112;b=0;c=0;break b}if((k|0)==65535|k>>>0<65535){j=b;d=!(p|s);h=d<<6;k=r(d?b:p)+32|0;b=r(d?c:s);b=h+((b|0)==32?k:b)|0;ua(o+176|0,j,c,p,s,b+ -15|0);I=16-b|0;p=i[o+184>>2];s=i[o+188>>2];c=i[o+180>>2];b=i[o+176>>2]}if(e>>>0>65535){break c}d=!(A|H);e=d<<6;h=r(d?f:A)+32|0;d=r(d?g:H);d=e+((d|0)==32?h:d)|0;ua(o+160|0,f,g,A,H,d+ -15|0);I=(d+I|0)+ -16|0;A=i[o+168>>2];H=i[o+172>>2];f=i[o+160>>2];g=i[o+164>>2]}e=H|65536;J=e;N=A;d=A;n=e<<15|d>>>17;d=d<<15|g>>>17;h=-102865788-d|0;e=n;k=e;j=1963258675-(k+(4192101508<d>>>0)|0)|0;Ka(o+144|0,d,k,h,j);m=i[o+152>>2];Ka(o+128|0,0-m|0,0-(i[o+156>>2]+(0<m>>>0)|0)|0,h,j);h=i[o+136>>2];j=h<<1|i[o+132>>2]>>>31;h=i[o+140>>2]<<1|h>>>31;Ka(o+112|0,j,h,d,k);m=h;h=i[o+120>>2];Ka(o+96|0,j,m,0-h|0,0-(i[o+124>>2]+(0<h>>>0)|0)|0);h=i[o+104>>2];j=h<<1|i[o+100>>2]>>>31;h=i[o+108>>2]<<1|h>>>31;Ka(o+80|0,j,h,d,k);m=h;h=i[o+88>>2];Ka(o- -64|0,j,m,0-h|0,0-(i[o+92>>2]+(0<h>>>0)|0)|0);h=i[o+72>>2];j=h<<1|i[o+68>>2]>>>31;h=i[o+76>>2]<<1|h>>>31;Ka(o+48|0,j,h,d,k);m=h;h=i[o+56>>2];Ka(o+32|0,j,m,0-h|0,0-(i[o+60>>2]+(0<h>>>0)|0)|0);h=i[o+40>>2];j=h<<1|i[o+36>>2]>>>31;h=i[o+44>>2]<<1|h>>>31;Ka(o+16|0,j,h,d,k);k=h;h=i[o+24>>2];Ka(o,j,k,0-h|0,0-(i[o+28>>2]+(0<h>>>0)|0)|0);I=(v-l|0)+I|0;h=i[o+8>>2];m=i[o+12>>2]<<1|h>>>31;j=h<<1;n=m+ -1|0;j=(i[o+4>>2]>>>31|j)+ -1|0;if((j|0)!=-1){n=n+1|0}h=j;m=0;B=m;q=e;l=0;x=ni(h,m,e,l);e=T;t=e;y=n;v=0;h=d;m=ni(n,v,d,0);d=m+x|0;k=T+e|0;e=d;k=d>>>0<m>>>0?k+1|0:k;m=0;n=(k|0)==(t|0)&e>>>0<x>>>0|k>>>0<t>>>0;x=ni(q,l,y,v);l=x+k|0;k=T+(m|n)|0;k=l>>>0<x>>>0?k+1|0:k;m=l;n=e;e=0;h=ni(j,B,h,u);d=e+h|0;l=T+n|0;l=d>>>0<h>>>0?l+1|0:l;x=d;h=d;d=l;e=(n|0)==(d|0)&h>>>0<e>>>0|d>>>0<n>>>0;h=m+e|0;if(h>>>0<e>>>0){k=k+1|0}C=h;h=k;e=g;z=(e&131071)<<15|f>>>17;q=ni(j,B,z,0);e=T;u=e;k=f;w=k<<15&-32768;k=ni(y,v,w,0);m=k+q|0;l=T+e|0;l=m>>>0<k>>>0?l+1|0:l;e=l;F=ni(j,B,w,F);w=0+F|0;k=m;l=k+T|0;l=w>>>0<F>>>0?l+1|0:l;l=(k|0)==(l|0)&w>>>0<G>>>0|l>>>0<k>>>0;k=(e|0)==(u|0)&k>>>0<q>>>0|e>>>0<u>>>0;m=e;e=ni(y,v,z,E)+e|0;n=k+T|0;n=e>>>0<m>>>0?n+1|0:n;k=e;e=l+k|0;m=n;m=e>>>0<k>>>0?m+1|0:m;n=e;e=x+e|0;k=m+d|0;k=e>>>0<n>>>0?k+1|0:k;l=h;t=k;d=(d|0)==(k|0)&e>>>0<x>>>0|k>>>0<d>>>0;h=d+C|0;if(h>>>0<d>>>0){l=l+1|0}k=l;d=(e|0)!=0|(t|0)!=0;h=h+d|0;if(h>>>0<d>>>0){k=k+1|0}n=h;h=0-h|0;q=0;x=ni(h,q,j,B);d=T;u=d;w=ni(y,v,h,q);h=T;C=h;z=0-((0<n>>>0)+k|0)|0;k=0;q=ni(j,B,z,k);n=q+w|0;l=T+h|0;l=n>>>0<q>>>0?l+1|0:l;h=n;m=h;q=0+x|0;n=d+m|0;n=q>>>0<E>>>0?n+1|0:n;m=q;d=n;n=(u|0)==(d|0)&m>>>0<x>>>0|d>>>0<u>>>0;m=(l|0)==(C|0)&h>>>0<w>>>0|l>>>0<C>>>0;h=ni(y,v,z,k)+l|0;k=m+T|0;k=h>>>0<l>>>0?k+1|0:k;m=h;h=n+m|0;if(h>>>0<m>>>0){k=k+1|0}z=h;h=k;n=q;m=0-((0<e>>>0)+t|0)|0;e=0-e|0;E=m;t=0;C=ni(m,t,j,B);w=T;u=e;F=0;m=ni(e,F,y,v);e=m+C|0;l=T+w|0;l=e>>>0<m>>>0?l+1|0:l;m=e;e=l;u=ni(j,B,u,F);j=0+u|0;k=m;l=k+T|0;l=j>>>0<u>>>0?l+1|0:l;l=(k|0)==(l|0)&j>>>0<G>>>0|l>>>0<k>>>0;k=(e|0)==(w|0)&k>>>0<C>>>0|e>>>0<w>>>0;j=e;e=ni(E,t,y,v)+e|0;m=k+T|0;m=e>>>0<j>>>0?m+1|0:m;j=e;e=l+e|0;k=m;k=e>>>0<j>>>0?k+1|0:k;j=e;e=e+n|0;k=k+d|0;k=e>>>0<j>>>0?k+1|0:k;j=e;l=h;e=k;d=(d|0)==(k|0)&j>>>0<n>>>0|k>>>0<d>>>0;h=d+z|0;if(h>>>0<d>>>0){l=l+1|0}d=h;k=l;l=d;n=e+ -1|0;d=j+ -2|0;if(d>>>0<4294967294){n=n+1|0}h=d;m=d;d=n;e=(e|0)==(d|0)&m>>>0<j>>>0|d>>>0<e>>>0;j=l+e|0;if(j>>>0<e>>>0){k=k+1|0}e=j+ -1|0;l=k+ -1|0;l=(e|0)!=-1?l+1|0:l;j=0;y=j;v=e;m=p;w=m<<2|c>>>30;z=0;t=ni(e,j,w,z);j=T;m=j;j=c;E=(j&1073741823)<<2|b>>>30;x=0;F=l;j=0;k=ni(E,x,l,j);e=k+t|0;n=T+m|0;n=e>>>0<k>>>0?n+1|0:n;k=e;q=n;u=(m|0)==(n|0)&k>>>0<t>>>0|n>>>0<m>>>0;m=n;n=0;t=n;l=0;C=d;G=((s&1073741823)<<2|p>>>30)&-262145|262144;e=ni(d,n,G,0);d=e+k|0;m=T+m|0;m=d>>>0<e>>>0?m+1|0:m;p=d;e=m;d=(q|0)==(e|0)&d>>>0<k>>>0|e>>>0<q>>>0;m=d+u|0;if(m>>>0<d>>>0){l=1}c=m;m=ni(F,j,G,L);d=c+m|0;k=T+l|0;q=d;n=d>>>0<m>>>0?k+1|0:k;l=ni(v,y,G,L);k=T;s=ni(w,z,F,j);d=s+l|0;m=T+k|0;m=d>>>0<s>>>0?m+1|0:m;s=d;d=m;m=(k|0)==(d|0)&s>>>0<l>>>0|d>>>0<k>>>0;q=d+q|0;l=m+n|0;k=q;m=k>>>0<d>>>0?l+1|0:l;c=k;n=e+s|0;l=0;d=l+p|0;if(d>>>0<l>>>0){n=n+1|0}s=d;k=d;d=n;e=(e|0)==(d|0)&k>>>0<p>>>0|d>>>0<e>>>0;k=c+e|0;if(k>>>0<e>>>0){m=m+1|0}O=k;e=s;l=d;p=ni(E,x,C,t);n=T;q=h;u=ni(h,0,w,z);h=u+p|0;k=T+n|0;k=h>>>0<u>>>0?k+1|0:k;B=h;u=h;h=k;p=(n|0)==(k|0)&u>>>0<p>>>0|k>>>0<n>>>0;Q=e;k=0;c=p;M=b<<2&-4;p=ni(v,y,M,0);e=p+u|0;n=T+h|0;n=e>>>0<p>>>0?n+1|0:n;u=e;p=e;e=n;h=(h|0)==(e|0)&p>>>0<B>>>0|e>>>0<h>>>0;n=c+h|0;if(n>>>0<h>>>0){k=1}h=Q+n|0;l=k+l|0;l=h>>>0<n>>>0?l+1|0:l;p=h;n=m;h=l;d=(d|0)==(l|0)&p>>>0<s>>>0|l>>>0<d>>>0;m=d+O|0;if(m>>>0<d>>>0){n=n+1|0}c=m;s=p;B=h;O=ni(F,j,M,P);F=T;j=ni(G,L,q,R);d=j+O|0;m=T+F|0;m=d>>>0<j>>>0?m+1|0:m;G=d;k=ni(w,z,C,t);d=d+k|0;j=m;l=m+T|0;l=d>>>0<k>>>0?l+1|0:l;w=d;m=ni(v,y,E,x);d=d+m|0;k=T+l|0;v=d;k=d>>>0<m>>>0?k+1|0:k;y=0;m=n;d=k;z=(k|0)==(l|0)&v>>>0<w>>>0|k>>>0<l>>>0;k=(j|0)==(F|0)&G>>>0<O>>>0|j>>>0<F>>>0;j=(j|0)==(l|0)&w>>>0<G>>>0|l>>>0<j>>>0;n=k+j|0;n>>>0<j>>>0;l=n;j=z+l|0;l=j;k=d|0;j=k+s|0;l=(l|y)+B|0;l=j>>>0<k>>>0?l+1|0:l;B=j;s=l;h=(h|0)==(l|0)&j>>>0<p>>>0|l>>>0<h>>>0;j=h+c|0;if(j>>>0<h>>>0){m=m+1|0}z=j;j=m;p=B;y=s;l=u;C=ni(C,t,M,P);t=T;m=ni(E,x,q,R);h=m+C|0;n=T+t|0;n=h>>>0<m>>>0?n+1|0:n;m=n;n=0;k=(m|0)==(t|0)&h>>>0<C>>>0|m>>>0<t>>>0;h=m+l|0;l=(k|n)+e|0;l=h>>>0<m>>>0?l+1|0:l;m=h;k=m;k=(e|0)==(l|0)&k>>>0<u>>>0|l>>>0<e>>>0;e=l;c=k;l=v;v=0;d=v+m|0;k=e+l|0;k=d>>>0<v>>>0?k+1|0:k;d=(e|0)==(k|0)&d>>>0<m>>>0|k>>>0<e>>>0;e=c+d|0;if(e>>>0<d>>>0){n=1}d=e+p|0;m=n+y|0;h=d;k=j;m=d>>>0<e>>>0?m+1|0:m;j=m;d=(s|0)==(m|0)&d>>>0<B>>>0|m>>>0<s>>>0;e=d+z|0;if(e>>>0<d>>>0){k=k+1|0}d=e;e=k;d:{if((k|0)==131071|k>>>0<131071){m=h;y=0;w=0;n=ni(m,y,f,w);l=T;k=b<<17;b=0;c=(n|0)!=0|(l|0)!=0;p=b-c|0;G=k-(b>>>0<c>>>0)|0;x=0-n|0;t=0-((0<n>>>0)+l|0)|0;c=0;z=ni(j,c,f,w);b=T;E=b;v=0;l=ni(m,y,g,v);k=l+z|0;n=T+b|0;n=k>>>0<l>>>0?n+1|0:n;b=k;l=k;q=0;k=q;u=l;k=(l|0)==(t|0)&x>>>0<k>>>0|t>>>0<l>>>0;B=p-k|0;p=G-(p>>>0<k>>>0)|0;k=ni(d,0,f,w);l=T;s=ni(m,y,A,0);k=s+k|0;m=T+l|0;m=k>>>0<s>>>0?m+1|0:m;s=ni(g,v,j,c);k=s+k|0;l=T+m|0;l=k>>>0<s>>>0?l+1|0:l;m=l;l=(n|0)==(E|0)&b>>>0<z>>>0|n>>>0<E>>>0;b=n+k|0;l=l+m|0;l=b>>>0<n>>>0?l+1|0:l;n=b;b=l;m=ni(h,j,J,0);l=T;s=n;n=ni(f,g,e,0);m=n+m|0;k=T+l|0;k=m>>>0<n>>>0?k+1|0:k;n=ni(d,e,g,v);m=n+m|0;l=T+k|0;k=m;m=ni(j,c,A,H);c=k+m|0;k=c;m=0;c=s+m|0;k=b+k|0;b=c;A=B-b|0;H=p-((B>>>0<b>>>0)+(b>>>0<m>>>0?k+1|0:k)|0)|0;I=I+ -1|0;c=x-q|0;b=t-((x>>>0<q>>>0)+u|0)|0;break d}B=j>>>1|0;n=0;m=b<<16;c=0;l=d<<31;h=(j&1)<<31|h>>>1;j=j>>>1|l;z=0;E=0;b=ni(h,z,f,E);k=T;l=k;k=(b|0)!=0|(k|0)!=0;t=c-k|0;L=m-(c>>>0<k>>>0)|0;q=0-b|0;u=0-((0<b>>>0)+l|0)|0;p=0;x=ni(h,z,g,p);b=T;G=b;m=n;l=e<<31|d>>>1;n=d<<31|B;M=l|m;m=ni(n,0,f,E);c=m+x|0;k=T+b|0;k=c>>>0<m>>>0?k+1|0:k;b=k;k=c;w=k;y=0;m=(k|0)==(u|0)&q>>>0<y>>>0|u>>>0<k>>>0;C=t-m|0;t=L-(t>>>0<m>>>0)|0;m=ni(h,j,J,0);l=T;k=ni(f,g,e>>>1|0,0);m=k+m|0;l=T+l|0;l=m>>>0<k>>>0?l+1|0:l;d=(e&1)<<31|d>>>1;e=e>>>1|0;L=ni(d,e,g,p);m=L+m|0;k=T+l|0;l=ni(n,M,A,H);m=l+m|0;H=0;k=ni(g,p,n,P);l=T;v=ni(d,0,f,E);n=v+k|0;k=T+l|0;k=n>>>0<v>>>0?k+1|0:k;A=ni(h,z,A,0);n=A+n|0;l=T+k|0;l=n>>>0<A>>>0?l+1|0:l;A=n;n=((b|0)==(G|0)&c>>>0<x>>>0|b>>>0<G>>>0)+l|0;c=b;b=b+A|0;if(b>>>0<c>>>0){n=n+1|0}c=b;b=b+H|0;k=m+n|0;k=b>>>0<c>>>0?k+1|0:k;A=C-b|0;H=t-((C>>>0<b>>>0)+k|0)|0;c=q-y|0;b=u-((q>>>0<y>>>0)+w|0)|0}if((I|0)>=16384){D=D|2147418112;b=0;c=0;break b}m=I+16383|0;if((I|0)<=-16383){e:{if(m){break e}m=j;l=b<<1|c>>>31;n=c<<1;g=(g|0)==(l|0)&n>>>0>f>>>0|l>>>0>g>>>0;n=e&65535;f=A;l=H<<1|f>>>31;c=f<<1|b>>>31;e=c;b=(e|0)==(N|0)&(l|0)==(J|0)?g:(J|0)==(l|0)&e>>>0>N>>>0|l>>>0>J>>>0;c=b+h|0;if(c>>>0<b>>>0){m=m+1|0}b=c;e=b;c=m;e=d+((j|0)==(m|0)&e>>>0<h>>>0|m>>>0<j>>>0)|0;if(e>>>0<d>>>0){n=n+1|0}d=n;if(!(d&65536)){break e}K=e|K;D=d|D;break b}b=0;c=0;break b}k=j;e=e&65535;n=b<<1|c>>>31;s=c<<1;g=(g|0)==(n|0)&s>>>0>=f>>>0|n>>>0>g>>>0;f=A;n=H<<1|f>>>31;c=f<<1|b>>>31;b=(c|0)==(N|0)&(n|0)==(J|0)?g:(J|0)==(n|0)&c>>>0>=N>>>0|n>>>0>J>>>0;c=b+h|0;if(c>>>0<b>>>0){k=k+1|0}b=c;c=k;f=d;d=((j|0)==(k|0)&b>>>0<h>>>0|k>>>0<j>>>0)+d|0;k=m<<16|e;K=d|K;D=D|(d>>>0<f>>>0?k+1|0:k)}i[a>>2]=b;i[a+4>>2]=c;i[a+8>>2]=K;i[a+12>>2]=D;S=o+192|0;return}i[a>>2]=0;i[a+4>>2]=0;b=!(d|f|(e|g));i[a+8>>2]=b?0:K;i[a+12>>2]=b?2147450880:D;S=o+192|0}function Mf(a,b,c,d,e,f){var g=0,h=0,k=0,m=0,n=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;g=S-8976|0;S=g;y=d+e|0;E=0-y|0;a:{b:{while(1){if((c|0)!=48){c:{if((c|0)!=46){break a}c=i[b+4>>2];if(c>>>0>=l[b+104>>2]){break c}i[b+4>>2]=c+1;c=j[c|0];break b}}else{c=i[b+4>>2];if(c>>>0<l[b+104>>2]){k=1;i[b+4>>2]=c+1;c=j[c|0]}else{k=1;c=na(b)}continue}break}c=na(b)}p=1;if((c|0)!=48){break a}while(1){h=h+ -1|0;c=m+ -1|0;if((c|0)!=-1){h=h+1|0}m=c;c=i[b+4>>2];d:{if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break d}c=na(b)}if((c|0)==48){continue}break}k=1}i[g+784>>2]=0;e:{f:{s=(c|0)==46;r=c+ -48|0;g:{h:{i:{if(s|r>>>0<=9){while(1){j:{if(s&1){if(!p){m=n;h=q;p=1;break j}k=!k;break i}n=n+1|0;if(n>>>0<1){q=q+1|0}if((t|0)<=2044){x=(c|0)==48?x:n;k=(g+784|0)+(t<<2)|0;s=k;if(u){r=(o(i[k>>2],10)+c|0)+ -48|0}i[s>>2]=r;k=1;r=u+1|0;c=(r|0)==9;u=c?0:r;t=c+t|0;break j}if((c|0)==48){break j}i[g+8960>>2]=i[g+8960>>2]|1;x=18396}c=i[b+4>>2];k:{if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break k}c=na(b)}s=(c|0)==46;r=c+ -48|0;if(s|r>>>0<10){continue}break}}m=p?m:n;h=p?h:q;if(!(!k|(c&-33)!=69)){p=Id(b);c=T;s=c;l:{if(p|(c|0)!=-2147483648){break l}p=0;s=0;if(!i[b+104>>2]){break l}i[b+4>>2]=i[b+4>>2]+ -1}if(!k){break g}h=h+s|0;b=m+p|0;if(b>>>0<p>>>0){h=h+1|0}m=b;break f}k=!k;if((c|0)<0){break h}}if(!i[b+104>>2]){break h}i[b+4>>2]=i[b+4>>2]+ -1}if(!k){break f}}i[23646]=28;n=0;q=0;i[b+112>>2]=0;i[b+116>>2]=0;c=i[b+8>>2];d=c-i[b+4>>2]|0;i[b+120>>2]=d;i[b+124>>2]=d>>31;i[b+104>>2]=c;c=0;b=0;break e}b=i[g+784>>2];if(!b){La(g,+(f|0)*0);n=i[g>>2];q=i[g+4>>2];c=i[g+12>>2];b=i[g+8>>2];break e}if(!((n|0)!=(m|0)|(h|0)!=(q|0)|((q|0)>0?1:(q|0)>=0?n>>>0>9:0)|(b>>>d|0?(d|0)<=30:0))){wa(g+48|0,f);tb(g+32|0,b);ea(g+16|0,i[g+48>>2],i[g+52>>2],i[g+56>>2],i[g+60>>2],i[g+32>>2],i[g+36>>2],i[g+40>>2],i[g+44>>2]);n=i[g+16>>2];q=i[g+20>>2];c=i[g+28>>2];b=i[g+24>>2];break e}if((h|0)>0?1:(h|0)>=0?m>>>0>(e|0)/-2>>>0:0){i[23646]=68;wa(g+96|0,f);ea(g+80|0,i[g+96>>2],i[g+100>>2],i[g+104>>2],i[g+108>>2],-1,-1,-1,2147418111);ea(g- -64|0,i[g+80>>2],i[g+84>>2],i[g+88>>2],i[g+92>>2],-1,-1,-1,2147418111);n=i[g+64>>2];q=i[g+68>>2];c=i[g+76>>2];b=i[g+72>>2];break e}b=e+ -226|0;c=m>>>0<b>>>0;b=b>>31;if((h|0)<(b|0)?1:(h|0)<=(b|0)?c:0){i[23646]=68;wa(g+144|0,f);ea(g+128|0,i[g+144>>2],i[g+148>>2],i[g+152>>2],i[g+156>>2],0,0,0,65536);ea(g+112|0,i[g+128>>2],i[g+132>>2],i[g+136>>2],i[g+140>>2],0,0,0,65536);n=i[g+112>>2];q=i[g+116>>2];c=i[g+124>>2];b=i[g+120>>2];break e}if(u){if((u|0)<=8){c=(g+784|0)+(t<<2)|0;b=i[c>>2];while(1){b=o(b,10);u=u+1|0;if((u|0)!=9){continue}break}i[c>>2]=b}t=t+1|0}m:{p=m;if((x|0)>(p|0)|(x|0)>=9|(p|0)>17){break m}if((p|0)==9){wa(g+192|0,f);tb(g+176|0,i[g+784>>2]);ea(g+160|0,i[g+192>>2],i[g+196>>2],i[g+200>>2],i[g+204>>2],i[g+176>>2],i[g+180>>2],i[g+184>>2],i[g+188>>2]);n=i[g+160>>2];q=i[g+164>>2];c=i[g+172>>2];b=i[g+168>>2];break e}if((p|0)<=8){wa(g+272|0,f);tb(g+256|0,i[g+784>>2]);ea(g+240|0,i[g+272>>2],i[g+276>>2],i[g+280>>2],i[g+284>>2],i[g+256>>2],i[g+260>>2],i[g+264>>2],i[g+268>>2]);wa(g+224|0,i[(0-p<<2)+86352>>2]);Ed(g+208|0,i[g+240>>2],i[g+244>>2],i[g+248>>2],i[g+252>>2],i[g+224>>2],i[g+228>>2],i[g+232>>2],i[g+236>>2]);n=i[g+208>>2];q=i[g+212>>2];c=i[g+220>>2];b=i[g+216>>2];break e}b=(o(p,-3)+d|0)+27|0;c=i[g+784>>2];if(c>>>b|0?(b|0)<=30:0){break m}wa(g+352|0,f);tb(g+336|0,c);ea(g+320|0,i[g+352>>2],i[g+356>>2],i[g+360>>2],i[g+364>>2],i[g+336>>2],i[g+340>>2],i[g+344>>2],i[g+348>>2]);wa(g+304|0,i[(p<<2)+86280>>2]);ea(g+288|0,i[g+320>>2],i[g+324>>2],i[g+328>>2],i[g+332>>2],i[g+304>>2],i[g+308>>2],i[g+312>>2],i[g+316>>2]);n=i[g+288>>2];q=i[g+292>>2];c=i[g+300>>2];b=i[g+296>>2];break e}while(1){c=t;t=c+ -1|0;if(!i[(g+784|0)+(t<<2)>>2]){continue}break}u=0;b=(p|0)%9|0;n:{if(!b){k=0;break n}r=(p|0)>-1?b:b+9|0;o:{if(!c){k=0;c=0;break o}h=i[(0-r<<2)+86352>>2];q=1e9/(h|0)|0;s=0;b=0;k=0;while(1){m=s;n=(g+784|0)+(b<<2)|0;s=i[n>>2];t=(s>>>0)/(h>>>0)|0;m=m+t|0;i[n>>2]=m;m=!m&(b|0)==(k|0);k=m?k+1&2047:k;p=m?p+ -9|0:p;s=o(q,s-o(h,t)|0);b=b+1|0;if((c|0)!=(b|0)){continue}break}if(!s){break o}i[(g+784|0)+(c<<2)>>2]=s;c=c+1|0}p=(p-r|0)+9|0}while(1){x=(g+784|0)+(k<<2)|0;p:{while(1){if((p|0)!=36|l[x>>2]>=10384593?(p|0)>=36:0){break p}t=c+2047|0;s=0;r=c;while(1){c=r;n=t&2047;t=(g+784|0)+(n<<2)|0;b=i[t>>2];h=b>>>3|0;r=b<<29;b=r+s|0;q=b>>>0<r>>>0?h+1|0:h;m=b;h=q;r=0;q:{if(!h&b>>>0<1000000001|h>>>0<0){break q}r=oi(b,h,1e9);m=m-ni(r,T,1e9,0)|0}s=r;i[t>>2]=m;r=(n|0)!=(c+ -1&2047)?c:(n|0)==(k|0)?c:m?c:n;t=n+ -1|0;if((n|0)!=(k|0)){continue}break}u=u+ -29|0;if(!s){continue}break}k=k+ -1&2047;if((r|0)==(k|0)){b=(g+784|0)+((r+2046&2047)<<2)|0;c=r+ -1&2047;i[b>>2]=i[b>>2]|i[(g+784|0)+(c<<2)>>2]}p=p+9|0;i[(g+784|0)+(k<<2)>>2]=s;continue}break}r:{s:while(1){h=c+1&2047;q=(g+784|0)+((c+ -1&2047)<<2)|0;while(1){m=(p|0)>45?9:1;t:{while(1){r=k;b=0;u:{while(1){v:{k=b+r&2047;if((k|0)==(c|0)){break v}k=i[(g+784|0)+(k<<2)>>2];n=i[(b<<2)+86304>>2];if(k>>>0<n>>>0){break v}if(k>>>0>n>>>0){break u}b=b+1|0;if((b|0)!=4){continue}}break}if((p|0)!=36){break u}m=0;h=0;b=0;n=0;q=0;while(1){k=b+r&2047;if((k|0)==(c|0)){c=c+1&2047;i[((c<<2)+g|0)+780>>2]=0}ea(g+768|0,m,h,n,q,0,0,1342177280,1075633366);tb(g+752|0,i[(g+784|0)+(k<<2)>>2]);va(g+736|0,i[g+768>>2],i[g+772>>2],i[g+776>>2],i[g+780>>2],i[g+752>>2],i[g+756>>2],i[g+760>>2],i[g+764>>2]);n=i[g+744>>2];q=i[g+748>>2];m=i[g+736>>2];h=i[g+740>>2];b=b+1|0;if((b|0)!=4){continue}break}wa(g+720|0,f);ea(g+704|0,m,h,n,q,i[g+720>>2],i[g+724>>2],i[g+728>>2],i[g+732>>2]);n=i[g+712>>2];q=i[g+716>>2];m=0;h=0;p=i[g+704>>2];s=i[g+708>>2];t=u+113|0;e=t-e|0;k=(e|0)<(d|0);d=k?(e|0)>0?e:0:d;if((d|0)<=112){break t}break r}u=m+u|0;k=c;if((c|0)==(r|0)){continue}break}n=1e9>>>m|0;s=-1<<m^-1;b=0;k=r;while(1){t=(g+784|0)+(r<<2)|0;x=i[t>>2];b=(x>>>m|0)+b|0;i[t>>2]=b;b=!b&(k|0)==(r|0);k=b?k+1&2047:k;p=b?p+ -9|0:p;b=o(n,s&x);r=r+1&2047;if((r|0)!=(c|0)){continue}break}if(!b){continue}if((h|0)!=(k|0)){i[(g+784|0)+(c<<2)>>2]=b;c=h;continue s}i[q>>2]=i[q>>2]|1;k=h;continue}break}break}La(g+656|0,Xb(1,225-d|0));Ld(g+688|0,i[g+656>>2],i[g+660>>2],i[g+664>>2],i[g+668>>2],p,s,n,q);z=i[g+696>>2];A=i[g+700>>2];B=i[g+688>>2];C=i[g+692>>2];La(g+640|0,Xb(1,113-d|0));zd(g+672|0,p,s,n,q,i[g+640>>2],i[g+644>>2],i[g+648>>2],i[g+652>>2]);m=i[g+672>>2];h=i[g+676>>2];v=i[g+680>>2];w=i[g+684>>2];Cc(g+624|0,p,s,n,q,m,h,v,w);va(g+608|0,B,C,z,A,i[g+624>>2],i[g+628>>2],i[g+632>>2],i[g+636>>2]);n=i[g+616>>2];q=i[g+620>>2];p=i[g+608>>2];s=i[g+612>>2]}b=r+4&2047;w:{if((b|0)==(c|0)){break w}b=i[(g+784|0)+(b<<2)>>2];x:{if(b>>>0<=499999999){if((r+5&2047)==(c|0)?!b:0){break x}La(g+496|0,+(f|0)*.25);va(g+480|0,m,h,v,w,i[g+496>>2],i[g+500>>2],i[g+504>>2],i[g+508>>2]);v=i[g+488>>2];w=i[g+492>>2];m=i[g+480>>2];h=i[g+484>>2];break x}if((b|0)!=5e8){La(g+592|0,+(f|0)*.75);va(g+576|0,m,h,v,w,i[g+592>>2],i[g+596>>2],i[g+600>>2],i[g+604>>2]);v=i[g+584>>2];w=i[g+588>>2];m=i[g+576>>2];h=i[g+580>>2];break x}D=+(f|0);if((r+5&2047)==(c|0)){La(g+528|0,D*.5);va(g+512|0,m,h,v,w,i[g+528>>2],i[g+532>>2],i[g+536>>2],i[g+540>>2]);v=i[g+520>>2];w=i[g+524>>2];m=i[g+512>>2];h=i[g+516>>2];break x}La(g+560|0,D*.75);va(g+544|0,m,h,v,w,i[g+560>>2],i[g+564>>2],i[g+568>>2],i[g+572>>2]);v=i[g+552>>2];w=i[g+556>>2];m=i[g+544>>2];h=i[g+548>>2]}if((d|0)>111){break w}zd(g+464|0,m,h,v,w,0,0,0,1073676288);if(ib(i[g+464>>2],i[g+468>>2],i[g+472>>2],i[g+476>>2],0,0,0,0)){break w}va(g+448|0,m,h,v,w,0,0,0,1073676288);v=i[g+456>>2];w=i[g+460>>2];m=i[g+448>>2];h=i[g+452>>2]}va(g+432|0,p,s,n,q,m,h,v,w);Cc(g+416|0,i[g+432>>2],i[g+436>>2],i[g+440>>2],i[g+444>>2],B,C,z,A);n=i[g+424>>2];q=i[g+428>>2];p=i[g+416>>2];s=i[g+420>>2];y:{if((t&2147483647)<=(-2-y|0)){break y}i[g+408>>2]=n;i[g+412>>2]=q&2147483647;i[g+400>>2]=p;i[g+404>>2]=s;ea(g+384|0,p,s,n,q,0,0,0,1073610752);c=Fd(i[g+400>>2],i[g+404>>2],i[g+408>>2],i[g+412>>2],1081081856);b=(c|0)<0;n=b?n:i[g+392>>2];q=b?q:i[g+396>>2];p=b?p:i[g+384>>2];s=b?s:i[g+388>>2];u=((c|0)>-1)+u|0;if(F=!(k&(b|(d|0)!=(e|0))&(ib(m,h,v,w,0,0,0,0)|0)!=0),G=0,H=(u+110|0)<=(E|0),H?F:G){break y}i[23646]=68}Kd(g+368|0,p,s,n,q,u);n=i[g+368>>2];q=i[g+372>>2];c=i[g+380>>2];b=i[g+376>>2]}i[a>>2]=n;i[a+4>>2]=q;i[a+8>>2]=b;i[a+12>>2]=c;S=g+8976|0}function Tb(a,b,c,d,e){var f=0,g=0,h=0,k=0,l=0,m=0;f=S-496|0;S=f;i[22484]=0;Ub(c,d,e,f+488|0,f+484|0,f+476|0,f+480|0,f+472|0,f+468|0);a:{b:{c:{d:{e:{f:{g:{switch(b|0){case 1:i[f+16>>2]=i[f+488>>2];V(a,9033,13110,f+16|0);break a;case 3:i[f+32>>2]=i[f+488>>2];V(a,9034,13110,f+32|0);break a;case 4:if(!i[22454]){ec(2)}i[f+52>>2]=i[f+488>>2];i[f+48>>2]=i[22007];V(a,9035,13233,f+48|0);break a;case 5:case 6:if(!c){break a}b=Ja(c,d,e);i[f+64>>2]=13240;i[f+492>>2]=b;V(a,9244,15054,f- -64|0);h:{if(!b){break h}g=i[b+4>>2];if(!g){break h}c=b+4|0;while(1){xc(a,g);g=i[c+4>>2];c=c+4|0;if(g){continue}break}}_(f+492|0);break a;case 7:b=i[22007];if((b|0)>4|(i[21999]?(b|0)==4:0)){break f}i:{if((b|0)==2){if(!(i[21875]|i[21956])){break i}V(i[22423],7049,13262,0);b=i[22007]}if((b|0)!=4|(!i[21916]|i[21918]!=4?!(i[21925]|i[21921]):0)){break i}V(i[22423],7050,13337,0)}g=i[21918];if(!(!i[21957]|(g|0)!=4)){V(i[22423],7051,13419,0);g=i[21918]}if(!(!i[21923]|(!i[21875]|(g|0)!=4))){V(i[22423],7052,13478,0);g=i[21918]}j:{k:{switch(g+ -2|0){case 0:i[f+164>>2]=88056;i[f+160>>2]=88316;V(a,9036,13527,f+160|0);break j;case 1:i[f+180>>2]=88056;i[f+176>>2]=88316;V(a,9037,13569,f+176|0);break j;case 2:break k;default:break j}}i[22492]=i[22492]+1;i[f+492>>2]=0;l:{if(!c){break l}g=c;while(1){if(!i[g+48>>2]){break l}uc(0,g,f+492|0,e);g=i[g+48>>2];if(g){continue}break}}m:{if(!d){break m}g=i[d+4>>2];if(!g){break m}b=d+4|0;while(1){uc(0,g,f+492|0,e);g=i[b+4>>2];b=b+4|0;if(g){continue}break}}i[22528]=i[f+492>>2];i[22483]=0;i[f+192>>2]=88316;i[f+196>>2]=88056;V(a,9038,13624,f+192|0)}if(!i[21919]){break b}i[22484]=i[22484]+1;b=i[22009]+W(i[22500])|0;i[f+492>>2]=b;if(!(!i[21874]|!i[21863])){b=b+ -1|0;i[f+492>>2]=b}n:{if(i[21918]==4){i[f+132>>2]=b;i[f+128>>2]=b;V(a,9039,13640,f+128|0);break n}i[f+148>>2]=b;i[f+144>>2]=b;V(a,9040,13655,f+144|0)}if(!b){break e}g=b;while(1){g=g+ -1|0;if(!((g|0)%20|0)){V(a,9041,13098,0)}V(a,9042,13230,0);if(g){continue}break}V(a,9043,13669,0);if((b|0)==1){break c}break d;case 8:i[f+208>>2]=i[f+488>>2];V(a,9049,13110,f+208|0);break a;case 14:if(!(!i[21999]|!i[21926])){V(i[22423],7053,13755,0)}i[22483]=i[22449];if(i[22007]<=3){i[f+224>>2]=i[f+488>>2];V(a,9050,13110,f+224|0);break a}i[f+240>>2]=i[f+480>>2]+i[f+484>>2];V(a,9051,13110,f+240|0);break a;case 9:case 11:case 12:if(i[21867]){i[f+272>>2]=88316;i[f+276>>2]=88056;i[f+280>>2]=i[f+488>>2];i[f+284>>2]=i[22007]+1;V(a,9052,13895,f+272|0);break a}i[f+260>>2]=i[f+488>>2];i[f+256>>2]=i[22007]+1;V(a,9053,13233,f+256|0);break a;case 13:case 15:if(i[22007]>3){break f}if(i[21999]){V(i[22423],7054,13925,0)}o:{if((b|0)==13){if(i[22007]==2){V(a,9054,13978,0);break o}V(a,9055,13992,0);break o}V(a,9056,14010,0)}i[22483]=0;break a;case 16:i[f+288>>2]=i[f+488>>2];V(a,9057,13110,f+288|0);break a;case 19:i[f+308>>2]=i[f+488>>2];i[f+304>>2]=i[22007];V(a,9058,13233,f+304|0);break a;case 10:i[f+320>>2]=i[f+488>>2];V(a,9059,13110,f+320|0);break a;case 17:case 25:if(i[21999]){break f}k=i[22007];c=i[22009]+W(i[22500])|0;p:{if(!((k|0)!=2?(b|0)!=17:0)){i[f+368>>2]=k;i[f+372>>2]=c;i[f+376>>2]=i[f+488>>2];i[f+380>>2]=i[f+476>>2]/2;V(a,9060,14013,f+368|0);break p}i[22483]=c;if(i[21874]){k=k+ -1|0;i[f+492>>2]=k}i[f+384>>2]=k;d=i[f+484>>2];i[f+392>>2]=d+i[f+480>>2];i[f+396>>2]=i[f+476>>2]/2;i[f+388>>2]=(c+i[f+488>>2]|0)-d;V(a,9061,14013,f+384|0)}a=i[22007];c=o(a,i[22009]);q:{if((c|0)<1){break q}e=i[22010];c=e+(c<<3)|0;if(!k){while(1){if(e){V(i[22422],9215,13098,0);a=i[22007]}e=(a<<3)+e|0;if(e>>>0<c>>>0){continue}break q}}while(1){if(e){d=i[22422];g=k;a=e;while(1){n[f+352>>3]=n[a>>3];V(d,9214,13090,f+352|0);a=a+8|0;g=g+ -1|0;if(g){continue}break}V(d,9215,13098,0);a=i[22007]}e=(a<<3)+e|0;if(e>>>0<c>>>0){continue}break}}c=i[22500];r:{if(!c){break r}a=i[c+4>>2];if(!a){break r}e=c+4|0;if(!k){while(1){V(i[22422],9215,13098,0);a=i[e+4>>2];e=e+4|0;if(a){continue}break r}}while(1){c=i[22422];g=k;while(1){n[f+336>>3]=n[a>>3];V(c,9214,13090,f+336|0);a=a+8|0;g=g+ -1|0;if(g){continue}break}V(c,9215,13098,0);a=i[e+4>>2];e=e+4|0;if(a){continue}break}}if((b|0)!=25|i[22007]<3){break a}a=i[22428];if(!a){break a}while(1){b=a;a=i[b+48>>2];if(!a){break a}if(!(!i[b+72>>2]|j[b+81|0]&32)){ab(i[22422],25,0,b);a=i[b+48>>2]}if(a){continue}break}break a;case 20:i[f+400>>2]=i[f+472>>2];V(a,9062,13110,f+400|0);break a;case 21:if(!i[21999]){break f}if(i[21867]){i[f+432>>2]=88316;i[f+436>>2]=88056;i[f+440>>2]=i[f+488>>2];i[f+444>>2]=i[22007];V(a,9063,14026,f+432|0);break a}i[f+420>>2]=i[f+488>>2];i[f+416>>2]=i[22007]+ -1;V(a,9064,13233,f+416|0);break a;case 0:break a;case 26:break g;default:break f}}i[f+448>>2]=i[f+488>>2];V(a,9065,13110,f+448|0);break a}i[f>>2]=i[22007];V(i[22423],6068,14052,f);X(5,0,0);break a}V(a,9043,13669,0)}b=b+ -2|0;while(1){g=b;if(!((b|0)%20|0)){V(a,9044,13098,0)}V(a,9045,13691,0);b=g+ -1|0;if(g){continue}break}}V(a,9046,13694,0);b=o(i[22009],i[22007]);if((b|0)>=1){k=i[22010];m=k+(b<<3)|0;while(1){s:{if(!(!i[21874]|!i[21863])){if((Y(k)|0)==(i[22009]+ -1|0)){break s}}if(i[21918]==4){Y(k);if(!k){break s}g=k;b=i[22007];if(b){while(1){n[f+112>>3]=n[g>>3];V(a,9214,13090,f+112|0);g=g+8|0;b=b+ -1|0;if(b){continue}break}}V(a,9215,13098,0);break s}tc(a,k)}k=(i[22007]<<3)+k|0;if(k>>>0<m>>>0){continue}break}}b=i[22500];t:{if(!b){break t}g=i[b+4>>2];if(!g){break t}k=b+8|0;while(1){u:{if(i[21918]==4){Y(g);b=i[22007];if(b){while(1){n[f+96>>3]=n[g>>3];V(a,9214,13090,f+96|0);g=g+8|0;b=b+ -1|0;if(b){continue}break}}V(a,9215,13098,0);break u}tc(a,g)}g=i[k>>2];k=k+4|0;if(g){continue}break}}V(a,9047,13713,0)}if(!(i[21923]|i[21918]!=4)){b=i[22528];i[f+84>>2]=b;i[f+80>>2]=o(b,3);V(a,9048,13741,f+80|0)}h=n[11144];l=h+h;n[11239]=l;b=i[21915];v:{if(b){h=h+n[10950];if(l<h^1){break v}n[11239]=h;l=h;break v}if(!i[21914]){break v}h=h+n[10951];if(l<h^1){break v}n[11239]=h;l=h}n[11240]=l;k=i[21957];g=i[21917];w:{if((k|0)==(0-g|0)){break w}h=n[11145]*.02;if(l<h^1){break w}n[11240]=h;l=h}h=n[10935];x:{if(!(h<8.988465674311579e+307^1)){h=(1-h)*n[11145];if(l<h^1){break x}n[11240]=h;l=h;break x}if(!i[21914]|b){break x}h=n[10936];if(h<8.988465674311579e+307^1){break x}h=(1-h)*n[11145];if(l<h^1){break x}n[11240]=h;l=h}h=n[10953];if(!(l<h^1)){n[11240]=h;l=h}h=n[11231];if(!(h<8.988465674311579e+307^1)){n[11240]=l+h*w(+i[22007])}if(!(!(i[21916]|(g|k))|i[21918]==4)){b=Ja(c,d,e);i[f+464>>2]=b;if(!(!i[21957]|i[21918]>3)){bi(a,b,n[11240])}g=i[21917];y:{if(!(g|i[21916])){break y}i[22509]=1;z:{if(!b|(i[21957]|!g)){break z}g=i[b+4>>2];if(!g){break z}b=b+4|0;while(1){Qb(a,i[g+8>>2],0,i[22424],n[11240]);g=i[b+4>>2];b=b+4|0;if(g){continue}break}}A:{if(!c){break A}while(1){if(!i[c+48>>2]){break A}B:{C:{if(e){break C}D:{if(i[21922]){b=i[21920];if(j[c+82|0]&8){break D}b=i[c+60>>2];if(!b){break B}g=b+4|0;while(1){b=i[g>>2];if(!b){break B}g=g+4|0;if(!(j[b+82|0]&8)){continue}break}break C}b=i[c+80>>2]&524288;if(i[21920]){break D}b=i[c+24>>2];if(!b){break B}b=qa(b,0)}if(!b){break B}}if(!i[c+24>>2]){break B}if(!(!i[21916]|i[21918]>3)){Ie(a,c,n[11239])}if(!i[21917]){break B}b=i[c+68>>2];E:{if(!b){break E}g=i[b+4>>2];if(!g){break E}b=b+4|0;while(1){Qb(a,g,i[c+24>>2],0,n[11240]);g=i[b+4>>2];b=b+4|0;if(g){continue}break}}b=i[c+64>>2];if(!b){break B}g=i[b+4>>2];if(!g){break B}b=b+4|0;while(1){Qb(a,g,i[c+24>>2],0,n[11240]);g=i[b+4>>2];b=b+4|0;if(g){continue}break}}c=i[c+48>>2];if(c){continue}break}}if(!d){break y}b=i[d+4>>2];if(!b){break y}g=d+8|0;while(1){d=g;F:{G:{if(e){break G}H:{if(i[21922]){c=i[21920];if(j[b+82|0]&8){break H}c=i[b+60>>2];if(!c){break F}g=c+4|0;while(1){c=i[g>>2];if(!c){break F}g=g+4|0;if(!(j[c+82|0]&8)){continue}break}break G}c=i[b+80>>2]&524288;if(i[21920]){break H}c=i[b+24>>2];if(!c){break F}c=qa(c,0)}if(!c){break F}}if(!i[b+24>>2]){break F}if(!(!i[21916]|i[21918]>3)){Ie(a,b,n[11239])}if(!i[21917]){break F}c=i[b+68>>2];I:{if(!c){break I}g=i[c+4>>2];if(!g){break I}c=c+4|0;while(1){Qb(a,g,i[b+24>>2],0,n[11240]);g=i[c+4>>2];c=c+4|0;if(g){continue}break}}c=i[b+64>>2];if(!c){break F}g=i[c+4>>2];if(!g){break F}c=c+4|0;while(1){Qb(a,g,i[b+24>>2],0,n[11240]);g=i[c+4>>2];c=c+4|0;if(g){continue}break}}g=d+4|0;b=i[d>>2];if(b){continue}break}}_(f+464|0)}i[22492]=i[22492]+1}S=f+496|0}function Xc(a,b,c){var d=0,e=0,f=0,h=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=S-464|0;S=e;t=i[22007];if(i[21886]>=4){i[e+448>>2]=i[a+76>>2];i[e+452>>2]=b;V(i[22423],4088,54700,e+448|0)}k=i[a+76>>2];d=i[22447];if(k>>>0>=d>>>0){i[e+432>>2]=k;i[e+436>>2]=d;V(i[22423],6414,54739,e+432|0);p=1}k=i[a+72>>2];d=i[22492];if(k>>>0>d>>>0){i[e+416>>2]=i[a+76>>2];i[e+420>>2]=d;i[e+424>>2]=k;V(i[22423],6415,54819,e+416|0);p=1}d=i[a+80>>2];if(!(i[22473]|!(d&2048))){i[e+400>>2]=i[a+76>>2];V(i[22423],6119,54917,e+400|0);X(5,a,0);d=i[a+80>>2]}a:{if((d&-2147481600)!=-2147483648){break a}if(W(i[22497])){break a}i[e+384>>2]=i[a+76>>2];V(i[22423],6399,54988,e+384|0);p=1}b:{if((i[a+80>>2]&1073743872)!=1073741824){break b}if(W(i[22497])){break b}i[e+368>>2]=i[a+76>>2];V(i[22423],6400,55070,e+368|0);p=1}if(!i[a+24>>2]){i[e+352>>2]=i[a+76>>2];V(i[22423],6120,55187,e+352|0);p=1}d=i[a+80>>2];c:{if(d&1024){break c}if(d&2097152){h=i[a+76>>2];m=i[22423];d=e;k=i[22431];f=-1;d:{if(!k){break d}f=i[k+76>>2]}i[d+340>>2]=f;i[e+336>>2]=h;V(m,6349,55259,e+336|0);p=1;d=i[a+80>>2]}if(!(d&536870912)){break c}h=i[a+76>>2];m=i[22423];d=e;k=i[22431];f=-1;e:{if(!k){break e}f=i[k+76>>2]}i[d+324>>2]=f;i[e+320>>2]=h;V(m,6383,55365,e+320|0);p=1}mb(i[a+52>>2],55507,i[a+76>>2]);mb(i[a+56>>2],55522,i[a+76>>2]);mb(i[a+64>>2],55535,i[a+76>>2]);mb(i[a+68>>2],55552,i[a+76>>2]);mb(i[a+60>>2],55570,i[a+76>>2]);d=i[a+52>>2];f:{if(!d){break f}f=d+4|0;h=2147483647;while(1){k=i[f>>2];if(!k){break f}if(j[k+24|0]&4){d=i[a+76>>2];i[e+304>>2]=i[k+16>>2];i[e+308>>2]=d;V(i[22423],6121,55586,e+304|0);ma(55651,0,0,0,k);p=1}f=f+4|0;d=i[k+16>>2];k=d>>>0<h>>>0;h=d;if(k){continue}break}i[e+288>>2]=i[a+76>>2];i[e+292>>2]=h;V(i[22423],6122,55661,e+288|0);p=1}h=W(i[a+60>>2]);m=W(i[a+52>>2]);k=W(i[a+56>>2]);d=i[a+80>>2];g:{h:{if(d&8192){if((h+m|0)==i[22007]<<1|d>>>0>1073741823){break g}i[e+272>>2]=i[a+76>>2];i[e+276>>2]=m;i[e+280>>2]=h;V(i[22423],6123,55754,e+272|0);Ua(i[22423],51491,i[a+60>>2]);break h}i:{if(d>>>0>1073741823|b){break i}d=i[22007];if(!((m|0)<(d|0)|(h|0)<(d|0))){break i}i[e+256>>2]=i[a+76>>2];i[e+260>>2]=m;i[e+264>>2]=h;V(i[22423],6124,55865,e+256|0);p=1}j:{if((k|0)<(h|0)){break j}k:{switch(i[22007]+ -2|0){case 1:if((m|0)<=(k|0)){break g}if(!i[22472]){break j}break g;case 0:break k;default:break g}}if((k+(h+m|0)|0)==6){break g}}if(l[a+80>>2]>1073741823){break g}i[e+240>>2]=i[a+76>>2];i[e+244>>2]=k;i[e+248>>2]=h;i[e+252>>2]=m;V(i[22423],6125,55963,e+240|0)}p=1}k=0;f=i[a+60>>2];l:{if(!f){m=0;break l}d=i[f+4>>2];m:{if(!d){m=0;break m}f=f+8|0;m=0;while(1){if(d+ -1>>>0<=1){i[e+224>>2]=i[a+76>>2];V(i[22423],6126,56085,e+224|0);X(5,a,0)}h=i[d+80>>2];if(h&2048){m=i[d+76>>2];i[e+208>>2]=i[a+76>>2];i[e+212>>2]=m;V(i[22423],6401,56184,e+208|0);h=i[d+80>>2];p=1;m=d}i[d+80>>2]=h|16384;d=i[f>>2];f=f+4|0;if(d){continue}break}f=i[a+60>>2];if(!f){break l}}d=i[f+4>>2];if(!d){break l}f=f+8|0;while(1){if(!da(i[d+60>>2],a)){h=i[d+76>>2];m=i[a+76>>2];i[e+192>>2]=m;i[e+196>>2]=h;i[e+200>>2]=h;i[e+204>>2]=m;V(i[22423],6127,56276,e+192|0);p=1;m=d}h=i[d+80>>2];if(!(h&16384)){m=i[d+76>>2];i[e+176>>2]=i[a+76>>2];i[e+180>>2]=m;V(i[22423],6128,56378,e+176|0);h=i[d+80>>2];p=1;m=d}i[d+80>>2]=h&-16385;d=i[f>>2];f=f+4|0;if(d){continue}break}}f=i[a+56>>2];n:{if(!f){break n}d=i[f+4>>2];if(d){f=f+4|0;while(1){mb(i[d>>2],56456,i[d+12>>2]);g[d+16|0]=j[d+16|0]&254;d=i[f+4>>2];f=f+4|0;if(d){continue}break}f=i[a+56>>2];if(!f){break n}}d=i[f+4>>2];if(!d){break n}f=f+8|0;while(1){h=f;f=j[d+16|0];if(f&1){k=i[d+12>>2];i[e+160>>2]=i[a+76>>2];i[e+164>>2]=k;V(i[22423],6129,56471,e+160|0);f=j[d+16|0];p=1;k=d}g[d+16|0]=f|1;f=W(i[d>>2]);if((f|0)!=(i[22007]+ -1|0)){k=i[i[d+8>>2]+76>>2];i[e+144>>2]=i[i[d+4>>2]+76>>2];i[e+148>>2]=k;i[e+152>>2]=f;V(i[22423],6130,56546,e+144|0);p=1;k=d}f=i[d+4>>2];if((f|0)==(a|0)){f=i[d+8>>2]}i[f+80>>2]=i[f+80>>2]|16384;if(!da(i[a+60>>2],f)){n=i[d+12>>2];k=i[f+76>>2];i[e+128>>2]=i[a+76>>2];i[e+132>>2]=k;i[e+136>>2]=n;V(i[22423],6131,56627,e+128|0);p=1;k=d}o:{if(j[a+81|0]&4|j[f+81|0]&4){break o}n=j[d+16|0];o=n>>>3&1;s=n>>>2&1;r=n>>>1&1;if(!(o|s|r^1)){break o}n=i[d+12>>2];k=i[f+76>>2];i[e+112>>2]=i[a+76>>2];i[e+116>>2]=k;i[e+96>>2]=n;i[e+100>>2]=s;i[e+104>>2]=o;i[e+108>>2]=r;V(i[22423],6384,56720,e+96|0);p=1;k=d}f=h+4|0;d=i[h>>2];if(d){continue}break}}d=i[a+60>>2];p:{if(!(j[a+81|0]&32)){if(!d){break p}o=i[d+4>>2];if(!o){break p}d=d+8|0;while(1){if(!(j[o+81|0]&64)){m=i[o+76>>2];i[e+64>>2]=i[a+76>>2];i[e+68>>2]=m;V(i[22423],6132,56852,e- -64|0);p=1;m=o}s=d;h=i[o+52>>2];n=i[a+52>>2];f=Ba(i[22007]+ -1|0);i[e+460>>2]=f;d=i[n+4>>2];if(d){q=n+4|0;h=h+4|0;while(1){f=i[h>>2];if(f){q:{if((d|0)==(f|0)){Z(e+460|0,d);h=h+4|0;q=q+4|0;break q}if(l[d+16>>2]>l[f+16>>2]){q=q+4|0;break q}h=h+4|0}d=i[q>>2];if(d){continue}}break}f=i[e+460>>2]}i[e+456>>2]=f;kb(f);h=i[a+52>>2];r:{if(!h){break r}d=i[h+4>>2];if(!d){break r}f=h+4|0;while(1){g[d+24|0]=j[d+24|0]&252;d=i[f+4>>2];f=f+4|0;if(d){continue}break}}h=i[e+456>>2];s:{if(!h){break s}d=i[h+4>>2];if(!d){break s}f=h+4|0;while(1){g[d+24|0]=j[d+24|0]|1;d=i[f+4>>2];f=f+4|0;if(d){continue}break}}d=i[a+56>>2];t:{if(!d){break t}q=i[d+4>>2];if(!q){break t}d=d+8|0;while(1){r=d;d=i[q+4>>2];if((d|0)==(a|0)){d=i[q+8>>2]}u:{if((d|0)!=(o|0)){break u}h=i[q>>2];if(!h){break u}d=i[h+4>>2];if(!d){break u}f=h+8|0;while(1){n=d;h=j[d+24|0];if(!(h&1)){u=i[o+76>>2];v=i[a+76>>2];h=i[q+12>>2];i[e+48>>2]=i[d+16>>2];i[e+52>>2]=h;i[e+56>>2]=v;i[e+60>>2]=u;V(i[22423],6133,56940,e+48|0);X(5,a,q);h=j[d+24|0]}g[n+24|0]=h|2;d=i[f>>2];f=f+4|0;if(d){continue}break}}d=r+4|0;q=i[r>>2];if(q){continue}break}}v:{if(b){break v}d=i[e+456>>2];if(!d){break v}f=i[d+4>>2];if(!f){break v}h=d+8|0;while(1){d=h;w:{if(j[f+24|0]&2){break w}if(!i[21899]){n=i[o+76>>2];h=i[a+76>>2];i[e+16>>2]=i[f+16>>2];i[e+20>>2]=h;i[e+24>>2]=n;i[e+28>>2]=i[22455];V(i[22423],6420,57022,e+16|0);if(i[21878]){break w}ma(55651,a,o,0,f);X(7,0,0);break w}if(i[21886]<4){break w}n=i[o+76>>2];h=i[a+76>>2];i[e+32>>2]=i[f+16>>2];i[e+36>>2]=h;i[e+40>>2]=n;V(i[22423],4025,57133,e+32|0)}h=d+4|0;f=i[d>>2];if(f){continue}break}}d=s+4|0;_(e+456|0);o=i[s>>2];if(o){continue}break}break p}if(!d){break p}f=i[d+4>>2];if(!f){break p}h=d+8|0;while(1){d=h;h=i[f+80>>2];x:{if(!(h&8192)|(h|i[a+80>>2])&1073741824){break x}h=(d-i[a+60>>2]|0)+ -8|0;n=h>>2;o=h;h=eb(i[f+60>>2],a);if((o|h)>=0){if(Xd(i[a+52>>2],n,i[f+52>>2],h)){break x}}m=i[f+76>>2];i[e+80>>2]=i[a+76>>2];i[e+84>>2]=n;i[e+88>>2]=m;i[e+92>>2]=h;V(i[22423],6135,57259,e+80|0);p=1;m=f}h=d+4|0;f=i[d>>2];if(f){continue}break}}y:{if(!i[21868]|b|(i[22007]>4|(i[21869]?0:i[21886]<=2))){break y}d=i[a+56>>2];if(!d){break y}b=i[d+4>>2];o=W(d);if((o|0)<1){break y}h=0;s=t+ -2<<2;while(1){h=h+1|0;if(!(j[b+16|0]&8|(h|0)>=(o|0))){d=h;while(1){r=i[b>>2];n=i[(i[a+56>>2]+(d<<2)|0)+4>>2];f=i[n>>2];z:{if(i[(r+s|0)+4>>2]!=i[(f+s|0)+4>>2]|i[r+4>>2]!=i[f+4>>2]){break z}if(!Pc(r,f)){break z}f=i[a+76>>2];k=i[n+12>>2];i[e>>2]=i[b+12>>2];i[e+4>>2]=k;i[e+8>>2]=f;V(i[22423],6294,57355,e);p=1;k=b}d=d+1|0;if((o|0)!=(d|0)){continue}break}}b=i[(i[a+56>>2]+(h<<2)|0)+4>>2];if((h|0)!=(o|0)){continue}break}}if(p){ma(55651,a,m,k,0);i[c>>2]=1}S=e+464|0}function $f(a,b,c,d,e,f){a=a|0;b=+b;c=c|0;d=d|0;e=e|0;f=f|0;var h=0,k=0,l=0,m=0,n=0,p=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;p=S-560|0;S=p;i[p+44>>2]=0;vi(+b);h=si(1)|0;si(0)|0;a:{if((h|0)<-1?1:(h|0)<=-1){B=1;b=-b;vi(+b);h=si(1)|0;si(0)|0;w=86096;break a}B=1;w=86099;if(e&2048){break a}w=86102;if(e&1){break a}B=0;A=1;w=86097}b:{if((h&2146435072)==2146435072){n=B+3|0;ra(a,32,c,n,e&-65537);pa(a,w,B);d=f&32;pa(a,b!=b?d?86123:86127:d?86115:86119,3);break b}x=p+16|0;c:{d:{e:{b=Rd(b,p+44|0);b=b+b;if(b!=0){h=i[p+44>>2];i[p+44>>2]=h+ -1;C=f|32;if((C|0)!=97){break e}break c}C=f|32;if((C|0)==97){break c}n=i[p+44>>2];r=(d|0)<0?6:d;break d}n=h+ -29|0;i[p+44>>2]=n;b=b*268435456;r=(d|0)<0?6:d}s=(n|0)<0?p+48|0:p+336|0;m=s;while(1){d=m;if(b<4294967296&b>=0){h=~~b>>>0}else{h=0}i[d>>2]=h;m=m+4|0;b=(b- +(h>>>0))*1e9;if(b!=0){continue}break}f:{if((n|0)<1){d=n;h=m;k=s;break f}k=s;d=n;while(1){t=(d|0)<29?d:29;h=m+ -4|0;g:{if(h>>>0<k>>>0){break g}d=t;l=0;while(1){v=h;D=l;E=i[h>>2];u=d&31;if(32<=(d&63)>>>0){l=E<<u;E=0}else{l=(1<<u)-1&E>>>32-u;E=E<<u}u=D+E|0;l=l+F|0;l=u>>>0<E>>>0?l+1|0:l;l=oi(u,l,1e9);D=v;v=ni(l,T,1e9,0);i[D>>2]=u-v;h=h+ -4|0;if(h>>>0>=k>>>0){continue}break}if(!l){break g}k=k+ -4|0;i[k>>2]=l}while(1){h=m;if(h>>>0>k>>>0){m=h+ -4|0;if(!i[m>>2]){continue}}break}d=i[p+44>>2]-t|0;i[p+44>>2]=d;m=h;if((d|0)>0){continue}break}}if((d|0)<=-1){y=((r+25|0)/9|0)+1|0;t=(C|0)==102;while(1){l=(d|0)<-9?9:0-d|0;h:{if(k>>>0>=h>>>0){k=i[k>>2]?k:k+4|0;break h}v=1e9>>>l|0;u=-1<<l^-1;d=0;m=k;while(1){D=d;d=i[m>>2];i[m>>2]=D+(d>>>l|0);d=o(v,d&u);m=m+4|0;if(m>>>0<h>>>0){continue}break}k=i[k>>2]?k:k+4|0;if(!d){break h}i[h>>2]=d;h=h+4|0}d=i[p+44>>2]+l|0;i[p+44>>2]=d;m=t?s:k;h=h-m>>2>(y|0)?m+(y<<2)|0:h;if((d|0)<0){continue}break}}m=0;i:{if(k>>>0>=h>>>0){break i}m=o(s-k>>2,9);d=10;l=i[k>>2];if(l>>>0<10){break i}while(1){m=m+1|0;d=o(d,10);if(l>>>0>=d>>>0){continue}break}}d=(r-((C|0)==102?0:m)|0)-((C|0)==103&(r|0)!=0)|0;if((d|0)<(o(h-s>>2,9)+ -9|0)){l=d+9216|0;t=(l|0)/9|0;n=((t<<2)+((n|0)<0?p+48|4:p+340|0)|0)+ -4096|0;d=10;l=l-o(t,9)|0;if((l|0)<=7){while(1){d=o(d,10);l=l+1|0;if((l|0)!=8){continue}break}}t=i[n>>2];v=(t>>>0)/(d>>>0)|0;y=n+4|0;l=t-o(d,v)|0;j:{if(l?0:(y|0)==(h|0)){break j}u=d>>>1|0;z=l>>>0<u>>>0?.5:(h|0)==(y|0)?(u|0)==(l|0)?1:1.5:1.5;b=v&1?9007199254740994:9007199254740992;if(!(j[w|0]!=45|A)){z=-z;b=-b}l=t-l|0;i[n>>2]=l;if(b+z==b){break j}d=d+l|0;i[n>>2]=d;if(d>>>0>=1e9){while(1){i[n>>2]=0;n=n+ -4|0;if(n>>>0<k>>>0){k=k+ -4|0;i[k>>2]=0}d=i[n>>2]+1|0;i[n>>2]=d;if(d>>>0>999999999){continue}break}}m=o(s-k>>2,9);d=10;l=i[k>>2];if(l>>>0<10){break j}while(1){m=m+1|0;d=o(d,10);if(l>>>0>=d>>>0){continue}break}}d=n+4|0;h=h>>>0>d>>>0?d:h}while(1){d=h;n=h>>>0<=k>>>0;if(!n){h=d+ -4|0;if(!i[h>>2]){continue}}break}k:{if((C|0)!=103){A=e&8;break k}h=r?r:1;l=(h|0)>(m|0)&(m|0)>-5;r=(l?m^-1:-1)+h|0;f=(l?-1:-2)+f|0;A=e&8;if(A){break k}h=-9;l:{if(n){break l}t=i[d+ -4>>2];if(!t){break l}l=10;h=0;if((t>>>0)%10|0){break l}while(1){n=h;h=h+1|0;l=o(l,10);if(!((t>>>0)%(l>>>0)|0)){continue}break}h=n^-1}n=o(d-s>>2,9);if((f&-33)==70){A=0;h=(h+n|0)+ -9|0;h=(h|0)>0?h:0;r=(r|0)<(h|0)?r:h;break k}A=0;h=((m+n|0)+h|0)+ -9|0;h=(h|0)>0?h:0;r=(r|0)<(h|0)?r:h}t=r|A;v=(t|0)!=0;D=a;l=c;u=f&-33;h=(m|0)>0?m:0;m:{if((u|0)==70){break m}h=m>>31;h=ub(h+m^h,0,x);if((x-h|0)<=1){while(1){h=h+ -1|0;g[h|0]=48;if((x-h|0)<2){continue}break}}y=h+ -2|0;g[y|0]=f;g[h+ -1|0]=(m|0)<0?45:43;h=x-y|0}n=(h+(v+(r+B|0)|0)|0)+1|0;ra(D,32,l,n,e);pa(a,w,B);ra(a,48,c,n,e^65536);n:{o:{p:{if((u|0)==70){f=p+16|8;m=p+16|9;l=k>>>0>s>>>0?s:k;k=l;while(1){h=ub(i[k>>2],0,m);q:{if((k|0)!=(l|0)){if(h>>>0<=p+16>>>0){break q}while(1){h=h+ -1|0;g[h|0]=48;if(h>>>0>p+16>>>0){continue}break}break q}if((h|0)!=(m|0)){break q}g[p+24|0]=48;h=f}pa(a,h,m-h|0);k=k+4|0;if(k>>>0<=s>>>0){continue}break}if(t){pa(a,86131,1)}if((r|0)<1|k>>>0>=d>>>0){break p}while(1){h=ub(i[k>>2],0,m);if(h>>>0>p+16>>>0){while(1){h=h+ -1|0;g[h|0]=48;if(h>>>0>p+16>>>0){continue}break}}pa(a,h,(r|0)<9?r:9);h=r+ -9|0;k=k+4|0;if(k>>>0>=d>>>0){break o}f=(r|0)>9;r=h;if(f){continue}break}break o}r:{if((r|0)<0){break r}s=d>>>0>k>>>0?d:k+4|0;d=p+16|8;f=p+16|9;m=k;while(1){h=ub(i[m>>2],0,f);if((f|0)==(h|0)){g[p+24|0]=48;h=d}s:{if((k|0)!=(m|0)){if(h>>>0<=p+16>>>0){break s}while(1){h=h+ -1|0;g[h|0]=48;if(h>>>0>p+16>>>0){continue}break}break s}pa(a,h,1);h=h+1|0;if((r|0)<1?!A:0){break s}pa(a,86131,1)}v=h;h=f-h|0;pa(a,v,(r|0)>(h|0)?h:r);r=r-h|0;m=m+4|0;if(m>>>0>=s>>>0){break r}if((r|0)>-1){continue}break}}ra(a,48,r+18|0,18,0);pa(a,y,x-y|0);break n}h=r}ra(a,48,h+9|0,9,0)}break b}r=f&32;l=r?w+9|0:w;t:{if(d>>>0>11){break t}h=12-d|0;if(!h){break t}z=8;while(1){z=z*16;h=h+ -1|0;if(h){continue}break}if(j[l|0]==45){b=-(z+(-b-z));break t}b=b+z-z}k=i[p+44>>2];h=k>>31;h=ub(h^h+k,0,x);if((x|0)==(h|0)){g[p+15|0]=48;h=p+15|0}m=B|2;k=i[p+44>>2];s=h+ -2|0;g[s|0]=f+15;g[h+ -1|0]=(k|0)<0?45:43;n=e&8;k=p+16|0;while(1){f=k;v=k;k=r;if(q(b)<2147483648){h=~~b}else{h=-2147483648}g[v|0]=k|j[h+86080|0];b=(b- +(h|0))*16;k=f+1|0;if(!((k-(p+16|0)|0)!=1|(b==0?!((d|0)>0|n):0))){g[f+1|0]=46;k=f+2|0}if(b!=0){continue}break}h=a;f=c;if(!d|((k-p|0)+ -18|0)>=(d|0)){r=((x-(p+16|0)|0)-s|0)+k|0}else{r=((d+x|0)-s|0)+2|0}d=r;n=d+m|0;ra(h,32,f,n,e);pa(a,l,m);ra(a,48,c,n,e^65536);f=k-(p+16|0)|0;pa(a,p+16|0,f);d=x-s|0;ra(a,48,r-(d+f|0)|0,0,0);pa(a,s,d)}ra(a,32,c,n,e^8192);S=p+560|0;return((n|0)<(c|0)?c:n)|0}function Ng(a,b,c,d){var e=0,f=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;e=S-416|0;S=e;l=n[11157]+n[11144];h=i[a+52>>2];x=ic(c,h,i[22007],1,i[(h+(b<<2)|0)+4>>2]);if(i[21886]>=2){h=i[d>>2];i[e+368>>2]=i[a+76>>2];i[e+372>>2]=b;i[e+376>>2]=x;i[e+380>>2]=h;V(i[22423],2046,64856,e+368|0)}D=l*50;l=-1.7976931348623157e+308;M=x<<2;A=1;while(1){v=i[22492]+1|0;i[22492]=v;o=b;h=a;while(1){J=0;i[22772]=i[22772]+1;i[h+72>>2]=v;f=i[(i[22499]+M|0)+4>>2];a:{b:{if(!f){v=x;break b}v=x;while(1){k=l;c:{if(!(j[f+82|0]&32)){break c}k=l;if(i[f+72>>2]==i[22492]){break c}i[22778]=i[22778]+1;k=l;if(!Yg(i[h+52>>2],o,i[f+52>>2],e+408|0,e+412|0)){break c}u=o<<2;s=i[e+408>>2];d:{if(i[(u+i[h+52>>2]|0)+4>>2]!=i[(i[f+52>>2]+(s<<2)|0)+4>>2]){break d}q=1;if(i[21886]<3){break d}G=i[f+76>>2];i[e+352>>2]=i[h+76>>2];i[e+356>>2]=o;i[e+360>>2]=G;i[e+364>>2]=s;V(i[22423],3053,64934,e+352|0);s=i[e+408>>2]}K=i[h+80>>2];G=(K^i[f+80>>2])>>>12&1;L=i[e+412>>2];E=i[f+60>>2]+(s<<2)|0;if(i[E+4>>2]!=1){k=l;if(!A){break c}u=i[h+76>>2];E=i[f+76>>2];i[e+336>>2]=x;i[e+340>>2]=(G|0)==(L|0);i[e+320>>2]=E;i[e+324>>2]=s;i[e+328>>2]=u;i[e+332>>2]=o;V(i[22423],6155,65094,e+320|0);ca(7,f,h);k=l;break c}if((G|0)!=(L|0)){J=f;N=s;k=l;break c}k=l;if(i[(u+i[h+60>>2]|0)+4>>2]!=1){break c}if(!A){if(K&512){i[E+4>>2]=h;i[(u+i[h+60>>2]|0)+4>>2]=f;i[d>>2]=i[d>>2]+ -2;k=l;if(i[21886]<2){break c}f=i[f+76>>2];i[e+304>>2]=i[h+76>>2];i[e+308>>2]=o;i[e+312>>2]=f;i[e+316>>2]=i[e+408>>2];V(i[22423],2075,65242,e+304|0);k=l;break c}if(!(!m|!r)){i[(i[r+60>>2]+(y<<2)|0)+4>>2]=2;i[(i[f+60>>2]+(i[e+408>>2]<<2)|0)+4>>2]=h;i[(u+i[h+60>>2]|0)+4>>2]=f;i[d>>2]=i[d>>2]+ -2;if(i[21886]<2){r=0;k=l;break c}r=i[r+76>>2];s=i[m+76>>2];f=i[f+76>>2];i[e+240>>2]=i[h+76>>2];i[e+244>>2]=o;i[e+248>>2]=f;i[e+252>>2]=i[e+408>>2];n[e+256>>3]=z;i[e+224>>2]=s;i[e+228>>2]=B;i[e+232>>2]=r;i[e+236>>2]=y;r=0;V(i[22423],2105,65324,e+224|0);k=l;break c}i[E+4>>2]=h;i[(u+i[h+60>>2]|0)+4>>2]=2;i[d>>2]=i[d>>2]+ -2;k=l;if(i[21886]<3){break c}f=i[f+76>>2];s=i[h+76>>2];n[e+288>>3]=F;i[e+272>>2]=s;i[e+276>>2]=o;i[e+280>>2]=f;i[e+284>>2]=i[e+408>>2];V(i[22423],3073,65457,e+272|0);k=l;break c}if(!i[f+24>>2]){Cb(f)}if(!i[h+24>>2]){Cb(h)}p=qb(f,h,e+400|0,e+392|0);t=qb(h,f,e+400|0,e+392|0);if(q){l=p>t?t:p;m=0;F=8.988465674311579e+307;q=1;H=i[e+408>>2];break a}q=i[h+80>>2];e:{s=i[f+80>>2]&65536;if(!(q&65536|(!s|p<D^1))){f:{if(!m|p<z){break f}q=0;if(!(i[m+80>>2]&65536)){break f}k=l;break c}q=0;B=i[e+408>>2];if(i[21886]<3){break e}m=i[h+76>>2];r=i[f+76>>2];n[e+208>>3]=p;n[e+216>>3]=t;i[e+192>>2]=r;i[e+196>>2]=B;i[e+200>>2]=m;i[e+204>>2]=o;V(i[22423],3070,65576,e+192|0);break e}g:{h:{i:{j:{k:{l:{m:{n:{u=q&65536;o:{if(u){q=t<D;if(!(s|q^1)){p:{if(!m|t<z){break p}q=0;if(!(i[m+80>>2]&65536)){break p}k=l;break c}q=0;y=i[e+408>>2];if(i[21886]<3){break g}m=i[f+76>>2];r=i[h+76>>2];n[e+176>>3]=t;n[e+184>>3]=p;i[e+160>>2]=r;i[e+164>>2]=o;i[e+168>>2]=m;i[e+172>>2]=y;V(i[22423],3071,65684,e+160|0);break g}if(p<D^1){break o}if(!s){break n}break h}if(p<D){break h}}q:{if(t<D){if(!s){break i}if(!u){break q}break i}q=0;if(!m){break m}k=l;break c}q=0;if(!m){break l}k=l;break c}if(q){break i}q=0;if(!m){break j}k=l;break c}if(!u){break l}if(p>t^1){break j}if(s){break k}break j}if(p>t^1){break j}}p=t}r:{s:{if(!(p>l^1)){m=0;H=i[e+408>>2];if(i[21886]<3){break s}w=i[h+76>>2];C=i[f+76>>2];n[e+144>>3]=p;i[e+128>>2]=C;i[e+132>>2]=H;i[e+136>>2]=w;i[e+140>>2]=o;V(i[22423],3055,65992,e+128|0);break s}m=0;k=l;if(p>F^1){break r}F=p;k=l;break r}I=f;w=h;C=o;F=l;k=p}break c}t:{if(!m){break t}q=0;k=l;if(t<z^1){break c}if(!(i[m+80>>2]&65536)){break t}k=l;break c}q=0;y=i[e+408>>2];if(i[21886]<3){break g}m=i[f+76>>2];r=i[h+76>>2];n[e+112>>3]=t;n[e+120>>3]=p;i[e+96>>2]=r;i[e+100>>2]=o;i[e+104>>2]=m;i[e+108>>2]=y;V(i[22423],3018,65892,e+96|0);break g}u:{if(!m){break u}q=0;k=l;if(p<z^1){break c}if(!(i[m+80>>2]&65536)){break u}k=l;break c}q=0;B=i[e+408>>2];if(i[21886]<3){break e}m=i[h+76>>2];r=i[f+76>>2];n[e+80>>3]=p;n[e+88>>3]=t;i[e+64>>2]=r;i[e+68>>2]=B;i[e+72>>2]=m;i[e+76>>2]=o;V(i[22423],3072,65792,e- -64|0);break e}m=h;r=f;B=o;z=t;k=l;break c}m=f;r=h;y=o;z=p;k=l}l=k;f=v+1|0;v=(f|0)<(c|0)?f:0;f=i[(i[22499]+(v<<2)|0)+4>>2];if(f){continue}break}}if(!(i[(i[h+60>>2]+(o<<2)|0)+4>>2]!=1|A)){i[e+48>>2]=i[h+76>>2];i[e+52>>2]=o;i[e+56>>2]=x;i[e+60>>2]=v;V(i[22423],6156,66075,e+48|0);X(5,h,0)}o=C;h=w;f=I}if(J){v=i[22492];C=o;o=N;w=h;I=f;h=J;continue}break}v:{if(A){if(!(f|m)){i[e+32>>2]=i[a+76>>2];i[e+36>>2]=b;i[e+40>>2]=x;i[e+44>>2]=v;V(i[22423],6157,66181,e+32|0);X(5,a,0)}if(m){i[(i[m+60>>2]+(B<<2)|0)+4>>2]=r;i[(i[r+60>>2]+(y<<2)|0)+4>>2]=m;i[d>>2]=i[d>>2]+ -2;A=0;C=o;w=h;I=f;if(!(g[m+82|0]&1)){continue}if(!(g[r+82|0]&1)){i[22736]=i[22736]+1;break v}i[22738]=i[22738]+1;break v}i[(i[f+60>>2]+(H<<2)|0)+4>>2]=h;i[(i[h+60>>2]+(o<<2)|0)+4>>2]=f;i[d>>2]=i[d>>2]+ -2;A=0;i[22846]=i[22846]+1;C=o;w=h;I=f;if(!i[21886]){continue}f=i[f+76>>2];w=i[h+76>>2];n[e+16>>3]=l;i[e>>2]=w;i[e+4>>2]=o;i[e+8>>2]=f;i[e+12>>2]=H;V(i[22423],25,66292,e);break v}S=e+416|0;return m?z:F}w=h;continue}}function rc(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,m=0,o=0,p=0,q=0,r=0;b=S-816|0;S=b;j=i[22666];k=i[22009];o=W(i[22500]);p=i[22444];q=W(i[22501]);d=Y(i[21880]);g=zb(i[22428]);c=i[22508];if(!(g|c)){V(a,6372,23250,0);if(i[22443]<=3999){ya()}X(5,0,0);c=i[22508]}if(!(!i[21874]|!c)){c=i[22428];a:{if(!c){break a}while(1){if(!i[c+48>>2]){break a}g=i[c+80>>2];b:{if(g&2048){i[c+80>>2]=g&-524289;break b}if(!(g&524288)){break b}c:{g=i[c+24>>2];if(!g){break c}if(qa(g,0)){break c}i[c+80>>2]=i[c+80>>2]&-524289;break b}f=f+1|0}c=i[c+48>>2];if(c){continue}break}}i[22446]=f}f=0;g=0;c=i[22428];d:{if(!c){break d}while(1){if(!i[c+48>>2]){break d}h=i[c+68>>2];if(h){f=W(h)+f|0}h=i[c+80>>2];e:{if(!(h&524288)){break e}if(h&8192){r=((h&268435968)==268435968)+r|0;break e}g=((W(i[c+52>>2])|0)!=i[22007])+g|0}c=i[c+48>>2];if(c){continue}break}}c=k+o|0;h=i[21982];if(!((d|0)==(h+ -1|0)|(d|0)<0)){c=c-((d|0)!=(i[21983]^-1))|0}if(i[21983]|(h|i[21981])){V(a,9288,23313,0)}d=1;f:{if(i[22508]){break f}d=!(i[21980]|(i[21879]|i[21882]));if(i[21995]){break f}d=!(i[21881]|(i[21879]|i[21882]));if(i[21874]){break f}d=!i[21881]&i[22446]<1}h=p-q|0;o=i[22650];p=i[22992];q=i[22648];g:{if(i[21999]){k=i[22007];h:{if(i[21995]){i[b+788>>2]=k;i[b+784>>2]=c;V(a,9289,23391,b+784|0);break h}i[b+772>>2]=k;i[b+768>>2]=c;V(a,9290,23466,b+768|0)}i[b+756>>2]=h;i[b+752>>2]=i[21863]?23561:23578;V(a,9291,23526,b+752|0);if(j){i[b+736>>2]=j;V(a,9292,23579,b+736|0)}f=f-j|0;i:{if((f|0)>=1){i[b+704>>2]=f;V(a,9293,23632,b+704|0);break i}c=(c-h|0)-j|0;if((c|0)<1){break i}i[b+720>>2]=c;V(a,9294,23672,b+720|0)}d=d?23578:23754;i[b+688>>2]=d;i[b+692>>2]=i[22446];V(a,9295,23718,b+688|0);if(!g){break g}i[b+676>>2]=g;i[b+672>>2]=d;V(a,9296,23762,b+672|0);break g}if(i[21874]){k=i[22007];j:{if(i[21995]){i[b+660>>2]=k;i[b+656>>2]=c;V(a,9297,23813,b+656|0);break j}i[b+644>>2]=k;i[b+640>>2]=c;V(a,9298,23894,b+640|0)}i[b+628>>2]=h;i[b+624>>2]=i[21863]?23561:23578;V(a,9299,23961,b+624|0);if(j){i[b+608>>2]=j;V(a,9300,23579,b+608|0)}f=f-j|0;k:{if((f|0)>=1){i[b+576>>2]=f;V(a,9301,23632,b+576|0);break k}c=(c-h|0)-j|0;if((c|0)<1){break k}i[b+592>>2]=c;V(a,9302,23672,b+592|0)}d=d?23578:23754;i[b+560>>2]=d;i[b+564>>2]=i[22446];V(a,9303,23992,b+560|0);if(!g){break g}i[b+548>>2]=g;i[b+544>>2]=d;V(a,9304,24028,b+544|0);break g}j=i[22007];if(i[21884]){i[b+532>>2]=j;i[b+528>>2]=c;V(a,9305,24079,b+528|0);i[b+512>>2]=c;V(a,9306,24146,b+512|0);i[b+496>>2]=h;V(a,9307,24174,b+496|0);if(f){i[b+484>>2]=f;c=i[21889];f=c?24238:24248;i[b+480>>2]=c?i[21888]?24216:f:f;V(a,9308,24256,b+480|0)}i[b+464>>2]=i[22443]-i[22433];V(a,9309,24287,b+464|0);if(!d){i[b+448>>2]=i[22446];V(a,9310,24324,b+448|0)}if(!g){break g}i[b+436>>2]=g;i[b+432>>2]=d?23578:23754;V(a,9311,24368,b+432|0);break g}i[b+420>>2]=j;i[b+416>>2]=c;V(a,9312,24422,b+416|0);i[b+400>>2]=h;V(a,9313,24459,b+400|0);if(f){i[b+388>>2]=f;c=i[21889];f=c?24507:24516;i[b+384>>2]=c?i[21888]?24485:f:f;V(a,9314,24525,b+384|0)}i[b+368>>2]=i[22443]-i[22433];V(a,9315,24552,b+368|0);if(!d){i[b+352>>2]=i[22446];V(a,9316,24576,b+352|0)}if(!g){break g}i[b+340>>2]=g;i[b+336>>2]=d?23578:23754;V(a,9317,24607,b+336|0)}if(r){i[b+320>>2]=r;V(a,9318,24648,b+320|0)}i[b+308>>2]=88056;i[b+304>>2]=88316;V(a,9319,24685,b+304|0);d=i[21974];l:{if((d|0)!=-2147483648){i[b+288>>2]=d;V(a,9320,24710,b+288|0);break l}V(a,9321,24718,0)}i[b+272>>2]=i[22934];V(a,9322,24721,b+272|0);i[b+256>>2]=i[22984];V(a,9323,24755,b+256|0);if(i[21874]){i[b+240>>2]=i[22443]-i[22433];V(a,9324,24792,b+240|0)}i[b+224>>2]=i[22902]+(i[22894]+(i[22912]+i[22910]|0)|0);V(a,9325,24824,b+224|0);d=q+(p-o|0)|0;if(d){i[b+208>>2]=i[22688]+(i[22674]+(i[23024]+(i[22602]+i[22592]|0)|0)|0);V(a,9330,24866,b+208|0);i[b+192>>2]=i[22676]+i[22604];V(a,9331,24910,b+192|0);i[b+176>>2]=d;V(a,9332,24955,b+176|0)}d=i[22928]+i[22924]|0;if(d){i[b+160>>2]=d;V(a,9375,24986,b+160|0)}if(!(i[21970]|!i[22487])){e=+l[22451]/1e6;n[11322]=e;n[b+144>>3]=e;V(a,9333,25027,b+144|0)}m:{if(i[21973]){if(i[21897]|i[21915]){break m}n[b+128>>3]=+i[22948]*100/+i[22453];V(a,9334,25079,b+128|0);break m}e=n[11231];if(e<8.988465674311579e+307^1){break m}d=i[22948];if(d){n[b+120>>3]=e;i[b+112>>2]=d;V(a,9335,25130,b+112|0);break m}n[b+96>>3]=e;V(a,9336,25175,b+96|0)}e=n[11244];if(e!=0){n[b+88>>3]=e;i[b+80>>2]=i[22992]?25228:25240;V(a,9337,25202,b+80|0)}e=n[11245];if(e!=0){n[b+72>>3]=e;i[b+64>>2]=i[22992]?25228:25240;V(a,9338,25246,b- -64|0)}n:{if(!i[21899]){break n}Sa(0,b+808|0,b+800|0);e=n[b+808>>3];m=n[11144];o:{if(e>m+m^1){break o}n[b+48>>3]=e;V(a,9339,25272,b+48|0);e=n[11157];m=n[b+808>>3]/(e+n[11144]);if(!(m>.05^1|e+e>n[10930]^1|n[11231]>8.988465674311579e+307^1)){n[b+32>>3]=m;V(a,9340,25319,b+32|0);break o}V(a,9341,25329,0)}e=n[b+800>>3];if(e<n[11144]*-2^1){break n}n[b+16>>3]=e;V(a,9342,25331,b+16|0);p:{if(n[11231]>8.988465674311579e+307^1){break p}e=-n[b+800>>3]/(n[11157]+n[11144]);if(e>.05^1){break p}n[b>>3]=e;V(a,9343,25319,b);break n}V(a,9344,25329,0)}V(a,9345,25329,0);S=b+816|0}function ea(a,b,c,d,e,f,g,h,j){var k=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;n=S-96|0;S=n;w=c;x=(g&131071)<<15|f>>>17;k=j&65535;o=k;t=h;l=h;v=l<<15|g>>>17;q=(e^j)&-2147483648;l=e&65535;p=l;s=d;y=l;A=(k&131071)<<15|h>>>17;F=j>>>16&32767;G=e>>>16&32767;a:{b:{if(G+ -1>>>0<=32765){l=0;if(F+ -1>>>0<32766){break b}}u=e&2147483647;k=u;l=d;if(!(!d&(k|0)==2147418112?!(b|c):(k|0)==2147418112&d>>>0<0|k>>>0<2147418112)){z=d;q=e|32768;break a}u=j&2147483647;e=u;d=h;if(!(!d&(e|0)==2147418112?!(f|g):(e|0)==2147418112&d>>>0<0|e>>>0<2147418112)){z=h;q=j|32768;b=f;c=g;break a}if(!(b|l|(k^2147418112|c))){if(!(d|f|(e|g))){q=2147450880;b=0;c=0;break a}q=q|2147418112;b=0;c=0;break a}if(!(d|f|(e^2147418112|g))){d=b|l;e=c|k;b=0;c=0;if(!(d|e)){q=2147450880;break a}q=q|2147418112;break a}if(!(b|l|(c|k))){b=0;c=0;break a}if(!(d|f|(e|g))){b=0;c=0;break a}if((k|0)==65535|k>>>0<65535){j=b;l=c;d=!(p|s);h=d<<6;k=r(d?b:s)+32|0;b=r(d?c:p);b=h+((b|0)==32?k:b)|0;c=b;ua(n+80|0,j,l,s,p,c+ -15|0);s=i[n+88>>2];w=i[n+84>>2];y=i[n+92>>2];C=16-c|0;b=i[n+80>>2]}l=C;if(e>>>0>65535){break b}c=!(o|t);d=c<<6;e=r(c?f:t)+32|0;c=r(c?g:o);c=d+((c|0)==32?e:c)|0;h=c;ua(n- -64|0,f,g,t,o,c+ -15|0);f=i[n+76>>2];c=f;j=i[n+68>>2];g=j;e=i[n+72>>2];d=e;v=d<<15|g>>>17;d=g;f=i[n+64>>2];x=(d&131071)<<15|f>>>17;A=(c&131071)<<15|e>>>17;l=(C-h|0)+16|0}C=l;j=v;u=0;e=ni(j,u,s,0);c=T;k=0;p=x;y=y|65536;o=m;l=ni(p,0,y,m);h=l+e|0;d=T+c|0;d=h>>>0<l>>>0?d+1|0:d;l=h;h=d;g=(c|0)==(d|0)&l>>>0<e>>>0|d>>>0<c>>>0;A=A&2147483647|-2147483648;t=w;m=ni(A,0,t,0);e=m+l|0;c=T+d|0;D=e;d=e;c=d>>>0<m>>>0?c+1|0:c;e=c;c=(h|0)==(c|0)&d>>>0<l>>>0|c>>>0<h>>>0;d=g+c|0;if(d>>>0<c>>>0){k=1}M=d;h=k;l=e;m=ni(p,H,t,I);c=T;w=c;k=0;d=f;E=d<<15&-32768;g=ni(E,0,s,B);f=g+m|0;d=T+c|0;v=f;c=f;d=c>>>0<g>>>0?d+1|0:d;g=(w|0)==(d|0)&c>>>0<m>>>0|d>>>0<w>>>0;w=b;f=ni(j,u,b,0);b=f+c|0;c=T+d|0;c=b>>>0<f>>>0?c+1|0:c;x=b;f=c;b=(d|0)==(c|0)&b>>>0<v>>>0|c>>>0<d>>>0;c=g+b|0;if(c>>>0<b>>>0){k=1}b=c+D|0;m=k+l|0;m=b>>>0<c>>>0?m+1|0:m;v=b;c=h;g=m;b=(e|0)==(g|0)&b>>>0<D>>>0|g>>>0<e>>>0;d=b+M|0;if(d>>>0<b>>>0){c=c+1|0}b=d;d=ni(y,o,A,J);b=b+d|0;l=T+c|0;l=b>>>0<d>>>0?l+1|0:l;d=ni(s,B,A,J);c=T;h=b;e=ni(j,u,y,o);b=e+d|0;m=T+c|0;m=b>>>0<e>>>0?m+1|0:m;e=b;b=m;m=(c|0)==(b|0)&e>>>0<d>>>0|b>>>0<c>>>0;c=h+b|0;k=l+m|0;m=c>>>0<b>>>0?k+1|0:k;l=c;d=e;e=0;b=e+v|0;k=d+g|0;h=b;c=b;k=c>>>0<e>>>0?k+1|0:k;b=k;c=(g|0)==(b|0)&c>>>0<v>>>0|b>>>0<g>>>0;d=l+c|0;if(d>>>0<c>>>0){m=m+1|0}D=d;d=h;v=b;B=ni(s,B,p,H);s=T;e=ni(E,K,y,o);c=e+B|0;l=T+s|0;l=c>>>0<e>>>0?l+1|0:l;o=c;e=ni(j,u,t,I);c=c+e|0;g=l;k=g+T|0;k=c>>>0<e>>>0?k+1|0:k;u=c;j=ni(w,L,A,J);e=c+j|0;c=T+k|0;c=e>>>0<j>>>0?c+1|0:c;j=e;e=c;y=c;c=0;l=m;e=(e|0)==(k|0)&j>>>0<u>>>0|e>>>0<k>>>0;m=(g|0)==(s|0)&o>>>0<B>>>0|g>>>0<s>>>0;g=(g|0)==(k|0)&u>>>0<o>>>0|k>>>0<g>>>0;k=m+g|0;k>>>0<g>>>0;g=e+k|0;k=g;g=y;d=d+g|0;k=(c|k)+v|0;o=d;c=d;k=c>>>0<g>>>0?k+1|0:k;g=k;b=(b|0)==(k|0)&c>>>0<h>>>0|k>>>0<b>>>0;c=b+D|0;if(c>>>0<b>>>0){l=l+1|0}B=c;b=l;c=o;l=g;k=x;u=ni(w,L,p,H);p=T;h=ni(E,K,t,I);d=h+u|0;m=T+p|0;s=d;m=d>>>0<h>>>0?m+1|0:m;h=m;m=0;d=(h|0)==(p|0)&d>>>0<u>>>0|h>>>0<p>>>0;p=h+k|0;k=(d|m)+f|0;k=p>>>0<h>>>0?k+1|0:k;m=p;d=k;t=(f|0)==(d|0)&m>>>0<x>>>0|d>>>0<f>>>0;f=c;m=0;k=j;j=0;e=j+p|0;c=d+k|0;c=e>>>0<j>>>0?c+1|0:c;j=e;e=c;c=(d|0)==(c|0)&j>>>0<p>>>0|c>>>0<d>>>0;d=c+t|0;if(d>>>0<c>>>0){m=1}c=f+d|0;l=l+m|0;l=c>>>0<d>>>0?l+1|0:l;p=c;c=b;b=l;d=(g|0)==(b|0)&p>>>0<o>>>0|b>>>0<g>>>0;f=d+B|0;if(f>>>0<d>>>0){c=c+1|0}d=c;c=c&65536;o=c;t=0;x=c>>>16|0;l=(x+(C+(F+G|0)|0)|0)+ -16383|0;if((l|0)>=32767){q=q|2147418112;b=0;c=0;break a}g=f;k=d<<1|g>>>31;v=!(o|t);c=v;o=c?g<<1|b>>>31:g;t=c?k:d;c=e;g=0;f=ni(w,L,E,K);e=g+f|0;k=s;d=k+T|0;d=e>>>0<f>>>0?d+1|0:d;s=e;f=d;d=j+((k|0)==(d|0)&e>>>0<g>>>0|d>>>0<k>>>0)|0;if(d>>>0<j>>>0){c=c+1|0}g=c;e=c;m=x^1;j=m;c=j&31;if(32<=(j&63)>>>0){k=d<<c;d=0}else{k=(1<<c)-1&d>>>32-c|e<<c;d=d<<c}e=k;h=d;c=f;k=c>>>1|0;j=(c&1)<<31|s>>>1;c=x|62;d=c&31;if(32<=(c&63)>>>0){c=0;d=k>>>d|0}else{c=k>>>d|0;d=((1<<d)-1&k)<<32-d|j>>>d}d=h|d;e=c|e;j=p;k=b<<1|j>>>31;h=v?j<<1|g>>>31:j;j=v?k:b;c=s;b=m&31;if(32<=(m&63)>>>0){m=c<<b;b=0}else{m=(1<<b)-1&c>>>32-b|f<<b;b=c<<b}c=m;c:{if((l|0)<=0){f=1-l|0;if(f>>>0>=128){b=0;c=0;break a}g=l+127|0;ua(n+48|0,b,c,d,e,g);ua(n+32|0,h,j,o,t,g);Gb(n+16|0,b,c,d,e,f);Gb(n,h,j,o,t,f);b=(i[n+48>>2]|i[n+56>>2])!=0|(i[n+52>>2]|i[n+60>>2])!=0|(i[n+32>>2]|i[n+16>>2]);c=i[n+36>>2]|i[n+20>>2];d=i[n+40>>2]|i[n+24>>2];e=i[n+44>>2]|i[n+28>>2];h=i[n>>2];j=i[n+4>>2];g=i[n+12>>2];o=i[n+8>>2];break c}g=t&65535|l<<16}z=o|z;q=g|q;if(!(!d&(e|0)==-2147483648?!(b|c):(e|0)>-1)){k=q;l=j;b=h+1|0;if(b>>>0<1){l=l+1|0}d=b;c=l;d=(j|0)==(c|0)&d>>>0<h>>>0|c>>>0<j>>>0;e=d+z|0;if(e>>>0<d>>>0){k=k+1|0}z=e;q=k;break a}if(b|d|(e^-2147483648|c)){b=h;c=j;break a}l=q;m=j;b=h&1;c=b+h|0;if(c>>>0<b>>>0){m=m+1|0}b=c;d=c;c=m;d=(j|0)==(c|0)&d>>>0<h>>>0|c>>>0<j>>>0;e=d+z|0;if(e>>>0<d>>>0){l=l+1|0}z=e;q=l}i[a>>2]=b;i[a+4>>2]=c;i[a+8>>2]=z;i[a+12>>2]=q;S=n+96|0}function Wa(a){var b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0;c=S-288|0;S=c;i[c+284>>2]=0;if(i[21886]>=1){i[c+272>>2]=i[a+76>>2];i[c+276>>2]=i[22473];V(i[22423],1027,59127,c+272|0)}a:{if(zb(a)){break a}i[c+284>>2]=1;V(i[22423],6374,59192,0);if(i[22443]>3999){break a}ya()}d=i[22428];if(a){h=(a|0)!=(d|0)|i[21911]!=0;b=a;while(1){if(i[b+48>>2]){m=i[b+80>>2];k=i[22432];e=(k|0)==(b|0)?1:e;d=i[22431];o=(d|0)==(b|0)?1:o;if(!(!(m&1024)|(e|o))){f=i[b+76>>2];m=i[22423];l=-1;l=d?i[d+76>>2]:l;i[c+264>>2]=k?i[k+76>>2]:-1;i[c+260>>2]=l;i[c+256>>2]=f;V(m,6289,59255,c+256|0);X(5,b,0);m=i[b+80>>2]}if(!(!o|m&1024)){f=i[b+76>>2];l=i[22423];d=c;m=i[22431];k=-1;b:{if(!m){break b}k=i[m+76>>2]}i[d+244>>2]=k;i[c+240>>2]=f;V(l,6292,59372,c+240|0);X(5,b,0);m=i[b+80>>2]}d=m>>>11&1;if((d|0)!=(!o&e)){k=i[b+76>>2];f=i[22423];c:{if(d){d=c;m=i[22432];l=-1;d:{if(!m){break d}l=i[m+76>>2]}i[d+228>>2]=l;i[c+224>>2]=k;V(f,6290,59469,c+224|0);break c}d=i[i[22431]+76>>2];i[c+208>>2]=k;i[c+212>>2]=d;V(f,6291,59564,c+208|0)}X(5,b,0)}d=i[b+80>>2];e:{if(!(d&(i[22473]?1024:2048))){d=1;f:{if(h){break f}d=1;if(i[22430]==(b|0)){break f}d=0;if(!W(i[b+64>>2])){break f}if(i[22320]){d=0;if(n[b>>3]>=n[10930]^1){break f}}k=i[b+76>>2];f=i[22423];d=c;l=i[22430];h=-1;g:{if(!l){break g}h=i[l+76>>2]}i[d+180>>2]=h;i[c+176>>2]=k;V(f,6137,59659,c+176|0);ca(5,b,i[22430]);d=0}h=d;Xc(b,0,c+284|0);p=p+1|0;break e}if(!(d&2048)|!i[22472]){break e}d=i[b+60>>2];if(!(i[d+4>>2]?d:0)){k=i[b+56>>2];if(!k|!i[k+4>>2]){break e}}k=i[22423];f=i[b+76>>2];d=W(d);i[c+200>>2]=W(i[b+56>>2]);i[c+196>>2]=d;i[c+192>>2]=f;V(k,6376,59748,c+192|0);X(5,b,0)}b=i[b+48>>2];if(b){continue}}break}d=i[22428]}e=89760;h:{i:{if((a|0)==(d|0)){break i}if(i[22431]!=(a|0)){break h}e=89768}b=i[e>>2];if(!b){break h}o=0;while(1){if(!i[b>>2]){break h}he(b,0,c+284|0);e=i[22442];i[b+20>>2]=0;d=j[b+24|0];g[b+24|0]=d&254;o=(b|0)==(e|0)?1:o;if(!(o|(d&20)!=16)){h=i[b+16>>2];k=i[22423];e=c;f=i[22442];d=-1;j:{if(!f){break j}d=i[f+16>>2]}i[e+164>>2]=d;i[c+160>>2]=h;V(k,6288,59885,c+160|0);X(5,i[22432],0)}b=i[b>>2];if(b){continue}break}}d=0;m=0;if(a){l=i[c+284>>2];f=a;while(1){if(i[f+48>>2]){e=i[f+80>>2];k:{if(e&2048){break k}if(e&8192){e=i[22007]}else{e=W(i[f+56>>2])}q=e+q|0;e=i[f+52>>2];if(!e){break k}b=i[e+4>>2];if(!b){break k}e=e+8|0;while(1){h=e;i[b+20>>2]=i[b+20>>2]+1;e=j[b+24|0];l:{if(e&1){break l}g[b+24|0]=e|1;m=m+1|0;if((Y(i[b+8>>2])|0)!=-1){break l}e=i[b+16>>2];i[c+144>>2]=i[b+8>>2];i[c+148>>2]=e;i[c+152>>2]=i[22010];V(i[22423],6139,59981,c+144|0);l=1}e=h+4|0;b=i[h>>2];if(b){continue}break}}f=i[f+48>>2];if(f){continue}}break}i[c+284>>2]=l}e=i[22493]+p|0;i[22493]=e;h=0;m:{if(i[22428]!=(a|0)){break m}h=i[22443];b=i[22433];if((h-b|0)!=(p|0)){i[c+128>>2]=p;i[c+132>>2]=h;i[c+136>>2]=b;V(i[22423],6140,60069,c+128|0);i[c+284>>2]=1;e=i[22493]}i[22493]=e+1;h=0;n:{if(!i[22275]){break n}f=0;e=0;b=i[22440];if(b){d=i[c+284>>2];while(1){if(i[b>>2]){o=i[b+12>>2];if(!o){i[c+112>>2]=i[b+16>>2];V(i[22423],6407,60190,c+112|0);o=i[b+12>>2];d=1}mb(o,60264,i[b+16>>2]);if(!(j[b+24|0]&4)){e=W(i[b+12>>2])+e|0}b=i[b>>2];if(b){continue}}break}i[c+284>>2]=d}o:{if(!a){break o}b=a;while(1){d=i[b+48>>2];if(!d){break o}if(!(j[b+81|0]&8)){f=W(i[b+52>>2])+f|0;d=i[b+48>>2]}b=d;if(b){continue}break}}d=0;if((e|0)==(f|0)){break n}i[c+96>>2]=e;i[c+100>>2]=f;V(i[22423],6141,60280,c+96|0);i[c+284>>2]=1;l=i[22440];p:{if(!l){break p}while(1){if(!i[l>>2]){break p}q:{if(j[l+24|0]&4){break q}o=i[22492]+1|0;i[22492]=o;e=i[l+12>>2];if(!e){break q}b=i[e+4>>2];if(!b){break q}f=e+8|0;while(1){r:{if(i[b+72>>2]!=(o|0)){e=d;d=h;break r}e=i[l+16>>2];i[c+80>>2]=i[b+76>>2];i[c+84>>2]=e;V(i[22423],6275,60431,c+80|0);o=i[22492];e=b}i[b+72>>2]=o;s:{if(da(i[b+52>>2],l)){k=e;e=d;break s}d=i[l+16>>2];h=i[b+76>>2];i[c+64>>2]=h;i[c+68>>2]=d;i[c+72>>2]=d;i[c+76>>2]=h;V(i[22423],6276,60522,c- -64|0);k=b}b=i[f>>2];if(b){f=f+4|0;o=i[22492];h=e;d=k;continue}else{h=e;d=k}break}}l=i[l>>2];if(l){continue}break}}if(!a){break n}while(1){b=i[a+48>>2];if(!b){break n}e=b;t:{if(j[a+81|0]&8){break t}k=i[a+52>>2];if(!k){break t}b=i[k+4>>2];if(!b){break t}o=k+8|0;while(1){u:{if(da(i[b+12>>2],a)){e=d;break u}e=i[a+76>>2];h=i[b+16>>2];i[c+48>>2]=h;i[c+52>>2]=e;i[c+56>>2]=e;i[c+60>>2]=h;V(i[22423],6277,60632,c+48|0);h=d;e=a;d=e}b=i[o>>2];o=o+4|0;if(b){continue}break}d=e;e=i[a+48>>2]}a=e;if(e){continue}break}}if((i[22444]-W(i[22501])|0)!=(m|0)){a=i[22423];e=i[22444];b=W(i[22501]);i[c+32>>2]=m;i[c+36>>2]=e-b;V(a,6142,60735,c+32|0);i[c+284>>2]=1}b=i[22007];if(!((m|0)==(p|0)|(b|0)!=2)){i[c+16>>2]=m;i[c+20>>2]=p;V(i[22423],6143,60839,c+16|0);i[c+284>>2]=1;b=i[22007]}if((b|0)!=3){break m}a=(q|0)/2|0;if(((m+p|0)-a|0)==2){break m}i[c>>2]=m;i[c+4>>2]=p;i[c+8>>2]=a;V(i[22423],7063,60907,c)}if(i[c+284>>2]){ca(5,d,h)}S=c+288|0}function Gc(a,b,c,d,e,f,k){var l=0,m=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;l=S-80|0;S=l;i[l+76>>2]=b;B=l+55|0;y=l+56|0;b=0;a:{b:while(1){c:{if((v|0)<0){break c}if((b|0)>(2147483647-v|0)){i[23646]=61;v=-1;break c}v=b+v|0}d:{e:{f:{q=i[l+76>>2];b=q;m=j[b|0];if(m){while(1){g:{m=m&255;h:{if(!m){m=b;break h}if((m|0)!=37){break g}m=b;while(1){if(j[b+1|0]!=37){break h}p=b+2|0;i[l+76>>2]=p;m=m+1|0;r=j[b+2|0];b=p;if((r|0)==37){continue}break}}b=m-q|0;if(a){pa(a,q,b)}if(b){continue b}m=l;b=i[l+76>>2];i:{if(!(j[b+2|0]!=36|g[i[l+76>>2]+1|0]+ -48>>>0>=10)){x=g[b+1|0]+ -48|0;z=1;b=b+3|0;break i}x=-1;b=b+1|0}i[m+76>>2]=b;s=0;w=g[b|0];p=w+ -32|0;j:{if(p>>>0>31){m=b;break j}m=b;p=1<<p;if(!(p&75913)){break j}while(1){m=b+1|0;i[l+76>>2]=m;s=p|s;w=g[b+1|0];p=w+ -32|0;if(p>>>0>=32){break j}b=m;p=1<<p;if(p&75913){continue}break}}k:{if((w|0)==42){p=l;l:{m:{if(g[m+1|0]+ -48>>>0>=10){break m}b=i[l+76>>2];if(j[b+2|0]!=36){break m}i[((g[b+1|0]<<2)+e|0)+ -192>>2]=10;t=i[((g[b+1|0]<<3)+d|0)+ -384>>2];z=1;b=b+3|0;break l}if(z){break f}z=0;t=0;if(a){b=i[c>>2];i[c>>2]=b+4;t=i[b>>2]}b=i[l+76>>2]+1|0}i[p+76>>2]=b;if((t|0)>-1){break k}t=0-t|0;s=s|8192;break k}t=Qd(l+76|0);if((t|0)<0){break f}b=i[l+76>>2]}r=-1;n:{if(j[b|0]!=46){break n}if(j[b+1|0]==42){o:{if(g[b+2|0]+ -48>>>0>=10){break o}b=i[l+76>>2];if(j[b+3|0]!=36){break o}i[((g[b+2|0]<<2)+e|0)+ -192>>2]=10;r=i[((g[b+2|0]<<3)+d|0)+ -384>>2];b=b+4|0;i[l+76>>2]=b;break n}if(z){break f}if(a){b=i[c>>2];i[c>>2]=b+4;r=i[b>>2]}else{r=0}b=i[l+76>>2]+2|0;i[l+76>>2]=b;break n}i[l+76>>2]=b+1;r=Qd(l+76|0);b=i[l+76>>2]}m=0;while(1){A=m;u=-1;if(g[b|0]+ -65>>>0>57){break a}w=b+1|0;i[l+76>>2]=w;m=g[b|0];b=w;m=j[(m+o(A,58)|0)+85551|0];if(m+ -1>>>0<8){continue}break}p:{q:{if((m|0)!=19){if(!m){break a}if((x|0)>=0){i[(x<<2)+e>>2]=m;b=(x<<3)+d|0;m=i[b+4>>2];i[l+64>>2]=i[b>>2];i[l+68>>2]=m;break q}if(!a){break d}Pd(l- -64|0,m,c,k);w=i[l+76>>2];break p}if((x|0)>-1){break a}}b=0;if(!a){continue b}}p=s&-65537;m=s&8192?p:s;u=0;x=85596;s=y;r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{D:{E:{F:{G:{b=g[w+ -1|0];b=A?(b&15)==3?b&-33:b:b;switch(b+ -88|0){case 11:break r;case 9:case 13:case 14:case 15:break s;case 27:break x;case 12:case 17:break A;case 23:break B;case 0:case 32:break C;case 24:break D;case 22:break E;case 29:break F;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break e;default:break G}}H:{switch(b+ -65|0){case 0:case 4:case 5:case 6:break s;case 2:break v;case 1:case 3:break e;default:break H}}if((b|0)==83){break w}break e}b=i[l+64>>2];q=i[l+68>>2];x=85596;break z}b=0;I:{switch(A&255){case 0:i[i[l+64>>2]>>2]=v;continue b;case 1:i[i[l+64>>2]>>2]=v;continue b;case 2:m=i[l+64>>2];i[m>>2]=v;i[m+4>>2]=v>>31;continue b;case 3:h[i[l+64>>2]>>1]=v;continue b;case 4:g[i[l+64>>2]]=v;continue b;case 6:i[i[l+64>>2]>>2]=v;continue b;case 7:break I;default:continue b}}m=i[l+64>>2];i[m>>2]=v;i[m+4>>2]=v>>31;continue b}r=r>>>0>8?r:8;m=m|8;b=120}q=bg(i[l+64>>2],i[l+68>>2],y,b&32);if(!(m&8)|!(i[l+64>>2]|i[l+68>>2])){break y}x=(b>>>4|0)+85596|0;u=2;break y}q=ag(i[l+64>>2],i[l+68>>2],y);if(!(m&8)){break y}b=y-q|0;r=(r|0)>(b|0)?r:b+1|0;break y}p=i[l+68>>2];q=p;b=i[l+64>>2];if((p|0)<-1?1:(p|0)<=-1){q=0-(q+(0<b>>>0)|0)|0;b=0-b|0;i[l+64>>2]=b;i[l+68>>2]=q;u=1;x=85596;break z}if(m&2048){u=1;x=85597;break z}u=m&1;x=u?85598:85596}q=ub(b,q,y)}m=(r|0)>-1?m&-65537:m;b=i[l+64>>2];p=i[l+68>>2];if(!(!!(b|p)|r)){r=0;q=y;break e}b=!(b|p)+(y-q|0)|0;r=(r|0)>(b|0)?r:b;break e}b=i[l+64>>2];q=b?b:85606;b=Hf(q,r);s=b?b:r+q|0;m=p;r=b?b-q|0:r;break e}p=i[l+64>>2];if(r){break u}b=0;ra(a,32,t,0,m);break t}i[l+12>>2]=0;i[l+8>>2]=i[l+64>>2];i[l+64>>2]=l+8;r=-1;p=l+8|0}b=0;J:{while(1){q=i[p>>2];if(!q){break J}q=Sd(l+4|0,q);s=(q|0)<0;if(!(s|q>>>0>r-b>>>0)){p=p+4|0;b=b+q|0;if(r>>>0>b>>>0){continue}break J}break}u=-1;if(s){break a}}ra(a,32,t,b,m);if(!b){b=0;break t}w=0;p=i[l+64>>2];while(1){q=i[p>>2];if(!q){break t}q=Sd(l+4|0,q);w=q+w|0;if((w|0)>(b|0)){break t}pa(a,l+4|0,q);p=p+4|0;if(w>>>0<b>>>0){continue}break}}ra(a,32,t,b,m^8192);b=(t|0)>(b|0)?t:b;continue b}b=U[f|0](a,n[l+64>>3],t,r,m,b)|0;continue b}g[l+55|0]=i[l+64>>2];r=1;q=B;m=p;break e}p=b+1|0;i[l+76>>2]=p;m=j[b+1|0];b=p;continue}}u=v;if(a){break a}if(!z){break d}b=1;while(1){a=i[(b<<2)+e>>2];if(a){Pd((b<<3)+d|0,a,c,k);u=1;b=b+1|0;if((b|0)!=10){continue}break a}break}u=1;if(b>>>0>=10){break a}while(1){if(i[(b<<2)+e>>2]){break f}b=b+1|0;if((b|0)!=10){continue}break}break a}u=-1;break a}s=s-q|0;r=(r|0)<(s|0)?s:r;p=r+u|0;b=(t|0)<(p|0)?p:t;ra(a,32,b,p,m);pa(a,x,u);ra(a,48,b,p,m^65536);ra(a,48,r,s,0);pa(a,q,s);ra(a,32,b,p,m^8192);continue}break}u=0}S=l+80|0;return u}function yc(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,k=0;d=S-528|0;S=d;a:{b:{switch(b|0){case 2:V(a,9133,15184,0);break a;case 1:V(a,9134,15197,0);break a;case 0:V(a,9135,15214,0);break a;default:break b}}i[22510]=i[21963];i[21963]=0;i[d+512>>2]=i[b+76>>2];V(a,9136,15226,d+512|0);V(a,9137,15233,0);c:{if(j[b+81|0]&16){V(a,9138,15246,0);break c}V(a,9139,15251,0)}c=i[b+80>>2];if(c&8192){V(a,9140,15259,0);c=i[b+80>>2]}if(c&512){V(a,9141,15271,0);c=i[b+80>>2]}if(c&131072){V(a,9142,15284,0);c=i[b+80>>2]}if(c&2048){V(a,9143,15299,0);c=i[b+80>>2]}if(c&1024){V(a,9144,15308,0);c=i[b+80>>2]}if(c&134217728){V(a,9145,15318,0);c=i[b+80>>2]}if(!(c&524288)){V(a,9146,15326,0);c=i[b+80>>2]}g=i[21886];if(!(!(c&16384)|!g)){V(a,9147,15332,0);g=i[21886];c=i[b+80>>2]}if(!(!(c&32768)|!g)){V(a,9418,15338,0);c=i[b+80>>2]}if(c&1048576){V(a,9419,15345,0);c=i[b+80>>2]}if(c&16777216){V(a,9148,15353,0);c=i[b+80>>2]}if(c&33554432){V(a,9149,15370,0);c=i[b+80>>2]}if(c&67108864){V(a,9420,15384,0);c=i[b+80>>2]}if(c&268435456){V(a,9150,15395,0);c=i[b+80>>2]}if(c&2097152){V(a,9151,15408,0);c=i[b+80>>2]}if((c&12582912)==4194304){V(a,9152,15418,0);c=i[b+80>>2]}if(c&8388608){V(a,9153,15431,0);c=i[b+80>>2]}if(c&536870912){V(a,9154,15444,0);c=i[b+80>>2]}if(c&65536){V(a,9155,15454,0);c=i[b+80>>2]}if(c&262144){V(a,9156,15463,0);c=i[b+80>>2]}if(c&1073741824){V(a,9157,15476,0);c=i[b+80>>2]}if((c|0)<=-1){V(a,9158,15488,0)}V(a,9159,13098,0);f=i[b+80>>2];d:{if(f&1048576){n[d+496>>3]=n[b+32>>3];V(a,9160,15499,d+496|0);break d}e:{if(!(f&2048)|!i[22472]){break e}c=i[b+32>>2];if(!c){break e}i[d+480>>2]=i[c+76>>2];V(a,9161,15518,d+480|0);break d}if(f&1024){c=i[b+32>>2];if(!c|(b|0)==(c|0)){break d}i[d+464>>2]=i[c+76>>2];V(a,9162,15542,d+464|0);break d}c=i[b+32>>2];if(f&512){if(!c){break d}i[d+448>>2]=i[c+76>>2];V(a,9163,15584,d+448|0);break d}if(!c){break d}i[d+432>>2]=i[c+76>>2];V(a,9164,15630,d+432|0)}c=i[b+80>>2]&511;f:{if(!c){break f}if((c|0)==511){i[d+416>>2]=511;V(a,9427,15656,d+416|0);break f}i[d+400>>2]=c;V(a,9165,15677,d+400|0)}c=i[b+24>>2];if(c){e=i[22007];i[d+384>>2]=15695;V(a,9211,15054,d+384|0);if(e){while(1){n[d+368>>3]=n[c>>3];V(a,9213,16652,d+368|0);c=c+8|0;e=e+ -1|0;if(e){continue}break}}V(a,9215,13098,0)}n[d+352>>3]=n[b+16>>3];V(a,9166,15710,d+352|0);if(!(i[b+40>>2]?0:i[22454]!=1)){ab(a,5,15732,b)}h=n[b+8>>3];if(!(h>n[11144]^1)){n[d+336>>3]=h;V(a,9167,15747,d+336|0)}c=i[b+64>>2];if(!(!c|!i[c+4>>2])){c=vb(c);g:{if((W(i[b+64>>2])|0)<=5){i[d+256>>2]=Y(c);V(a,9168,15773,d+256|0);f=i[b+64>>2];if(!f){break g}c=i[f+4>>2];if(!c){break g}g=f+4|0;while(1){f=Y(c);i[d+240>>2]=15807;e=i[22007];V(a,9211,15054,d+240|0);if((f&-3)!=-3){i[d+224>>2]=f;V(a,9212,16645,d+224|0)}g=g+4|0;if(e){while(1){n[d+208>>3]=n[c>>3];V(a,9213,16652,d+208|0);c=c+8|0;e=e+ -1|0;if(e){continue}break}}V(a,9215,13098,0);c=i[g>>2];if(c){continue}break}break g}e=W(i[b+64>>2]);f=i[b+64>>2];if((e|0)<=20){Jd(a,15813,f);break g}i[d+320>>2]=W(f);V(a,9169,15832,d+320|0);f=Y(c);if(!c){break g}e=i[22007];i[d+304>>2]=15863;V(a,9211,15054,d+304|0);if((f&-3)!=-3){i[d+288>>2]=f;V(a,9212,16645,d+288|0)}if(e){while(1){n[d+272>>3]=n[c>>3];V(a,9213,16652,d+272|0);c=c+8|0;e=e+ -1|0;if(e){continue}break}}V(a,9215,13098,0)}n[d+192>>3]=n[b>>3];V(a,9170,15874,d+192|0)}c=i[b+68>>2];if(!(!c|!i[c+4>>2])){f=vb(c);h:{if((W(i[b+68>>2])|0)<=5){i[d+112>>2]=Y(f);V(a,9171,15906,d+112|0);e=i[b+68>>2];if(!e){break h}c=i[e+4>>2];if(!c){break h}g=e+4|0;while(1){k=Y(c);i[d+96>>2]=15807;e=i[22007];V(a,9211,15054,d+96|0);if((k&-3)!=-3){i[d+80>>2]=k;V(a,9212,16645,d+80|0)}g=g+4|0;if(e){while(1){n[d+64>>3]=n[c>>3];V(a,9213,16652,d- -64|0);c=c+8|0;e=e+ -1|0;if(e){continue}break}}V(a,9215,13098,0);c=i[g>>2];if(c){continue}break}break h}e=W(i[b+68>>2]);c=i[b+68>>2];if((e|0)<=20){Jd(a,15941,c);break h}i[d+176>>2]=W(c);V(a,9172,15961,d+176|0);c=Y(f);if(!f){break h}e=i[22007];i[d+160>>2]=15863;V(a,9211,15054,d+160|0);if((c&-3)!=-3){i[d+144>>2]=c;V(a,9212,16645,d+144|0)}if(e){c=f;while(1){n[d+128>>3]=n[c>>3];V(a,9213,16652,d+128|0);c=c+8|0;e=e+ -1|0;if(e){continue}break}}V(a,9215,13098,0)}i[22680]=i[22680]+1;aa(f,b,d+520|0);n[d+48>>3]=n[d+520>>3];V(a,9173,15993,d+48|0)}f=i[b+52>>2];i[d+32>>2]=16025;V(a,9245,15054,d+32|0);i:{if(!f){break i}c=i[f+4>>2];if(!c){break i}e=f+4|0;while(1){f=Y(i[c+8>>2]);i[d+20>>2]=i[c+16>>2];i[d+16>>2]=f;V(a,9246,17754,d+16|0);c=i[e+4>>2];e=e+4|0;if(c){continue}break}}V(a,9247,13098,0);V(a,9174,16041,0);j:{b=i[b+60>>2];if(!b){break j}c=b+4|0;while(1){b=i[c>>2];c=c+4|0;k:{switch(b|0){case 2:V(a,9175,16067,0);continue;case 1:V(a,9176,16079,0);continue;case 0:break j;default:break k}}i[d>>2]=i[b+76>>2];V(a,9177,16095,d);continue}}V(a,9178,13098,0);i[21963]=i[22510]}S=d+528|0}function zc(a,b,c,d){var e=0,f=0,g=0,h=0,k=0;e=S-336|0;S=e;a:{b:{if(d){break b}c:{if(i[21922]){d=i[21920];if(j[c+82|0]&8){break c}d=i[c+60>>2];if(!d){break a}d=d+4|0;while(1){f=i[d>>2];if(!f){break a}d=d+4|0;if(!(j[f+82|0]&8)){continue}break}break b}d=i[c+80>>2]&524288;if(i[21920]){break c}d=i[c+24>>2];if(!d){break a}d=qa(d,0)}if(!d){break a}}if(i[22472]?!(!(i[c+80>>2]&2048)|(b|0)==5):0){break a}i[22484]=i[22484]+1;d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{switch(b+ -1|0){case 0:if(j[c+82|0]&16){n[e>>3]=n[c+32>>3];V(a,9009,13090,e);V(a,9010,13098,0);break a}V(a,9011,13100,0);break a;case 2:i[e+32>>2]=W(i[c+68>>2]);V(a,9012,13103,e+32|0);b=i[c+68>>2];q:{if(!b){break q}c=i[b+4>>2];if(!c){break q}d=b+4|0;while(1){i[e+16>>2]=Y(c);V(a,9013,13106,e+16|0);c=i[d+4>>2];d=d+4|0;if(c){continue}break}}V(a,9014,13098,0);break a;case 3:ab(a,4,0,c);break a;case 4:yc(a,c);if(!i[c+56>>2]){break a}td(a,c);break a;case 5:yc(a,c);break a;case 6:b=i[c+24>>2];if(!b){break a}d=0;f=i[22007];if(!f){break g}d=f;while(1){d=d+ -1|0;g=d<<3;n[g+(e+304|0)>>3]=s(t((n[b+g>>3]+1)*.5,-1),1);if(d){continue}break}if((f|0)<1){d=0;b=e+304|0;break e}d=0;b=i[21876];if((f|0)!=4){while(1){n[(e+304|0)+(d<<3)>>3]=(b|0)!=(d|0)?n[(e+304|0)+(d<<3)>>3]:0;d=d+1|0;if((f|0)!=(d|0)){continue}break}d=f;break f}d=(b|0)!=0;if((b|0)!=1){n[(e+304|d<<3)>>3]=n[e+312>>3];d=d+1|0}if((b|0)!=2){n[(e+304|0)+(d<<3)>>3]=n[e+320>>3];d=d+1|0}if((b|0)!=3){break h}break f;case 7:i[e+48>>2]=i[c+76>>2];V(a,9015,13110,e+48|0);break a;case 13:case 16:case 24:d=i[22007];if(!((b|0)==25|(d|0)!=3)){Oe(a,c,b);break a}if(!(i[c+80>>2]&8192?0:!((b|0)==17|(d|0)==2))){Ne(a,c,b);break a}d=i[22483];i[22483]=d+1;Me(a,c,d,b);break a;case 8:Sa(c,0,e+304|0);k=n[c+16>>3]-n[e+304>>3];break o;case 15:i[e+160>>2]=i[c+80>>2]&511;V(a,9016,13110,e+160|0);break a;case 10:k=n[c+16>>3];break o;case 25:break i;case 20:break j;case 19:break k;case 18:break l;case 9:break m;case 12:case 14:break n;case 11:break p;default:break a}}Sa(c,e+304|0,0);k=n[c+16>>3]-n[e+304>>3]}b=i[c+24>>2];if(!b){i[e+64>>2]=i[c+76>>2];V(a,9017,13114,e- -64|0);break a}d=0;r:{if(!i[21867]){d=1;s:{if(i[22007]<1){break s}n[e+112>>3]=n[b>>3];V(a,9020,13090,e+112|0);if(i[22007]<=1){break s}while(1){n[e+96>>3]=n[i[c+24>>2]+(d<<3)>>3];V(a,9020,13090,e+96|0);d=d+1|0;if((d|0)<i[22007]){continue}break}}n[e+80>>3]=k;V(a,9021,13090,e+80|0);break r}n[e+144>>3]=-k;V(a,9018,13090,e+144|0);if(i[22007]<1){break r}while(1){n[e+128>>3]=-n[i[c+24>>2]+(d<<3)>>3];V(a,9019,13090,e+128|0);d=d+1|0;if((d|0)<i[22007]){continue}break}}V(a,9022,13098,0);break a}d=i[22483];i[22483]=d+1;if(i[22007]==2){ii(a,c,b,d);break a}hi(a,c,b,d);break a}i[e+192>>2]=W(i[c+60>>2]);V(a,9023,13103,e+192|0);b=i[c+60>>2];t:{if(!b){break t}c=i[b+4>>2];if(!c){break t}d=b+8|0;while(1){b=e;f=i[c+72>>2];u:{if(f){c=f+ -1|0;break u}c=0-i[c+76>>2]|0}i[b+176>>2]=c;V(a,9024,13106,e+176|0);c=i[d>>2];d=d+4|0;if(c){continue}break}}V(a,9025,13098,0);break a}if(!i[22004]){V(i[22423],6067,13139,0);X(1,0,0)}v:{w:{if(!(n[c+16>>3]>0)){g=ha(i[22425]);h=i[22007];d=i[22004];b=i[c+24>>2];k=n[c+16>>3];if(!(k<-n[11151]^1)){break w}f=g;while(1){if(!h){break v}n[f>>3]=Mb(n[b>>3],n[c+16>>3],n[11150],e+304|0)+n[d>>3];f=f+8|0;d=d+8|0;b=b+8|0;h=h+ -1|0;if(!i[e+304>>2]){continue}break}$(g,i[22425])}c=i[22007];if(c){while(1){i[e+208>>2]=1168231105;i[e+212>>2]=-1071369290;V(a,9026,13090,e+208|0);c=c+ -1|0;if(c){continue}break}}V(a,9027,13098,0);break a}if(!h){break v}n[g>>3]=n[d>>3]-n[b>>3]/k;f=h+ -1|0;if(!f){break v}h=g;while(1){n[h+8>>3]=n[d+8>>3]-n[b+8>>3]/n[c+16>>3];b=b+8|0;d=d+8|0;h=h+8|0;f=f+ -1|0;if(f){continue}break}}Y(g);if(g){d=i[22007];if(d){c=g;while(1){n[e+224>>3]=n[c>>3];V(a,9214,13090,e+224|0);c=c+8|0;d=d+ -1|0;if(d){continue}break}}V(a,9215,13098,0)}$(g,i[22425]);break a}b=i[c+68>>2];if(!b){break a}d=i[b+4>>2];if(!d){break a}b=b+4|0;while(1){f=Y(i[fe(c,d,e+304|0)+8>>2]);d=Y(d);g=i[c+76>>2];n[e+256>>3]=n[e+304>>3];i[e+240>>2]=f;i[e+244>>2]=d;i[e+248>>2]=g;V(a,9028,13212,e+240|0);d=i[b+4>>2];b=b+4|0;if(d){continue}break}break a}if(i[21867]){V(a,9029,13230,0)}ab(a,21,0,c);break a}i[e+288>>2]=W(i[c+52>>2]);V(a,9030,13103,e+288|0);b=i[c+52>>2];x:{if(!b){break x}c=i[b+4>>2];if(!c){break x}d=b+4|0;while(1){i[e+272>>2]=Y(i[c+8>>2]);V(a,9031,13106,e+272|0);c=i[d+4>>2];d=d+4|0;if(c){continue}break}}V(a,9032,13098,0);break a}n[(e+304|0)+(d<<3)>>3]=n[e+328>>3];d=d+1|0;break f}b=e+304|0;break e}b=e+304|0;if((d|0)>2){break d}}d=d<<3;fa(d+(e+304|0)|0,0,24-d|0)}if(i[21918]!=(f|0)){_a(b,3,1);f=i[22007]}if((f|0)<=2){gi(a,c,b);break a}d=i[c+80>>2]&8192;if((f|0)==3){if(d){fi(a,c,b);break a}ei(a,c,b);break a}if(d){di(a,c,b);break a}ci(a,c,b)}S=e+336|0}function Nf(a,b,c,d,e){var f=0,g=0,h=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;f=S-432|0;S=f;g=i[b+4>>2];a:{if(g>>>0<l[b+104>>2]){i[b+4>>2]=g+1;g=j[g|0];break a}g=na(b)}b:{c:{while(1){if((g|0)!=48){d:{if((g|0)!=46){break b}g=i[b+4>>2];if(g>>>0>=l[b+104>>2]){break d}i[b+4>>2]=g+1;g=j[g|0];break c}}else{g=i[b+4>>2];if(g>>>0<l[b+104>>2]){y=1;i[b+4>>2]=g+1;g=j[g|0]}else{y=1;g=na(b)}continue}break}g=na(b)}x=1;if((g|0)!=48){break b}while(1){k=k+ -1|0;g=u+ -1|0;if((g|0)!=-1){k=k+1|0}u=g;g=i[b+4>>2];e:{if(g>>>0<l[b+104>>2]){i[b+4>>2]=g+1;g=j[g|0];break e}g=na(b)}if((g|0)==48){continue}break}y=1}m=1073676288;while(1){f:{z=g|32;g:{h:{A=g+ -48|0;if(A>>>0<10){break h}if(z+ -97>>>0>5?(g|0)!=46:0){break f}if((g|0)!=46){break h}if(x){break f}x=1;u=q;k=h;break g}g=(g|0)>57?z+ -87|0:A;i:{if((h|0)<0?1:(h|0)<=0?q>>>0<=7:0){r=g+(r<<4)|0;break i}if((h|0)<0?1:(h|0)<=0?q>>>0<=28:0){wa(f+48|0,g);ea(f+32|0,v,w,p,m,0,0,0,1073414144);v=i[f+32>>2];w=i[f+36>>2];p=i[f+40>>2];m=i[f+44>>2];ea(f+16|0,v,w,p,m,i[f+48>>2],i[f+52>>2],i[f+56>>2],i[f+60>>2]);va(f,n,o,s,t,i[f+16>>2],i[f+20>>2],i[f+24>>2],i[f+28>>2]);s=i[f+8>>2];t=i[f+12>>2];n=i[f>>2];o=i[f+4>>2];break i}if(!g|D){break i}ea(f+80|0,v,w,p,m,0,0,0,1073610752);va(f- -64|0,n,o,s,t,i[f+80>>2],i[f+84>>2],i[f+88>>2],i[f+92>>2]);s=i[f+72>>2];t=i[f+76>>2];D=1;n=i[f+64>>2];o=i[f+68>>2]}g=q+1|0;if(g>>>0<1){h=h+1|0}q=g;y=1}g=i[b+4>>2];if(g>>>0<l[b+104>>2]){i[b+4>>2]=g+1;g=j[g|0]}else{g=na(b)}continue}break}j:{k:{if(!y){if(!i[b+104>>2]){break k}c=i[b+4>>2];i[b+4>>2]=c+ -1;i[b+4>>2]=c+ -2;if(!x){break k}i[b+4>>2]=c+ -3;break k}if((h|0)<0?1:(h|0)<=0?q>>>0<=7:0){p=q;m=h;while(1){r=r<<4;p=p+1|0;if(p>>>0<1){m=m+1|0}if((p|0)!=8|m){continue}break}}l:{if((g&-33)==80){p=Id(b);g=T;m=g;if(p|(g|0)!=-2147483648){break l}p=0;m=0;if(!i[b+104>>2]){break l}i[b+4>>2]=i[b+4>>2]+ -1;break l}p=0;m=0;if(!i[b+104>>2]){break l}i[b+4>>2]=i[b+4>>2]+ -1}if(!r){La(f+112|0,+(e|0)*0);n=i[f+112>>2];o=i[f+116>>2];c=i[f+120>>2];b=i[f+124>>2];break j}g=x?u:q;k=(x?k:h)<<2|g>>>30;b=p+(g<<2)|0;g=m+k|0;g=b>>>0<p>>>0?g+1|0:g;b=b+ -32|0;h=g+ -1|0;q=b;h=b>>>0<4294967264?h+1|0:h;if((h|0)>0?1:(h|0)>=0?b>>>0>0-d>>>0:0){i[23646]=68;wa(f+160|0,e);ea(f+144|0,i[f+160>>2],i[f+164>>2],i[f+168>>2],i[f+172>>2],-1,-1,-1,2147418111);ea(f+128|0,i[f+144>>2],i[f+148>>2],i[f+152>>2],i[f+156>>2],-1,-1,-1,2147418111);n=i[f+128>>2];o=i[f+132>>2];c=i[f+136>>2];b=i[f+140>>2];break j}b=d+ -226|0;g=q>>>0>=b>>>0;b=b>>31;if((h|0)>(b|0)?1:(h|0)>=(b|0)?g:0){if((r|0)>-1){while(1){va(f+416|0,n,o,s,t,0,0,0,-1073807360);m=Fd(n,o,s,t,1073610752);g=(m|0)<0;b=g;va(f+400|0,n,o,s,t,b?n:i[f+416>>2],b?o:i[f+420>>2],b?s:i[f+424>>2],b?t:i[f+428>>2]);h=h+ -1|0;b=q+ -1|0;if((b|0)!=-1){h=h+1|0}q=b;s=i[f+408>>2];t=i[f+412>>2];n=i[f+400>>2];o=i[f+404>>2];r=r<<1|(m|0)>-1;if((r|0)>-1){continue}break}}g=q;b=d;m=(g-b|0)+32|0;k=h-((b>>31)+(g>>>0<b>>>0)|0)|0;b=m;k=b>>>0<32?k+1|0:k;c=((k|0)<0?1:(k|0)<=0?b>>>0<c>>>0:0)?(b|0)>0?b:0:c;m:{if((c|0)>=113){wa(f+384|0,e);u=i[f+392>>2];k=i[f+396>>2];v=i[f+384>>2];w=i[f+388>>2];d=0;b=0;break m}La(f+352|0,Xb(1,144-c|0));wa(f+336|0,e);v=i[f+336>>2];w=i[f+340>>2];u=i[f+344>>2];k=i[f+348>>2];Ld(f+368|0,i[f+352>>2],i[f+356>>2],i[f+360>>2],i[f+364>>2],v,w,u,k);B=i[f+376>>2];C=i[f+380>>2];d=i[f+372>>2];b=i[f+368>>2]}c=!(r&1)&((ib(n,o,s,t,0,0,0,0)|0)!=0&(c|0)<32);tb(f+320|0,c+r|0);ea(f+304|0,v,w,u,k,i[f+320>>2],i[f+324>>2],i[f+328>>2],i[f+332>>2]);va(f+272|0,i[f+304>>2],i[f+308>>2],i[f+312>>2],i[f+316>>2],b,d,B,C);ea(f+288|0,c?0:n,c?0:o,c?0:s,c?0:t,v,w,u,k);va(f+256|0,i[f+288>>2],i[f+292>>2],i[f+296>>2],i[f+300>>2],i[f+272>>2],i[f+276>>2],i[f+280>>2],i[f+284>>2]);Cc(f+240|0,i[f+256>>2],i[f+260>>2],i[f+264>>2],i[f+268>>2],b,d,B,C);e=i[f+240>>2];d=i[f+244>>2];c=i[f+248>>2];b=i[f+252>>2];if(!ib(e,d,c,b,0,0,0,0)){i[23646]=68}Kd(f+224|0,e,d,c,b,q);n=i[f+224>>2];o=i[f+228>>2];c=i[f+232>>2];b=i[f+236>>2];break j}i[23646]=68;wa(f+208|0,e);ea(f+192|0,i[f+208>>2],i[f+212>>2],i[f+216>>2],i[f+220>>2],0,0,0,65536);ea(f+176|0,i[f+192>>2],i[f+196>>2],i[f+200>>2],i[f+204>>2],0,0,0,65536);n=i[f+176>>2];o=i[f+180>>2];c=i[f+184>>2];b=i[f+188>>2];break j}La(f+96|0,+(e|0)*0);n=i[f+96>>2];o=i[f+100>>2];c=i[f+104>>2];b=i[f+108>>2]}i[a>>2]=n;i[a+4>>2]=o;i[a+8>>2]=c;i[a+12>>2]=b;S=f+432|0}function Wg(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;a=S-368|0;S=a;i[a+348>>2]=0;if(i[21886]>=1){n[a+320>>3]=n[11235];n[a+328>>3]=n[11233];V(i[22423],1022,51492,a+320|0)}c=-(n[11157]+n[11144]);q=n[11235];u=q>c?c:q;k=i[22428];s=i[22440];q=0;a:{if(!i[22275]){m=k;break a}b:{if(i[21869]|(i[21997]|(i[21958]|(i[21986]|(i[21888]|(i[21889]|i[21959])))))){break b}d=i[21927];if((d|0)==24|!d){break b}m=k;break a}if(i[21886]>=1){V(i[22423],1023,51572,0)}i[a+340>>2]=je();d=i[22440];c:{if(!d){m=k;break c}m=k;while(1){e=i[d>>2];if(!e){break c}g=e;f=i[d+12>>2];d:{if(!f){break d}e=i[f+4>>2];if(!e){break d}g=f+8|0;while(1){i[22686]=i[22686]+1;aa(i[d+8>>2],e,a+352|0);c=n[a+352>>3];e:{if(c<q^1){break e}if(!(n[11235]/u>100^1)){if(!i[21926]){m=e;q=c;s=d;if(i[21857]){break e}}c=sb(i[e+52>>2]);m=i[22423];f=Y(i[d+8>>2]);h=i[d+16>>2];i[a+304>>2]=i[e+76>>2];n[a+312>>3]=c;i[a+288>>2]=f;i[a+292>>2]=h;n[a+296>>3]=n[a+352>>3];V(m,7083,51617,a+288|0);c=n[a+352>>3]}m=e;q=c;s=d}b=n[10995];f:{if(!(b<-c|c>b|i[22435]==(e|0))){if(i[22439]!=(d|0)){break f}}c=sb(i[e+52>>2]);f=i[22423];h=Y(i[d+8>>2]);l=i[d+16>>2];i[a+272>>2]=i[e+76>>2];n[a+280>>3]=c;i[a+256>>2]=h;i[a+260>>2]=l;n[a+264>>3]=n[a+352>>3];V(f,8093,51731,a+256|0)}e=i[g>>2];g=g+4|0;if(e){continue}break}g=i[d>>2]}d=g;if(d){continue}break}}g:{if(!i[21899]){break g}c=n[11235];if(n[11421]>c^1){break g}n[11421]=c}n[11235]=q;_(a+340|0)}if(i[21886]>=1){V(i[22423],1055,51798,0)}c=n[11233];b=n[11144];p=n[11157];g=Xg();i[a+344>>2]=g;b=p+b;p=c<b?b:c;h:{if(!g){c=0;g=k;break h}d=i[g+4>>2];c=0;v=W(g);if((v|0)<1){g=k;break h}e=0;g=k;while(1){i:{if(!d){break i}h=i[22009];f=i[22010]+(o(i[22007],e)<<3)|0;j:{if((e|0)<(h|0)){break j}h=e-h|0;f=0;if((h|0)>=(W(i[22500])|0)){break j}f=i[(i[22500]+(h<<2)|0)+4>>2]}if((f|0)==i[21880]){break i}h=0;i[22988]=i[22988]+1;aa(f,d,a+352|0);i[a+348>>2]=i[a+348>>2]+1;l=Ac(1,f,d,0,a+352|0,a+348|0);b=n[a+352>>3];k:{if(!l){d=g;break k}if(b>=c^1){d=g;h=l;break k}l:{m:{if(!(!i[21911]|j[l+82|0]&8)){k=Cg(f,l,a+352|0,a+364|0);if(k){b=n[a+352>>3];if(b>c){break m}}w=w+1|0;break l}k=l}if(b/p>100^1|(i[21857]?!i[21926]:0)){break l}c=sb(i[k+52>>2]);b=n[11233];r=n[11157];g=i[22423];h=Y(f);l=i[k+76>>2];t=i[d+76>>2];x=n[a+352>>3];b=(r<b?b:r)*30;n:{if(!(c<b+b^1)){n[a+216>>3]=c;i[a+208>>2]=l;n[a+200>>3]=x;i[a+196>>2]=t;i[a+192>>2]=h;V(g,7087,51844,a+192|0);break n}n[a+248>>3]=c;i[a+240>>2]=l;n[a+232>>3]=x;i[a+228>>2]=t;i[a+224>>2]=h;V(g,7088,51975,a+224|0)}t=k}b=n[a+352>>3];c=b;h=k;y=f}if(!(!h|i[22435]!=(h|0)?!(b>n[10995]):0)){l=i[22423];g=Y(f);b=n[a+352>>3];i[a+176>>2]=h?i[h+76>>2]:-1;n[a+168>>3]=b;i[a+160>>2]=g;V(l,8094,52105,a+160|0)}g=d}e=e+1|0;d=i[(i[a+344>>2]+(e<<2)|0)+4>>2];if((e|0)!=(v|0)){continue}break}}i[22604]=i[22604]+i[a+348>>2];_(a+344|0);b=n[11233];n[11397]=c-b;if(!(n[11398]<b^1)){n[11398]=b}o:{if(i[21859]|c>n[11144]^1){break o}e=i[22428];if(!e){break o}while(1){f=i[e+48>>2];if(!f){break o}b=n[e+8>>3];d=f;p:{if(c<b^1){break p}if(!i[21888]){c=b;d=f;break p}r=n[11144];d=f;if(c+r<b^1){break p}d=i[e+76>>2];n[a+144>>3]=c;n[a+152>>3]=r;i[a+128>>2]=d;n[a+136>>3]=b;V(i[22423],7082,52145,a+128|0);d=i[e+48>>2]}e=d;if(e){continue}break}}n[11233]=c;ie();i[22464]=1;if(i[21886]>=1){d=i[22423];e=Y(i[s+8>>2]);b=n[11235];f=i[s+16>>2];h=i[m+76>>2];l=Y(y);k=i[k+76>>2];g=i[g+76>>2];i[a+96>>2]=h;i[a+100>>2]=l;i[a+104>>2]=g;n[a+112>>3]=n[11233];i[a+120>>2]=k;i[a+124>>2]=w;i[a+80>>2]=e;i[a+84>>2]=f;n[a+88>>3]=b;V(d,1024,52317,a+80|0)}q:{if(i[21857]){break q}b=c/p;if(!(b>100^1)){n[a>>3]=c;n[a+8>>3]=b;V(i[22423],6297,52481,a);X(8,t,0);break q}r:{if(i[21859]){break r}b=n[11157];r=b*1e3;if(p>r^1){break r}if(c>r^1){break q}c=n[11144];n[a+16>>3]=p;n[a+24>>3]=p/(b+c);V(i[22423],6298,52667,a+16|0);X(8,t,0);break q}c=n[11235];b=c/u;if(!(b>100^1)){n[a+32>>3]=c;n[a+40>>3]=b;V(i[22423],6354,52880,a+32|0);X(8,m,0);break q}b=n[11157];p=b*-1e3;if(u<p^1|c<p^1){break q}k=i[m+76>>2];d=i[s+16>>2];n[a- -64>>3]=-c/(b+n[11144]);i[a+48>>2]=d;i[a+52>>2]=k;n[a+56>>3]=q;V(i[22423],6380,53058,a+48|0);X(8,m,0)}S=a+368|0}function ob(a,b,c,d,e,f){var g=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,F=0,G=0;g=S-400|0;S=g;l=i[(c+ -1>>>0<13?(c<<2)+86672|0:86672)>>2];a:{if(j[b+81|0]&2?0:!(j[a+81|0]&2)){break a}if(!i[21994]){p=i[b+76>>2];i[g+368>>2]=i[a+76>>2];i[g+372>>2]=p;i[g+376>>2]=c;i[g+380>>2]=l;V(i[22423],6226,40293,g+368|0);ca(5,a,b)}p=i[b+80>>2];if(!(p&512)){break a}i[b+80>>2]=p&-268435969}p=1;k=i[22992];o=k+1|0;i[22992]=o;r=i[21972];if(!(!r|!i[22482]|(k|0)<(r+i[22525]|0))){i[22525]=o;E(g+396|0)|0;k=Hb(g+396|0);o=C()|0;r=i[22433];v=i[22443];w=i[22423];x=i[k+8>>2];y=i[k+4>>2];k=i[k>>2];z=i[22648];A=i[22650];B=i[22992];D=i[22444];h=n[11233];m=n[11235];F=W(i[22501]);i[g+352>>2]=v-r;n[g+344>>3]=m;n[g+336>>3]=h;n[g+320>>3]=+(o>>>0)/1e6;i[g+356>>2]=D-F;i[g+328>>2]=(B-A|0)+z;i[g+312>>2]=k;i[g+308>>2]=y;i[g+304>>2]=x;V(w,8087,47215,g+304|0)}b:{if(i[22453]<i[21973]){break b}c:{if(!d){break c}q=n[10995];h=-n[d>>3];m=n[e>>3];if(m>q^1?!(q<h):0){break c}i[21886]=i[21986];p=i[b+76>>2];i[g+272>>2]=i[a+76>>2];i[g+276>>2]=p;i[g+280>>2]=c;i[g+284>>2]=l;i[g+288>>2]=i[22455];i[g+256>>2]=i[22992];n[g+264>>3]=m>h?m:h;V(i[22423],8075,40429,g+256|0);p=0;break b}k=i[22435];if((b|0)!=(k|0)?(k|0)!=(a|0):0){break b}p=0;G=i[21886];i[21886]=4;k=i[b+76>>2];o=i[a+76>>2];i[g+240>>2]=l;i[g+244>>2]=i[22455];i[g+224>>2]=i[22992];i[g+228>>2]=o;i[g+232>>2]=k;i[g+236>>2]=c;V(i[22423],8076,40542,g+224|0)}if(i[21886]>=2){d:{if(!d){m=-2;h=-2;break d}m=n[d>>3];h=n[e>>3]}k=i[b+76>>2];o=i[a+76>>2];i[g+192>>2]=l;n[g+200>>3]=m;n[g+208>>3]=h;n[g+216>>3]=n[11233];i[g+176>>2]=i[22992];i[g+180>>2]=o;i[g+184>>2]=k;i[g+188>>2]=c;V(i[22423],2081,40640,g+176|0)}e:{if(i[21857]|!d){break e}h=n[b+8>>3];m=n[a+8>>3];q=n[11157]*100;m=q<m?m:q;m=m<h?h:m;if(m<-n[d>>3]^1?!(n[e>>3]>m):0){break e}h=sb(i[a+52>>2]);q=n[d>>3];s=n[11157]+n[11144];u=-q/s;t=n[e>>3];s=t/s;k=i[b+76>>2];o=i[a+76>>2];r=i[22423];f:{if(!(h>m^1)){n[g+96>>3]=h;n[g+88>>3]=u;n[g+80>>3]=q;n[g+72>>3]=s;n[g- -64>>3]=t;i[g+60>>2]=l;i[g+56>>2]=c;i[g+52>>2]=k;i[g+48>>2]=o;V(r,6347,40762,g+48|0);break f}n[g+160>>3]=h;n[g+152>>3]=u;n[g+144>>3]=q;n[g+136>>3]=s;n[g+128>>3]=t;i[g+124>>2]=l;i[g+120>>2]=c;i[g+116>>2]=k;i[g+112>>2]=o;V(r,6348,40952,g+112|0)}ca(8,a,b)}if(!(j[b+81|0]&8?0:!(j[a+81|0]&8|(a|0)==(b|0)))){k=i[b+76>>2];i[g+32>>2]=i[a+76>>2];i[g+36>>2]=k;i[g+40>>2]=c;i[g+44>>2]=l;V(i[22423],6099,41149,g+32|0);ca(5,a,b)}l=i[22007]+1|0;if((i[22443]-i[22433]|0)<=(l|0)){i[g+16>>2]=l;V(i[22423],6227,41265,g+16|0);if(!(i[21897]|i[22007]<5)){V(i[22423],8079,41385,0)}X(7,0,0)}if(!i[22275]){Na()}Pa(a);Pa(b);if(i[21886]>=4){ma(41426,a,b,0,0)}g:{if(!d){break g}h=n[e>>3];if(!(n[11233]<h^1)){n[11233]=h;h=n[e>>3]}if(!(n[11234]<h^1)){n[11234]=h;h=n[e>>3]}if(!(n[b+8>>3]<h^1)){n[b+8>>3]=h}h=n[d>>3];if(!(n[11235]>h^1)){n[11235]=h}l=i[b+80>>2];if(l&268435456){break g}h=n[11159];if(n[d>>3]<-h^1?!(n[e>>3]>h):0){break g}i[b+80>>2]=l|268435456;i[23054]=i[23054]+1}d=i[b+80>>2];e=(d&511)+(i[a+80>>2]&511)|0;i[b+80>>2]=(e>>>0>509?d|511:e+1|d&-538968576)&-538968065|536870912;uh(a,b);h:{i:{l=i[22007];if((l|0)<3){break i}d=W(i[a+52>>2]);l=i[22007];if((d|0)!=(l|0)){break i}th(a,b,f);break h}f=i[22493]+1|0;i[22493]=f;e=i[b+52>>2];j:{if(!e){break j}d=i[e+4>>2];if(!d){break j}e=e+4|0;while(1){i[d+20>>2]=f;d=i[e+4>>2];e=e+4|0;if(d){continue}break}}d=b+52|0;k:{if((l|0)==2){sh(a,b);break k}ph(a,b);oh(i[a+52>>2],d)}nh(a,b);mh(a,b);if(j[b+81|0]&4){break h}e=i[d>>2];if(!e){break h}d=i[e+4>>2];if(!d){break h}e=e+8|0;while(1){if(!(j[d+24|0]&16)){Xa(d);Oa(d)}d=i[e>>2];e=e+4|0;if(d){continue}break}}e=i[b+80>>2];d=91296;l:{if(e&16777216){break l}d=91304;if(!(e&1024)){break l}d=j[a+81|0]&4?91312:91264}i[d>>2]=i[d>>2]+1;Ha(b);Ya(b);i[b+80>>2]=i[b+80>>2]&-134218753|1024;te(a,b,c);if(!p){V(i[22423],8080,41434,0);i[21886]=G}if((c|0)!=13){if(i[21886]>=3){c=i[b+76>>2];i[g>>2]=i[a+76>>2];i[g+4>>2]=c;V(i[22423],3076,41470,g)}pc(b);bd(a);Za(b);ye(b)}nb(a,b);S=g+400|0}function ig(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,o=0,p=0,r=0,s=0,t=0,u=0,v=0,x=0,y=0;c=1;vi(+b);e=si(1)|0;d=si(0)|0;l=e;a:{b:{g=e;h=g&2147483647;c:{if(!(d|h)){break c}vi(+a);j=si(1)|0;t=si(0)|0;p=j;if((j|0)==1072693248?!t:0){break c}d:{j=p&2147483647;if(!(j>>>0>2146435072|(j|0)==2146435072&(t|0)!=0|h>>>0>2146435072)){if(!d|(h|0)!=2146435072){break d}}return a+b}e:{f:{g:{h:{if((p|0)>-1){break h}r=2;if(h>>>0>1128267775){break g}if(h>>>0<1072693248){break h}e=h>>>20|0;if(h>>>0>=1094713344){f=1075-e|0;e=d>>>f|0;r=0;if((d|0)!=e<<f){break g}r=2-(e&1)|0;break g}if(d){break e}d=1043-e|0;e=h>>>d|0;if((h|0)!=e<<d){break f}f=2-(e&1)|0;break f}r=0}f=r;if(d){break e}}if((h|0)==2146435072){if(!(j+ -1072693248|t)){break c}if(j>>>0>=1072693248){return(g|0)>-1?b:0}return(g|0)>-1?0:-b}if((h|0)==1072693248){if((g|0)>-1){return a}return 1/a}if((g|0)==1073741824){return a*a}if((g|0)!=1071644672|(p|0)<0){break e}return w(a)}c=q(a);if(!((j?(p&1073741823)!=1072693248:0)|t)){c=(g|0)<0?1/c:c;if((p|0)>-1){break c}if(!(j+ -1072693248|f)){a=c-c;return a/a}return(f|0)==1?-c:c}m=1;i:{if((p|0)>-1){break i}j:{switch(f|0){case 0:a=a-a;return a/a;case 1:break j;default:break i}}m=-1}k:{if(h>>>0>=1105199105){if(h>>>0>=1139802113){if(j>>>0<=1072693247){return(g|0)<0?z:0}return(g|0)>0?z:0}if(j>>>0<=1072693246){return(g|0)<0?m*1e+300*1e+300:m*1e-300*1e-300}if(j>>>0>=1072693249){return(g|0)>0?m*1e+300*1e+300:m*1e-300*1e-300}a=c+ -1;c=a*1.4426950216293335;k=a*1.9259629911266175e-8+a*a*(.5-a*(a*-.25+.3333333333333333))*-1.4426950408889634;vi(+(c+k));d=si(1)|0;si(0)|0;ti(0,0);ti(1,d|0);a=+ui();i=a-c;break k}a=c*9007199254740992;d=j>>>0<1048576;c=d?a:c;vi(+a);e=si(1)|0;si(0)|0;f=d?e:j;g=f&1048575;e=g|1072693248;h=(f>>20)+(d?-1076:-1023)|0;f=0;l:{if(g>>>0<235663){break l}if(g>>>0<767610){f=1;break l}e=e+ -1048576|0;h=h+1|0}g=f<<3;s=n[g+85568>>3];vi(+c);si(1)|0;ti(0,si(0)|0);ti(1,e|0);k=+ui();i=n[g+85536>>3];o=k-i;u=1/(i+k);c=o*u;vi(+c);d=si(1)|0;si(0)|0;ti(0,0);ti(1,d|0);a=+ui();x=a;v=a*a;y=o;ti(0,0);ti(1,((e>>1|536870912)+(f<<18)|0)+524288|0);o=+ui();k=u*(y-a*o-a*(k-(o-i)));i=(c+a)*k;a=c*c;i=i+a*a*(a*(a*(a*(a*(a*.20697501780033842+.23066074577556175)+.272728123808534)+.33333332981837743)+.4285714285785502)+.5999999999999946);vi(+(v+3+i));d=si(1)|0;si(0)|0;ti(0,0);ti(1,d|0);a=+ui();o=x*a;c=k*a+c*(i-(a+ -3-v));vi(+(o+c));d=si(1)|0;si(0)|0;ti(0,0);ti(1,d|0);a=+ui();i=a*.9617967009544373;k=n[g+85552>>3]+((c-(a-o))*.9617966939259756+a*-7.028461650952758e-9);c=+(h|0);vi(+(s+(i+k)+c));d=si(1)|0;si(0)|0;ti(0,0);ti(1,d|0);a=+ui();i=a-c-s-i}ti(0,0);ti(1,l|0);s=+ui();c=a*s;a=(k-i)*b+(b-s)*a;b=c+a;vi(+b);f=si(1)|0;d=si(0)|0;e=f;l=d;m:{d=e;if((d|0)>=1083179008){if(l|d+ -1083179008){break b}if(a+8.008566259537294e-17>b-c^1){break m}break b}if((d&2147482624)>>>0<1083231232){break m}if(l|d+1064252416){break a}if(a<=b-c^1){break m}break a}f=0;l=d&2147483647;if(l>>>0>=1071644673){e=d+(1048576>>>(l>>>20|0)+ -1022|0)|0;l=e>>>20&2047;f=(e&1048575|1048576)>>>1043-l|0;f=(d|0)<0?0-f|0:f;ti(0,0);ti(1,e&-1048576>>l+ -1023);c=c- +ui();vi(+(a+c));d=si(1)|0;si(0)|0}ti(0,0);ti(1,d|0);b=+ui();k=b*.6931471824645996;c=(a-(b-c))*.6931471805599453+b*-1.904654299957768e-9;a=k+c;b=a*a;b=a-b*(b*(b*(b*(b*4.1381367970572385e-8+ -16533902205465252e-22)+6613756321437934e-20)+ -.0027777777777015593)+.16666666666666602);i=a*b/(b+ -2);b=c-(a-k);a=a-(i-(b+a*b))+1;vi(+a);d=si(1)|0;e=si(0)|0;d=(f<<20)+d|0;n:{if((d|0)<=1048575){a=Xb(a,f);break n}ti(0,e|0);ti(1,d|0);a=+ui()}c=m*a}return c}return m*1e+300*1e+300}return m*1e-300*1e-300}function th(a,b,c){var d=0,e=0,f=0,h=0,k=0,l=0,m=0,n=0,o=0,p=0;e=S-160|0;S=e;a:{if(c){h=i[i[a+52>>2]+4>>2];if(i[21886]>=4){c=i[b+76>>2];d=i[a+76>>2];i[e+144>>2]=i[h+16>>2];i[e+148>>2]=d;i[e+152>>2]=c;V(i[22423],4086,41702,e+144|0)}b:{if(j[b+81|0]&4){break b}d=i[b+52>>2];if(!d){break b}c=i[d+4>>2];if(!c){break b}d=d+8|0;while(1){if(!(j[c+24|0]&16)){Xa(c);Oa(c)}c=i[d>>2];d=d+4|0;if(c){continue}break}}if(i[i[b+52>>2]+4>>2]==(h|0)){break a}Va(b+52|0,0,h);f=1;break a}i[22836]=i[22836]+1;d=i[a+52>>2];c:{if(!d){break c}c=i[d+4>>2];if(!c){break c}d=d+4|0;while(1){g[c+24|0]=j[c+24|0]&254;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}c=i[a+56>>2];d:{if(!c){break d}c=c+4|0;while(1){f=i[c>>2];if(!f){break d}c=c+4|0;d=i[f+4>>2];if((d|0)==(a|0)){d=i[f+8>>2]}if((b|0)!=(d|0)){continue}break}d=i[f>>2];if(!d){break d}c=i[d+4>>2];if(!c){break d}d=d+4|0;while(1){g[c+24|0]=j[c+24|0]|9;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}c=i[a+52>>2];e:{if(!c){break e}c=c+4|0;while(1){h=i[c>>2];if(!h){h=0;break e}c=c+4|0;if(g[h+24|0]&1){continue}break}}if(i[21886]>=4){c=i[b+76>>2];d=i[a+76>>2];i[e+128>>2]=i[h+16>>2];i[e+132>>2]=d;i[e+136>>2]=c;V(i[22423],4039,41757,e+128|0)}f=le(b,h);if(!(j[b+81|0]&4)){d=i[b+52>>2];if(!d){break a}c=i[d+4>>2];if(!c){break a}d=d+8|0;while(1){if(!(j[c+24|0]&16)){Xa(c);Oa(c)}c=i[d>>2];d=d+4|0;if(c){continue}break}break a}if(j[h+24|0]&16){break a}Xa(h);Oa(h)}if(i[21886]>=4){i[e+112>>2]=i[a+76>>2];V(i[22423],4040,41816,e+112|0)}d=i[a+52>>2];f:{if(!d){break f}c=i[d+4>>2];if(!c){break f}d=d+8|0;if(!f){while(1){ja(i[c+12>>2],a);if(!i[i[c+12>>2]+8>>2]){i[22838]=i[22838]+1;if(i[21886]>=2){f=i[b+76>>2];k=i[a+76>>2];i[e+80>>2]=i[c+16>>2];i[e+84>>2]=k;i[e+88>>2]=f;V(i[22423],2035,42155,e+80|0)}Ma(i[b+52>>2],c);g[c+24|0]=j[c+24|0]|4;Z(90004,c)}c=i[d>>2];d=d+4|0;if(c){continue}break f}}while(1){f=d;g:{if((c|0)!=(h|0)){ja(i[c+12>>2],a);if(i[i[c+12>>2]+8>>2]){break g}i[22838]=i[22838]+1;if(i[21886]>=2){d=i[b+76>>2];k=i[a+76>>2];i[e+96>>2]=i[c+16>>2];i[e+100>>2]=k;i[e+104>>2]=d;V(i[22423],2035,42155,e+96|0)}Ma(i[b+52>>2],c);g[c+24|0]=j[c+24|0]|4;Z(90004,c);break g}Aa(i[h+12>>2],a,b)}d=f+4|0;c=i[f>>2];if(c){continue}break}}if(i[21886]>=4){c=i[b+76>>2];i[e+64>>2]=i[a+76>>2];i[e+68>>2]=c;V(i[22423],4041,41865,e- -64|0)}f=i[22492]+1|0;i[22492]=f;d=i[b+60>>2];h:{if(!d){break h}c=i[d+4>>2];if(!c){break h}d=d+4|0;while(1){i[c+72>>2]=f;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}c=i[a+56>>2];i:{if(!c){break i}d=i[c+4>>2];if(!d){break i}m=b+60|0;n=b+56|0;f=c+4|0;k=f+4|0;while(1){c=i[d+4>>2];if((c|0)==(a|0)){c=i[d+8>>2]}j:{if((b|0)==(c|0)){fd(d);ja(i[m>>2],a);break j}k:{l:{if(!(j[c+82|0]&32)){break l}if(da(i[c+60>>2],a)){break l}d=i[b+76>>2];f=i[c+76>>2];l=i[a+76>>2];i[e+48>>2]=l;i[e+52>>2]=f;i[e+56>>2]=l;i[e+60>>2]=d;V(i[22423],6356,41926,e+48|0);ca(5,a,c);break k}if(i[21886]>=4){f=i[c+72>>2];l=i[b+76>>2];o=i[c+76>>2];p=i[d+12>>2];i[e+32>>2]=i[i[c+60>>2]+4>>2]==(a|0);i[e+16>>2]=p;i[e+20>>2]=o;i[e+24>>2]=l;i[e+28>>2]=(f|0)!=i[22492];V(i[22423],4059,42019,e+16|0)}Z(n,d);m:{if(i[c+72>>2]!=i[22492]){Z(m,c);Aa(i[c+60>>2],a,b);i[c+72>>2]=i[22492];break m}if(j[c+81|0]&32){Pa(c)}f=i[c+60>>2];if(i[f+4>>2]==(a|0)){ja(f,b);Aa(i[c+60>>2],a,b);break m}ja(f,a)}if(i[d+4>>2]==(a|0)){i[d+4>>2]=b;g[d+16|0]=j[d+16|0]&223;break k}i[d+8>>2]=b;g[d+16|0]=j[d+16|0]&191}f=k}k=f+4|0;d=i[f>>2];if(d){continue}break}}if(i[21886]>=3){b=i[b+76>>2];c=i[h+16>>2];i[e>>2]=i[a+76>>2];i[e+4>>2]=c;i[e+8>>2]=b;V(i[22423],3006,42099,e)}S=e+160|0}function va(a,b,c,d,e,f,g,h,j){var k=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;l=S-112|0;S=l;s=h;m=j&2147483647;n=c+ -1|0;k=b+ -1|0;if((k|0)!=-1){n=n+1|0}t=(k|0)==-1&(n|0)==-1;p=e&2147483647;o=p;q=d;k=(c|0)==(n|0)&k>>>0<b>>>0|n>>>0<c>>>0;n=d+k|0;if(n>>>0<k>>>0){o=o+1|0}n=n+ -1|0;k=o+ -1|0;a:{b:{k=(n|0)!=-1?k+1|0:k;if(!((n|0)==-1&(k|0)==2147418111?t:k>>>0>2147418111)){n=g+ -1|0;k=f+ -1|0;if((k|0)!=-1){n=n+1|0}o=k;t=(k|0)!=-1|(n|0)!=-1;k=m;o=(g|0)==(n|0)&o>>>0<f>>>0|n>>>0<g>>>0;n=o+s|0;if(n>>>0<o>>>0){k=k+1|0}n=n+ -1|0;o=k+ -1|0;k=n;o=(k|0)!=-1?o+1|0:o;if((k|0)==-1&(o|0)==2147418111?t:(o|0)==2147418111&(k|0)!=-1|o>>>0<2147418111){break b}}if(!(!q&(p|0)==2147418112?!(b|c):(p|0)==2147418112&q>>>0<0|p>>>0<2147418112)){h=d;j=e|32768;f=b;g=c;break a}if(!(!s&(m|0)==2147418112?!(f|g):(m|0)==2147418112&s>>>0<0|m>>>0<2147418112)){j=j|32768;break a}if(!(b|q|(p^2147418112|c))){k=d;d=!(b^f|d^h|(c^g|e^j^-2147483648));h=d?0:k;j=d?2147450880:e;f=d?0:b;g=d?0:c;break a}if(!(f|s|(m^2147418112|g))){break a}if(!(b|q|(c|p))){if(f|s|(g|m)){break a}f=b&f;g=c&g;h=d&h;j=e&j;break a}if(f|s|(g|m)){break b}f=b;g=c;h=d;j=e;break a}k=(q|0)==(s|0)&(m|0)==(p|0)?(c|0)==(g|0)&f>>>0>b>>>0|g>>>0>c>>>0:(m|0)==(p|0)&s>>>0>q>>>0|m>>>0>p>>>0;q=k?f:b;o=k?g:c;m=k?j:e;s=m;p=k?h:d;n=m&65535;j=k?e:j;e=j;h=k?d:h;t=j>>>16&32767;m=m>>>16&32767;if(!m){d=!(n|p);j=d<<6;m=r(d?q:p)+32|0;d=r(d?o:n);d=j+((d|0)==32?m:d)|0;ua(l+96|0,q,o,p,n,d+ -15|0);p=i[l+104>>2];n=i[l+108>>2];q=i[l+96>>2];m=16-d|0;o=i[l+100>>2]}f=k?b:f;g=k?c:g;j=e&65535;if(!t){b=!(h|j);c=b<<6;d=r(b?f:h)+32|0;b=r(b?g:j);b=c+((b|0)==32?d:b)|0;ua(l+80|0,f,g,h,j,b+ -15|0);t=16-b|0;h=i[l+88>>2];j=i[l+92>>2];g=i[l+84>>2];f=i[l+80>>2]}b=h;j=j<<3|b>>>29;h=b<<3|g>>>29;j=j|524288;b=p;k=n<<3|b>>>29;n=b<<3|o>>>29;p=k;k=e^s;b=f;c=g<<3|b>>>29;b=b<<3;d=c;f=m-t|0;e=b;c:{if(!f){break c}if(f>>>0>127){h=0;j=0;c=0;e=1;break c}ua(l- -64|0,b,d,h,j,128-f|0);Gb(l+48|0,b,d,h,j,f);h=i[l+56>>2];j=i[l+60>>2];c=i[l+52>>2];e=i[l+48>>2]|((i[l+64>>2]|i[l+72>>2])!=0|(i[l+68>>2]|i[l+76>>2])!=0)}g=c;d=n;p=p|524288;b=q;c=o<<3|b>>>29;f=b<<3;d:{if((k|0)<-1?1:(k|0)<=-1){k=f;o=e;b=k-e|0;n=h;q=d-h|0;e=(c|0)==(g|0)&k>>>0<e>>>0|c>>>0<g>>>0;h=q-e|0;c=c-((k>>>0<o>>>0)+g|0)|0;j=(p-((d>>>0<n>>>0)+j|0)|0)-(q>>>0<e>>>0)|0;if(!(b|h|(c|j))){f=0;g=0;h=0;j=0;break a}if(j>>>0>524287){break d}f=b;d=!(h|j);e=d<<6;g=r(d?b:h)+32|0;b=r(d?c:j);b=e+((b|0)==32?g:b)|0;b=b+ -12|0;ua(l+32|0,f,c,h,j,b);m=m-b|0;h=i[l+40>>2];j=i[l+44>>2];b=i[l+32>>2];c=i[l+36>>2];break d}c=c+g|0;b=e+f|0;if(b>>>0<f>>>0){c=c+1|0}f=(c|0)==(g|0)&b>>>0<e>>>0|c>>>0<g>>>0;k=j+p|0;e=d+h|0;if(e>>>0<d>>>0){k=k+1|0}d=f+e|0;if(d>>>0<e>>>0){k=k+1|0}h=d;j=k;if(!(k&1048576)){break d}k=h<<31;b=b&1|((c&1)<<31|b>>>1);c=k|c>>>1;m=m+1|0;h=(j&1)<<31|h>>>1;j=j>>>1|0}e=0;o=s&-2147483648;if((m|0)>=32767){h=e;j=o|2147418112;f=0;g=0;break a}d=0;e:{if((m|0)>0){d=m;break e}ua(l+16|0,b,c,h,j,m+127|0);Gb(l,b,c,h,j,1-m|0);b=i[l>>2]|((i[l+16>>2]|i[l+24>>2])!=0|(i[l+20>>2]|i[l+28>>2])!=0);c=i[l+4>>2];h=i[l+8>>2];j=i[l+12>>2]}m=b&7;f=m>>>0>4;k=h<<29;b=(c&7)<<29|b>>>3;k=c>>>3|k;c=k;g=b+f|0;if(g>>>0<b>>>0){c=c+1|0}f=g;g=c;b=(k|0)==(c|0)&f>>>0<b>>>0|c>>>0<k>>>0;e=e|((j&7)<<29|h>>>3);h=o|j>>>3&65535;c=d<<16;d=e;b=d+b|0;j=c|h;j=b>>>0<d>>>0?j+1|0:j;h=b;f:{if((m|0)==4){o=j;b=0;k=b+g|0;c=f&1;e=c+f|0;if(e>>>0<c>>>0){k=k+1|0}f=e;d=f;g=k;b=(b|0)==(k|0)&d>>>0<c>>>0|k>>>0<b>>>0;c=b+h|0;if(c>>>0<b>>>0){o=o+1|0}h=c;j=o;break f}if(!m){break a}}}i[a>>2]=f;i[a+4>>2]=g;i[a+8>>2]=h;i[a+12>>2]=j;S=l+112|0}function kh(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0;e=S-288|0;S=e;j=n[a+8>>3];k=n[11157]+n[11144];f=n[b+8>>3];f=f<k?k:f;k=f<j?j:f;m=n[10947];j=-n[11235];h=m>j;a:{if(!(i[22482]|!i[21897])){f=k;if((i[a+80>>2]&511)>>>0>10){break a}f=k;if((i[b+80>>2]&511)>>>0>10){break a}}f=n[11142]}if(!i[a+40>>2]){i[a+40>>2]=Da(a)}m=(h?m:j)*10;l=1;i[22602]=i[22602]+1;aa(i[a+40>>2],b,e+280|0);j=n[e+280>>3];h=0;b:{if(j>f){break b}r=1;h=1;if(j>=-n[11142]){break b}r=0;h=1;if(j<-m^1){break b}l=0;g=1;h=1}if(!i[b+40>>2]){i[b+40>>2]=Da(b)}i[22602]=i[22602]+1;aa(i[b+40>>2],a,e+240|0);c:{d:{j=n[e+240>>3];if(!(j>f)){e:{if(j>=-n[11142]){r=1;break e}p=j<-m;if((p^1|l)!=1){break c}g=p?1:g}if(h){break d}}if(!(!i[21858]|d)){c=bb(i[a+24>>2],i[b+24>>2]);i[22574]=i[22574]+1;j=n[e+240>>3]}q=1;i[22622]=i[22622]+1;f=n[e+280>>3];la(a,b,3,f<j?j:f,c);if(!i[21886]){break c}b=i[b+76>>2];a=i[a+76>>2];n[e+16>>3]=n[e+240>>3];n[e+24>>3]=c;i[e+32>>2]=i[22455];i[e>>2]=a;i[e+4>>2]=b;n[e+8>>3]=n[e+280>>3];V(i[22423],18,46037,e);break c}f:{g:{h:{if(g){s=1;f=n[e+280>>3];if(!(f<-m^1)){n[e+272>>3]=f;n[e+264>>3]=f;l=0;o=ac(b,a,e+248|0,e+256|0);h=0;if(o){break f}la(b,a,11,n[e+248>>3],2);break h}n[e+256>>3]=j;n[e+248>>3]=j;l=ac(a,b,e+264|0,e+272|0);h=0;if(l){break f}la(a,b,11,n[e+264>>3],2);break h}l=ac(a,b,e+264|0,e+272|0);if(l){o=ac(b,a,e+248|0,e+256|0);if(o){break g}la(b,a,11,n[e+248>>3],2);break h}la(a,b,11,n[e+264>>3],2)}q=1;i[22940]=i[22940]+1;break c}f=-m;s=n[e+272>>3]<f|n[e+256>>3]<f;h=s^1}g=1;p=0;m=n[e+264>>3];j=k*20;if(!(m>j)){f=n[e+248>>3];g=f>j;if(!(h|g)){g=m>k|f>k}p=g^1}if(i[21897]?!(i[22482]|!p):0){break c}h=0;i:{j:{if(!(p|r)){p=1;if(m<k^1){break j}f=n[10947];if(f!=0){break i}if(n[e+248>>3]<k^1|n[e+256>>3]>=-f^1){break j}break i}p=1;if(r){break i}f=-n[10947];h=n[e+272>>3]>=f|n[e+256>>3]>=f}p=h;if((h|g)!=1){break c}}if(!(!i[21858]|d)){c=bb(i[a+24>>2],i[b+24>>2]);i[22574]=i[22574]+1}if(g&s){i[23022]=i[23022]+1;k=n[e+264>>3];f=n[e+248>>3];k:{if(!(k>f^1)){la(a,b,5,k,c);break k}la(b,a,5,f,c)}q=1;if(!i[21886]){break c}h=i[a+76>>2];d=i[22423];a=-1;g=-1;g=l?i[l+16>>2]:g;b=i[b+76>>2];a=o?i[o+16>>2]:a;n[e- -64>>3]=n[e+264>>3];n[e+72>>3]=n[e+248>>3];n[e+80>>3]=c;i[e+88>>2]=i[22455];i[e+48>>2]=h;i[e+52>>2]=g;i[e+56>>2]=b;i[e+60>>2]=a;V(d,27,46157,e+48|0);break c}if((g&p)==1){i[22620]=i[22620]+1;k=n[e+264>>3];f=n[e+248>>3];l:{if(!(k>f^1)){la(a,b,4,k,c);break l}la(b,a,4,f,c)}q=1;if(!i[21886]){break c}h=i[a+76>>2];d=i[22423];a=-1;g=-1;g=l?i[l+16>>2]:g;b=i[b+76>>2];a=o?i[o+16>>2]:a;n[e+112>>3]=n[e+264>>3];n[e+120>>3]=n[e+248>>3];n[e+128>>3]=c;i[e+136>>2]=i[22455];i[e+96>>2]=h;i[e+100>>2]=g;i[e+104>>2]=b;i[e+108>>2]=a;V(d,28,46281,e+96|0);break c}k=n[e+248>>3];f=n[e+264>>3];j=f<k?k:f;if(g){q=1;i[22622]=i[22622]+1;la(a,b,3,j,c);if(!i[21886]){break c}h=i[a+76>>2];d=i[22423];a=-1;g=-1;g=l?i[l+16>>2]:g;b=i[b+76>>2];a=o?i[o+16>>2]:a;n[e+160>>3]=n[e+264>>3];n[e+168>>3]=n[e+248>>3];n[e+176>>3]=c;i[e+184>>2]=i[22455];i[e+144>>2]=h;i[e+148>>2]=g;i[e+152>>2]=b;i[e+156>>2]=a;V(d,29,46406,e+144|0);break c}q=1;i[22634]=i[22634]+1;k=n[e+256>>3];f=n[e+272>>3];f=-(f>k?k:f);la(a,b,1,j<f?f:j,c);if(i[21886]<2){break c}h=i[a+76>>2];d=i[22423];a=-1;g=-1;g=l?i[l+16>>2]:g;b=i[b+76>>2];a=o?i[o+16>>2]:a;n[e+208>>3]=n[e+264>>3];n[e+216>>3]=n[e+248>>3];n[e+224>>3]=c;i[e+232>>2]=i[22455];i[e+192>>2]=h;i[e+196>>2]=g;i[e+200>>2]=b;i[e+204>>2]=a;V(d,2099,46522,e+192|0)}S=e+288|0;return q}function hf(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0;d=S-160|0;S=d;if(i[21886]){i[d+144>>2]=88316;i[d+148>>2]=88056;V(i[22423],13,8362,d+144|0)}if(b+ -1>>>0>=2147483631){i[d+128>>2]=2147483631;i[d+132>>2]=b;i[d+136>>2]=c;V(i[22423],6412,8397,d+128|0);X(1,0,0)}i[22010]=a;i[22011]=0;i[22009]=b;i[22008]=c;i[22007]=c;a=i[21897];a:{if(!(i[21915]|(a|i[21910])|n[11231]>8.988465674311579e+307^1)){i[21899]=1;if((c|0)<=4){i[21915]=1;ia(8495,0,0);break a}i[21897]=1;ia(8249,0,0);break a}if(!a){break a}i[21899]=1}if(!(!i[21910]|!(i[21915]|i[21897]))){V(i[22423],7095,8506,0)}e=n[11231];if(!(!i[21926]|e<8.988465674311579e+307^1|(!i[21993]|(i[21914]|i[21915])))){V(i[22423],7038,8610,0);e=n[11231]}if(!(!i[21874]|e<8.988465674311579e+307^1|(i[21976]|i[21975]))){i[21976]=1;ia(8756,0,0)}if(!(i[21914]|!i[21899]|(n[10935]>8.988465674311579e+307^1|n[10950]!=0))){i[22495]=1;i[22276]=1;ia(8772,0,0)}c=i[21874];if(!(i[21889]|(!c|!i[21888]))){i[21889]=1;ia(8234,0,0);c=i[21874]}if(!(c|!i[21999])){V(i[22423],6038,8786,0);X(5,0,0);c=i[21874]}if(!(!c|!i[21884])){V(i[22423],6046,8964,0);X(1,0,0);c=i[21874]}if(!(c|!(i[21863]|i[21995]))){V(i[22423],6047,9060,0);X(1,0,0)}if(!(!i[21995]|!i[21863])){V(i[22423],6048,9165,0);X(1,0,0)}c=i[21904];if(!(!c|!i[21911])){V(i[22423],6362,9245,0);X(1,0,0);c=i[21904]}if(!(!c|i[22007]!=2)){if(i[21886]>=2){V(i[22423],2108,9338,0)}i[21904]=0}if(!(!i[21926]|(i[21874]|!i[21976]))){V(i[22423],7040,9411,0)}f=i[21899];a=!i[21978]&(f|i[21859])!=0;i[22002]=a;c=0;i[22006]=!a|(i[21888]?i[21889]:0)?c:!i[21909];b:{if(f){i[22454]=2;break b}if(i[21999]){i[22454]=1}if(!i[21985]){break b}V(i[22423],6049,9504,0);X(1,0,0)}c=i[21874];a=i[21962];c:{d:{if(!a){a=i[22007];if(!c){break c}if(i[21961]){break d}break c}a=i[22007]-a|0;i[22007]=a;if(!c){break c}}a=a+1|0;i[22007]=a;j=i[21863]!=0}e=1;if((a|0)<=1){i[d+112>>2]=a;V(i[22423],6050,9574,d+112|0);X(1,0,0);a=i[22007]}if((a|0)>=3){c=2;while(1){e=e*+(c|0);c=c+1|0;if((c|0)!=(a|0)){continue}break}}n[11e3]=1/e;if(i[21886]>=2){i[d+96>>2]=a;i[d+84>>2]=b;i[d+88>>2]=0;i[d+80>>2]=i[22008];i[d+92>>2]=i[21962];V(i[22423],2005,9613,d+80|0);a=i[22007]}c=a<<3;i[22425]=c;i[22426]=c+ -8;if((a|0)>=7){i[21905]=0;ia(9725,0,0)}f=i[21879];c=i[21973];e:{if((c|0)>=2){h=i[21886];i[21987]=h;if(h+1>>>0<2){break e}i[d+64>>2]=c;i[d+68>>2]=h;V(i[22423],8162,9755,d- -64|0);i[21886]=0;break e}if(i[21992]?0:!(i[21988]!=-3|n[10995]<8.988465674311579e+307)){break e}c=i[21886];i[21986]=c?c:3;i[21886]=0}c=i[21974];if(c+1>>>0<=1){c=E(d+152|0)|0;i[d+156>>2]=c;if(i[21974]==-1){i[d+156>>2]=0-c;c=8261}else{c=9814}ia(c,d+156|0,0);c=i[d+156>>2];i[21974]=c}h=f?2:1;i[d+156>>2]=c;f=d;f:{if((c|0)==-2147483648){c=1}else{if((c|0)>-1){break f}c=0-c|0}i[f+156>>2]=c}f=a+h|0;i[21682]=(c|0)<1?1:(c|0)==2147483647?2147483646:c;e=0;a=999;while(1){c=db();g=+(c|0);if((c|0)==2147483647){i[d+48>>2]=2147483647;i[d+56>>2]=-8388608;i[d+60>>2]=1105199103;V(i[22423],8036,9829,d+48|0);X(1,0,0)}e=e+g;c=a;a=c+ -1|0;if(c){continue}break}a=i[d+156>>2];i[21682]=(a|0)<1?1:(a|0)==2147483647?2147483646:a;g=e/1e3;if(!(g>1932735281.4^1?!(g<214748364.60000002):0)){i[d+32>>2]=-8388608;i[d+36>>2]=1105199103;n[d+16>>3]=g;i[d+24>>2]=-8388608;i[d+28>>2]=1104150527;V(i[22423],8037,9922,d+16|0)}g=n[10982];n[10984]=1-g;n[10983]=(g+g)/2147483646;if((b+j|0)<(f|0)){i[d>>2]=b;i[d+4>>2]=f;V(i[22423],6214,10087,d);X(1,0,0)}df();S=d+160|0}function zb(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0;b=S-304|0;S=b;f=i[21886];h=i[22440];a:{b:{c=i[22431]==(a|0);c:{if(!(i[22432]!=(a|0)?!c:0)){if((f|0)<2){break c}d=c?57502:57511;e=i[a+76>>2];f=i[22423];i[b+280>>2]=h?i[h+16>>2]:-1;i[b+276>>2]=e;i[b+272>>2]=d;V(f,2110,57442,b+272|0);break b}if((f|0)<2){break c}d=i[22428]==(a|0);e=i[22423];f=-1;f=a?i[a+76>>2]:f;i[b+296>>2]=h?i[h+16>>2]:-1;i[b+292>>2]=f;i[b+288>>2]=d?57575:57585;V(e,2111,57519,b+288|0)}if(a){break b}e=0;f=0;break a}c=i[22429];d:{e:{if(!c){e=-1;break e}e=i[c+76>>2];if(e){break e}e=0;if(!i[c+48>>2]){break d}}i[b+256>>2]=e;V(i[22423],6397,57591,b+256|0);X(5,i[22429],0)}f=0;f=i[22428]!=(a|0)?i[a+44>>2]:f;i[22492]=i[22492]+1;d=0;c=0;e=a;f:{while(1){m=i[e+48>>2];if(m){g:{n=i[e+72>>2];q=i[22492];if(n>>>0<q>>>0){j=i[e+76>>2];if(j>>>0<l[22447]){break g}}g=i[e+76>>2];p=i[22423];h:{if((n|0)==(q|0)){k=i[m+76>>2];j=f?i[f+76>>2]:-1;i[b+212>>2]=j;i[b+208>>2]=g;i[b+204>>2]=j;i[b+200>>2]=k;i[b+196>>2]=g;i[b+192>>2]=g;V(p,6039,57708,b+192|0);break h}k=i[22447];i[b+240>>2]=f?i[f+76>>2]:-1;i[b+236>>2]=q;i[b+232>>2]=n;i[b+228>>2]=k;i[b+224>>2]=g;V(p,6350,57855,b+224|0)}c=i[22429];g=1;if(!f){a=c;f=0;break f}i[f+48>>2]=c;break f}i[e+72>>2]=q;m=i[e+44>>2];if((m|0)!=(f|0)){k=i[22423];g=-1;g=f?i[f+76>>2]:g;i[b+184>>2]=m?i[m+76>>2]:-1;i[b+180>>2]=g;i[b+176>>2]=j;V(k,6416,58036,b+176|0);k=i[e+44>>2];g=1;c=e}if(i[22428]==(a|0)){if(i[22432]==(e|0)){o=1;if(r){j=i[e+76>>2];k=i[22423];c=b;f=i[22431];g=-1;i:{if(!f){break i}g=i[f+76>>2]}i[c+164>>2]=g;i[b+160>>2]=j;V(k,6285,58115,b+160|0);k=i[22431];g=1;c=e}}r=i[22431]==(e|0)?1:r;d=i[22430]==(e|0)?1:d}f=e;e=i[e+48>>2];if(e){continue}}break}e=c;f=k}if(i[22428]!=(a|0)){break a}j:{if(d){break j}d=i[22430];if(!d|!i[d+48>>2]){break j}c=i[a+76>>2];i[b+144>>2]=i[d+76>>2];i[b+148>>2]=c;V(i[22423],6369,58239,b+144|0);e=i[22430];g=1;f=a}k:{if(r){break k}d=i[22431];if(!d|!i[d+48>>2]){break k}c=i[a+76>>2];i[b+128>>2]=i[d+76>>2];i[b+132>>2]=c;V(i[22423],6286,58340,b+128|0);e=i[22431];g=1;f=a}if(o){break a}d=i[22432];if(!d|!i[d+48>>2]){break a}c=i[a+76>>2];i[b+112>>2]=i[d+76>>2];i[b+116>>2]=c;V(i[22423],6138,58428,b+112|0);e=i[22432];g=1;f=a}l:{m:{n:{if(!h){d=0;break n}c=i[22441];o:{p:{if(!c){a=-1;break p}a=i[c+16>>2];if(a){break p}a=0;if(!i[c>>2]){break o}}i[b+96>>2]=a;V(i[22423],6366,58515,b+96|0);ma(55651,e,f,0,i[22441]);X(5,0,0)}i[22493]=i[22493]+1;k=0;d=0;c=0;while(1){q:{a=i[h>>2];if(!a){break q}r:{p=i[h+20>>2];o=i[22493];if(p>>>0<o>>>0){j=i[h+16>>2];if(j>>>0<l[22449]){break r}}n=i[h+16>>2];m=i[22423];j=i[22492];s:{if((j|0)==(p|0)){d=i[a+16>>2];j=c?i[c+16>>2]:-1;i[b+52>>2]=j;i[b+48>>2]=n;i[b+44>>2]=j;i[b+40>>2]=d;i[b+36>>2]=n;i[b+32>>2]=n;V(m,6367,58633,b+32|0);break s}d=i[22449];i[b+80>>2]=c?i[c+16>>2]:-1;i[b+76>>2]=j;i[b+72>>2]=p;i[b+68>>2]=d;i[b+64>>2]=n;V(m,6368,58782,b- -64|0)}g=1;if(!c){d=h;break q}i[c>>2]=i[22441];d=h;break q}i[h+20>>2]=o;o=i[h+4>>2];if((o|0)!=(c|0)){d=i[22423];i[b+24>>2]=o?i[o+16>>2]:-1;i[b+20>>2]=c;i[b+16>>2]=j;V(d,6427,58967,b+16|0);g=1;d=h;a=i[d>>2]}k=i[22442]==(h|0)?1:k;c=h;h=a;if(a){continue}}break}if(k){break n}a=i[22442];if(!a|!i[a>>2]){break n}i[b>>2]=i[a+16>>2];V(i[22423],6287,59046,b);d=i[22442];break m}if(g){break m}a=1;break l}ma(55651,e,f,0,d);a=0}S=b+304|0;return a}function ae(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0;c=S-144|0;S=c;if(i[21958]){i[c+96>>2]=7840;i[c+100>>2]=88316;i[c+104>>2]=88056;V(i[22423],9350,62712,c+96|0);Ib(0)}i[22455]=-1;i[22447]=0;i[22448]=0;i[22492]=0;i[22493]=0;i[22520]=0;i[22521]=0;i[22522]=0;i[22523]=0;i[22449]=0;i[22464]=0;i[22524]=0;a=i[21879];a:{b:{if((a|0)>=1){d=a+ -1|0;e=a;a=i[22009];if((e|0)<=(a|0)){b=i[22010]+(o(d,i[22007])<<3)|0;break b}a=d-a|0;if((a|0)>=(W(i[22500])|0)){break b}b=i[(i[22500]+(a<<2)|0)+4>>2];break b}if((a|0)>-1){break a}d=i[22009];a=a^-1;if((d|0)>(a|0)){b=i[22010]+(o(a,i[22007])<<3)|0;break b}a=a-d|0;if((a|0)>=(W(i[22500])|0)){break b}b=i[(i[22500]+(a<<2)|0)+4>>2]}i[21880]=b}a=i[21882];c:{d:{if((a|0)>=1){d=a+ -1|0;b=a;a=i[22009];if((b|0)<=(a|0)){b=i[22010]+(o(d,i[22007])<<3)|0;break d}b=0;a=d-a|0;if((a|0)>=(W(i[22500])|0)){break d}b=i[(i[22500]+(a<<2)|0)+4>>2];break d}if((a|0)>-1){break c}b=0;d=i[22009];a=a^-1;if((d|0)>(a|0)){b=i[22010]+(o(a,i[22007])<<3)|0;break d}a=a-d|0;if((a|0)>=(W(i[22500])|0)){break d}b=i[(i[22500]+(a<<2)|0)+4>>2]}i[21883]=b}e:{f:{if(i[21879]){b=i[21880];a=i[22010];if(b>>>0<a>>>0){break f}e=b;b=i[22009];if(e>>>0>((b|0)<1?0:a+(o(i[22007],b+ -1|0)<<3)|0)>>>0){break f}}if(!i[21882]){break e}b=i[21883];a=i[22010];if(b>>>0<a>>>0){break f}e=b;b=i[22009];if(e>>>0<=((b|0)<1?0:a+(o(i[22007],b+ -1|0)<<3)|0)>>>0){break e}}i[c+80>>2]=i[22009]+ -1;V(i[22423],6150,62742,c+80|0);X(1,0,0)}d=Pf(i[22010],i[22009],i[22007]);i[c+140>>2]=d;if(i[21976]){Fc(i[22010],i[22009],i[22007],n[11154],n[11146],n[11145])}bh();g:{if(!i[21874]){break g}b=i[22007]+ -1<<3;f=b+i[22277]|0;if(n[f>>3]>8.988465674311579e+307^1){break g}e=b+i[22278]|0;if(n[e>>3]<-8.988465674311579e+307^1){break g}h:{if(i[21980]|i[21881]|i[21876]>-1){break h}b=29;while(1){a=b;if(!a){break h}b=a+ -1|0;if(i[(b<<2)+87708>>2]!=7){continue}break}if((a|0)>0){break g}}g=n[11141];if(i[21995]){n[e>>3]=g+g;i[21881]=1;break g}n[f>>3]=g*-2;if(i[21881]){break g}i[21980]=1}if(i[21886]>=4){V(i[22423],4091,62795,0)}b=ne();i[22431]=b;i[22429]=b;i[22428]=b;i[22443]=0;i[22444]=0;i[22433]=0;b=Tc(0);i[22442]=b;i[22441]=b;i[22440]=b;b=Qg(i[22007],d,i[22010],i[22009]);i[c+136>>2]=b;Pg(b);Th(b,i[22010],i[22009]);a=i[21886];d=i[21986];f=a|d;if(f|i[21924]){if(f){n[c+48>>3]=n[10995];i[c+56>>2]=i[22434];i[c+60>>2]=i[22436];i[c- -64>>2]=i[22438];i[c+68>>2]=i[21987];i[c+72>>2]=88316;i[c+76>>2]=88056;i[c+32>>2]=d;i[c+36>>2]=a;i[c+40>>2]=i[21988];i[c+44>>2]=i[21992];V(i[22423],8103,62864,c+32|0)}i[c+16>>2]=7840;i[c+20>>2]=88572;V(i[22423],8104,63019,c+16|0)}Ga(0,1);i[22430]=i[22428];de();if(i[21915]){n[11143]=n[10935];n[11142]=n[10950]}i:{if(i[21911]){if(!(!i[21899]|i[21882]<1)){V(i[22423],6151,63054,0);X(1,0,0)}if(!(i[21879]|i[21881]|(i[21883]?!(i[21915]|i[21897]):0))){V(i[22423],6152,63188,0);X(1,0,0)}j:{if(i[21899]|i[21882]<1){break j}a=i[21883];k:{if(!b){break k}b=b+4|0;while(1){d=i[b>>2];if(!d){break k}b=b+4|0;if((a|0)!=i[d+8>>2]){continue}break}break j}b=Db(a,i[22428],c+120|0,0,c+116|0,c+132|0);i[22678]=i[22678]+i[c+132>>2];if(!i[c+116>>2]){a=i[22423];i[c>>2]=Y(i[21883]);V(a,6153,63326,c);X(1,0,0)}if(od(i[21883],b,0)){break j}_(c+136|0);_(c+140|0);break i}Vc(i[22428],0)}_(c+136|0);_(c+140|0);if(i[21886]<1){break i}V(i[22423],1030,63418,0)}S=c+144|0}function Cb(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0;e=S-128|0;S=e;c=i[22425];j=i[i[i[a+52>>2]+4>>2]+8>>2];i[22984]=i[22984]+1;i[e+116>>2]=0;if(!i[a+24>>2]){i[a+24>>2]=ha(c)}if(i[22435]==(a|0)){o=i[21886];i[21886]=5;i[e+112>>2]=i[a+76>>2];V(i[22423],8012,2301,e+112|0);i[e+96>>2]=i[22455];V(i[22423],8013,2339,e+96|0);c=i[22992];if(c){i[e+80>>2]=c;V(i[22423],8014,2375,e+80|0)}V(i[22423],8015,2397,0);rc(i[22423])}f=i[22007];a:{b:{if((f|0)>4){break b}c=i[a+52>>2];c:{if(i[21963]){if(!c){break c}b=i[c+4>>2];if(!b){break c}h=c+8|0;d=i[22502];c=0;while(1){i[i[22503]+(c<<2)>>2]=d;if(f){b=i[b+8>>2];while(1){n[d>>3]=n[b>>3]*Wd(n[10983],n[10984]);d=d+8|0;b=b+8|0;f=f+ -1|0;if(f){continue}break}}b=i[h>>2];if(b){c=c+1|0;h=h+4|0;f=i[22007];continue}break}f=i[22007];break c}if(!c){break c}d=i[c+4>>2];if(!d){break c}b=c+4|0;while(1){i[i[22503]+(h<<2)>>2]=i[d+8>>2];h=h+1|0;d=i[b+4>>2];b=b+4|0;if(d){continue}break}}Lh(f,i[22503],j,i[a+80>>2]>>>12&1,i[a+24>>2],a+16|0,e+116|0);f=i[22007];if((f|0)>4){break b}if(!i[e+116>>2]){break a}}d=i[22502];c=i[a+52>>2];d:{if(!c){break d}b=i[c+4>>2];if(!b){break d}k=c+8|0;if(!f){while(1){if(i[b+8>>2]!=(j|0)){i[i[22503]+(l<<2)>>2]=d;l=l+1|0}b=i[k>>2];k=k+4|0;if(b){continue}break d}}while(1){if(i[b+8>>2]!=(j|0)){i[i[22503]+(l<<2)>>2]=d;b=i[b+8>>2];h=j;c=f;while(1){n[d>>3]=n[b>>3]-n[h>>3];d=d+8|0;h=h+8|0;b=b+8|0;c=c+ -1|0;if(c){continue}break}l=l+1|0}b=i[k>>2];k=k+4|0;if(b){continue}break}}i[i[22503]+(l<<2)>>2]=d;e:{if(!i[21963]){break e}b=f+ -1|0;if(!b){f=1;break e}d=i[22502];while(1){if(f){while(1){n[d>>3]=Wd(n[10983],n[10984])*n[d>>3];d=d+8|0;f=f+ -1|0;if(f){continue}break}}f=i[22007];b=b+ -1|0;if(b){continue}break}}xe(f,i[22503],j,i[a+80>>2]>>>12&1,i[a+24>>2],a+16|0,e+116|0);if(!i[e+116>>2]){break a}if(!Gd(a)|!i[21886]){break a}i[e+64>>2]=i[22455];V(i[22423],2,2420,e- -64|0)}c=i[a+80>>2];i[a+80>>2]=c&-131073;f:{if(!i[21874]){break f}g=n[(i[a+24>>2]+(i[22007]<<3)|0)+ -8>>3];m=n[11141];if(i[21995]){if(g>=m+m^1){break f}i[a+80>>2]=c|131072;break f}if(g>m*-2^1){break f}i[a+80>>2]=c|131072}f=i[21886];if(!(n[11231]<1.7976931348623157e+308^1?!(i[21986]|(f|i[21958])):0)){b=i[21963];i[22510]=b;i[21963]=0;c=i[a+52>>2];g:{if(!c){break g}d=i[c+4>>2];if(!d){break g}b=c+8|0;while(1){c=b;h:{if(i[d+8>>2]==(j|0)){break h}i[22684]=i[22684]+1;aa(i[d+8>>2],a,e+120|0);i[22862]=i[22862]+1;g=n[e+120>>3];g=g<0?-g:g;n[11432]=g+n[11432];n[e+120>>3]=g;i:{if(!(g>n[11433]^1)){n[11433]=g;if(g>n[11233]^1){break h}n[11233]=g;if(g>n[10995]){break i}break h}if(n[10995]<-g^1){break h}}b=i[22423];f=Y(i[d+8>>2]);h=i[d+16>>2];i[e+48>>2]=i[a+76>>2];i[e+52>>2]=i[22455];i[e+32>>2]=f;i[e+36>>2]=h;n[e+40>>3]=g;V(b,3060,2518,e+32|0);ma(2618,a,0,0,0)}b=c+4|0;d=i[c>>2];if(d){continue}break}f=i[21886];b=i[22510]}i[21963]=b}if((f|0)>=4){g=n[a+16>>3];i[e+16>>2]=i[a+76>>2];n[e+24>>3]=g;d=0;V(i[22423],8017,2626,e+16|0);if(i[22007]>=1){while(1){n[e>>3]=n[i[a+24>>2]+(d<<3)>>3];V(i[22423],8018,2670,e);d=d+1|0;if((d|0)<i[22007]){continue}break}}V(i[22423],8019,2677,0)}pe(a);if(i[22435]==(a|0)){i[21886]=o;rb(i[22423],a)}S=e+128|0}function ef(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0;b=S-96|0;S=b;i[b+92>>2]=88056;k=i[22008];k=i[21874]?((i[21962]|i[21961])!=0)+k|0:k;d=j[88056];a=88056;while(1){c=d&255;a:{if((c|0)!=45){e=a;if(c){break a}a=i[22007];b:{if(!a){break b}e=i[22277];c=i[22278];while(1){a=a+ -1|0;k=a<<3;c:{if(!(n[k+c>>3]>-8.988465674311579e+307^1)){i[21881]=1;if(n[e+k>>3]<8.988465674311579e+307^1){break c}i[21980]=1;i[21881]=0;break b}if(n[e+k>>3]<8.988465674311579e+307^1){break c}i[21881]=1}if(a){continue}break}}if(!(i[21856]|!m)){i[b+80>>2]=88056;i[b+84>>2]=m-88056;V(i[22423],6036,8274,b+80|0);X(1,0,0)}S=b+96|0;return}e=a+1|0;i[b+92>>2]=e;d=j[a+1|0]}d:{e:{f:{g:{h:{a=d&255;switch(a+ -80|0){case 1:break e;case 0:break g;default:break h}}if(a){break f}a=e;break d}a=e+1|0;i[b+92>>2]=a;if(!j[e+1|0]){break d}while(1){c=a+1|0;i[b+92>>2]=c;d=g[a|0];if((d|0)==32|d+ -9>>>0<5){a=c;break d}i:{if((d&255|32)==100){if(g[c|0]+ -48>>>0>=10){i[b+32>>2]=d;i[b+36>>2]=a;V(i[22423],7044,11349,b+32|0);break i}a=Nc(c,b+92|0);c=i[22007];if((a|0)>=(c|0)){i[b+16>>2]=a;i[b+20>>2]=d;i[b+24>>2]=c;V(i[22423],7045,11431,b+16|0);break i}h=0;j:{c=i[b+92>>2];if(j[c|0]!=58){break j}c=c+1|0;i[b+92>>2]=c;h=Oc(c,b+92|0);if(q(h)>1^1){break j}n[b>>3]=h;i[b+8>>2]=d;V(i[22423],7046,11509,b);break i}n[i[((d|0)==100?89112:89108)>>2]+(a<<3)>>3]=h}a=i[b+92>>2];if(j[a|0]){continue}break d}m=e;a=i[b+92>>2];if(j[a|0]){continue}break}break d}while(1){a=d<<24>>24;if((a|0)==32|a+ -9>>>0<5){a=e;break d}a=e+1|0;i[b+92>>2]=a;d=j[e+1|0];e=a;if(d){continue}break}break d}a=e+1|0;i[b+92>>2]=a;if(!j[e+1|0]){break d}while(1){k:{l:{m:{if(!k){while(1){c=a+1|0;i[b+92>>2]=c;d=g[a|0];if((d|0)==32|d+ -9>>>0<5){a=c;break d}n:{o:{l=(d|0)==98;if(!l){if((d|0)!=66){break n}f=j[c|0];break o}f=j[c|0];if((f|0)!=66){if((f|0)!=98){break o}i[b+92>>2]=a+2;break n}i[b+92>>2]=a+2;break n}if((f<<24>>24)+ -48>>>0>9){break l}a=Nc(c,b+92|0);if((a|0)>-1){break m}c=i[b+92>>2];h=l?-.5:.5;p:{if(j[c|0]!=58){break p}c=c+1|0;i[b+92>>2]=c;h=Oc(c,b+92|0)}if(!l){n[i[22279]+(a<<3)>>3]=h;break n}n[i[22280]+(a<<3)>>3]=h}a=i[b+92>>2];if(j[a|0]){continue}break d}}while(1){c=a+1|0;i[b+92>>2]=c;d=g[a|0];if((d|0)==32|d+ -9>>>0<5){a=c;break d}l=(d|0)!=98;q:{r:{if(!l){f=j[c|0];if((f|0)!=98){if((f|0)!=66){break r}i[b+92>>2]=a+2;c=i[22279];d=i[22280];a=k;while(1){a=a+ -1|0;f=a<<3;l=f+d|0;i[l>>2]=0;i[l+4>>2]=-1075838976;f=c+f|0;i[f>>2]=0;i[f+4>>2]=1071644672;if(a){continue}break}break q}i[b+92>>2]=a+2;break q}if((d|0)!=66){break q}f=j[c|0]}if((f<<24>>24)+ -48>>>0>=10){break l}a=Nc(c,b+92|0);if((a|0)>=(k|0)){break m}c=i[b+92>>2];s:{if(j[c|0]==58){c=c+1|0;i[b+92>>2]=c;h=Oc(c,b+92|0);break s}h=(d|0)==98?-.5:.5}if(!l){n[i[22280]+(a<<3)>>3]=h;break q}n[i[22279]+(a<<3)>>3]=h}a=i[b+92>>2];if(j[a|0]){continue}break}break d}i[b+48>>2]=a;i[b+52>>2]=d;i[b+56>>2]=k;V(i[22423],7048,11658,b+48|0);break k}i[b+64>>2]=d;V(i[22423],7047,11593,b- -64|0)}m=e;a=i[b+92>>2];if(j[a|0]){continue}break}}d=g[a|0];if(!((d|0)==32|d+ -9>>>0<5)){continue}while(1){e=a+1|0;i[b+92>>2]=e;d=g[a+1|0];a=e;if((d|0)==32|d+ -9>>>0<5){continue}break}continue}}function Kg(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0;e=S-144|0;S=e;i[e+140>>2]=0;a:{if(i[22460]){break a}l=i[21911];if(i[21886]>=1){V(i[22423],1034,67710,0)}if(i[22007]==2){break a}if(i[21999]){ec(1);Na()}f=1;i[22492]=i[22492]+1;i[21911]=0;kc();i[22442]=i[22441];d=e;b:{c:{d:{e:{b=i[22428];if(b){c=i[b+48>>2];if(c){while(1){if(!(j[b+81|0]&40)){Jg(b,e+140|0);a=a?a:b}b=c;c=i[b+48>>2];if(c){continue}break}}if(i[21886]>1){break e}g=a;break c}if(i[21886]<2){break b}c=i[22423];b=-1;break d}c=i[22423];b=-1;if(!a){break d}g=a;b=i[a+76>>2]}i[d+128>>2]=b;V(c,2047,67761,e+128|0)}f:{if(!g){break f}a=i[g+48>>2];if(!a){break f}b=g;while(1){d=b;b=a;g:{if(j[d+81|0]&8){break g}a=i[d+56>>2];if(a){if((W(a)|0)>=1){i[e+112>>2]=i[d+76>>2];V(i[22423],6161,67877,e+112|0);X(5,d,0)}ga(d+56|0)}a=i[d+52>>2];if(i[a+4>>2]!=i[a+8>>2]){break g}i[23014]=i[23014]+1;if(i[21886]>=3){i[e+96>>2]=i[d+76>>2];V(i[22423],3023,69062,e+96|0)}a=i[d+60>>2];Zd(d,i[a+4>>2],d,i[a+8>>2]);nb(d,0)}a=i[b+48>>2];if(a){continue}break}}f=!g;if(i[21886]<2){break b}b=i[22423];i[e+80>>2]=W(i[22497]);V(b,2048,67946,e+80|0)}i[22432]=i[22429];c=xa(i[22497]);if(c){while(1){d=i[c+20>>2];a=i[c+16>>2];b=i[c+40>>2];$(c,48);if((b|0)==12){i[23012]=i[23012]+1;Ig(a,d)}c=xa(i[22497]);if(c){continue}break}}Ob();h:{if(i[21886]<=1){c=i[e+140>>2];break h}a=i[22423];b=e;d=b;c=i[b+140>>2];b=-1;i:{if(!c){break i}b=i[c+16>>2]}i[d+64>>2]=b;V(a,2049,68058,e- -64|0)}i[22442]=c;i[22432]=0;fc();Ga(0,0);j:{if(i[21886]<2){break j}a=i[22423];i[e+48>>2]=f?-1:i[g+76>>2];V(a,2050,68119,e+48|0);if(i[21886]<2){break j}V(i[22423],2051,68184,0)}k=1;k:{if(f){break k}k=0;a=g;d=0;while(1){if(!i[a+48>>2]){break k}l:{if((i[a+80>>2]&2560)!=512){break l}f=i[a+60>>2];if(!f){break l}b=i[f+4>>2];c=0;f=W(f);if((f|0)<1){break l}while(1){h=i[b+80>>2]&512;m:{n:{if(!c){if(h){break n}d=b;break m}if(h){b=i[b+32>>2]}if((b|0)!=(d|0)){break m}i[23010]=i[23010]+1;i[a+80>>2]=i[a+80>>2]|1073741824;break l}d=i[b+32>>2]}c=c+1|0;b=i[(i[a+60>>2]+(c<<2)|0)+4>>2];if((c|0)!=(f|0)){continue}break}}a=i[a+48>>2];if(a){continue}break}}b=i[21886];if((b|0)>=4){ya();b=i[21886]}if((b|0)>=2){V(i[22423],2052,68285,0)}o:{if(k){break o}f=0;a=0;while(1){b=g;g=i[b+48>>2];if(g){d=i[b+80>>2];c=d&512;p:{q:{if(d&2048){if(c){gb(b);i[22433]=i[22433]+ -1;break p}if(f|!a){break q}if(i[21886]>=2){i[e+32>>2]=i[a+76>>2];V(i[22423],2053,68369,e+32|0)}gb(a);f=0;i[22433]=i[22433]+ -1;a=b;break p}if(!c){break p}if(!(i[b+32>>2]==(a|0)?a:0)){h=i[b+76>>2];c=i[22423];i[e+20>>2]=a?i[a+76>>2]:-1;i[e+16>>2]=h;V(c,6162,68458,e+16|0);ca(5,b,a)}if(f){i[b+32>>2]=f;break p}f=0;d=i[b+80>>2];if(d&1073741824){break p}g=i[a+48>>2];i[b+80>>2]=d|268435456;i[b+68>>2]=i[a+68>>2];i[b+64>>2]=i[a+64>>2];i[a+64>>2]=0;i[a+68>>2]=0;if(!i[21994]){i[a+24>>2]=0;i[a+40>>2]=0}gb(a);i[22433]=i[22433]+ -1;f=b;break p}a=b;f=0}i[b+80>>2]=i[b+80>>2]&-1073741825;if(g){continue}}break}if(f|!a){break o}if(i[21886]>=2){i[e>>2]=i[a+76>>2];V(i[22423],2054,68571,e)}gb(a);i[22433]=i[22433]+ -1}i[21911]=l;if(i[21869]){Wa(i[22428])}i[22460]=1}S=e+144|0}function Re(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,p=0,q=0,r=0,s=0,t=0;e=S-128|0;S=e;i[e+124>>2]=0;i[e+116>>2]=ba(i[22427]);i[e+112>>2]=0;r=i[22007];i[e+96>>2]=0;i[e+100>>2]=0;k=r+ -1|0;q=i[22502]+(o(r,r)<<3)|0;if((r|0)>=2){l=i[b+8>>2];m=i[a+8>>2];while(1){f=h<<3;n[f+q>>3]=(n[f+m>>3]+n[f+l>>3])*.5;h=h+1|0;if((k|0)!=(h|0)){continue}break}}a:{if(!c){break a}h=i[c+4>>2];if(!h){break a}f=c+8|0;m=0;while(1){t=1;if(i[h+72>>2]){p=i[h+40>>2];if(!p){p=Sc(i[h+52>>2]);i[h+40>>2]=p}Z(e+116|0,p);t=m}j=j+1|0;h=i[f>>2];f=f+4|0;m=t;if(h){continue}break}}b:{if((j|0)>=(r|0)){i[e+124>>2]=ba(i[22427]);Z(e+124|0,i[a+8>>2]);if(t){Z(e+124|0,q)}xb(k,i[e+116>>2],0,0,e+124|0);Ta(i[e+124>>2],0);break b}if((j|0)==(k|0)){if(t){Z(e+116|0,q)}i[e+124>>2]=i[e+116>>2];break b}i[e+80>>2]=j;V(i[22423],6216,12214,e+80|0);X(5,0,0)}f=i[e+124>>2];l=i[f+4>>2];i[e+120>>2]=l;h=i[22502];c:{if(!l){break c}p=f+8|0;if(!k){f=l;while(1){if(i[21886]>=4){Wb(i[22423],12298,e+120|0,1,0);f=i[e+120>>2]}if((f|0)!=(l|0)){i[i[22503]+(s<<2)>>2]=h;s=s+1|0}f=i[p>>2];i[e+120>>2]=f;p=p+4|0;if(f){continue}break}break c}f=l;while(1){if(i[21886]>=4){Wb(i[22423],12298,e+120|0,1,k);f=i[e+120>>2]}if((f|0)!=(l|0)){i[i[22503]+(s<<2)>>2]=h;f=i[e+120>>2];j=l;m=k;while(1){n[h>>3]=n[f>>3]-n[j>>3];h=h+8|0;j=j+8|0;f=f+8|0;m=m+ -1|0;if(m){continue}break}s=s+1|0}f=i[p>>2];i[e+120>>2]=f;p=p+4|0;if(f){continue}break}}i[i[22503]+(s<<2)>>2]=h;xe(k,i[22503],l,1,h,e+104|0,e+112|0);f=i[21883];if((f|0)!=i[b+8>>2]){f=i[a+8>>2]}i[22680]=i[22680]+1;d:{if(gc(k,f,h,e+104|0)>0^1){break d}n[e+104>>3]=-n[e+104>>3];if(!k){break d}f=h;j=k;while(1){n[f>>3]=-n[f>>3];f=f+8|0;j=j+ -1|0;if(j){continue}break}}e:{if(!(i[21958]|i[21997])){break e}l=Y(i[a+8>>2]);m=Y(i[b+8>>2]);if(!t){i[22684]=i[22684]+1;g=gc(k,q,h,e+104|0);i[22970]=i[22970]+1;g=g<0?-g:g;if(!(n[11487]<g^1)){n[11487]=g}n[11486]=g+n[11486];if(i[21886]>=4){i[e+64>>2]=l;i[e+68>>2]=m;n[e+72>>3]=g;V(i[22423],4014,12338,e- -64|0)}if((r|0)>=2){j=i[a+8>>2];b=i[b+8>>2];f=0;while(1){a=f<<3;n[a+q>>3]=n[a+b>>3]-n[a+j>>3];f=f+1|0;if((k|0)!=(f|0)){continue}break}}_a(q,k,0);g=gc(k,q,h,e+96|0);g=g+(g<0?1:-1);g=g<0?-g:g;if(i[21886]>=4){i[e+48>>2]=i[e+112>>2];i[e+32>>2]=l;i[e+36>>2]=m;n[e+40>>3]=g;V(i[22423],4015,12385,e+32|0)}f:{if(i[e+112>>2]){i[22964]=i[22964]+1;f=91864;if(n[11484]<g^1){break f}n[11484]=g;break f}i[22976]=i[22976]+1;f=91912;if(n[11490]<g^1){break f}n[11490]=g}n[f>>3]=g+n[f>>3]}a=i[e+116>>2];if((a|0)==i[e+124>>2]){break e}i[e+120>>2]=0;if(!a){break e}i[e+120>>2]=i[a+4>>2];a=W(a);if((a|0)<1){break e}j=i[e+120>>2];f=0;while(1){g:{if(da(i[e+124>>2],j)){break g}b=i[((f<<2)+c|0)+4>>2];i[22684]=i[22684]+1;g=gc(k,i[e+120>>2],h,e+104|0);i[22958]=i[22958]+1;g=g<0?-g:g;if(!(n[11481]<g^1)){n[11481]=g}n[11480]=g+n[11480];if(i[21886]<4){break g}b=i[b+72>>2];n[e+16>>3]=g;i[e>>2]=l;i[e+4>>2]=m;i[e+8>>2]=b;V(i[22423],4016,12436,e)}f=f+1|0;j=i[(i[e+116>>2]+(f<<2)|0)+4>>2];i[e+120>>2]=j;if((a|0)!=(f|0)){continue}break}}n[d>>3]=n[e+104>>3];if(i[e+124>>2]!=i[e+116>>2]){_(e+124|0)}_(e+116|0);S=e+128|0;return h}function Yc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;c=S-256|0;S=c;a:{if(i[22276]){q=1;if(i[21886]<1){break a}V(i[22423],1064,53263,0);break a}d=i[21886];if(!i[21899]){q=1;if((d|0)<1){break a}V(i[22423],1026,53398,0);break a}if((d|0)<1){break a}V(i[22423],1062,53518,0)}if(!i[21973]){i[22642]=0;i[22624]=0}b:{if(!a){break b}w=(b|0)!=1;while(1){if(i[a+48>>2]){b=i[a+80>>2];c:{if(b&65536){sa(53634);i[c+240>>2]=i[a+76>>2];V(i[22423],6113,53648,c+240|0);s=1;f=a;break c}if(b&512){break c}d:{if(i[21899]){e=0;if(!(b&8192)|!i[22276]){break d}}b=i[a+60>>2];if(!b){break c}d=i[b+4>>2];v=W(b);if((v|0)<1){break c}k=1;b=0;while(1){e=i[d+80>>2];e:{if(e&512){break e}if(!(e&8192)){k=0;break e}e=i[(i[a+52>>2]+(b<<2)|0)+4>>2];aa(i[e+8>>2],d,c+248|0);l=n[c+248>>3];r=n[11144];if(l>=-r^1){break e}f:{if(!w){sa(53715);l=n[11144];r=n[c+248>>3];m=i[22423];o=Y(i[e+8>>2]);p=i[e+16>>2];g:{if(!(r>l^1)){i[c+192>>2]=i[d+76>>2];i[c+176>>2]=o;i[c+180>>2]=p;n[c+184>>3]=n[c+248>>3];V(m,6114,53742,c+176|0);break g}t=i[d+76>>2];n[c+224>>3]=n[c+248>>3];i[c+208>>2]=o;i[c+212>>2]=p;i[c+216>>2]=t;V(m,6379,53840,c+208|0)}X(2,d,0);r=n[11144];l=n[c+248>>3]}if(!(l>r^1)){s=1;i[22624]=i[22624]+1;sa(53964);f=i[22423];g=i[d+76>>2];m=i[a+76>>2];o=Y(i[e+8>>2]);e=i[e+16>>2];p=i[d+76>>2];n[c+96>>3]=n[c+248>>3];i[c+104>>2]=p;i[c+80>>2]=m;i[c+84>>2]=g;i[c+88>>2]=o;i[c+92>>2]=e;V(f,6115,53978,c+80|0);break f}if(i[22276]){if(l>0^1){break e}s=1;i[22642]=i[22642]+1;sa(54059);f=i[22423];g=i[d+76>>2];m=i[a+76>>2];o=Y(i[e+8>>2]);e=i[e+16>>2];p=i[d+76>>2];n[c+160>>3]=n[c+248>>3];i[c+168>>2]=p;i[c+144>>2]=m;i[c+148>>2]=g;i[c+152>>2]=o;i[c+156>>2]=e;V(f,6116,54074,c+144|0);break f}i[22642]=i[22642]+1;sa(54059);if(!i[21886]){break e}m=i[22423];o=i[d+76>>2];p=i[a+76>>2];t=Y(i[e+8>>2]);e=i[e+16>>2];d=i[d+76>>2];n[c+128>>3]=n[c+248>>3];i[c+136>>2]=d;i[c+140>>2]=i[22455];i[c+112>>2]=p;i[c+116>>2]=o;i[c+120>>2]=t;i[c+124>>2]=e;V(m,22,54203,c+112|0);break e}f=a;g=d}b=b+1|0;d=i[(i[a+60>>2]+(b<<2)|0)+4>>2];if((b|0)!=(v|0)){continue}break}if(k){break c}e=1}if(!(!q|i[21886]<1)){i[c+64>>2]=i[a+76>>2];V(i[22423],1063,54301,c- -64|0)}h:{if(i[22454]==2){k=i[a+40>>2];if(k){d=h;break h}k=Da(a);i[a+40>>2]=k;d=h;break h}u=1;d=1;i:{if(h){break i}d=0;if(j[a+81|0]&32){break i}V(i[22423],7062,54424,0);d=1}k=Da(a)}j:{b=i[a+60>>2];if(!b){break j}b=b+4|0;while(1){h=i[b>>2];if(!h){break j}b=b+4|0;q=i[h+80>>2];if(q&512|(q&8192)>>>13&e){continue}i[22676]=i[22676]+1;aa(k,h,c+248|0);l=n[c+248>>3];k:{if(!(l>n[11144]^1)){i[22624]=i[22624]+1;sa(53964);f=i[a+76>>2];g=i[h+76>>2];n[c+16>>3]=n[c+248>>3];i[c+24>>2]=g;i[c>>2]=f;i[c+4>>2]=g;i[c+8>>2]=f;V(i[22423],6117,54524,c);break k}if(l>=0^1){continue}i[22642]=i[22642]+1;sa(54059);f=i[a+76>>2];g=i[h+76>>2];n[c+48>>3]=n[c+248>>3];i[c+56>>2]=g;i[c+32>>2]=f;i[c+36>>2]=g;i[c+40>>2]=f;V(i[22423],6118,54606,c+32|0)}s=1;f=a;g=h;continue}}if(!u){u=0;h=d;q=0;break c}q=0;$(k,i[22425]);u=1;h=d}a=i[a+48>>2];if(a){continue}}break}if(i[21878]|!s){break b}ca(3,f,g)}S=c+256|0}function Gg(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0;e=S-176|0;S=e;o=ha(i[22426]);a:{b:{f=W(b);c=a+1|0;if((f|0)==(c|0)){break b}if((f|0)<=(a|0)){$(o,i[22426]);i[e+160>>2]=c;V(i[22423],6025,7617,e+160|0);X(5,0,0);break b}i[e+172>>2]=ba(c);xb(a,b,0,0,e+172|0);c=i[e+172>>2];break a}i[e+172>>2]=b;c=b}k=i[22502];l=i[c+4>>2];c:{if((a|0)<=0){break c}while(1){i[i[22503]+(j<<2)>>2]=k;c=i[e+172>>2];d:{if(!c){break d}d=i[c+4>>2];if(!d){break d}c=c+8|0;f=j<<3;g=f+l|0;while(1){if((d|0)!=(l|0)){n[k>>3]=n[d+f>>3]-n[g>>3];k=k+8|0}d=i[c>>2];c=c+4|0;if(d){continue}break}}j=j+1|0;if((j|0)!=(a|0)){continue}break}if((a|0)<1){break c}c=0;f=i[22503];g=k;while(1){h=0;d=0;while(1){p=h;h=n[i[f+(d<<2)>>2]+(c<<3)>>3];h=p+h*h;d=d+1|0;if((d|0)!=(a|0)){continue}break}n[g>>3]=h;g=g+8|0;c=c+1|0;if((c|0)!=(a|0)){continue}break}}h=lc(i[22503],a,e+168|0);e:{f:{m=n[11151];g:{if(!(m>.5^1|m>-.5^1)){if(!((h<0?-h:h)>.5)){break g}break f}p=h+h;if(p>m|p<-m){break f}}if(a){while(1){a=a+ -1|0;c=(a<<3)+o|0;i[c>>2]=1168231105;i[c+4>>2]=-1071369290;if(a){continue}break}}if(!i[21886]){break e}i[e+144>>2]=7715;a=i[e+172>>2];f=i[22423];V(f,9004,6264,e+144|0);h:{if(!a){break h}d=i[a+4>>2];if(!d){break h}c=a+4|0;while(1){i[e+128>>2]=Y(d);V(f,9005,6267,e+128|0);d=i[c+4>>2];c=c+4|0;if(d){continue}break}}V(f,9006,6262,0);break e}m=.5/h;if((a|0)>0){while(1){d=i[22502];c=k;j=0;while(1){i[i[22503]+(j<<2)>>2]=d;i:{if((j|0)==(q|0)){f=a;while(1){n[d>>3]=n[c>>3];d=d+8|0;c=c+8|0;f=f+ -1|0;if(f){continue}break}break i}g=i[e+172>>2];if(!g){break i}f=i[g+4>>2];if(!f){break i}g=g+8|0;r=j<<3;s=l+r|0;while(1){if((f|0)!=(l|0)){n[d>>3]=n[f+r>>3]-n[s>>3];d=d+8|0}f=i[g>>2];g=g+4|0;if(f){continue}break}}j=j+1|0;if((j|0)!=(a|0)){continue}break}c=q<<3;n[c+o>>3]=m*lc(i[22503],a,e+168|0)+n[c+l>>3];q=q+1|0;if((q|0)!=(a|0)){continue}break}}c=0;if(i[21886]<3){break e}n[e+112>>3]=h;n[e+120>>3]=m;V(i[22423],3061,7751,e+112|0);i[e+96>>2]=7794;f=i[22423];V(f,9001,6251,e+96|0);if((a|0)>=1){d=o;while(1){n[e+80>>3]=n[d>>3];V(f,9002,6255,e+80|0);d=d+8|0;c=c+1|0;if((c|0)!=(a|0)){continue}break}}V(f,9003,6262,0);if(i[21886]<5){break e}i[e+64>>2]=7802;c=i[e+172>>2];f=i[22423];V(f,9004,6264,e- -64|0);j:{if(!c){break j}d=i[c+4>>2];if(!d){break j}c=c+4|0;while(1){i[e+48>>2]=Y(d);V(f,9005,6267,e+48|0);d=i[c+4>>2];c=c+4|0;if(d){continue}break}}V(f,9006,6262,0);c=i[e+172>>2];k:{if(!c){break k}d=i[c+4>>2];if(!d){break k}g=c+4|0;c=a>>31;k=c+a^c;if(k){while(1){j=i[22423];h=0;l=Y(d);f=k;c=o;while(1){p=h;h=n[d>>3]-n[c>>3];h=p+h*h;d=d+8|0;c=c+8|0;f=f+ -1|0;if(f){continue}break}i[e+32>>2]=l;n[e+40>>3]=(a|0)>0?w(h):h;V(j,8034,7809,e+32|0);d=i[g+4>>2];g=g+4|0;if(d){continue}break k}}if((a|0)>=1){while(1){a=i[22423];c=Y(d);i[e+8>>2]=0;i[e+12>>2]=0;i[e>>2]=c;V(a,8034,7809,e);d=i[g+4>>2];g=g+4|0;if(d){continue}break k}}while(1){a=i[22423];c=Y(d);i[e+24>>2]=0;i[e+28>>2]=0;i[e+16>>2]=c;V(a,8034,7809,e+16|0);d=i[g+4>>2];g=g+4|0;if(d){continue}break}}V(i[22423],8035,6262,0)}if(i[e+172>>2]!=(b|0)){_(e+172|0)}S=e+176|0;return o}function ta(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;a:{if(!a){break a}d=a+ -8|0;b=i[a+ -4>>2];a=b&-8;f=d+a|0;b:{if(b&1){break b}if(!(b&3)){break a}b=i[d>>2];d=d-b|0;if(d>>>0<l[24208]){break a}a=a+b|0;if(i[24209]!=(d|0)){if(b>>>0<=255){e=i[d+8>>2];b=b>>>3|0;c=i[d+12>>2];if((c|0)==(e|0)){i[24204]=i[24204]&pi(b);break b}i[e+12>>2]=c;i[c+8>>2]=e;break b}h=i[d+24>>2];b=i[d+12>>2];c:{if((d|0)!=(b|0)){c=i[d+8>>2];i[c+12>>2]=b;i[b+8>>2]=c;break c}d:{e=d+20|0;c=i[e>>2];if(c){break d}e=d+16|0;c=i[e>>2];if(c){break d}b=0;break c}while(1){g=e;b=c;e=b+20|0;c=i[e>>2];if(c){continue}e=b+16|0;c=i[b+16>>2];if(c){continue}break}i[g>>2]=0}if(!h){break b}e=i[d+28>>2];c=(e<<2)+97120|0;e:{if(i[c>>2]==(d|0)){i[c>>2]=b;if(b){break e}i[24205]=i[24205]&pi(e);break b}i[h+(i[h+16>>2]==(d|0)?16:20)>>2]=b;if(!b){break b}}i[b+24>>2]=h;c=i[d+16>>2];if(c){i[b+16>>2]=c;i[c+24>>2]=b}c=i[d+20>>2];if(!c){break b}i[b+20>>2]=c;i[c+24>>2]=b;break b}b=i[f+4>>2];if((b&3)!=3){break b}i[24206]=a;i[f+4>>2]=b&-2;i[d+4>>2]=a|1;i[a+d>>2]=a;return}if(f>>>0<=d>>>0){break a}b=i[f+4>>2];if(!(b&1)){break a}f:{if(!(b&2)){if(i[24210]==(f|0)){i[24210]=d;a=i[24207]+a|0;i[24207]=a;i[d+4>>2]=a|1;if(i[24209]!=(d|0)){break a}i[24206]=0;i[24209]=0;return}if(i[24209]==(f|0)){i[24209]=d;a=i[24206]+a|0;i[24206]=a;i[d+4>>2]=a|1;i[a+d>>2]=a;return}a=(b&-8)+a|0;g:{if(b>>>0<=255){c=i[f+8>>2];b=b>>>3|0;e=i[f+12>>2];if((c|0)==(e|0)){i[24204]=i[24204]&pi(b);break g}i[c+12>>2]=e;i[e+8>>2]=c;break g}h=i[f+24>>2];b=i[f+12>>2];h:{if((f|0)!=(b|0)){c=i[f+8>>2];i[c+12>>2]=b;i[b+8>>2]=c;break h}i:{e=f+20|0;c=i[e>>2];if(c){break i}e=f+16|0;c=i[e>>2];if(c){break i}b=0;break h}while(1){g=e;b=c;e=b+20|0;c=i[e>>2];if(c){continue}e=b+16|0;c=i[b+16>>2];if(c){continue}break}i[g>>2]=0}if(!h){break g}e=i[f+28>>2];c=(e<<2)+97120|0;j:{if(i[c>>2]==(f|0)){i[c>>2]=b;if(b){break j}i[24205]=i[24205]&pi(e);break g}i[h+(i[h+16>>2]==(f|0)?16:20)>>2]=b;if(!b){break g}}i[b+24>>2]=h;c=i[f+16>>2];if(c){i[b+16>>2]=c;i[c+24>>2]=b}c=i[f+20>>2];if(!c){break g}i[b+20>>2]=c;i[c+24>>2]=b}i[d+4>>2]=a|1;i[a+d>>2]=a;if(i[24209]!=(d|0)){break f}i[24206]=a;return}i[f+4>>2]=b&-2;i[d+4>>2]=a|1;i[a+d>>2]=a}if(a>>>0<=255){a=a>>>3|0;b=(a<<3)+96856|0;c=i[24204];a=1<<a;k:{if(!(c&a)){i[24204]=a|c;a=b;break k}a=i[b+8>>2]}i[b+8>>2]=d;i[a+12>>2]=d;i[d+12>>2]=b;i[d+8>>2]=a;return}e=31;i[d+16>>2]=0;i[d+20>>2]=0;if(a>>>0<=16777215){b=a>>>8|0;g=b+1048320>>>16&8;b=b<<g;e=b+520192>>>16&4;b=b<<e;c=b+245760>>>16&2;b=(b<<c>>>15|0)-(c|(e|g))|0;e=(b<<1|a>>>b+21&1)+28|0}i[d+28>>2]=e;g=(e<<2)+97120|0;l:{m:{c=i[24205];b=1<<e;n:{if(!(c&b)){i[24205]=b|c;i[g>>2]=d;i[d+24>>2]=g;break n}e=a<<((e|0)==31?0:25-(e>>>1|0)|0);b=i[g>>2];while(1){c=b;if((i[b+4>>2]&-8)==(a|0)){break m}b=e>>>29|0;e=e<<1;g=c+(b&4)|0;b=i[g+16>>2];if(b){continue}break}i[g+16>>2]=d;i[d+24>>2]=c}i[d+12>>2]=d;i[d+8>>2]=d;break l}a=i[c+8>>2];i[a+12>>2]=d;i[c+8>>2]=d;i[d+24>>2]=0;i[d+12>>2]=c;i[d+8>>2]=a}a=i[24212]+ -1|0;i[24212]=a;if(a){break a}d=97272;while(1){a=i[d>>2];d=a+8|0;if(a){continue}break}i[24212]=-1}}function vd(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=S-224|0;S=e;o=i[22443];g=rd(c,d,e+212|0,e+220|0);i[e+216>>2]=g;a:{if(!g){g=0;break a}f=i[g+4>>2];p=W(g);if((p|0)<1){n=g;g=0;break a}n=g;g=0;while(1){b:{if(!f){break b}k=g+1|0;j=i[f+12>>2];if(!j){g=k;break b}f=i[j+4>>2];if(!f){g=k;break b}j=j+4|0;l=0;h=0;while(1){f=i[f+72>>2];l=f?l:1;h=((f|0)!=0&f>>>0<o>>>0)+h|0;f=i[j+4>>2];j=j+4|0;if(f){continue}break}if(h){g=k;break b}if(!l){g=k;break b}i[((m<<2)+n|0)+4>>2]=0;n=i[e+216>>2]}m=m+1|0;f=i[((m<<2)+n|0)+4>>2];if((m|0)!=(p|0)){continue}break}}c:{if((b|0)==7){i[e+160>>2]=i[e+220>>2];i[e+164>>2]=g;V(a,9254,17770,e+160|0);f=i[22007]+ -1|0;if(f){while(1){i[e+144>>2]=0;i[e+148>>2]=0;V(a,9256,13090,e+144|0);f=f+ -1|0;if(f){continue}break}}V(a,9257,17849,0);break c}g=i[22007];k=i[e+220>>2];i[e+200>>2]=W(n);i[e+196>>2]=k;i[e+192>>2]=g+ -1;V(a,9255,17837,e+192|0);f=i[22007]+ -1|0;if(f){while(1){i[e+176>>2]=1168231105;i[e+180>>2]=-1071369290;V(a,9258,13090,e+176|0);f=f+ -1|0;if(f){continue}break}}V(a,9259,13098,0)}d:{if(!c){h=1;break d}if((b|0)==7){h=1;while(1){g=i[c+48>>2];if(!g){break d}k=i[c+72>>2];if(!k){c=g;if(c){continue}break d}if(k>>>0>=o>>>0){c=g;if(c){continue}break d}i[e+132>>2]=i[c+76>>2];i[e+128>>2]=h;V(a,9260,17873,e+128|0);ab(a,7,0,c);h=h+1|0;c=i[c+48>>2];if(c){continue}break}break d}while(1){h=1;g=c;c=i[c+48>>2];if(!c){break d}k=i[g+72>>2];if(!(!k|k>>>0>=o>>>0)){ab(a,b,0,g);c=i[g+48>>2]}if(c){continue}break}}e:{if(!d){break e}f=i[d+4>>2];if(!f){break e}j=d+8|0;if((b|0)==7){while(1){c=j;d=i[f+72>>2];if(!(!d|d>>>0>=o>>>0)){i[e+116>>2]=i[f+76>>2];i[e+112>>2]=h;V(a,9261,17873,e+112|0);ab(a,7,0,f);h=h+1|0}j=c+4|0;f=i[c>>2];if(f){continue}break e}}while(1){c=j;d=i[f+72>>2];if(!(!d|d>>>0>=o>>>0)){ab(a,b,0,f)}j=c+4|0;f=i[c>>2];if(f){continue}break}}f:{if(!n){break f}c=i[n+4>>2];p=W(n);if((p|0)<1){break f}m=0;g=(b|0)==7;while(1){g:{h:{i:{j:{k:{if(c){qd(c);d=i[c+12>>2];if(d){j=i[d+4>>2];if(!j){break k}h=d+4|0;f=0;l=0;while(1){d=i[j+72>>2];f=d?f:1;l=((d|0)!=0&d>>>0<o>>>0)+l|0;j=i[h+4>>2];h=h+4|0;if(j){continue}break}if(g){break h}if(!f){break j}l=l+1|0;break i}l=0;if((b|0)!=7){break j}break h}l=0;if(!g){break j}i[e>>2]=m;V(a,9265,17896,e);break g}l=0;if(g){break h}}f=0}i[e+48>>2]=l;V(a,9266,13103,e+48|0);l:{if(!c){break l}c=i[c+12>>2];if(!c){break l}h=i[c+4>>2];if(!h){break l}l=c+8|0;while(1){d=l;c=i[h+72>>2];m:{if(!c){c=0;if(!f){break m}i[e+16>>2]=0;V(a,9267,13106,e+16|0);c=0;break m}if(c>>>0<o>>>0){i[e+32>>2]=c;V(a,9268,13106,e+32|0)}c=f}f=c;l=d+4|0;h=i[d>>2];if(h){continue}break}}V(a,9269,13098,0);break g}i[e+96>>2]=l;V(a,9262,13103,e+96|0);d=i[c+12>>2];n:{if(!d){break n}j=i[d+4>>2];if(!j){break n}h=d+8|0;while(1){d=h;k=i[j+72>>2];if(!(!k|k>>>0>=o>>>0)){i[e+80>>2]=k;V(a,9263,13106,e+80|0)}h=d+4|0;j=i[d>>2];if(j){continue}break}}i[e+68>>2]=i[c+16>>2];i[e+64>>2]=m;V(a,9264,17883,e- -64|0)}m=m+1|0;c=i[((m<<2)+n|0)+4>>2];if((m|0)!=(p|0)){continue}break}}if((b|0)==7){V(a,9270,14548,0)}_(e+216|0);S=e+224|0}function $a(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,l=0;e=S-336|0;S=e;i[e+320>>2]=0;i[e+324>>2]=0;i[e+316>>2]=0;if(i[21886]>=4){f=i[22423];h=Y(a);k=i[b+76>>2];g=c?n[c>>3]:0;i[e+304>>2]=d;i[e+308>>2]=i[22485];i[e+288>>2]=h;i[e+292>>2]=k;n[e+296>>3]=g;V(f,4090,20921,e+288|0)}i[22494]=1;a:{b:{if(!c){c:{if(d){f=Db(a,b,e+328|0,1,e+312|0,e+316|0);break c}f=Dc(a,b,1,0,i[21874],e+328|0,e+312|0,e+316|0)}i[22994]=i[22994]+1;i[22902]=i[22902]+i[e+316>>2];if(i[21889]|i[21874]){break b}g=n[e+328>>3];if(i[22006]){if(g<-n[11156]^1){break b}i[22638]=i[22638]+1;if(i[21886]>=4){b=i[22423];a=Y(a);c=i[f+76>>2];i[e+272>>2]=d;i[e+256>>2]=a;i[e+260>>2]=c;n[e+264>>3]=n[e+328>>3];V(b,4062,21038,e+256|0)}i[22485]=0;break a}if(g<-n[10947]^1){break b}if(i[21886]>=4){b=i[22423];a=Y(a);c=i[f+76>>2];i[e+16>>2]=d;i[e>>2]=a;i[e+4>>2]=c;n[e+8>>3]=n[e+328>>3];V(b,4063,21128,e)}i[22638]=i[22638]+1;i[22485]=0;break a}n[e+328>>3]=n[c>>3];f=b}if(j[f+81|0]&8){d=i[22423];h=Y(a);k=i[b+76>>2];i[e+248>>2]=i[f+76>>2];i[e+244>>2]=k;i[e+240>>2]=h;V(d,6405,21203,e+240|0);i[22439]=0;i[22437]=0;i[22435]=0;ma(19042,b,f,0,0);X(5,0,0)}g=n[e+328>>3];d:{if(g>n[11233]^1){break d}e:{f:{g:{h:{if(!(c|(b|0)==(f|0))){i[22900]=i[22900]+1;g=bb(i[b+24>>2],i[f+24>>2]);if(g<0){break h}g=n[e+328>>3]}if(g>n[11147]*30^1){break e}g=sb(i[f+52>>2]);c=i[b+76>>2];if((c|0)==i[f+76>>2]){if((c|0)==i[22485]){c=i[22423];d=Y(a);h=i[b+76>>2];n[e+144>>3]=g;i[e+128>>2]=d;i[e+132>>2]=h;n[e+136>>3]=n[e+328>>3];V(c,6404,21443,e+128|0);X(5,b,0);c=i[b+76>>2]}i[22485]=c}if(i[22458]==(a|0)){c=i[22423];d=Y(a);h=i[f+76>>2];k=i[b+76>>2];n[e+112>>3]=n[e+328>>3];n[e+120>>3]=g;i[e+96>>2]=d;i[e+100>>2]=k;i[e+104>>2]=h;V(c,6425,21632,e+96|0);X(7,b,0)}l=n[11147];if(g<(l+l)*30^1){break g}i[22916]=i[22916]+1;c=i[22423];d=Y(a);h=i[f+76>>2];b=i[b+76>>2];n[e+48>>3]=n[e+328>>3];n[e+56>>3]=g;i[e+32>>2]=d;i[e+36>>2]=b;i[e+40>>2]=h;V(c,7085,21837,e+32|0);break f}sb(i[f+52>>2]);i[22904]=i[22904]+1;if(i[21886]<2){break f}c=i[22423];d=Y(a);h=i[f+76>>2];b=i[b+76>>2];n[e+224>>3]=n[e+328>>3];n[e+232>>3]=g;i[e+208>>2]=d;i[e+212>>2]=b;i[e+216>>2]=h;V(c,2058,21309,e+208|0);break f}i[22906]=i[22906]+1;c=i[22423];d=Y(a);h=i[f+76>>2];b=i[b+76>>2];n[e+80>>3]=n[e+328>>3];n[e+88>>3]=g;i[e+64>>2]=d;i[e+68>>2]=b;i[e+72>>2]=h;V(c,7086,21981,e- -64|0)}b=i[22474];i[22474]=0;nd(a,f);i[22474]=b;i[22485]=0;break a}n[11233]=g;i[22485]=0;if(i[21886]<3?!(g>n[10995]):0){break d}c=i[22423];d=Y(a);h=i[b+76>>2];i[e+192>>2]=i[f+76>>2];i[e+196>>2]=i[22455];i[e+176>>2]=d;i[e+180>>2]=h;n[e+184>>3]=n[e+328>>3];V(c,3041,22124,e+176|0);ma(22213,b,f,0,0)}i:{if((i[21889]+i[21888]|0)==(0-i[22006]|0)){break i}b=f+68|0;j:{c=vb(i[f+68>>2]);if(c){i[22606]=i[22606]+1;aa(c,f,e+320|0);if(n[e+320>>3]<n[e+328>>3]^1){break j}}Z(b,a);break i}Yd(b,a)}if(i[21886]<4){break a}b=i[22423];a=Y(a);c=i[f+76>>2];i[e+160>>2]=a;i[e+164>>2]=c;n[e+168>>3]=n[e+328>>3];V(b,4064,22221,e+160|0)}S=e+336|0}function Ad(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;f=a+b|0;a:{b:{c=i[a+4>>2];if(c&1){break b}if(!(c&3)){break a}c=i[a>>2];b=c+b|0;a=a-c|0;if((a|0)!=i[24209]){if(c>>>0<=255){e=c>>>3|0;c=i[a+8>>2];d=i[a+12>>2];if((d|0)==(c|0)){i[24204]=i[24204]&pi(e);break b}i[c+12>>2]=d;i[d+8>>2]=c;break b}h=i[a+24>>2];c=i[a+12>>2];c:{if((c|0)!=(a|0)){d=i[a+8>>2];i[d+12>>2]=c;i[c+8>>2]=d;break c}d:{d=a+20|0;e=i[d>>2];if(e){break d}d=a+16|0;e=i[d>>2];if(e){break d}c=0;break c}while(1){g=d;c=e;d=c+20|0;e=i[d>>2];if(e){continue}d=c+16|0;e=i[c+16>>2];if(e){continue}break}i[g>>2]=0}if(!h){break b}d=i[a+28>>2];e=(d<<2)+97120|0;e:{if(i[e>>2]==(a|0)){i[e>>2]=c;if(c){break e}i[24205]=i[24205]&pi(d);break b}i[h+(i[h+16>>2]==(a|0)?16:20)>>2]=c;if(!c){break b}}i[c+24>>2]=h;d=i[a+16>>2];if(d){i[c+16>>2]=d;i[d+24>>2]=c}d=i[a+20>>2];if(!d){break b}i[c+20>>2]=d;i[d+24>>2]=c;break b}c=i[f+4>>2];if((c&3)!=3){break b}i[24206]=b;i[f+4>>2]=c&-2;i[a+4>>2]=b|1;i[f>>2]=b;return}c=i[f+4>>2];f:{if(!(c&2)){if(i[24210]==(f|0)){i[24210]=a;b=i[24207]+b|0;i[24207]=b;i[a+4>>2]=b|1;if(i[24209]!=(a|0)){break a}i[24206]=0;i[24209]=0;return}if(i[24209]==(f|0)){i[24209]=a;b=i[24206]+b|0;i[24206]=b;i[a+4>>2]=b|1;i[a+b>>2]=b;return}b=(c&-8)+b|0;g:{if(c>>>0<=255){e=c>>>3|0;c=i[f+8>>2];d=i[f+12>>2];if((d|0)==(c|0)){i[24204]=i[24204]&pi(e);break g}i[c+12>>2]=d;i[d+8>>2]=c;break g}h=i[f+24>>2];c=i[f+12>>2];h:{if((f|0)!=(c|0)){d=i[f+8>>2];i[d+12>>2]=c;i[c+8>>2]=d;break h}i:{d=f+20|0;e=i[d>>2];if(e){break i}d=f+16|0;e=i[d>>2];if(e){break i}c=0;break h}while(1){g=d;c=e;d=c+20|0;e=i[d>>2];if(e){continue}d=c+16|0;e=i[c+16>>2];if(e){continue}break}i[g>>2]=0}if(!h){break g}d=i[f+28>>2];e=(d<<2)+97120|0;j:{if(i[e>>2]==(f|0)){i[e>>2]=c;if(c){break j}i[24205]=i[24205]&pi(d);break g}i[h+(i[h+16>>2]==(f|0)?16:20)>>2]=c;if(!c){break g}}i[c+24>>2]=h;d=i[f+16>>2];if(d){i[c+16>>2]=d;i[d+24>>2]=c}d=i[f+20>>2];if(!d){break g}i[c+20>>2]=d;i[d+24>>2]=c}i[a+4>>2]=b|1;i[a+b>>2]=b;if(i[24209]!=(a|0)){break f}i[24206]=b;return}i[f+4>>2]=c&-2;i[a+4>>2]=b|1;i[a+b>>2]=b}if(b>>>0<=255){c=b>>>3|0;b=(c<<3)+96856|0;d=i[24204];c=1<<c;k:{if(!(d&c)){i[24204]=c|d;c=b;break k}c=i[b+8>>2]}i[b+8>>2]=a;i[c+12>>2]=a;i[a+12>>2]=b;i[a+8>>2]=c;return}d=31;i[a+16>>2]=0;i[a+20>>2]=0;if(b>>>0<=16777215){d=b>>>8|0;c=d+1048320>>>16&8;e=d<<c;d=e+520192>>>16&4;g=e<<d;e=g+245760>>>16&2;c=(g<<e>>>15|0)-(e|(c|d))|0;d=(c<<1|b>>>c+21&1)+28|0}i[a+28>>2]=d;c=(d<<2)+97120|0;l:{e=i[24205];g=1<<d;m:{if(!(e&g)){i[24205]=e|g;i[c>>2]=a;i[a+24>>2]=c;break m}d=b<<((d|0)==31?0:25-(d>>>1|0)|0);c=i[c>>2];while(1){e=c;if((i[c+4>>2]&-8)==(b|0)){break l}c=d>>>29|0;d=d<<1;g=e+(c&4)|0;c=i[g+16>>2];if(c){continue}break}i[g+16>>2]=a;i[a+24>>2]=e}i[a+12>>2]=a;i[a+8>>2]=a;return}b=i[e+8>>2];i[b+12>>2]=a;i[e+8>>2]=a;i[a+24>>2]=0;i[a+12>>2]=e;i[a+8>>2]=b}}function xb(a,b,c,d,e){var f=0,g=0,h=0,j=0,k=0,l=0,m=0,p=0,q=0,r=0,s=0,t=0,u=0;g=S-208|0;S=g;if(!(n[11149]<=0^1)){V(i[22423],6421,5266,0);X(5,0,0)}j=W(i[e>>2]);a:{if((j|0)>=2){m=ig(n[11149],+(j+ -1|0));break a}b:{if((W(b)|0)>=2){if(!b){h=-1.7976931348623157e+308;k=1.7976931348623157e+308;break b}h=-1.7976931348623157e+308;k=1.7976931348623157e+308;f=i[b+4>>2];if(!f){break b}p=b+4|0;while(1){m=n[f>>3];j=k>m;k=j?m:k;l=j?f:l;j=h<m;h=j?m:h;r=j?f:r;f=i[p+4>>2];p=p+4|0;if(f){continue}break}break b}f=i[22007];p=o(f,d);if((p|0)<1){h=-1.7976931348623157e+308;k=1.7976931348623157e+308;break b}j=(p<<3)+c|0;q=i[21880];k=1.7976931348623157e+308;h=-1.7976931348623157e+308;u=f<<3;f=c;while(1){c:{if((f|0)==(q|0)){break c}m=n[f>>3];p=h<m;h=p?m:h;r=p?f:r;if(k>m^1){break c}l=f;k=m}f=f+u|0;if(f>>>0<j>>>0){continue}break}}Ea(e,l);if((W(i[e>>2])|0)<=1){Ea(e,r)}m=h-k;j=W(i[e>>2]);if((j|0)>1){break a}sa(5375);f=i[22423];l=i[22007];if(i[22984]>(l+1|0)){l=W(b);n[g+168>>3]=k;i[g+160>>2]=d+l;V(f,6012,5403,g+160|0);X(3,0,0);break a}n[g+184>>3]=k;i[g+176>>2]=l;V(f,6013,5505,g+176|0);X(1,0,0)}if((j|0)<=(a|0)){u=a+1|0;r=b+8|0;q=0;while(1){d:{e:{f:{g:{if(!b){i[22982]=i[22982]+1;h=m*n[11149];break g}f=i[b+4>>2];if(f){l=0;k=-1;p=r;while(1){a=p;h:{if(da(i[e>>2],f)|(f|0)==(l|0)){break h}h=Nb(f,i[e>>2],j,g+204|0);h=h<0?-h:h;if(h>k^1){break h}q=i[g+204>>2];l=f;k=h}p=a+4|0;f=i[a>>2];if(f){continue}break}h=m*n[11149];s=h*.01;t=1;i:{j:{k:{if(k>0^1){break k}t=k/h;if(t<.001^1){break k}i[22982]=i[22982]+1;if(!l){break f}if(i[21854]){break j}if(!i[21886]){break e}a=i[22423];f=Y(l);n[g+88>>3]=t;n[g+80>>3]=s;n[g+72>>3]=k;i[g+68>>2]=f;i[g+64>>2]=j+1;V(a,17,5840,g- -64|0);break e}if(!(q|!l)){q=0;break d}i[22982]=i[22982]+1;if(!l){break f}if(!i[21854]){break i}}if(!i[21886]){break e}a=i[22423];f=Y(l);n[g+120>>3]=t;n[g+112>>3]=h;n[g+104>>3]=k;i[g+100>>2]=f;i[g+96>>2]=j+1;V(a,30,5714,g+96|0);break e}if(!i[21886]){break e}a=i[22423];f=Y(l);n[g+152>>3]=h;n[g+144>>3]=s;n[g+136>>3]=k;i[g+132>>2]=f;i[g+128>>2]=j+1;V(a,8,5959,g+128|0);break e}i[22982]=i[22982]+1;h=m*n[11149]}s=h*.01;k=-1}l=0;if(!i[21886]){break e}n[g+48>>3]=h;n[g+40>>3]=s;i[g+32>>2]=j+1;V(i[22423],7,5609,g+32|0)}a=o(i[22007],d);l:{if((a|0)<1){break l}a=(a<<3)+c|0;f=c;while(1){m:{if(i[21880]==(f|0)){break m}if(da(b,f)){break m}if(da(i[e>>2],f)){break m}h=Nb(f,i[e>>2],j,g+204|0);h=h<0?-h:h;if(h>k^1){break m}q=i[g+204>>2];if(q|i[21854]){l=f;k=h;break m}q=0;l=f;k=h;if(!(h>s)){break m}break l}f=(i[22007]<<3)+f|0;if(f>>>0<a>>>0){continue}break}}if(l){break d}l=0;V(i[22423],6014,6082,0);X(5,0,0)}Z(e,l);n:{if(i[21886]<=0){j=j+1|0;break n}a=i[22423];f=Y(l);n[g+24>>3]=s;n[g+16>>3]=m*n[11149];i[g>>2]=f;j=j+1|0;i[g+4>>2]=j;n[g+8>>3]=k;V(a,1002,6149,g)}m=k;if((j|0)!=(u|0)){continue}break}}S=g+208|0}function Lh(a,b,c,d,e,f,g){var h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;t=S-16|0;S=t;a:{b:{c:{d:{e:{switch(a+ -2|0){case 0:a=i[b+4>>2];b=i[b>>2];n[e>>3]=n[a+8>>3]-n[b+8>>3];n[e+8>>3]=n[b>>3]-n[a>>3];_a(e,2,d);n[f>>3]=-(n[c>>3]*n[e>>3]+n[c+8>>3]*n[e+8>>3]);i[g>>2]=0;break a;case 1:a=i[b+8>>2];m=i[b>>2];j=n[m+8>>3];o=i[b+4>>2];h=n[m+16>>3];n[e>>3]=(n[a+8>>3]-j)*(n[o+16>>3]-h)-(n[a+16>>3]-h)*(n[o+8>>3]-j);j=n[m>>3];h=n[m+16>>3];n[e+8>>3]=(n[o>>3]-j)*(n[a+16>>3]-h)-(n[o+16>>3]-h)*(n[a>>3]-j);j=n[m>>3];h=n[m+8>>3];n[e+16>>3]=(n[a>>3]-j)*(n[o+8>>3]-h)-(n[a+8>>3]-h)*(n[o>>3]-j);_a(e,3,d);j=n[c>>3]*n[e>>3]+n[c+8>>3]*n[e+8>>3]+n[c+16>>3]*n[e+16>>3];n[f>>3]=-j;h=n[11144];k=-h;a=i[b+8>>2];if((a|0)!=(c|0)){l=n[a>>3]*n[e>>3]+n[a+8>>3]*n[e+8>>3]+n[a+16>>3]*n[e+16>>3]-j;if(l>h|l<k){break c}}a=i[b+4>>2];if((a|0)!=(c|0)){l=n[a>>3]*n[e>>3]+n[a+8>>3]*n[e+8>>3]+n[a+16>>3]*n[e+16>>3]-j;if(l>h|l<k){break c}}a=i[b>>2];if((a|0)==(c|0)){break d}j=n[a>>3]*n[e>>3]+n[a+8>>3]*n[e+8>>3]+n[a+16>>3]*n[e+16>>3]-j;if(j>h|j<k){break c}break d;case 2:break e;default:break d}}a=i[b>>2];j=n[a+8>>3];m=i[b+4>>2];h=n[a+24>>3];k=n[m+24>>3]-h;o=i[b+12>>2];l=n[o+24>>3]-h;p=i[b+8>>2];q=n[a+16>>3];r=n[p+16>>3]-q;s=n[m+16>>3]-q;h=n[p+24>>3]-h;u=(n[o+8>>3]-j)*(k*r-s*h);v=k;k=n[o+16>>3]-q;n[e>>3]=-(u+((n[p+8>>3]-j)*(s*l-v*k)-(n[m+8>>3]-j)*(l*r-k*h)));j=n[a>>3];h=n[a+24>>3];l=n[m+24>>3]-h;k=n[a+16>>3];q=n[p+16>>3]-k;r=n[m+16>>3]-k;s=n[p+24>>3]-h;h=n[o+24>>3]-h;k=n[o+16>>3]-k;n[e+8>>3]=(n[o>>3]-j)*(l*q-r*s)+((n[p>>3]-j)*(r*h-l*k)-(n[m>>3]-j)*(h*q-k*s));j=n[a>>3];h=n[a+24>>3];l=n[m+24>>3]-h;k=n[a+8>>3];q=n[p+8>>3]-k;r=n[m+8>>3]-k;s=n[p+24>>3]-h;h=n[o+24>>3]-h;k=n[o+8>>3]-k;n[e+16>>3]=-((n[o>>3]-j)*(l*q-r*s)+((n[p>>3]-j)*(r*h-l*k)-(n[m>>3]-j)*(h*q-k*s)));j=n[a>>3];h=n[a+16>>3];l=n[m+16>>3]-h;k=n[a+8>>3];q=n[p+8>>3]-k;r=n[m+8>>3]-k;s=n[p+16>>3]-h;h=n[o+16>>3]-h;k=n[o+8>>3]-k;n[e+24>>3]=(n[o>>3]-j)*(l*q-r*s)+((n[p>>3]-j)*(r*h-l*k)-(n[m>>3]-j)*(h*q-k*s));_a(e,4,d);j=n[c>>3]*n[e>>3]+n[c+8>>3]*n[e+8>>3]+n[c+16>>3]*n[e+16>>3]+n[c+24>>3]*n[e+24>>3];n[f>>3]=-j;h=n[11144];k=-h;a=i[b+12>>2];if((a|0)!=(c|0)){l=n[a>>3]*n[e>>3]+n[a+8>>3]*n[e+8>>3]+n[a+16>>3]*n[e+16>>3]+n[a+24>>3]*n[e+24>>3]-j;if(l>h|l<k){break c}}a=i[b+8>>2];if((a|0)!=(c|0)){l=n[a>>3]*n[e>>3]+n[a+8>>3]*n[e+8>>3]+n[a+16>>3]*n[e+16>>3]+n[a+24>>3]*n[e+24>>3]-j;if(l>h|l<k){break c}}a=i[b+4>>2];if((a|0)!=(c|0)){l=n[a>>3]*n[e>>3]+n[a+8>>3]*n[e+8>>3]+n[a+16>>3]*n[e+16>>3]+n[a+24>>3]*n[e+24>>3]-j;if(l>h|l<k){break c}}a=i[b>>2];if((a|0)==(c|0)){break d}j=n[a>>3]*n[e>>3]+n[a+8>>3]*n[e+8>>3]+n[a+16>>3]*n[e+16>>3]+n[a+24>>3]*n[e+24>>3]-j;if(j>h|j<k){break c}}if(i[g>>2]){break b}break a}i[g>>2]=1}i[22844]=i[22844]+1;if(!i[21886]){break a}i[t>>2]=i[22455];V(i[22423],3,2679,t)}S=t+16|0}function fc(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0;f=S-96|0;S=f;a=i[21886];a:{if(i[22275]){if((a|0)>=3){d=i[22423];c=-1;a=i[22442];if(a){c=i[a+16>>2]}a=f;b=i[22431];if(b){b=i[b+76>>2]}else{b=-1}i[a+84>>2]=b;i[f+80>>2]=c;V(d,3013,50528,f+80|0)}h=i[22442];b:{if(!h){break b}while(1){if(!i[h>>2]){break b}a=i[h+12>>2];c:{if(!a){break c}c=i[a+4>>2];if(!c){break c}d=a+4|0;a=d+4|0;e=0;while(1){if(j[c+81|0]&8){i[d>>2]=0;e=e+1|0}b=a;a=a+4|0;d=b;c=i[b>>2];if(c){continue}break}if(!e){break c}if(i[21886]>=4){a=i[22423];b=W(i[h+12>>2]);i[f+72>>2]=i[h+16>>2];i[f+68>>2]=b;i[f+64>>2]=e;V(a,4046,50630,f- -64|0)}wb(i[h+12>>2])}h=i[h>>2];if(h){continue}break}}a=i[22431];d:{if(!a){break d}while(1){if(!i[a+48>>2]){break d}b=i[22450];e:{if(!(!b|l[a+76>>2]<b>>>0)){d=i[a+52>>2];if(!d){break e}b=i[d+4>>2];if(!b){break e}c=d+4|0;while(1){Z(b+12|0,a);b=i[c+4>>2];c=c+4|0;if(b){continue}break}break e}d=i[a+52>>2];if(!d){break e}b=i[d+4>>2];if(!b){break e}c=d+4|0;while(1){Ea(b+12|0,a);b=i[c+4>>2];c=c+4|0;if(b){continue}break}}a=i[a+48>>2];if(a){continue}break}}if(i[21886]>=3){d=i[22423];b=f;c=i[22432];a=-1;f:{if(!c){break f}a=i[c+76>>2]}i[b+48>>2]=a;V(d,3058,50739,f+48|0)}e=i[22432];if(!e){break a}while(1){if(!(j[e+81|0]&8)){break a}b=i[e+52>>2];g:{if(!b){break g}a=i[b+4>>2];if(!a){break g}b=b+8|0;while(1){d=b;h=j[a+24|0];h:{if(h&20){break h}i:{c=i[a+12>>2];if(!c){break i}b=c+4|0;while(1){k=i[b>>2];if(!k){break i}b=b+4|0;if(j[k+81|0]&8){continue}break}ja(c,e);break h}g[a+24|0]=h|4;Z(90004,a);if(i[21886]<2){break h}h=i[22423];c=i[a+8>>2];b=-3;j:{if(!c){break j}b=-2;if((c|0)==i[22424]){break j}k:{b=i[22010];if(b>>>0>c>>>0){break k}k=i[22007];if(b+(o(k,i[22009])<<3)>>>0<=c>>>0){break k}b=(c-b>>3)/(k|0)|0;break j}c=eb(i[22500],c);b=-1;if((c|0)==-1){break j}b=c+i[22009]|0}a=i[a+16>>2];i[f+40>>2]=i[e+76>>2];i[f+36>>2]=a;i[f+32>>2]=b;V(h,2041,50818,f+32|0)}b=d+4|0;a=i[d>>2];if(a){continue}break}}e=i[e+48>>2];if(e){continue}break}break a}if((a|0)>=3){d=i[22423];b=f;c=i[22432];a=-1;l:{if(!c){break l}a=i[c+76>>2]}i[b+16>>2]=a;V(d,3058,50893,f+16|0)}d=i[22432];if(!d){break a}while(1){if(!(j[d+81|0]&8)){break a}a=i[d+52>>2];m:{if(!a){break m}b=i[a+4>>2];if(!b){break m}a=a+8|0;while(1){c=a;a=j[b+24|0];n:{if(a&20){break n}g[b+24|0]=a|4;Z(90004,b);if(i[21886]<2){break n}h=i[22423];e=i[b+8>>2];a=-3;o:{if(!e){break o}a=-2;if((e|0)==i[22424]){break o}p:{a=i[22010];if(a>>>0>e>>>0){break p}k=i[22007];if(a+(o(k,i[22009])<<3)>>>0<=e>>>0){break p}a=(e-a>>3)/(k|0)|0;break o}e=eb(i[22500],e);a=-1;if((e|0)==-1){break o}a=e+i[22009]|0}b=i[b+16>>2];i[f+8>>2]=i[d+76>>2];i[f+4>>2]=b;i[f>>2]=a;V(h,2042,50967,f)}a=c+4|0;b=i[c>>2];if(b){continue}break}}d=i[d+48>>2];if(d){continue}break}}S=f+96|0}function ue(a,b,c){var d=0,e=0,f=0,h=0,k=0,m=0,n=0,o=0,p=0;h=S-96|0;S=h;if(i[21886]>=4){i[h+80>>2]=i[a+16>>2];V(i[22423],8063,32178,h+80|0);a:{if(!b){break a}e=i[b+4>>2];if(!e){break a}d=b+4|0;while(1){i[h+64>>2]=i[e+16>>2];V(i[22423],8064,32227,h- -64|0);e=i[d+4>>2];d=d+4|0;if(e){continue}break}}b:{if(!c){break b}e=i[c+4>>2];if(!e){break b}d=c+4|0;while(1){i[h+48>>2]=i[e+12>>2];V(i[22423],8065,32232,h+48|0);e=i[d+4>>2];d=d+4|0;if(e){continue}break}}V(i[22423],8066,32237,0)}c:{if(!c){break c}e=i[c+4>>2];if(!e){break c}d=c+8|0;while(1){f=d;d=i[e>>2];d:{if(!d){break d}e=i[d+4>>2];if(!e){break d}d=d+4|0;while(1){g[e+24|0]=j[e+24|0]&254;e=i[d+4>>2];d=d+4|0;if(e){continue}break}}d=f+4|0;e=i[f>>2];if(e){continue}break}}e:{if(!b){break e}e=i[b+4>>2];if(!e){break e}d=b+4|0;while(1){i[e+20>>2]=0;g[e+24|0]=j[e+24|0]|1;e=i[d+4>>2];d=d+4|0;if(e){continue}break}}f:{if(!c){break f}e=i[c+4>>2];if(!e){break f}d=c+8|0;while(1){f=d;d=i[e>>2];g:{if(!d){break g}e=i[d+4>>2];if(!e){break g}d=d+8|0;while(1){if(g[e+24|0]&1){i[e+20>>2]=i[e+20>>2]+1}e=i[d>>2];d=d+4|0;if(e){continue}break}}d=f+4|0;e=i[f>>2];if(e){continue}break}}h:{if(!b){break h}d=i[b+4>>2];if(!d){break h}e=b+4|0;m=b+8|0;f=m;while(1){i:{if(i[d+20>>2]){e=f;break i}Ta(b,f-m>>2)}f=e+4|0;d=i[e>>2];if(d){continue}break}}d=W(c);if(l[22493]<d>>>0){i[22493]=d}j:{if(!W(b)){if(i[21886]<4){break j}i[h>>2]=i[a+16>>2];V(i[22423],4023,32239,h);break j}n=b+4|0;cb(n,W(b),18);k:{if(!i[21958]){break k}d=W(b);i[22782]=i[22782]+1;i[22790]=d+i[22790];if(i[22786]>=(d|0)){break k}i[22786]=d}p=$d(W(c));l:{if(!c){break l}k=i[c+4>>2];if(!k){break l}o=c+4|0;while(1){o=o+4|0;m=i[22499];f=ic(p,i[k>>2],i[22007]+ -1|0,0,a);e=(m+(f<<2)|0)+4|0;while(1){m:{d=i[e>>2];if(!d){i[e>>2]=k;break m}if((d|0)==(k|0)){break m}d=f+1|0;f=(d|0)==(p|0)?0:d;e=(m+(f<<2)|0)+4|0;continue}break}k=i[o>>2];if(k){continue}break}}n:{o:{if(!b){break o}k=i[n>>2];if(!k){break o}n=n+4|0;while(1){d=ed(k,0);i[h+92>>2]=d;p:{q:{if(!d){break q}f=i[d+4>>2];if(!f){break q}o=d+4|0;while(1){i[22774]=i[22774]+1;m=i[22499];d=ic(p,i[f>>2],i[22007]+ -1|0,0,k);e=i[(m+(d<<2)|0)+4>>2];if(e){while(1){if((e|0)!=(f|0)){i[22776]=i[22776]+1;if(Dg(i[f>>2],k,i[e>>2],a)){break p}}d=d+1|0;d=(d|0)==(p|0)?0:d;e=i[(m+(d<<2)|0)+4>>2];if(e){continue}break}}o=o+4|0;f=i[o>>2];if(f){continue}break}}_(h+92|0);if(i[21886]<2){break n}e=i[22423];f=i[k+16>>2];d=i[a+16>>2];a=W(b);i[h+44>>2]=W(c);i[h+40>>2]=a;i[h+36>>2]=d;i[h+32>>2]=f;V(e,2020,32290,h+32|0);break n}i[23030]=i[23030]+1;_(h+92|0);k=i[n>>2];n=n+4|0;if(k){continue}break}}k=0;i[22748]=i[22748]+1;if(!i[21886]){break n}i[h+16>>2]=i[a+16>>2];i[h+20>>2]=i[22455];V(i[22423],14,32364,h+16|0)}ga(89996)}S=h+96|0;return k}function vg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=73;h[46817]=65535;i[23196]=72033;a=i[23640];i[23640]=a+1;g[94059]=0;g[a+92232|0]=187;g[94173]=1;h[46931]=65535;i[23310]=72055;a=i[23640];i[23640]=a+1;g[a+92232|0]=194;g[94180]=1;h[46938]=65535;i[23317]=72072;a=i[23640];i[23640]=a+1;g[a+92232|0]=195;g[94181]=7;h[46939]=65535;i[23318]=72106;a=i[23640];i[23640]=a+1;g[a+92232|0]=120;g[94106]=3;h[46864]=65535;i[23243]=72127;a=i[23640];i[23640]=a+1;g[a+92232|0]=221;g[94207]=1;h[46965]=187;i[23344]=72157;a=i[23640];i[23640]=a+1;g[a+92232|0]=110;g[94096]=1;h[46854]=187;i[23233]=72191;a=i[23640];i[23640]=a+1;g[a+92232|0]=239;g[94225]=2;h[46983]=187;i[23362]=72241;a=i[23640];i[23640]=a+1;g[a+92232|0]=240;g[94226]=3;h[46984]=65535;i[23363]=72277;a=i[23640];i[23640]=a+1;g[a+92232|0]=243;g[94229]=2;h[46987]=187;i[23366]=72289;a=i[23640];i[23640]=a+1;g[a+92232|0]=244;g[94230]=3;h[46988]=65535;i[23367]=72277;a=i[23640];i[23640]=a+1;g[a+92232|0]=215;g[94201]=1;h[46959]=187;i[23338]=72325;a=i[23640];i[23640]=a+1;g[a+92232|0]=149;g[94135]=2;h[46893]=187;i[23272]=72359;a=i[23640];i[23640]=a+1;g[a+92232|0]=150;g[94136]=3;h[46894]=65535;i[23273]=72399;a=i[23640];i[23640]=a+1;g[a+92232|0]=146;g[94132]=6;h[46890]=187;i[23269]=72438;a=i[23640];i[23640]=a+1;g[a+92232|0]=147;g[94133]=6;h[46891]=65535;i[23270]=72464;a=i[23640];i[23640]=a+1;g[a+92232|0]=180;g[94166]=6;h[46924]=179;i[23303]=72485;a=i[23640];i[23640]=a+1;g[a+92232|0]=181;g[94167]=6;h[46925]=65535;i[23304]=72464;a=i[23640];i[23640]=a+1;g[a+92232|0]=179;g[94165]=1;h[46923]=65535;i[23302]=72511;a=i[23640];i[23640]=a+1;g[a+92232|0]=211;g[94197]=1;h[46955]=65535;i[23334]=72519;a=i[23640];i[23640]=a+1;g[a+92232|0]=55;g[94041]=1;h[46799]=65535;i[23178]=72562;a=i[23640];i[23640]=a+1;g[a+92232|0]=155;g[94141]=1;h[46899]=65535;i[23278]=72590;a=i[23640];i[23640]=a+1;g[a+92232|0]=56;g[94042]=1;h[46800]=65535;i[23179]=72641;a=i[23640];i[23640]=a+1;g[a+92232|0]=160;g[94146]=1;h[46904]=65535;i[23283]=72691;a=i[23640];i[23640]=a+1;g[a+92232|0]=183;g[94169]=1;h[46927]=65535;i[23306]=72727;a=i[23640];i[23640]=a+1;g[a+92232|0]=158;g[94144]=1;h[46902]=65535;i[23281]=72757;a=i[23640];i[23640]=a+1;g[a+92232|0]=159;g[94145]=1;h[46903]=65535;i[23282]=72794;a=i[23640];i[23640]=a+1;g[a+92232|0]=105;g[94091]=1;h[46849]=65535;i[23228]=72842;a=i[23640];i[23640]=a+1;g[a+92232|0]=167;g[94153]=1;h[46911]=65535;i[23290]=72860;a=i[23640];i[23640]=a+1;g[a+92232|0]=63;g[94049]=1;h[46807]=65535;i[23186]=72896;a=i[23640];i[23640]=a+1;g[a+92232|0]=214;g[94200]=1;h[46958]=65535;i[23337]=72936;a=i[23640];i[23640]=a+1;g[a+92232|0]=22;g[94008]=1;h[46766]=214;i[23145]=72976}function Mc(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0;h=S-16|0;S=h;i[22568]=0;i[22569]=0;i[22510]=i[21963];i[22808]=o(i[22425],i[22009])+7048;i[22812]=0;i[22810]=0;i[22806]=0;i[22890]=0;i[22566]=0;i[22896]=0;i[22892]=0;i[22888]=0;i[22882]=0;i[22886]=0;i[21963]=0;i[22884]=0;i[23036]=i[22444]-W(i[22501]);a=i[21899];a:{if(n[11231]<8.988465674311579e+307^1?!(a|i[21859]):0){break a}c=n[11233];if(n[11398]<c^1){break a}n[11398]=c}b:{if(!a){break b}c=n[11235];if(n[11421]>c^1){break b}n[11421]=c}c:{if(zb(i[22428])){break c}V(i[22423],6373,78231,0);if(i[22508]){break c}X(5,0,0)}b=i[22428];d:{if(!b){break d}a=i[b+48>>2];if(!a){break d}while(1){i[b+80>>2]=i[b+80>>2]&-16385;b=a;a=i[b+48>>2];if(a){continue}break}}e:{f:{if(!i[21874]){break f}a=i[22428];if(!a){break e}b=i[a+48>>2];if(!b){break f}while(1){e=i[a+80>>2];if(i[21995]!=(e>>>17&1)){i[a+80>>2]=e|16384}a=b;b=i[b+48>>2];if(b){continue}break}}b=i[22428];if(!b){break e}while(1){if(!i[b+48>>2]){break e}g:{if(i[22472]?j[b+81|0]&8:0){break g}d=W(i[b+52>>2]);f=W(i[b+60>>2]);g=W(i[b+56>>2]);i[22882]=i[22882]+1;i[22892]=d+i[22892];if(i[22802]<(d|0)){i[22802]=d}i[22888]=f+i[22888];if(i[22792]<(f|0)){i[22792]=f}i[22886]=i[22886]+(i[b+80>>2]&511);a=i[b+80>>2];e=a&511;if(i[22884]<(e|0)){i[22884]=e;a=i[b+80>>2]}if(!(a&8192)){a=((d|0)==i[22007]?1256:1248)+90240|0;i[a>>2]=i[a>>2]+1}h:{if(!g){break h}i[22890]=i[22890]+g;if(i[22798]>=(g|0)){break h}i[22798]=g}i[22806]=(i[22806]+(i[22425]+(d+f<<2)|0)|0)+104;if(i[b+56>>2]){i[22810]=((i[22810]+(g<<2)|0)+((o((i[22007]<<2)+24|0,g)|0)/2|0)|0)+8}a=i[b+64>>2];if(a){i[22808]=((W(a)<<2)+i[22808]|0)+8}a=i[b+68>>2];if(a){i[22808]=((W(a)<<2)+i[22808]|0)+8}a=i[b+80>>2];if(a&16384){break g}i[b+80>>2]=a|16384;a=i[b+60>>2];i:{if(!a){break i}d=i[a+4>>2];if(!d){break i}e=a+8|0;while(1){a=e;j:{if(j[d+81|0]&64|d+ -1>>>0<2){break j}f=i[b+24>>2];if(!f){break j}e=i[d+24>>2];if(!e){break j}c=bb(f,e);i[22566]=i[22566]+1;n[11284]=c+n[11284];if(!(n[11285]<c^1)){n[11285]=c}if(n[11286]>c^1){break j}n[11286]=c}e=a+4|0;d=i[a>>2];if(d){continue}break}}if(!i[b+24>>2]){break g}e=i[b+52>>2];if(!e){break g}a=i[e+4>>2];if(!a){break g}d=e+8|0;while(1){i[22684]=i[22684]+1;aa(i[a+8>>2],b,h+8|0);c=n[h+8>>3];if(!(n[11513]<c^1)){n[11513]=c}if(!(n[11514]>c^1)){n[11514]=c}a=i[d>>2];d=d+4|0;if(a){continue}break}}b=i[b+48>>2];if(b){continue}break}}b=i[22440];k:{if(!b){break k}while(1){if(!i[b>>2]){break k}l:{if(j[b+24|0]&4){break l}i[22812]=i[22812]+28;a=i[b+12>>2];if(!a){break l}a=W(a);i[22896]=a+i[22896];if(i[22804]<(a|0)){i[22804]=a}i[22812]=(i[22812]+(a<<2)|0)+28}b=i[b>>2];if(b){continue}break}}i[21963]=i[22510];S=h+16|0}function Ah(a,b,c){var d=0,e=0,f=0,h=0,k=0,l=0,m=0,o=0;f=S-144|0;S=f;d=W(i[a+12>>2]);e=W(i[b+12>>2]);a:{b:{if(i[21886]>3){break b}h=i[22438];if((h|0)==i[a+16>>2]|(h|0)==i[b+16>>2]){break b}i[22992]=i[22992]+1;h=0;break a}h=i[22992]+1|0;i[22992]=h;k=i[b+16>>2];m=i[a+16>>2];i[f+112>>2]=e;n[f+120>>3]=c;i[f+96>>2]=h;i[f+100>>2]=m;i[f+104>>2]=d;i[f+108>>2]=k;V(i[22423],2071,43864,f+96|0);h=1}k=j[a+24|0];c:{if(!(j[b+24|0]&4?0:!(k&4))){if((h^-1)&i[21886]<2){break c}d=j[b+24|0];b=i[b+16>>2];i[f+80>>2]=i[a+16>>2];i[f+88>>2]=b;i[f+84>>2]=k>>>2&1;i[f+92>>2]=d>>>2&1;V(i[22423],2072,43960,f+80|0);break c}if(!(e?d:0)){k=i[b+16>>2];i[f+64>>2]=i[a+16>>2];i[f+68>>2]=k;i[f+72>>2]=d;i[f+76>>2]=e;V(i[22423],2072,44042,f- -64|0);X(5,0,0)}m=b+12|0;d=i[a+12>>2];d:{if(!d){break d}e=i[d+4>>2];if(!e){break d}d=d+8|0;if(h){while(1){k=d;e:{if(!(j[e+81|0]&32)){break e}if(da(i[e+52>>2],b)){d=i[b+16>>2];l=i[a+16>>2];i[f+32>>2]=i[e+76>>2];i[f+36>>2]=l;i[f+40>>2]=d;V(i[22423],2070,44166,f+32|0);Pa(e);break e}_d(e,a,b);Ea(m,e);d=i[e+52>>2];if(!d){break e}e=i[d+4>>2];if(!e){break e}d=d+8|0;while(1){if(!(j[e+24|0]&16)){Xa(e);Oa(e)}e=i[d>>2];d=d+4|0;if(e){continue}break}}d=k+4|0;e=i[k>>2];if(e){continue}break d}}while(1){k=d;f:{if(!(j[e+81|0]&32)){break f}if(da(i[e+52>>2],b)){if(i[21886]>=2){d=i[b+16>>2];l=i[a+16>>2];i[f+48>>2]=i[e+76>>2];i[f+52>>2]=l;i[f+56>>2]=d;V(i[22423],2070,44166,f+48|0)}Pa(e);break f}_d(e,a,b);Ea(m,e);d=i[e+52>>2];if(!d){break f}e=i[d+4>>2];if(!e){break f}d=d+8|0;while(1){if(!(j[e+24|0]&16)){Xa(e);Oa(e)}e=i[d>>2];d=d+4|0;if(e){continue}break}}d=k+4|0;e=i[k>>2];if(e){continue}break}}l=ed(a,1);i[f+140>>2]=l;g:{if(!l|h^1){break g}e=i[l+4>>2];if(!e){break g}d=l+4|0;while(1){Pb(i[22423],e);e=i[d+4>>2];d=d+4|0;if(e){continue}break}}d=i[a+12>>2];h:{if(!d){break h}h=i[d+4>>2];if(!h){break h}e=d+8|0;while(1){k=e;i:{if(j[h+81|0]&32){break i}le(h,b);Ea(m,h);d=i[h+52>>2];j:{if(!d){break j}e=i[d+4>>2];if(!e){break j}d=d+8|0;while(1){if(!(j[e+24|0]&16)){Xa(e);Oa(e)}e=i[d>>2];d=d+4|0;if(e){continue}break}}if(i[22431]!=i[22429]){break i}Ha(h);Ya(h);i[h+80>>2]=i[h+80>>2]|1024}e=k+4|0;h=i[k>>2];if(h){continue}break}}e=0;ad(a,b,l,0,0);if((j[a+24|0]&36)==4){c=-1.7976931348623157e+308;b=i[m>>2];k:{if(!b){break k}d=i[b+4>>2];if(!d){break k}h=b+8|0;while(1){b=h;l:{if(j[d+81|0]&8){break l}aa(i[a+8>>2],d,f+128|0);o=n[f+128>>3];if(o>c^1){break l}e=d;c=o}h=b+4|0;d=i[b>>2];if(d){continue}break}}if(i[21886]>=2){b=i[22423];d=Y(i[a+8>>2]);h=i[a+16>>2];k=i[e+76>>2];n[f+16>>3]=c;i[f+8>>2]=k;i[f+4>>2]=h;i[f>>2]=d;V(b,2096,44284,f)}$a(i[a+8>>2],e,0,0);g[a+24|0]=j[a+24|0]|32}_(f+140|0)}S=f+144|0}function Zh(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0;f=S-16|0;S=f;d=za(40);i[d>>2]=0;i[22452]=1;e=4;a:while(1){b:{d=Cd(89488,1,d,e);e=B()|0;a=0;while(1){k=a;c:{if(!a){break c}i[22948]=i[22948]+1;i[22456]=0;h=n[11231];if(!(n[11475]<h^1)){n[11475]=h}i[21982]=-1;a=i[22501];if(!a){break c}b=i[a+4>>2];if(!b){break c}a=a+8|0;while(1){c=a;d:{if(!i[b+8>>2]){break d}a=j[b+24|0];if(a&32){break d}g[b+24|0]=a|32}a=c+4|0;b=i[c>>2];if(b){continue}break}}a=i[22453];e:{f:{g:{h:{i:{j:{c=i[21973];if(c){break j}h=n[11231];if(h<8.988465674311579e+307^1){break j}if((a|0)<51){break g}i[24202]=0;i[f>>2]=a;n[f+8>>3]=h;K(6,i[22423],6229,18631,f|0);a=i[24202];i[24202]=0;b=-1;if(!a){break h}c=i[24203];if(!c){break h}b=Ra(i[a>>2],d,e);if(b){break i}break b}if(!a){break e}if((a|0)>=(c|0)){break f}break e}A(c|0)}a=B()|0;if((b|0)==1){continue}i[24202]=0;G(7,1,0,0);a=i[24202];i[24202]=0;b=-1;k:{if(!a){break k}c=i[24203];if(!c){break k}b=Ra(i[a>>2],d,e);if(!b){break b}A(c|0)}a=B()|0;if((b|0)==1){continue}a=i[22453]}if(!a|k){break e}}i[22452]=0;ta(d);S=f+16|0;return}i[24202]=0;i[21982]=0;J(8,1);a=i[24202];i[24202]=0;b=-1;l:{if(!a){break l}c=i[24203];if(!c){break l}b=Ra(i[a>>2],d,e);if(!b){break b}A(c|0)}a=B()|0;if((b|0)==1){continue}i[22453]=i[22453]+1;m:{n:{o:{a=i[22272];if(!a){i[24202]=0;k=Qa(88572);a=i[24202];i[24202]=0;b=-1;if(!a){break n}c=i[24203];if(!c){break n}b=Ra(i[a>>2],d,e);if(b){break o}break b}g[a+88572|0]=0;i[22271]=80;break m}A(c|0)}a=B()|0;if((b|0)==1){continue}i[22272]=k}i[24202]=0;G(10,18787,89812,0);a=i[24202];i[24202]=0;b=-1;p:{if(!a){break p}c=i[24203];if(!c){break p}b=Ra(i[a>>2],d,e);if(!b){break b}A(c|0)}a=B()|0;if((b|0)==1){continue}if(i[22453]==i[21973]){a=i[21987];i[21886]=a;if(!(i[21992]?0:!(i[21988]!=-3|n[10995]<8.988465674311579e+307))){c=a?a:3;a=0;i[21986]=c;i[21886]=0}i[22544]=a}if(!(n[11231]<8.988465674311579e+307^1)){i[24202]=0;F(11);a=i[24202];i[24202]=0;b=-1;q:{if(!a){break q}c=i[24203];if(!c){break q}b=Ra(i[a>>2],d,e);if(!b){break b}A(c|0)}a=B()|0;if((b|0)==1){continue}}i[24202]=0;F(12);a=i[24202];i[24202]=0;b=-1;r:{if(!a){break r}c=i[24203];if(!c){break r}b=Ra(i[a>>2],d,e);if(!b){break b}A(c|0)}a=B()|0;if((b|0)==1){continue}i[24202]=0;F(13);a=i[24202];i[24202]=0;b=-1;s:{if(!a){break s}c=i[24203];if(!c){break s}b=Ra(i[a>>2],d,e);if(!b){break b}A(c|0)}a=B()|0;if((b|0)==1){continue}if(i[21899]|n[11231]<8.988465674311579e+307^1){continue a}i[24202]=0;I(14,i[22428],0);a=i[24202];i[24202]=0;b=-1;t:{if(!a){break t}c=i[24203];if(!c){break t}b=Ra(i[a>>2],d,e);if(!b){break b}A(c|0)}a=B()|0;if((b|0)==1){continue}break}continue}break}D(a|0,c|0);x()}function Dc(a,b,c,d,e,f,h,k){var l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;m=S-128|0;S=m;t=i[22492]+1|0;i[22492]=t;i[22740]=i[22740]+1;i[m+120>>2]=-1;i[m+124>>2]=-2097153;u=i[21886];i[m+116>>2]=0;l=u;a:{if((l|0)<=3){if(!i[21986]){break a}l=i[21988];if((l|0)<0){break a}if((Y(a)|0)!=(l|0)){break a}l=i[21886]}o=i[21986];if((o|0)>(l|0)){i[21886]=o}l=i[22423];o=Y(a);p=i[b+76>>2];n[m+96>>3]=n[10930];i[m+80>>2]=o;i[m+84>>2]=p;i[m+88>>2]=d;i[m+92>>2]=c;V(l,8004,1064,m+80|0);i[m+64>>2]=1;i[m+68>>2]=e;V(i[22423],8005,1147,m- -64|0);i[m+48>>2]=i[22455];V(i[22423],8006,1178,m+48|0);i[m+32>>2]=i[22992];n[m+40>>3]=n[11233];V(i[22423],8007,1201,m+32|0)}if(h){i[h>>2]=1}b:{c:{if(!(g[b+82|0]&1)){i[k>>2]=1;aa(a,b,f);d:{q=n[f>>3];if(q>=n[10930]^1|c){break d}if(!e){l=b;break b}if(i[b+80>>2]&131072){break d}l=b;break b}n[m+120>>3]=q;p=j[b+82|0]&2?0:b;break c}i[k>>2]=0;q=-8.988465674311579e+307;p=0}i[b+72>>2]=t;while(1){if(i[21886]>=4){s=i[b+76>>2];l=i[22423];i[m+16>>2]=p?i[p+76>>2]:-1;n[m+8>>3]=q;i[m>>2]=s;V(l,4001,1237,m)}e:{o=i[b+60>>2];if(!o){break e}l=i[o+4>>2];if(!l){break e}o=o+8|0;f:{if(d){while(1){s=o;o=i[l+80>>2];g:{if(!(o&1024)|i[l+72>>2]==(t|0)){break g}i[l+72>>2]=t;if(o&65536){break g}i[k>>2]=i[k>>2]+1;aa(a,l,f);r=n[f>>3];if(r>q^1){break g}o=i[l+80>>2];if(!e|!(o&131072)?!(r>=n[10930]^1|c):0){break b}o=o&131072;if(!o|!p){break f}}o=s+4|0;l=i[s>>2];if(l){continue}break e}}h:{i:{if(c){while(1){s=o;j:{if(i[l+72>>2]==(t|0)){break j}i[l+72>>2]=t;if(i[l+80>>2]&65536){break j}i[k>>2]=i[k>>2]+1;aa(a,l,f);r=n[f>>3];if(r>q^1){break j}o=i[l+80>>2]&131072;if(!o|!p){break i}}o=s+4|0;l=i[s>>2];if(l){continue}break e}}while(1){s=o;k:{if(i[l+72>>2]==(t|0)){break k}i[l+72>>2]=t;if(i[l+80>>2]&65536){break k}i[k>>2]=i[k>>2]+1;aa(a,l,f);r=n[f>>3];if(r>q^1){break k}o=i[l+80>>2];if(!e|!(o&131072)?!(r>=n[10930]^1):0){break b}o=o&131072;if(!o|!p){break h}}o=s+4|0;l=i[s>>2];if(l){continue}break}break e}p=o?0:l;n[m+120>>3]=r;q=r;b=l;continue}p=o?0:l;n[m+120>>3]=r;q=r;b=l;continue}p=o?0:l;n[m+120>>3]=r;q=r;b=l;continue}break}l:{m:{n:{if(d){o:{if(!p){i[m+120>>2]=-1;i[m+124>>2]=-2097153;l=Db(a,i[22431],m+120|0,c,h,m+116|0);if(!l){break o}break l}if(i[22475]|q<-n[11144]^1){break m}if(!of()){break n}i[22766]=i[22766]+1;l=Db(a,p,m+120|0,c,h,m+116|0);i[22474]=1;if(l){break l}}l=ge(b,a,m+120|0,k);break l}if(p){break m}p=ge(b,a,m+120|0,k);break m}i[22475]=1}l=Ac(0,a,p,e,m+120|0,m+116|0)}q=n[m+120>>3];n[f>>3]=q;if(!h|q<n[10930]^1){break b}i[h>>2]=0}i[22744]=i[22744]+i[k>>2];a=k;o=i[k>>2];if(i[22742]<(o|0)){i[22742]=o;o=i[k>>2]}i[a>>2]=o+i[m+116>>2];i[21886]=u;S=m+128|0;return l}function Fe(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;c=S-272|0;S=c;i[22510]=i[21963];i[c+264>>2]=0;i[c+268>>2]=0;i[21963]=0;a:{if(!a){E(c+260|0)|0;a=Hb(c+260|0);b=C()|0;d=i[a>>2];f=i[a+4>>2];a=i[a+8>>2];e=i[22444];i[c+32>>2]=i[22443];i[c+36>>2]=e;i[c+40>>2]=i[22455];i[c+24>>2]=i[22447]+ -1;i[c+28>>2]=i[22648]+(i[22992]-i[22650]|0);n[c+16>>3]=(+(b>>>0)- +l[22451])/1e6;i[c>>2]=a;i[c+4>>2]=qi(d,f);i[c+8>>2]=T;V(i[22423],8118,19276,c);break a}f=Y(a);d=i[21988];b:{c:{if((f|0)==(d|0)){if(i[21886]>=1){d=i[b+76>>2];i[c+240>>2]=i[21986];i[c+244>>2]=f;i[c+248>>2]=d;V(i[22423],1053,19431,c+240|0)}d=i[21986];break c}if((d|0)==-3){break b}d=0;if(n[10995]<8.988465674311579e+307^1){break b}}i[22544]=d;i[21886]=d}d:{e:{d=i[21971];if(!d){break e}e=i[22447]+ -1|0;if(e>>>0<=d+i[22524]>>>0){break e}i[22524]=e;E(c+260|0)|0;d=Hb(c+260|0);e=C()|0;i[22680]=i[22680]+1;h=i[22451];j=i[22648];k=i[22650];m=i[22992];aa(a,b,c+264|0);a=i[22445]+1|0;o=i[22447]+ -1|0;p=i[22449];q=i[22444];r=i[22443];s=i[d>>2];t=i[d+4>>2];d=i[d+8>>2];u=i[22423];g=n[c+264>>3];i[c+224>>2]=b?i[b+76>>2]:-1;n[c+216>>3]=g;i[c+208>>2]=p;i[c+204>>2]=f;i[c+200>>2]=a;i[c+196>>2]=q;i[c+192>>2]=r;i[c+188>>2]=(m-k|0)+j;i[c+184>>2]=o;n[c+176>>3]=(+(e>>>0)- +(h>>>0))/1e6;i[c+168>>2]=s;i[c+164>>2]=t;i[c+160>>2]=d;V(u,8119,19496,c+160|0);break d}if(i[21886]<1){break d}e=C()|0;h=i[22451];aa(a,b,c+264|0);d=i[22449];j=i[22423];v=n[c+264>>3];i[c+96>>2]=b?i[b+76>>2]:-1;a=i[22443];i[c+100>>2]=a;b=i[22992];i[c+104>>2]=b;g=(+(e>>>0)- +(h>>>0))/1e6;n[c+112>>3]=g;i[c+120>>2]=i[22455];i[c+152>>2]=i[22486];i[c+108>>2]=i[22445]+1;i[c+84>>2]=d;i[c+124>>2]=d+ -1;n[c+128>>3]=g-n[11259];i[c+136>>2]=a-i[22520];i[c+140>>2]=b-i[22521];i[c+144>>2]=i[22984]-i[22522];i[c+148>>2]=i[22682]-i[22523];i[c+80>>2]=f;n[c+88>>3]=v;V(j,1049,19704,c+80|0);n[11259]=g;i[22520]=i[22443];i[22521]=i[22992];i[22522]=i[22984];i[22523]=i[22682]}d=i[22492];a=(d|0)/2|0;if(i[23044]<(a|0)){i[23044]=a}f:{if((d|0)>-1){break f}d=0;i[23042]=i[23042]+1;if(!zb(i[22428])){i[c+64>>2]=i[22492];V(i[22423],6370,19910,c- -64|0);X(5,0,0)}i[22492]=0;a=i[22428];if(!a){break f}b=i[a+48>>2];if(!b){break f}while(1){i[a+72>>2]=0;a=b;b=i[a+48>>2];if(b){continue}break}}a=i[22493];b=(a|0)/2|0;if(i[23052]<(b|0)){i[23052]=b}g:{if((a|0)>-1){break g}i[23050]=i[23050]+1;h:{if(!d){break h}if(zb(i[22428])){break h}i[c+48>>2]=i[22493];V(i[22423],6371,19981,c+48|0);X(5,0,0)}i[22493]=0;a=i[22440];if(!a){break g}b=i[a>>2];if(!b){break g}while(1){i[a+20>>2]=0;a=b;b=i[a>>2];if(b){continue}break}}i[22455]=f;i[21963]=i[22510]}S=c+272|0}function bh(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0;c=S-144|0;S=c;ia(3222,0,89192);if(!i[21977]){d=n[11148];b=n[11145];a=+i[22007];e=b*w(a);e=e>d?d:e;a=(b+e*a*1.01)*2.220446049250313e-16;a:{if(i[21963]){f=n[10982];g=b*f;a=a+g;if(i[21886]<4){break a}n[c+128>>3]=g;n[c+136>>3]=f;V(i[22423],4092,3844,c+128|0)}if(i[21886]<4){break a}n[c+112>>3]=d;n[c+120>>3]=e;n[c+96>>3]=a;n[c+104>>3]=b;V(i[22423],4008,3919,c+96|0)}n[11144]=a;ia(3233,0,89152)}a=n[11150];b=n[11145];n[11151]=a*b;d=a;a=+i[22007];d=w(d*a);n[11152]=d;a=a*1.01*2.220446049250313e-16;n[11141]=a;n[11153]=b*d;b:{if(!i[21963]){break b}b=a;a=n[10982];n[11141]=b+a;if(i[21886]<4){break b}n[c+80>>3]=a;V(i[22423],4096,3248,c+80|0)}a=n[10935];c:{if(a<8.988465674311579e+307^1){break c}n[10935]=a-n[11141];if(!i[21963]){break c}ia(3307,0,87480)}a=n[10936];d:{if(a<8.988465674311579e+307^1){break d}n[10936]=a-n[11141];if(!i[21963]){break d}ia(3334,0,87488)}a=n[11144];a=a+a;n[10950]=n[10950]+a;n[10951]=a+n[10951];e:{if(!i[21963]){break e}if(i[21915]|i[21897]){ia(3362,0,87600);h=i[21963]}else{h=1}if(!h|!i[21914]){break e}ia(3391,0,87608)}d=n[11144];e=+i[22007];a=n[10936];b=n[10935];b=b<1?b:1;a=b>a?a:b;a=d+n[11149]*w(e)*w(1-a*a);n[11157]=a;b=d+n[10950]*e;if(!(a<b^1)){n[11157]=b;a=b}b=d+n[10951]*e;if(!(a<b^1)){n[11157]=b;a=b}if(i[21899]){ia(3421,0,89256);a=n[11157]}b=a*5;n[11156]=b;a=n[11231];f:{if(!(i[21889]|i[21888])|a<8.988465674311579e+307^1){break f}i[22006]=1;d=b;b=n[11144]+a*w(+i[22007]);b=b+b;if(d<b^1){break f}n[11156]=b}if(i[22006]){ia(3432,0,89248);a=n[11231]}b=n[11144];if(!(a<b^1)){n[c+64>>3]=a;n[c+72>>3]=b;V(i[22423],6006,3445,c- -64|0);X(1,0,0)}if(!(n[10953]>8.988465674311579e+307^1)){if(i[21899]){a=n[10950];a=i[22007]<4?a:a*3}else{a=n[11144]}n[10953]=a;g:{if(!i[21859]){break g}b=a;a=n[10930];if(b>a^1){break g}n[10953]=a}ia(3544,0,87624)}if(!(n[10947]>8.988465674311579e+307^1)){n[10947]=n[10953];ia(3561,0,87576)}if(!i[21859]){a=n[10953];a=a+a;n[10930]=a;b=n[10935];h:{if(b<8.988465674311579e+307^1){break h}d=a;a=(1-b)*n[11145];if(d<a^1){break h}n[10930]=a}ia(3576,0,87440)}a=n[10930];n[11159]=a;b=n[10947]*6;if(!(a<b^1)){n[11159]=b;a=b}b=a;a=n[10953]*6;if(!(b<a^1)){n[11159]=a}ia(3590,0,89272);b=n[10953];a=n[10930];if(!(i[21878]|i[21865]|b>a+6.661338147750939e-16^1)){n[c+48>>3]=b;n[c+56>>3]=a;V(i[22423],7001,3602,c+48|0);a=n[10930]}b=n[11144];n[11234]=b;n[11235]=-b;e=n[11157];f=b+e;d=n[11233];f=d<f?f:d;f=f<a?a:f;n[11147]=f;if(i[21886]>=3){n[c+16>>3]=e;n[c+24>>3]=a;n[c+32>>3]=b;n[c>>3]=f;n[c+8>>3]=d;V(i[22423],3056,3109,c)}S=c+144|0}function qc(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;c=S-208|0;S=c;if(i[21886]>=2){g=i[22423];f=W(i[22496]);h=W(i[22497]);e=i[22431];d=-1;a:{if(!e){break a}d=i[e+76>>2]}i[c+204>>2]=a;i[c+200>>2]=d;i[c+196>>2]=h;i[c+192>>2]=f;V(g,2010,27811,c+192|0)}g=0;while(1){b:{if((W(i[22496])|0)<=0){if((W(i[22497])|0)<1){break b}}if((W(i[22497])|0)>=1){k=Ca()+k|0;g=1}d=xa(i[22496]);c:{if(!d){break c}while(1){p=n[d+8>>3];q=n[d>>3];h=i[d+40>>2];l=i[d+24>>2];f=i[d+20>>2];e=i[d+16>>2];$(d,48);d:{e:{d=i[e+80>>2];if(!(d&2048)){j=i[f+80>>2];if(!(j&2048)){break e}}if(i[21886]<3){break d}l=i[f+80>>2];f=i[f+76>>2];e=i[e+76>>2];i[c+112>>2]=h;n[c+120>>3]=p;n[c+128>>3]=q;i[c+96>>2]=e;i[c+104>>2]=f;i[c+100>>2]=d>>>11&1;i[c+108>>2]=l>>>11&1;V(i[22423],3045,27914,c+96|0);break d}m=h+ -1|0;o=m>>>0<2;f:{g:{h:{i:{j:{k:{if(!(!i[21898]|m>>>0>1)){if((d&134218752)==1024|(j&134218752)==1024){break k}o=1}if(i[21886]>=3){d=i[f+76>>2];g=i[e+76>>2];n[c+80>>3]=p;n[c+88>>3]=q;i[c+64>>2]=g;i[c+68>>2]=d;i[c+72>>2]=h;V(i[22423],3047,28198,c- -64|0)}if((h|0)==5){break h}Hh(e,f,h);d=Ca();switch(h+ -3|0){case 1:break i;case 0:break j;default:break g}}if(i[21886]<3){break d}f=i[f+76>>2];e=i[e+76>>2];i[c+16>>2]=h;n[c+24>>3]=p;n[c+32>>3]=q;i[c>>2]=e;i[c+8>>2]=f;i[c+4>>2]=d>>>11&1;i[c+12>>2]=j>>>11&1;V(i[22423],3064,28047,c);break d}s=s+1|0;break f}t=t+1|0;break f}Gh(e,f);u=u+1|0;d=Ca();break f}if(o){v=v+1|0;break f}j=i[f+76>>2];o=i[e+76>>2];m=i[22423];g=l?i[l+16>>2]:-1;i[c+60>>2]=h;i[c+56>>2]=g;i[c+52>>2]=j;i[c+48>>2]=o;V(m,6394,28263,c+48|0);ca(5,e,f)}k=d+k|0;g=1;r=r+1|0;d=xa(i[22496]);if(d){continue}break c}d=xa(i[22496]);if(d){continue}break}}if(!(!i[22482]|(r|0)<3|i[22007]>5)){kd();g=0;a=0;r=0}oc(i[22431]);continue}l:{e=g;m:{if(!i[22275]){break m}d=i[22482];f=i[22007];if(!((f|0)>3?d:0)){e=g;if(!(!i[21897]|d)){break m}d=g;e=d;if(!(a|d)){break m}e=g;if(f+ -3>>>0>2){break m}}if(kd()){break l}a=0;e=0}d=e;if(b){g=0;if(Fh()){continue}}n:{if(!(a|d)){break n}if(i[21886]>=3){i[c+184>>2]=5;i[c+176>>2]=i[22275];i[c+180>>2]=i[22007];V(i[22423],3033,28385,c+176|0)}d=i[22431];if(!d){break n}a=i[d+48>>2];if(!a){break n}while(1){i[d+80>>2]=i[d+80>>2]&-536870913;d=a;a=i[d+48>>2];if(a){continue}break}}if(!(i[21897]|!i[21869])){i[22510]=i[21963];i[21963]=0;Yc(i[22431],0);i[21963]=i[22510]}o:{if(i[21886]<1){break o}i[c+160>>2]=k;i[c+144>>2]=v;i[c+148>>2]=s;i[c+152>>2]=t;i[c+156>>2]=u;V(i[22423],1009,28499,c+144|0);if(i[21886]<4|i[22443]>499){break o}ya()}S=c+208|0;return}g=0;oc(i[22431]);a=0;continue}}function Zc(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0;f=S-96|0;S=f;a=i[21886];a:{if(i[22275]){if((a|0)>=3){c=i[22423];e=-1;a=i[22442];if(a){e=i[a+16>>2]}a=f;b=i[22431];if(b){b=i[b+76>>2]}else{b=-1}i[a+84>>2]=b;i[f+80>>2]=e;V(c,3059,51047,f+80|0)}d=i[22442];b:{if(!d){break b}while(1){if(!i[d>>2]){break b}a=i[d+12>>2];c:{if(!a){break c}e=i[a+4>>2];if(!e){break c}a=a+4|0;b=a+4|0;c=0;while(1){d:{if(!(j[e+81|0]&8)){a=b;break d}e=i[d+12>>2];Ta(e,(b-e|0)+ -8>>2);c=c+1|0}b=a+4|0;e=i[a>>2];if(e){continue}break}if(!c|i[21886]<4){break c}a=i[d+16>>2];i[f+64>>2]=c;i[f+68>>2]=a;V(i[22423],4021,51154,f- -64|0)}d=i[d>>2];if(d){continue}break}}e=i[22431];e:{if(!e){break e}while(1){b=e;e=i[b+48>>2];if(!e){break e}c=i[b+52>>2];f:{if(!c){break f}a=i[c+4>>2];if(!a){break f}e=c+4|0;while(1){Z(a+12|0,b);a=i[e+4>>2];e=e+4|0;if(a){continue}break}e=i[b+48>>2]}if(e){continue}break}}if(i[21886]>=3){e=i[22423];b=f;c=i[22432];a=-1;g:{if(!c){break g}a=i[c+76>>2]}i[b+48>>2]=a;V(e,3065,51229,f+48|0)}c=i[22432];if(!c){break a}while(1){if(!(j[c+81|0]&8)){break a}a=i[c+52>>2];h:{if(!a){break h}b=i[a+4>>2];if(!b){break h}a=a+8|0;while(1){e=a;k=j[b+24|0];i:{if(k&20){break i}j:{d=i[b+12>>2];if(!d){break j}a=d+4|0;while(1){h=i[a>>2];if(!h){break j}a=a+4|0;if(j[h+81|0]&8){continue}break}ja(d,c);break i}g[b+24|0]=k|4;Z(90004,b);if(i[21886]<2){break i}k=i[22423];d=i[b+8>>2];a=-3;k:{if(!d){break k}a=-2;if((d|0)==i[22424]){break k}l:{a=i[22010];if(a>>>0>d>>>0){break l}h=i[22007];if(a+(o(h,i[22009])<<3)>>>0<=d>>>0){break l}a=(d-a>>3)/(h|0)|0;break k}d=eb(i[22500],d);a=-1;if((d|0)==-1){break k}a=d+i[22009]|0}b=i[b+16>>2];i[f+40>>2]=i[c+76>>2];i[f+36>>2]=b;i[f+32>>2]=a;V(k,2102,51322,f+32|0)}a=e+4|0;b=i[e>>2];if(b){continue}break}}c=i[c+48>>2];if(c){continue}break}break a}if((a|0)>=3){e=i[22423];b=f;c=i[22432];a=-1;m:{if(!c){break m}a=i[c+76>>2]}i[b+16>>2]=a;V(e,3066,51407,f+16|0)}c=i[22432];if(!c){break a}while(1){if(!(j[c+81|0]&8)){break a}b=i[c+52>>2];n:{if(!b){break n}a=i[b+4>>2];if(!a){break n}b=b+8|0;while(1){e=b;b=j[a+24|0];o:{if(b&20){break o}g[a+24|0]=b|4;Z(90004,a);if(i[21886]<2){break o}k=i[22423];d=i[a+8>>2];b=-3;p:{if(!d){break p}b=-2;if((d|0)==i[22424]){break p}q:{b=i[22010];if(b>>>0>d>>>0){break q}h=i[22007];if(b+(o(h,i[22009])<<3)>>>0<=d>>>0){break q}b=(d-b>>3)/(h|0)|0;break p}d=eb(i[22500],d);b=-1;if((d|0)==-1){break p}b=d+i[22009]|0}a=i[a+16>>2];i[f+8>>2]=i[c+76>>2];i[f+4>>2]=a;i[f>>2]=b;V(k,2059,51322,f)}b=e+4|0;a=i[e>>2];if(a){continue}break}}c=i[c+48>>2];if(c){continue}break}}S=f+96|0}function pg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=72;h[46816]=65535;i[23195]=76475;a=i[23640];i[23640]=a+1;g[94058]=0;g[a+92232|0]=182;g[94168]=1;h[46926]=65535;i[23305]=76504;a=i[23640];i[23640]=a+1;g[a+92232|0]=184;g[94170]=1;h[46928]=65535;i[23307]=76549;a=i[23640];i[23640]=a+1;g[a+92232|0]=193;g[94179]=1;h[46937]=65535;i[23316]=76587;a=i[23640];i[23640]=a+1;g[a+92232|0]=192;g[94178]=1;h[46936]=65535;i[23315]=76625;a=i[23640];i[23640]=a+1;g[a+92232|0]=191;g[94177]=1;h[46935]=65535;i[23314]=76661;a=i[23640];i[23640]=a+1;g[a+92232|0]=94;g[94080]=1;h[46838]=65535;i[23217]=76704;a=i[23640];i[23640]=a+1;g[a+92232|0]=154;g[94140]=1;h[46898]=65535;i[23277]=76745;a=i[23640];i[23640]=a+1;g[a+92232|0]=52;g[94038]=1;h[46796]=65535;i[23175]=76773;a=i[23640];i[23640]=a+1;g[a+92232|0]=78;g[94064]=1;h[46822]=65535;i[23201]=76812;a=i[23640];i[23640]=a+1;g[a+92232|0]=77;g[94063]=1;h[46821]=65535;i[23200]=76854;a=i[23640];i[23640]=a+1;g[a+92232|0]=51;g[94037]=1;h[46795]=65535;i[23174]=76903;a=i[23640];i[23640]=a+1;g[a+92232|0]=188;g[94174]=1;h[46932]=65535;i[23311]=76944;a=i[23640];i[23640]=a+1;g[a+92232|0]=189;g[94175]=1;h[46933]=65535;i[23312]=76990;a=i[23640];i[23640]=a+1;g[a+92232|0]=196;g[94182]=1;h[46940]=65535;i[23319]=77e3;a=i[23640];i[23640]=a+1;g[a+92232|0]=198;g[94184]=2;h[46942]=65535;i[23321]=77045;a=i[23640];i[23640]=a+1;g[a+92232|0]=197;g[94183]=3;h[46941]=65535;i[23320]=77089;a=i[23640];i[23640]=a+1;g[a+92232|0]=114;g[94100]=1;h[46858]=65535;i[23237]=77135;a=i[23640];i[23640]=a+1;g[a+92232|0]=112;g[94098]=1;h[46856]=65535;i[23235]=77188;a=i[23640];i[23640]=a+1;g[a+92232|0]=111;g[94097]=1;h[46855]=65535;i[23234]=77236;a=i[23640];i[23640]=a+1;g[a+92232|0]=115;g[94101]=2;h[46859]=111;i[23238]=77275;a=i[23640];i[23640]=a+1;g[a+92232|0]=113;g[94099]=3;h[46857]=65535;i[23236]=77307;a=i[23640];i[23640]=a+1;g[a+92232|0]=235;g[94221]=1;h[46979]=65535;a=i[23640];i[23640]=a+1;i[23358]=0;g[a+92232|0]=236;g[94222]=2;h[46980]=235;i[23359]=77334;a=i[23640];i[23640]=a+1;g[a+92232|0]=237;g[94223]=3;h[46981]=65535;i[23360]=77376;a=i[23640];i[23640]=a+1;g[a+92232|0]=74;h[46818]=65535;i[23197]=77418;a=i[23640];i[23640]=a+1;g[94060]=0;g[a+92232|0]=123;g[94109]=2;h[46867]=65535;i[23246]=77453;a=i[23640];i[23640]=a+1;g[a+92232|0]=126;g[94112]=2;h[46870]=65535;i[23249]=77508;a=i[23640];i[23640]=a+1;g[a+92232|0]=124;g[94110]=2;h[46868]=65535;i[23247]=77545;a=i[23640];i[23640]=a+1;g[a+92232|0]=125;g[94111]=2;h[46869]=65535;i[23248]=77598}function Zg(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;e=S-176|0;S=e;g=i[a+52>>2];n=ic(c,g,i[22007],1,i[(g+(b<<2)|0)+4>>2]);if(i[21886]>=4){g=i[d>>2];i[e+160>>2]=i[a+76>>2];i[e+164>>2]=b;i[e+168>>2]=n;i[e+172>>2]=g;V(i[22423],4050,48895,e+160|0)}i[22772]=i[22772]+1;r=i[22499];f=(r+(n<<2)|0)+4|0;h=i[f>>2];a:{b:{if(h){k=n;while(1){g=1;c:{if((a|0)==(h|0)){break c}g=0;i[22778]=i[22778]+1;o=i[a+52>>2];m=o+8|0;q=(o+(b<<2)|0)+4|0;p=i[h+52>>2];s=p+8|0;f=s;while(1){d:{if((m|0)==(q|0)){break d}t=i[m>>2];while(1){j=g;g=f+4|0;if(i[f>>2]==(t|0)){f=g;g=j;break d}f=g;if(!j){continue}break}g=l;break c}j=i[m+4>>2];m=m+4|0;if(j){continue}break}f=g?g:f+4|0;j=f-s>>2;m=(j^b)&1;g=m^1;if(i[21886]>=4){f=i[i[f+ -4>>2]+16>>2];l=i[i[q>>2]+16>>2];i[e+144>>2]=g;i[e+128>>2]=b;i[e+132>>2]=l;i[e+136>>2]=j;i[e+140>>2]=f;V(i[22423],4054,50126,e+128|0);p=i[h+52>>2];o=i[a+52>>2]}if(i[((b<<2)+o|0)+4>>2]==i[((j<<2)+p|0)+4>>2]){sa(48956);f=i[a+76>>2];l=i[h+76>>2];k=i[i[i[a+60>>2]+4>>2]+76>>2];i[e+112>>2]=i[i[i[h+60>>2]+4>>2]+76>>2];i[e+116>>2]=k;i[e+96>>2]=l;i[e+100>>2]=f;i[e+104>>2]=j;i[e+108>>2]=b;V(i[22423],7084,48994,e+96|0)}k=i[h+60>>2]+(j<<2)|0;f=i[k+4>>2];l=(i[h+80>>2]^i[a+80>>2])>>>12&1;if(!(f|(l|0)!=(g|0))){i[k+4>>2]=a;i[(i[a+60>>2]+(b<<2)|0)+4>>2]=h;i[d>>2]=i[d>>2]+ -1;if(i[21886]<4){break a}a=i[a+76>>2];i[e+80>>2]=i[h+76>>2];i[e+84>>2]=j;i[e+88>>2]=a;i[e+92>>2]=b;V(i[22423],4051,49173,e+80|0);break a}if(!(i[21897]|i[21915])){sa(49233);o=i[a+76>>2];q=i[h+76>>2];p=i[22423];i[e+72>>2]=f?i[f+76>>2]:-1;i[e+68>>2]=o;i[e+64>>2]=q;V(p,6107,49270,e- -64|0);ca(7,h,a)}i[(i[a+60>>2]+(b<<2)|0)+4>>2]=1;i[a+80>>2]=i[a+80>>2]|2097152;ke(a,i[22499],c,n);i[d>>2]=i[d>>2]+1;e:{if((f|0)==1){break e}i[(i[h+60>>2]+(j<<2)|0)+4>>2]=1;i[h+80>>2]=i[h+80>>2]|2097152;if(!f){break e}g=eb(i[f+60>>2],h);if((g|0)<=-1){k=i[h+76>>2];i[e+48>>2]=i[f+76>>2];i[e+52>>2]=k;V(i[22423],6260,49426,e+48|0);ca(7,f,h)}i[(i[f+60>>2]+(g<<2)|0)+4>>2]=1;i[f+80>>2]=i[f+80>>2]|2097152;ke(f,i[22499],c,n);i[d>>2]=i[d>>2]+2}if(i[21886]<4){break a}d=l^m;g=(f|0)==1;c=g?-2:-1;l=i[h+76>>2];a=i[a+76>>2];k=i[22423];c=!f|g?c:i[f+76>>2];i[e+40>>2]=n;i[e+36>>2]=d;i[e+32>>2]=c;i[e+28>>2]=j;i[e+24>>2]=l;i[e+20>>2]=b;i[e+16>>2]=a;V(k,4052,49542,e+16|0);break a}l=g;g=k+1|0;k=(g|0)<(c|0)?g:0;f=((k<<2)+r|0)+4|0;h=i[f>>2];if(h){continue}break}if(l){break b}}i[f>>2]=a}i[d>>2]=i[d>>2]+1;if(i[21886]<4){break a}i[e>>2]=i[a+76>>2];i[e+4>>2]=b;i[e+8>>2]=n;V(i[22423],4053,49645,e)}S=e+176|0}function rg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=71;h[46815]=65535;i[23194]=75054;a=i[23640];i[23640]=a+1;g[94057]=0;g[a+92232|0]=186;g[94172]=1;h[46930]=65535;i[23309]=75077;a=i[23640];i[23640]=a+1;g[a+92232|0]=129;g[94115]=2;h[46873]=186;i[23252]=75094;a=i[23640];i[23640]=a+1;g[a+92232|0]=130;g[94116]=2;h[46874]=65535;i[23253]=75139;a=i[23640];i[23640]=a+1;g[a+92232|0]=135;g[94121]=2;h[46879]=186;i[23258]=75149;a=i[23640];i[23640]=a+1;g[a+92232|0]=136;g[94122]=2;h[46880]=65535;i[23259]=75199;a=i[23640];i[23640]=a+1;g[a+92232|0]=131;g[94117]=2;h[46875]=65535;i[23254]=75232;a=i[23640];i[23640]=a+1;g[a+92232|0]=137;g[94123]=2;h[46881]=65535;i[23260]=75275;a=i[23640];i[23640]=a+1;g[a+92232|0]=118;g[94104]=7;h[46862]=65535;i[23241]=75306;a=i[23640];i[23640]=a+1;g[a+92232|0]=141;g[94127]=8;h[46885]=65535;i[23264]=75372;a=i[23640];i[23640]=a+1;g[a+92232|0]=247;g[94233]=1;h[46991]=65535;i[23370]=75421;a=i[23640];i[23640]=a+1;g[a+92232|0]=248;g[94234]=1;h[46992]=65535;i[23371]=75457;a=i[23640];i[23640]=a+1;g[a+92232|0]=216;g[94202]=1;h[46960]=65535;i[23339]=75495;a=i[23640];i[23640]=a+1;g[a+92232|0]=138;g[94124]=1;h[46882]=65535;i[23261]=75545;a=i[23640];i[23640]=a+1;g[a+92232|0]=169;g[94155]=1;h[46913]=65535;i[23292]=75562;a=i[23640];i[23640]=a+1;g[a+92232|0]=45;g[94031]=1;h[46789]=65535;i[23168]=75601;a=i[23640];i[23640]=a+1;g[a+92232|0]=44;g[94030]=2;h[46788]=45;i[23167]=75647;a=i[23640];i[23640]=a+1;g[a+92232|0]=43;g[94029]=3;h[46787]=65535;i[23166]=75671;a=i[23640];i[23640]=a+1;g[a+92232|0]=132;g[94118]=1;h[46876]=65535;i[23255]=75685;a=i[23640];i[23640]=a+1;g[a+92232|0]=133;g[94119]=1;h[46877]=65535;i[23256]=75725;a=i[23640];i[23640]=a+1;g[a+92232|0]=134;g[94120]=1;h[46878]=65535;i[23257]=75756;a=i[23640];i[23640]=a+1;g[a+92232|0]=128;g[94114]=1;h[46872]=65535;i[23251]=75774;a=i[23640];i[23640]=a+1;g[a+92232|0]=139;g[94125]=1;h[46883]=65535;i[23262]=75812;a=i[23640];i[23640]=a+1;g[a+92232|0]=46;g[94032]=1;h[46790]=65535;i[23169]=75840;a=i[23640];i[23640]=a+1;g[a+92232|0]=50;g[94036]=1;h[46794]=65535;i[23173]=75890;a=i[23640];i[23640]=a+1;g[a+92232|0]=127;g[94113]=1;h[46871]=65535;i[23250]=75927;a=i[23640];i[23640]=a+1;g[a+92232|0]=145;g[94131]=1;h[46889]=65535;i[23268]=75976;a=i[23640];i[23640]=a+1;g[a+92232|0]=190;g[94176]=1;h[46934]=65535;i[23313]=76010;a=i[23640];i[23640]=a+1;g[a+92232|0]=213;g[94199]=2;h[46957]=65535;i[23336]=76091}function ad(a,b,c,d,e){var f=0,h=0,k=0,l=0,m=0,n=0,o=0;h=S-160|0;S=h;n=i[a+16>>2];a:{b:{if(i[21886]>1){break b}k=i[22438];if((k|0)==(n|0)|(k|0)==i[b+16>>2]){break b}m=1;break a}l=i[b+16>>2];o=i[22423];m=W(c);k=-1;k=d?i[d+76>>2]:k;i[h+144>>2]=e?i[e+76>>2]:-1;i[h+140>>2]=k;i[h+136>>2]=m;i[h+132>>2]=l;i[h+128>>2]=n;V(o,2086,44808,h+128|0);o=1;m=0}c:{if(!c){break c}f=i[c+4>>2];if(!f){break c}k=c+8|0;while(1){n=k;d:{if(!ah(f,a,b)){break d}c=W(i[i[f+4>>2]+52>>2]);l=W(i[i[f+8>>2]+52>>2]);e:{f:{k=i[22007];if((c|0)<(k|0)){break f}g:{if((c|0)!=(k|0)){break g}k=i[f+4>>2];if(j[k+81|0]&32){k=c;break g}if(da(i[k+52>>2],b)){break f}k=i[22007]}if((l|0)>=(k|0)){if((k|0)!=(l|0)){break e}c=i[f+8>>2];if(j[c+81|0]&32){break e}if(!da(i[c+52>>2],b)){break e}}if(i[21886]<4){break d}c=i[a+16>>2];k=i[i[f+8>>2]+76>>2];f=i[f+12>>2];i[h+112>>2]=i[b+16>>2];i[h+96>>2]=f;i[h+100>>2]=k;i[h+104>>2]=l;i[h+108>>2]=c;V(i[22423],4071,44999,h+96|0);break d}if(i[21886]<4){break d}k=i[a+16>>2];l=i[i[f+4>>2]+76>>2];f=i[f+12>>2];i[h+80>>2]=i[b+16>>2];i[h+64>>2]=f;i[h+68>>2]=l;i[h+72>>2]=c;i[h+76>>2]=k;V(i[22423],4070,44887,h- -64|0);break d}hh(f)}k=n+4|0;f=i[n>>2];if(f){continue}break}}h:{i:{j:{k:{if(!d){if(!m){b=i[b+16>>2];i[h+16>>2]=i[a+16>>2];i[h+20>>2]=b;V(i[22423],2087,45114,h+16|0)}b=i[a+12>>2];l:{if(!b){break l}f=i[b+4>>2];if(!f){break l}k=b+8|0;c=b+4|0;if(m){while(1){m:{if(j[f+81|0]&32){Za(f);c=k;break m}re(f);Ma(i[f+52>>2],a);b=nc(f);Za(f);pc(f);bd(f);c=b?c:k}k=c+4|0;f=i[c>>2];if(f){continue}break l}}while(1){n:{if(j[f+81|0]&32){Za(f);c=k;break n}b=i[a+16>>2];i[h>>2]=i[f+76>>2];i[h+4>>2]=b;V(i[22423],4080,45209,h);re(f);Ma(i[f+52>>2],a);b=nc(f);Za(f);pc(f);bd(f);c=b?c:k}k=c+4|0;f=i[c>>2];if(f){continue}break}}f=j[a+24|0];if(!(f&4)){break k}if(d){break i}break h}if((W(i[a+12>>2])|0)!=2){break j}i[22946]=i[22946]+1;if(!m){c=i[d+76>>2];b=i[b+16>>2];i[h+32>>2]=i[a+16>>2];i[h+36>>2]=b;i[h+40>>2]=c;V(i[22423],3039,45281,h+32|0)}b=i[a+12>>2];o:{if(!b){break o}f=i[b+4>>2];if(!f){break o}c=b+4|0;while(1){Ma(i[f+52>>2],a);Za(f);f=i[c+4>>2];c=c+4|0;if(f){continue}break}}f=j[a+24|0]}g[a+24|0]=f|4;Z(90004,a);if(d){break i}break h}i[22944]=i[22944]+1;if(!((o^-1)&i[21886]<1)){c=i[e+76>>2];k=i[d+76>>2];b=i[b+16>>2];i[h+48>>2]=i[a+16>>2];i[h+52>>2]=b;i[h+56>>2]=k;i[h+60>>2]=c;V(i[22423],3040,45362,h+48|0)}Ma(i[d+52>>2],a);ja(i[a+12>>2],d);if(!nc(e)){break i}Za(e)}Za(d)}S=h+160|0}function Qg(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0;e=S-16|0;S=e;i[e>>2]=0;f=a+1|0;i[e+12>>2]=ba(f);g=ba(f);i[e+8>>2]=g;a:{if(i[21854]){xb(a,0,c,d,e+8|0);break a}if(i[21970]){if((W(g)|0)==(f|0)){break a}while(1){k=+(db()|0)/2147483647;g=i[22009];k=u(k*+(g|0));b:{if(q(k)<2147483648){b=~~k;break b}b=-2147483648}d=e+8|0;c:{while(1){d:{a=i[e+8>>2];e:{if((b|0)>=0){c=i[22010]+(o(i[22007],b)<<3)|0;f:{if((b|0)<(g|0)){break f}g=b-g|0;c=0;if((g|0)>=(W(i[22500])|0)){break f}c=i[(i[22500]+(g<<2)|0)+4>>2]}if(da(a,c)){break e}a=i[22009];if((b|0)>=(a|0)){break d}c=i[22010]+(o(i[22007],b)<<3)|0;break c}c=0;if(!da(a,0)){break c}}a=b+1|0;g=i[22009];b=(a|0)<(g|0)?a:0;continue}break}a=b-a|0;c=0;if((a|0)>=(W(i[22500])|0)){break c}c=i[(i[22500]+(a<<2)|0)+4>>2]}Z(d,c);if((W(i[e+8>>2])|0)!=(f|0)){continue}break}break a}g=0;if(i[22007]>=8){i[e+4>>2]=ba(f);Z(e+8|0,i[b+4>>2]);Z(e+8|0,i[b+8>>2]);xb((a|0)<6?a:6,b,c,d,e+8|0);h=W(i[e+8>>2]);f=i[b+4>>2];j=W(b);g:{if((j|0)<1|(h|0)>=(a|0)){break g}while(1){h:{if(!(g&1)){break h}if(da(i[e+8>>2],f)){break h}if(da(i[e+4>>2],f)){break h}Nb(f,i[e+8>>2],h,e);if(i[e>>2]){Z(e+4|0,f);break h}Z(e+8|0,f);h=h+1|0}g=g+1|0;if((g|0)>=(j|0)){break g}f=i[((g<<2)+b|0)+4>>2];if((h|0)<(a|0)){continue}break}}f=i[b+4>>2];j=W(b);i:{if((j|0)<1|(h|0)>=(a|0)){break i}g=0;while(1){j:{if(g&1){break j}if(da(i[e+8>>2],f)){break j}if(da(i[e+4>>2],f)){break j}Nb(f,i[e+8>>2],h,e);if(i[e>>2]){Z(e+4|0,f);break j}Z(e+8|0,f);h=h+1|0}g=g+1|0;if((g|0)>=(j|0)){break i}f=i[((g<<2)+b|0)+4>>2];if((h|0)<(a|0)){continue}break}}f=i[b+4>>2];j=W(b);if((j|0)>=1){g=0;while(1){k:{if(!da(i[e+8>>2],f)){if(!da(i[e+4>>2],f)){break k}}i[((g<<2)+b|0)+4>>2]=0}g=g+1|0;f=i[((g<<2)+b|0)+4>>2];if((g|0)!=(j|0)){continue}break}}wb(b);l:{if((h|0)>=(a|0)){break l}g=0;while(1){f=i[22009];j=i[22010]+(o(i[22007],g)<<3)|0;m:{if((g|0)<(f|0)){break m}f=g-f|0;if((f|0)>=(W(i[22500])|0)){break l}j=i[(i[22500]+(f<<2)|0)+4>>2]}f=j;if(!f){break l}n:{if(da(i[e+8>>2],f)){break n}if(da(i[e+4>>2],f)){break n}Nb(f,i[e+8>>2],h,e);if(i[e>>2]){break n}Z(e+8|0,f);h=h+1|0}g=g+1|0;if((h|0)<(a|0)){continue}break}}_(e+4|0);xb(a,b,c,d,e+8|0);break a}xb(a,b,c,d,e+8|0)}a=i[e+8>>2];o:{if(!a){break o}b=i[a+4>>2];if(!b){break o}a=a+4|0;while(1){Va(e+12|0,0,Tc(b));b=i[a+4>>2];a=a+4|0;if(b){continue}break}}_(e+8|0);S=e+16|0;return i[e+12>>2]}function wg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=65;h[46809]=65535;i[23188]=71185;a=i[23640];i[23640]=a+1;g[94051]=0;g[a+92232|0]=238;g[94224]=1;h[46982]=65535;i[23361]=71205;a=i[23640];i[23640]=a+1;g[a+92232|0]=161;g[94147]=1;h[46905]=65535;i[23284]=71234;a=i[23640];i[23640]=a+1;g[a+92232|0]=156;g[94142]=1;h[46900]=65535;i[23279]=71261;a=i[23640];i[23640]=a+1;g[a+92232|0]=157;g[94143]=1;h[46901]=65535;i[23280]=71303;a=i[23640];i[23640]=a+1;g[a+92232|0]=165;a=i[23640];i[23640]=a+1;g[a+92232|0]=165;g[94151]=2;h[46909]=161;i[23288]=71346;a=i[23640];i[23640]=a+1;g[a+92232|0]=119;g[94105]=3;h[46863]=65535;i[23242]=71381;a=i[23640];i[23640]=a+1;g[a+92232|0]=164;g[94150]=2;h[46908]=161;i[23287]=71406;a=i[23640];i[23640]=a+1;g[a+92232|0]=116;g[94102]=3;h[46860]=65535;i[23239]=71444;a=i[23640];i[23640]=a+1;g[a+92232|0]=166;g[94152]=2;h[46910]=161;i[23289]=71472;a=i[23640];i[23640]=a+1;g[a+92232|0]=121;g[94107]=3;h[46865]=65535;i[23244]=71509;a=i[23640];i[23640]=a+1;g[a+92232|0]=168;g[94154]=2;h[46912]=238;i[23291]=71536;a=i[23640];i[23640]=a+1;g[a+92232|0]=122;g[94108]=3;h[46866]=65535;i[23245]=71444;a=i[23640];i[23640]=a+1;g[a+92232|0]=42;g[94028]=6;h[46786]=65535;i[23165]=71575;a=i[23640];i[23640]=a+1;g[a+92232|0]=220;g[94206]=1;h[46964]=65535;i[23343]=71609;a=i[23640];i[23640]=a+1;g[a+92232|0]=212;g[94198]=1;h[46956]=65535;i[23335]=71637;a=i[23640];i[23640]=a+1;g[a+92232|0]=219;g[94205]=1;h[46963]=65535;i[23342]=71663;a=i[23640];i[23640]=a+1;g[a+92232|0]=185;g[94171]=1;h[46929]=65535;i[23308]=71689;a=i[23640];i[23640]=a+1;g[a+92232|0]=163;g[94149]=2;h[46907]=161;i[23286]=71714;a=i[23640];i[23640]=a+1;g[a+92232|0]=162;g[94148]=3;h[46906]=65535;i[23285]=71753;a=i[23640];i[23640]=a+1;g[a+92232|0]=3;g[93989]=1;h[46747]=65535;a=i[23640];i[23640]=a+1;i[23126]=0;g[a+92232|0]=4;g[93990]=6;h[46748]=3;i[23127]=71796;a=i[23640];i[23640]=a+1;g[a+92232|0]=5;g[93991]=7;h[46749]=65535;i[23128]=71851;a=i[23640];i[23640]=a+1;g[a+92232|0]=6;g[93992]=8;h[46750]=65535;i[23129]=71910;a=i[23640];i[23640]=a+1;g[a+92232|0]=8;g[93994]=6;h[46752]=65535;i[23131]=71970;a=i[23640];i[23640]=a+1;g[a+92232|0]=9;g[93995]=7;h[46753]=65535;i[23132]=71991;a=i[23640];i[23640]=a+1;g[a+92232|0]=10;g[93996]=8;h[46754]=65535;i[23133]=72012}function Of(a,b){var c=0,d=0,e=0,f=0,h=0,k=0,m=0,n=0,o=0,q=0;e=S-48|0;S=e;o=i[21592];q=i[21589];while(1){c=i[b+4>>2];a:{if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break a}c=na(b)}if((c|0)==32|c+ -9>>>0<5){continue}break}h=1;b:{c:{switch(c+ -43|0){case 0:case 2:break c;default:break b}}h=(c|0)==45?-1:1;c=i[b+4>>2];if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break b}c=na(b)}d:{e:{f:{while(1){if(g[d+86280|0]==(c|32)){g:{if(d>>>0>6){break g}c=i[b+4>>2];if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break g}c=na(b)}d=d+1|0;if((d|0)!=8){continue}break f}break}if((d|0)!=3){if((d|0)==8){break f}if(d>>>0<4){break e}if((d|0)==8){break f}}c=i[b+104>>2];if(c){i[b+4>>2]=i[b+4>>2]+ -1}if(d>>>0<4){break f}while(1){if(c){i[b+4>>2]=i[b+4>>2]+ -1}d=d+ -1|0;if(d>>>0>3){continue}break}}Cf(e,p(p(h|0)*p(z)));k=i[e+8>>2];f=i[e+12>>2];m=i[e>>2];n=i[e+4>>2];break d}h:{i:{j:{if(d){break j}d=0;while(1){if(g[d+86289|0]!=(c|32)){break j}k:{if(d>>>0>1){break k}c=i[b+4>>2];if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break k}c=na(b)}d=d+1|0;if((d|0)!=3){continue}break}break i}l:{switch(d|0){case 0:m:{if((c|0)!=48){break m}d=i[b+4>>2];n:{if(d>>>0<l[b+104>>2]){i[b+4>>2]=d+1;d=j[d|0];break n}d=na(b)}if((d&-33)==88){Nf(e+16|0,b,q,o,h);k=i[e+24>>2];f=i[e+28>>2];m=i[e+16>>2];n=i[e+20>>2];break d}if(!i[b+104>>2]){break m}i[b+4>>2]=i[b+4>>2]+ -1}Mf(e+32|0,b,c,q,o,h);k=i[e+40>>2];f=i[e+44>>2];m=i[e+32>>2];n=i[e+36>>2];break d;case 3:break i;default:break l}}if(i[b+104>>2]){i[b+4>>2]=i[b+4>>2]+ -1}break h}o:{c=i[b+4>>2];p:{if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break p}c=na(b)}if((c|0)==40){d=1;break o}f=2147450880;if(!i[b+104>>2]){break d}i[b+4>>2]=i[b+4>>2]+ -1;break d}while(1){q:{c=i[b+4>>2];r:{if(c>>>0<l[b+104>>2]){i[b+4>>2]=c+1;c=j[c|0];break r}c=na(b)}if(!(c+ -48>>>0<10|c+ -65>>>0<26|(c|0)==95)){if(c+ -97>>>0>=26){break q}}d=d+1|0;continue}break}f=2147450880;if((c|0)==41){break d}c=i[b+104>>2];if(c){i[b+4>>2]=i[b+4>>2]+ -1}if(!d){break d}while(1){d=d+ -1|0;if(c){i[b+4>>2]=i[b+4>>2]+ -1}if(d){continue}break}break d}i[23646]=28;i[b+112>>2]=0;i[b+116>>2]=0;c=i[b+8>>2];d=c-i[b+4>>2]|0;i[b+120>>2]=d;i[b+124>>2]=d>>31;i[b+104>>2]=c}i[a>>2]=m;i[a+4>>2]=n;i[a+8>>2]=k;i[a+12>>2]=f;S=e+48|0}function qg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=0;g[93986]=1;h[46744]=65535;i[23123]=76119;a=i[23640];i[23640]=a+1;g[a+92232|0]=2;g[93988]=6;i[23125]=76155;a=i[23640];i[23640]=a+1;h[46746]=0;g[a+92232|0]=1;g[93987]=7;h[46745]=65535;i[23124]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=33;g[94019]=1;h[46777]=65535;i[23156]=76205;a=i[23640];i[23640]=a+1;g[a+92232|0]=35;g[94021]=6;h[46779]=33;i[23158]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=34;g[94020]=7;h[46778]=65535;i[23157]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=24;g[94010]=1;h[46768]=65535;i[23147]=76235;a=i[23640];i[23640]=a+1;g[a+92232|0]=26;g[94012]=6;h[46770]=24;i[23149]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=25;g[94011]=7;h[46769]=65535;i[23148]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=27;g[94013]=1;h[46771]=65535;i[23150]=76264;a=i[23640];i[23640]=a+1;g[a+92232|0]=29;g[94015]=6;h[46773]=27;i[23152]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=28;g[94014]=7;h[46772]=65535;i[23151]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=11;g[93997]=1;h[46755]=65535;i[23134]=76302;a=i[23640];i[23640]=a+1;g[a+92232|0]=13;g[93999]=6;h[46757]=11;i[23136]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=12;g[93998]=7;h[46756]=65535;i[23135]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=47;g[94033]=1;h[46791]=65535;i[23170]=76352;a=i[23640];i[23640]=a+1;g[a+92232|0]=49;g[94035]=6;h[46793]=47;i[23172]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=48;g[94034]=7;h[46792]=65535;i[23171]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=84;g[94070]=1;h[46828]=65535;i[23207]=76384;a=i[23640];i[23640]=a+1;g[a+92232|0]=86;g[94072]=6;h[46830]=84;i[23209]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=85;g[94071]=7;h[46829]=65535;i[23208]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=80;g[94066]=1;h[46824]=65535;i[23203]=76422;a=i[23640];i[23640]=a+1;g[a+92232|0]=82;g[94068]=6;h[46826]=80;i[23205]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=81;g[94067]=7;h[46825]=65535;i[23204]=76180;a=i[23640];i[23640]=a+1;g[a+92232|0]=228;g[94214]=1;h[46972]=65535;i[23351]=76446;a=i[23640];i[23640]=a+1;g[a+92232|0]=229;g[94215]=6;h[46973]=228;i[23352]=76155;a=i[23640];i[23640]=a+1;g[a+92232|0]=230;g[94216]=7;h[46974]=65535;i[23353]=76180}function nd(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,k=0;c=S-112|0;S=c;d=i[21865];a:{if(i[22474]){d=Db(a,b,c+104|0,d,c+100|0,c+96|0);break a}d=Dc(a,b,d,1,0,c+104|0,c+100|0,c+96|0)}i[22996]=i[22996]+1;i[22910]=i[22910]+i[c+96>>2];if(j[d+81|0]&8){e=i[22423];g=Y(a);k=i[b+76>>2];i[c+88>>2]=i[d+76>>2];i[c+84>>2]=k;i[c+80>>2]=g;V(e,6293,22304,c+80|0);i[22439]=0;i[22437]=0;i[22435]=0;ma(19042,b,d,0,0);X(5,0,0)}b:{c:{d:{e:{f:{g:{h:{i:{if(!i[22320]){b=i[c+100>>2];break i}j:{b=i[c+100>>2];if(b|!i[21874]|(n[c+104>>3]>=-n[10947]^1|n[11231]<8.988465674311579e+307^1)){break j}if(!i[22452]|(i[21897]|i[21915])){break j}if(i[21886]){i[c+64>>2]=22398;V(i[22423],26,20591,c- -64|0)}D(89488,3);x()}f=n[c+104>>3];if(i[22006]){if(f>=-n[11156]^1){break i}i[c+100>>2]=1;break h}if(f>=-n[10947]^1){break i}i[c+100>>2]=1;break h}if(b){break h}if(i[21874]){break g}f=n[c+104>>3];if(f>=-n[10947]^1){break f}break c}b=d- -64|0;k:{l:{e=i[d+64>>2];if(e){if(vb(e)){break l}}Z(b,a);b=0;f=n[10930];e=i[22320];h=n[c+104>>3];n[d>>3]=h;if(!e|h>f){break k}break d}f=n[d>>3];if(f<n[c+104>>3]^1){break e}Z(b,a);n[d>>3]=n[c+104>>3];b=0;if(!i[22320]){break d}h=f;f=n[10930];if(h<f^1|n[c+104>>3]>=f^1){break d}}b=1;e=i[22430];if((e|0)==(d|0)){break d}if(j[d+81|0]&4){if(!(j[e+81|0]&4)){break d}i[22430]=i[22431];break d}Ha(d);Ya(d);if(!i[22431]){break d}i[d+80>>2]=i[d+80>>2]|1024;break d}if(!i[22452]|n[11231]<8.988465674311579e+307^1|(i[21897]|i[21915])){break c}if(i[21886]){i[c+32>>2]=22530;V(i[22423],26,20591,c+32|0)}D(89488,3);x()}if(!(!i[22006]|f>=-n[11156]^1)){i[22914]=i[22914]+1;$a(a,d,c+104|0,i[22474]);break b}i[22908]=i[22908]+1;if(i[21886]>=4){b=i[22423];e=Y(a);g=i[d+76>>2];i[c>>2]=e;i[c+4>>2]=g;n[c+8>>3]=n[c+104>>3];V(b,4067,22617,c)}if(!i[21889]){break b}$a(a,d,c+104|0,i[22474]);break b}Yd(b,a);b=0}i[22445]=i[22445]+1;if(i[21886]<4){break b}e=i[22423];a=Y(a);g=i[d+80>>2];d=i[d+76>>2];i[c+60>>2]=b;i[c+52>>2]=d;i[c+48>>2]=a;i[c+56>>2]=g>>>10&1;V(e,4065,22434,c+48|0);break b}i[22640]=i[22640]+1;if(!(n[c+104>>3]>n[11233]^1?i[21888]==(0-i[22006]|0):0)){$a(a,d,c+104|0,i[22474]);break b}if(i[21886]<4){break b}b=i[22423];a=Y(a);i[c+20>>2]=i[d+76>>2];i[c+16>>2]=a;V(b,4066,22552,c+16|0)}S=c+112|0}function Xh(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,l=0,m=0,o=0,p=0;e=S-144|0;S=e;if(i[21886]>=1){f=i[22423];g=Y(a);i[e+132>>2]=i[b+76>>2];i[e+128>>2]=g;V(f,1040,20056,e+128|0)}i[d>>2]=0;i[c>>2]=0;i[23002]=i[23002]+1;Ha(b);Ya(b);i[22433]=1;if(j[b+82|0]&8){i[c>>2]=i[c>>2]+1}i[22432]=b;i[b+32>>2]=0;i[b+80>>2]=i[b+80>>2]|2048;if(i[21886]>=4){ma(20110,b,0,0,0)}i[22492]=i[22492]+1;g=i[22432];a:{if(g){while(1){b=i[g+80>>2];if(b&2048){if(!(i[21994]|!(b&512))){V(i[22423],6230,20118,0);X(5,g,0)}if(!W(i[g+60>>2])){i[e+112>>2]=i[g+76>>2];V(i[22423],6295,20214,e+112|0);X(5,g,0)}i[g+72>>2]=i[22492];b:{b=i[g+60>>2];if(!b){break b}b=b+4|0;while(1){k=i[22492];while(1){f=i[b>>2];if(!f){break b}b=b+4|0;if((k|0)==i[f+72>>2]){continue}break}i[f+72>>2]=k;i[22894]=i[22894]+1;aa(a,f,e+136|0);h=n[e+136>>3];if(!(h>n[10953]^1)){i[23002]=i[23002]+1;Ha(f);Ya(f);i[f+32>>2]=0;i[f+80>>2]=i[f+80>>2]|2048;i[22433]=i[22433]+1;if(j[f+82|0]&8){i[c>>2]=i[c>>2]+1}if(i[21886]<4){continue}ma(20110,f,0,0,0);continue}k=i[f+80>>2];c:{if(!(h>=-n[10947]^1)){i[f+80>>2]=k|16777216;i[22636]=i[22636]+1;if(!(!i[22452]|n[11231]<8.988465674311579e+307^1|(i[21897]|i[21915]))){if(i[21886]){i[e+96>>2]=20296;V(i[22423],26,20591,e+96|0)}D(89488,3);x()}d:{if(!i[21899]){break d}if(!(h>0^1)){if(!(n[11233]<h^1)){n[11233]=h}if(!(n[11234]<h^1)){n[11234]=h}if(n[f+8>>3]<h^1){break d}n[f+8>>3]=h;break d}if(n[11235]>h^1){break d}n[11235]=h}m=m+1|0;if(i[21886]<2){break c}k=i[22423];o=Y(a);p=i[f+76>>2];n[e+80>>3]=n[10953];i[e+64>>2]=o;i[e+68>>2]=p;n[e+72>>3]=n[e+136>>3];V(k,2057,20313,e- -64|0);break c}i[f+80>>2]=k&-16777217}i[22990]=i[22990]+1;if(j[f+82|0]&8){i[d>>2]=i[d>>2]+1}l=l+1|0;if(i[21886]<4){continue}ma(20402,f,0,0,0);continue}}g=i[g+48>>2];if(g){continue}}break}if(l){break a}}if(!(!i[22452]|n[11231]<8.988465674311579e+307^1|(i[21897]|i[21915]))){if(i[21886]){i[e+48>>2]=20410;V(i[22423],26,20591,e+48|0)}D(89488,3);x()}b=i[22423];i[e+32>>2]=Y(a);V(b,6168,20424,e+32|0);if(i[22443]<=99){Kb(i[22428])}l=0;X(7,0,0)}e:{if(i[21886]<1){break e}a=i[c>>2];b=i[d>>2];i[e+16>>2]=m;i[e>>2]=l;i[e+4>>2]=b;i[e+8>>2]=i[22433];i[e+12>>2]=a;V(i[22423],1041,20513,e);if(i[21886]<4|i[22443]>99){break e}ya()}S=e+144|0}function rd(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,l=0,m=0,n=0;k=S-16|0;S=k;i[22484]=i[22484]+1;ec(1);Na();n=je();if(i[21863]){i[(i[22009]<<2)+n>>2]=0}e=i[22443];f=i[22492]+1|0;i[22492]=f>>>0<e>>>0?e:f;a:{if(!a){break a}e=a;b:{while(1){if(!i[e+48>>2]){break a}c:{d:{e:{if(i[21922]){h=i[e+80>>2];f=i[21920];if(h&524288){break e}f=i[e+60>>2];if(!f){break c}f=f+4|0;while(1){g=i[f>>2];if(!g){break c}f=f+4|0;if(!(j[g+82|0]&8)){continue}break}break d}f=i[e+80>>2]&524288;if(i[21920]){break e}f=i[e+24>>2];if(!f){break c}f=qa(f,0)}if(!f){break c}h=i[e+80>>2]}if(!(h&131072)){break b}}e=i[e+48>>2];if(e){continue}break}break a}l=1}f:{if(!b){break f}f=i[b+4>>2];if(!f){break f}e=b+8|0;while(1){g=e;g:{h:{i:{if(i[21922]){h=i[f+80>>2];e=i[21920];if(h&524288){break i}e=i[f+60>>2];if(!e){break g}f=e+4|0;while(1){e=i[f>>2];if(!e){break g}f=f+4|0;if(!(j[e+82|0]&8)){continue}break}break h}e=i[f+80>>2]&524288;if(i[21920]){break i}e=i[f+24>>2];if(!e){break g}e=qa(e,0)}if(!e){break g}h=i[f+80>>2]}if(h&131072){break g}l=1;break f}e=g+4|0;f=i[g>>2];if(f){continue}break}}f=i[22428];j:{if(!f){break j}e=i[f+48>>2];if(!e){break j}while(1){h=i[f+80>>2];g=f;k:{if(i[f+24>>2]){m=0;if((h>>>17&1)==(l|0)){break k}}m=i[22492]}i[g+72>>2]=m;i[f+80>>2]=h&-49153|32768;f=e;e=i[e+48>>2];if(e){continue}break}}l:{if(!a){f=1;break l}f=1;while(1){if(!i[a+48>>2]){break l}m:{n:{o:{if(i[21922]){e=i[21920];if(j[a+82|0]&8){break o}e=i[a+60>>2];if(!e){break m}e=e+4|0;while(1){g=i[e>>2];if(!g){break m}e=e+4|0;if(!(j[g+82|0]&8)){continue}break}break n}e=i[a+80>>2]&524288;if(i[21920]){break o}e=i[a+24>>2];if(!e){break m}e=qa(e,0)}if(!e){break m}}i[a+72>>2]=f;f=f+1|0}a=i[a+48>>2];if(a){continue}break}}p:{if(!b){break p}a=i[b+4>>2];if(!a){break p}e=b+8|0;while(1){b=e;q:{r:{s:{if(i[21922]){e=i[21920];if(j[a+82|0]&8){break s}e=i[a+60>>2];if(!e){break q}e=e+4|0;while(1){g=i[e>>2];if(!g){break q}e=e+4|0;if(!(j[g+82|0]&8)){continue}break}break r}e=i[a+80>>2]&524288;if(i[21920]){break s}e=i[a+24>>2];if(!e){break q}e=qa(e,0)}if(!e){break q}}i[a+72>>2]=f;f=f+1|0}e=b+4|0;a=i[b>>2];if(a){continue}break}}i[c>>2]=l;i[d>>2]=f;if(i[21886]>=2){i[k>>2]=l;i[k+4>>2]=f;V(i[22423],2007,12740,k)}S=k+16|0;return n}function ve(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0;b=S-176|0;S=b;h=i[22498];a:{if(!h){break a}c=i[h+4>>2];l=W(h);if((l|0)<1){break a}h=-1;m=1.7976931348623157e+308;while(1){e=i[c+28>>2];d=i[c+24>>2];b:{c:{if(d){if(e){break b}o=i[22423];d=i[d+16>>2];a=-1;break c}o=i[22423];d=-1;a=-1;if(!e){break c}a=i[e+16>>2]}e=b;q=i[c+16>>2];p=-1;d:{if(!q){break d}p=i[q+76>>2]}i[e+168>>2]=p;i[b+164>>2]=a;i[b+160>>2]=d;V(o,6299,42650,b+160|0);X(5,i[c+16>>2],0);d=i[c+24>>2]}o=j[d+24|0];e:{if(!(j[i[c+28>>2]+24|0]&4?0:!(o&4))){if(i[21886]>=3){a=i[c+28>>2];p=j[a+24|0]>>>2|0;q=i[d+16>>2];r=i[22423];s=i[a+16>>2];e=-1;a=i[c+32>>2];if(a){e=i[a+12>>2]}a=b;d=i[c+36>>2];if(d){d=i[d+12>>2]}else{d=-1}i[a+148>>2]=d;i[b+144>>2]=e;i[b+140>>2]=p&1;i[b+136>>2]=s;i[b+132>>2]=o>>>2&1;i[b+128>>2]=q;V(r,3030,42766,b+128|0)}f:{if(i[c+40>>2]!=9){break f}a=i[c+32>>2];g[a+16|0]=j[a+16|0]&247;a=i[c+32>>2];g[a+16|0]=j[a+16|0]|16;a=i[c+36>>2];g[a+16|0]=j[a+16|0]&247;a=i[c+36>>2];g[a+16|0]=j[a+16|0]|16;if(i[21886]<3){break f}a=i[i[c+28>>2]+16>>2];e=i[i[c+24>>2]+16>>2];d=i[i[c+36>>2]+12>>2];i[b+112>>2]=i[i[c+32>>2]+12>>2];i[b+116>>2]=d;i[b+120>>2]=e;i[b+124>>2]=a;V(i[22423],3032,32063,b+112|0)}Ta(i[22498],f);$(c,48);l=l+ -1|0;f=f+ -1|0;break e}k=n[c+8>>3];if(k<m^1){break e}h=f;m=k}f=f+1|0;c=i[(i[22498]+(f<<2)|0)+4>>2];if((f|0)<(l|0)){continue}break}f=0;if((h|0)<0){break a}a=i[22498];f=i[(a+(h<<2)|0)+4>>2];k=m/n[11157];if(!(k>100^1)){g:{if(i[f+40>>2]==9){h:{e=i[f+32>>2];c=i[e+4>>2];a=i[f+36>>2];if((c|0)!=i[a+8>>2]){break h}d=i[e+8>>2];if((d|0)!=i[a+4>>2]){break h}d=i[d+76>>2];c=i[c+76>>2];a=i[a+12>>2];e=i[e+12>>2];l=i[i[f+28>>2]+16>>2];i[b+16>>2]=i[i[f+24>>2]+16>>2];i[b+20>>2]=l;n[b+24>>3]=m;n[b+32>>3]=k;i[b>>2]=e;i[b+4>>2]=a;i[b+8>>2]=c;i[b+12>>2]=d;V(i[22423],6391,42872,b);break g}c=i[i[f+28>>2]+16>>2];d=i[i[f+24>>2]+16>>2];a=i[a+12>>2];e=i[e+12>>2];n[b- -64>>3]=m;n[b+72>>3]=k;i[b+48>>2]=e;i[b+52>>2]=a;i[b+56>>2]=d;i[b+60>>2]=c;V(i[22423],6381,43049,b+48|0);break g}a=i[i[f+28>>2]+16>>2];e=i[i[f+24>>2]+16>>2];n[b+96>>3]=k;i[b+80>>2]=e;i[b+84>>2]=a;n[b+88>>3]=m;V(i[22423],6208,43203,b+80|0)}X(7,0,i[f+32>>2]);a=i[22498]}Ta(a,h)}S=b+176|0;return f}function Ac(a,b,c,d,e,f){var h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;h=S-112|0;S=h;x=i[f>>2];s=i[22492]+1|0;i[22492]=s;a:{if(!a){i[22750]=i[22750]+1;break a}if(j[c+82|0]&8?0:i[21911]){break a}l=n[e>>3];if(l>n[c+8>>3]^1){break a}n[c+8>>3]=l}l=n[11144];t=n[11233]+(l+l);q=n[10947];l=n[10953];w=(t+(l<q?q:l))*+((i[22992]>50?2:1)|0);q=n[e>>3]-w;b:{if(!a){break b}l=-w;if(q>l^1){break b}q=l}i[c+72>>2]=s;C=h- -64|0;u=c;c:while(1){y=0;if(!(!a|(i[c+80>>2]&511)>>>0<11)){y=(W(i[c+60>>2])|0)>100}if(i[21886]>=4){l=n[e>>3];v=i[c+76>>2];m=i[22423];o=u?i[u+76>>2]:-1;n[h+96>>3]=w;i[h+88>>2]=y;n[h+80>>3]=q;i[h+72>>2]=d;i[h+68>>2]=a;i[C>>2]=o;n[h+56>>3]=l;i[h+48>>2]=v;V(m,4002,1288,h+48|0)}z=z+1|0;d:{c=i[c+60>>2];if(!c){break d}k=i[c+4>>2];if(!k){break d}o=c+8|0;m=0;while(1){c=m;e:{f:{g:{h:{i:{j:{if(y){l=q*5;while(1){if(i[k+72>>2]!=(s|0)){i[k+72>>2]=s;if(g[k+82|0]&1){break f}aa(b,k,h+104|0);i[f>>2]=i[f>>2]+1;p=n[h+104>>3];t=n[e>>3];if(p>t){break h}if(p<l^1){break i}}k=i[o>>2];o=o+4|0;if(k){continue}break}break j}while(1){if(i[k+72>>2]!=(s|0)){i[k+72>>2]=s;if(g[k+82|0]&1){break f}aa(b,k,h+104|0);i[f>>2]=i[f>>2]+1;p=n[h+104>>3];t=n[e>>3];if(!(p>t^1)){break h}if(!(p<q)){break i}}k=i[o>>2];o=o+4|0;if(k){continue}break}}if(c){continue c}break d}v=o;m=k;break g}v=o;m=k;if(p>=n[10930]^1|d?!(!(i[k+80>>2]&131072)|a):0){break g}k:{if(a){break k}q=p-w;if(p>w+t^1){break k}r=0;i[22756]=i[22756]+1}n[e>>3]=p;A=1;u=m}if(!a|p>n[m+8>>3]^1){break e}n[m+8>>3]=p;break e}v=o;m=k}l:{if(!c){break l}B=B+1|0;if(!r){i[i[22511]+4>>2]=c;c=i[22511];i[((i[c>>2]<<2)+c|0)+4>>2]=2;i[i[22511]+8>>2]=0;r=1;break l}Z(90044,c);r=r+1|0}o=v+4|0;k=i[v>>2];if(k){continue}break}c=m;continue}if(r){m=i[22511];r=r+ -1|0;if(!r){c=i[m+4>>2];i[(m+4|0)+(i[m>>2]<<2)>>2]=1;r=0;i[i[22511]+4>>2]=0;continue}c=xa(m);continue}break}m:{if(a){break m}i[22754]=i[22754]+(i[f>>2]-x|0);a=i[f>>2]-x|0;if(i[22752]<(a|0)){i[22752]=a}if(!A){break m}i[22856]=i[22856]+1}if(i[21886]>=4){c=i[22423];b=Y(b);d=u?i[u+76>>2]:-1;a=i[f>>2];l=n[e>>3];i[h+28>>2]=B;i[h+24>>2]=z;n[h+16>>3]=l;i[h+32>>2]=a-x;i[h+8>>2]=d;i[h+4>>2]=A;i[h>>2]=b;V(c,4003,1420,h)}S=h+112|0;return u}function xh(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,m=0,o=0,p=0,q=0,r=0;e=S-96|0;S=e;i[e+92>>2]=0;i[e+88>>2]=0;k=n[11144];o=n[11157];p=e;f=i[a+16>>2];g=i[a+20>>2];if(!(j[g+81|0]&32?j[f+81|0]&32:0)){m=i[g+76>>2];i[e+64>>2]=i[f+76>>2];i[e+68>>2]=m;V(i[22423],6351,32446,e- -64|0);ca(5,i[a+16>>2],i[a+20>>2]);g=i[a+20>>2];f=i[a+16>>2]}h=Wc(i[f+52>>2],i[g+52>>2]);i[p+84>>2]=h;a:{if((W(h)|0)==i[22007]){k=Vb(h,e+92|0,e+88|0);if(i[e+92>>2]!=(b|0)){break a}i[e+92>>2]=i[e+88>>2];i[e+88>>2]=b;break a}ja(h,b);if((W(h)|0)!=(i[22007]+ -2|0)){f=i[22423];m=i[i[a+16>>2]+76>>2];g=i[i[a+20>>2]+76>>2];i[e+56>>2]=W(h);i[e+52>>2]=g;i[e+48>>2]=m;V(f,6409,32579,e+48|0);ca(5,i[a+16>>2],i[a+20>>2])}q=(o+k)*10;b:{if(!h){k=1.7976931348623157e+308;break b}g=i[h+4>>2];c:{if(g){f=h+8|0;k=1.7976931348623157e+308;while(1){o=Fb(i[g+8>>2],i[b+8>>2],i[22007]);if(!(o<k^1)){i[e+92>>2]=g;i[e+88>>2]=b;k=o}g=i[f>>2];f=f+4|0;if(g){continue}break}if(k>q^1){break b}if(h){break c}break b}k=1.7976931348623157e+308;if(q<1.7976931348623157e+308^1){break b}}f=i[h+4>>2];if(!f){break b}m=f;p=h+8|0;r=p;while(1){if(f){b=p;while(1){g=b;d:{if(l[f+16>>2]<=l[m+16>>2]){break d}o=Fb(i[f+8>>2],i[m+8>>2],i[22007]);if(o<k^1){break d}i[e+92>>2]=m;i[e+88>>2]=f;k=o}b=g+4|0;f=i[g>>2];if(f){continue}break}}m=i[r>>2];if(!m){break b}r=r+4|0;f=i[h+4>>2];continue}}if(!h|k>q^1){break a}b=i[h+4>>2];if(!b){break a}m=h+8|0;while(1){f=wh(b,h);i[e+80>>2]=f;e:{if(!f){break e}g=i[f+4>>2];if(!g){break e}f=f+8|0;while(1){o=Fb(i[g+8>>2],i[b+8>>2],i[22007]);if(!(o<k^1)){i[e+88>>2]=b;i[e+92>>2]=g;k=o}g=i[f>>2];f=f+4|0;if(g){continue}break}}_(e+80|0);b=i[m>>2];if(!b){break a}m=m+4|0;h=i[e+84>>2];continue}}n[d>>3]=k;ga(e+84|0);b=i[e+92>>2];if(!b){b=i[i[a+20>>2]+76>>2];i[e+32>>2]=i[i[a+16>>2]+76>>2];i[e+36>>2]=b;i[e+40>>2]=i[22455];V(i[22423],6274,32757,e+32|0);ca(5,i[a+16>>2],i[a+20>>2]);b=i[e+92>>2]}i[c>>2]=b;if(i[21886]>=2){b=i[22423];c=Y(i[i[e+88>>2]+8>>2]);d=i[i[e+88>>2]+16>>2];f=Y(i[i[e+92>>2]+8>>2]);m=i[i[e+92>>2]+16>>2];g=i[i[a+20>>2]+76>>2];a=i[i[a+16>>2]+76>>2];n[e+16>>3]=k;i[e+24>>2]=a;i[e+28>>2]=g;i[e>>2]=c;i[e+4>>2]=d;i[e+8>>2]=f;i[e+12>>2]=m;V(b,2061,32900,e)}S=e+96|0;return i[e+88>>2]}function Ye(a,b,c){var d=0,e=0,f=0,g=0;f=S+ -64|0;S=f;d=i[22009]+W(i[22500])|0;e=ba(d);i[f+56>>2]=e;jb(e,d);e=Ja(b,c,0);i[f+60>>2]=e;a:{if(!e){break a}d=i[e+4>>2];if(!d){break a}e=e+8|0;while(1){g=Y(i[d+8>>2]);if((g|0)>=0){i[(i[f+56>>2]+(g<<2)|0)+4>>2]=i[d+8>>2]}d=i[e>>2];e=e+4|0;if(d){continue}break}}b:{if(!(i[22006]|(i[21888]|i[21889]))){break b}c:{if(!b){break c}while(1){if(!i[b+48>>2]){break c}d:{e:{f:{if(i[21922]){d=i[21920];if(j[b+82|0]&8){break f}d=i[b+60>>2];if(!d){break d}d=d+4|0;while(1){e=i[d>>2];if(!e){break d}d=d+4|0;if(!(j[e+82|0]&8)){continue}break}break e}d=i[b+80>>2]&524288;if(i[21920]){break f}d=i[b+24>>2];if(!d){break d}d=qa(d,0)}if(!d){break d}}e=i[b+68>>2];if(!e){break d}d=i[e+4>>2];if(!d){break d}e=e+8|0;while(1){g=Y(d);if((g|0)>=0){i[(i[f+56>>2]+(g<<2)|0)+4>>2]=d}d=i[e>>2];e=e+4|0;if(d){continue}break}}b=i[b+48>>2];if(b){continue}break}}if(!c){break b}e=i[c+4>>2];if(!e){break b}d=c+8|0;while(1){b=d;g:{h:{i:{if(i[21922]){c=i[21920];if(j[e+82|0]&8){break i}c=i[e+60>>2];if(!c){break g}d=c+4|0;while(1){c=i[d>>2];if(!c){break g}d=d+4|0;if(!(j[c+82|0]&8)){continue}break}break h}c=i[e+80>>2]&524288;if(i[21920]){break i}c=i[e+24>>2];if(!c){break g}c=qa(c,0)}if(!c){break g}}c=i[e+68>>2];if(!c){break g}d=i[c+4>>2];if(!d){break g}e=c+8|0;while(1){c=Y(d);if((c|0)>=0){i[(i[f+56>>2]+(c<<2)|0)+4>>2]=d}d=i[e>>2];e=e+4|0;if(d){continue}break}}d=b+4|0;e=i[b>>2];if(e){continue}break}}_(f+60|0);e=0;c=i[f+56>>2];j:{if(!c){break j}b=i[c+4>>2];c=W(c);if((c|0)<1){break j}g=i[f+56>>2];d=0;while(1){e=((b|0)!=0)+e|0;d=d+1|0;b=i[(g+(d<<2)|0)+4>>2];if((c|0)!=(d|0)){continue}break}}b=i[22007];k:{if(i[21867]){i[f+40>>2]=e;i[f+36>>2]=88056;i[f+32>>2]=88316;i[f+44>>2]=b+1;V(a,9218,14026,f+32|0);break k}i[f+20>>2]=e;i[f+16>>2]=b;V(a,9219,13233,f+16|0)}b=i[f+56>>2];l:{if(!b){break l}d=i[b+4>>2];c=W(b);if((c|0)<1){break l}b=0;while(1){if(d){if(i[21867]){V(a,9220,13230,0)}Y(d);e=i[22007];if(e){while(1){n[f>>3]=n[d>>3];V(a,9214,13090,f);d=d+8|0;e=e+ -1|0;if(e){continue}break}}V(a,9215,13098,0)}b=b+1|0;d=i[(i[f+56>>2]+(b<<2)|0)+4>>2];if((b|0)!=(c|0)){continue}break}}if(i[21867]){V(a,9221,14551,0)}_(f+56|0);S=f- -64|0}function tf(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,p=0,q=0;k=S-48|0;S=k;e=i[22009];b=i[22008];j=b+1|0;c=fa(ha(j),0,j);f=i[22008];if((f|0)>=1){while(1){h=a<<3;if(!(n[h+i[22280]>>3]!=0|n[h+i[22279]>>3]!=0)){g[a+c|0]=255;f=i[22008];b=b+ -1|0}a=a+1|0;if((a|0)<(f|0)){continue}break}}if(i[21874]){g[a+c|0]=1;b=b+1|0;e=(i[21863]!=0)+e|0}if(i[22007]!=(b|0)){$(c,j);i[k+32>>2]=b;i[k+36>>2]=i[22007];V(i[22423],6015,6276,k+32|0);X(5,0,0)}e=za(o(b,e)<<3);i[22507]=e;a:{if(e){a=i[22008];Eb(c,a+1|0,i[22010],i[22009],a,e,b);break a}$(c,j);i[k+16>>2]=i[22009];V(i[22423],6016,6362,k+16|0);X(4,0,0);a=i[22008];Eb(c,a+1|0,i[22010],i[22009],a,0,b)}if(i[21886]>=1){V(i[22423],1003,6417,0)}h=i[22008]+1|0;a=i[22280];f=b+1|0;Eb(c,h,a,1,h,a,f);h=i[22008]+1|0;a=i[22279];Eb(c,h,a,1,h,a,f);if(i[21884]){a=i[22004];if(!a){$(c,j);V(i[22423],6017,6466,0);X(5,0,0);a=i[22004]}h=i[22008];Eb(c,h,a,1,h,a,b)}$(c,j);if(i[22011]){ta(i[22010])}i[22011]=1;i[22010]=e;i[22507]=0;b:{c:{d:{e:{f:{a=i[21874];if(!(!a|!i[21863])){c=i[22009];g:{b=i[22007];l=b+ -1|0;if(l){j=fa((o(b,c)<<3)+e|0,0,(b<<3)+ -8|0);if(c){break g}break d}if(c){a=c+ -1|0;break f}break c}a=c+ -1|0;if((b|0)<=1){break f}while(1){h=a;a=0;d=0;while(1){f=j+(a<<3)|0;b=e;m=n[b>>3];n[f>>3]=m+n[f>>3];e=b+8|0;d=d+m*m;a=a+1|0;if((l|0)!=(a|0)){continue}break}n[b+8>>3]=d;p=p<d?d:p;a=h+ -1|0;e=b+16|0;if(h){continue}break}d=p*1.1;break e}if(!a){break b}q=i[22009];c=i[22007];if(i[21886]){i[k>>2]=q;V(i[22423],11,7518,k)}h:{if((q|0)<1){break h}h=c+ -2|0;if(!h){f=0;a=e;while(1){d=n[a>>3];n[a+8>>3]=d*d;a=a+16|0;f=f+1|0;if((q|0)!=(f|0)){continue}break}break h}j=c+ -1<<3;b=e;while(1){d=n[b>>3];d=d*d;a=b;f=h;while(1){p=d;d=n[a+8>>3];d=p+d*d;a=a+8|0;f=f+ -1|0;if(f){continue}break}n[b+j>>3]=d;b=(c<<3)+b|0;l=l+1|0;if((q|0)!=(l|0)){continue}break}}d=n[11256];if(d<8.988465674311579e+307^1){break b}Fc(e,q,c,d,n[11257],n[11258]);break b}fa(e,0,c<<3);while(1){b=a;a=a+ -1|0;e=e+8|0;if(b){continue}break}d=0}if(!l){break c}}m=+(c|0);while(1){n[e>>3]=n[e>>3]/m;e=e+8|0;l=l+ -1|0;if(l){continue}break}}n[e>>3]=d;i[22009]=c+1;if(!i[21886]){break b}V(i[22423],9,6551,0)}S=k+48|0}function od(a,b,c){var d=0,e=0,f=0,g=0,h=0;d=S+ -64|0;S=d;i[d+48>>2]=0;i[22464]=0;if((Y(a)|0)==-1){Z(9e4,a)}if(!b){V(i[22423],6213,18331,0);X(5,0,0)}ih();a:{b:{if(!c){break b}b=Dc(a,b,0,0,0,d+56|0,d+48|0,d+44|0);i[22910]=i[22910]+i[d+44>>2];if(i[d+48>>2]){break b}c=1;i[22880]=i[22880]+1;i[b+80>>2]=i[b+80>>2]|262144;$a(a,b,d+56|0,i[22474]);break a}Fe(a,b);c=i[21983];if(!((c|0)>-1|i[22455]!=(c^-1))){i[b+80>>2]=i[b+80>>2]|262144;c=0;break a}Xh(a,b,d+36|0,d+32|0);c:{if(!(i[22457]?0:i[21911])){c=i[d+32>>2];break c}c=i[d+32>>2];if(i[d+36>>2]!=(0-c|0)){break c}c=1;i[22876]=i[22876]+1;i[b+80>>2]=i[b+80>>2]|262144;Ga(0,1);break a}c=Wh(a,b,c,d+52|0);if(!c){c=1;if(i[21911]){break a}e=i[d+52>>2];if(e){f=i[22486];h=f+1|0;i[22486]=h;c=a;if((f|0)>=i[22444]){f=i[22423];e=Y(a);a=i[b+76>>2];i[d>>2]=h;i[d+4>>2]=e;i[d+8>>2]=a;i[d+12>>2]=i[22444];V(f,6296,18417,d);X(5,b,0);e=i[d+52>>2]}c=od(c,e,1);break a}i[22486]=0;break a}e=i[22486];if(e){i[22952]=i[22952]+1;i[22956]=e+i[22956];if(i[22954]<(e|0)){i[22954]=e}i[22486]=0}f=Y(i[c+8>>2]);i[22934]=i[22934]+1;d:{e=i[21982];if(!e){break d}c=0;if(i[22455]!=(e+ -1|0)){break d}i[b+80>>2]=i[b+80>>2]|262144;break a}i[22474]=0;e:{if(i[21897]|i[21915]){kc();Oh(f,n[10950],n[10935]);if(i[22992]>=51){i[22474]=1;break e}b=i[22431];while(1){if(!b){break e}e=i[b+48>>2];if(!e){break e}c=b;b=e;if(j[c+81|0]&32){continue}break}i[22474]=1;break e}if(!i[21865]){break e}i[22474]=1}if(i[21886]>=4){Wa(i[22432])}sc(d+40|0);i[22474]=0;i[22475]=0;i[22918]=i[22918]+1;b=i[22444];g=+i[d+40>>2]- +i[22007]*+(i[22009]-b|0)/+(b|0);n[11460]=n[11460]+g;n[11461]=n[11461]+g*g;jc();b=i[22444];if(i[22800]<(b|0)){i[22800]=b}i[22472]=0;f:{g:{if(i[21886]>=4){if(i[22443]<=199){ya()}Kb(i[22431]);b=89712;break g}if(!i[21869]){break f}b=i[22443]<1e3?89712:89724}Wa(i[b>>2])}b=i[21983];if(!((b|0)<1|i[22455]!=(b+ -1|0))){c=0;if((W(i[22498])|0)>0){break a}}Ga(1,1);if(i[22496]){id(f,0,0);Ob()}c=1;b=i[21983];if(!((b|0)<1|i[22455]!=(b+ -1|0))){c=0;break a}if(i[21886]<2){break a}b=i[22423];a=Y(a);n[d+24>>3]=g;i[d+16>>2]=a;V(b,2056,18567,d+16|0)}S=d- -64|0;return c}function la(a,b,c,d,e){var f=0,h=0,j=0,k=0;f=S-224|0;S=f;a:{b:{j=i[a+80>>2];if(!((j|0)<0?(c|0)!=12:0)){h=i[b+80>>2];if((h|0)>-1){break b}}if(i[21886]<3){break a}h=i[b+80>>2];b=i[b+76>>2];a=i[a+76>>2];i[f+16>>2]=a;i[f+20>>2]=b;i[f+24>>2]=c;i[f>>2]=a;i[f+4>>2]=j>>>31;i[f+8>>2]=b;i[f+12>>2]=h>>>31;V(i[22423],3051,28696,f);break a}if(!(!(j&1073741824)|(c|0)!=10)){if(i[21886]<3){break a}a=i[a+76>>2];i[f+32>>2]=a;i[f+36>>2]=a;i[f+40>>2]=10;V(i[22423],3077,28814,f+32|0);break a}j=i[22496];k=i[22497];if(!(k?j:0)){i[f+208>>2]=j;i[f+212>>2]=k;V(i[22423],6403,28898,f+208|0);X(5,0,0);h=i[b+80>>2]}c:{if(!(h&65536)|g[a+82|0]&1){break c}if((c|0)!=7){h=i[b+76>>2];j=i[a+76>>2];n[f+192>>3]=d;i[f+176>>2]=j;i[f+180>>2]=h;i[f+184>>2]=c;V(i[22423],6355,29037,f+176|0);X(5,0,0);break c}if(i[21886]<2){break c}h=i[b+76>>2];i[f+160>>2]=i[a+76>>2];i[f+164>>2]=h;n[f+168>>3]=d;V(i[22423],2106,29184,f+160|0)}h=ha(48);i[h+24>>2]=0;i[h+28>>2]=0;i[h+20>>2]=b;i[h+16>>2]=a;n[h+8>>3]=d;n[h>>3]=e;i[h+40>>2]=c;i[h+32>>2]=0;i[h+36>>2]=0;j=i[(c+ -1>>>0<13?(c<<2)+86672|0:86672)>>2];d:{if(c>>>0<=9){Z(89984,h);break d}if((c|0)==10){i[a+80>>2]=i[a+80>>2]|1073741824;a=vb(i[22497]);if(!(i[a+40>>2]!=10?a:0)){Z(89988,h);break d}Va(89988,0,h);break d}k=i[a+80>>2];if((c|0)==11){i[a+80>>2]=k|-2147483648;Z(89988,h);break d}if(!(i[b+80>>2]>-1?(k|0)>=0:0)){c=i[b+76>>2];i[f+144>>2]=i[a+76>>2];i[f+148>>2]=c;V(i[22423],6092,29277,f+144|0);ca(5,a,b)}if(!Pc(i[a+52>>2],i[b+52>>2])){c=i[b+76>>2];i[f+128>>2]=i[a+76>>2];i[f+132>>2]=c;V(i[22423],6093,29385,f+128|0);ca(5,a,b)}i[a+80>>2]=i[a+80>>2]|-2147483648;i[b+80>>2]=i[b+80>>2]|-2147483648;Z(89988,h)}a=i[21886];b=i[h+40>>2];if(b>>>0>=10){if((a|0)<3){break a}a=i[22423];c=i[i[h+16>>2]+76>>2];h=i[i[h+20>>2]+76>>2];i[f- -64>>2]=W(i[22497]);i[f+60>>2]=j;i[f+56>>2]=b;i[f+52>>2]=h;i[f+48>>2]=c;V(a,3044,29486,f+48|0);break a}if((a|0)<3){break a}a=i[22423];c=i[i[h+16>>2]+76>>2];k=i[i[h+20>>2]+76>>2];d=n[h+8>>3];e=n[h>>3];i[f+112>>2]=W(i[22496]);n[f+104>>3]=e;n[f+96>>3]=d;i[f+92>>2]=j;i[f+88>>2]=b;i[f+84>>2]=k;i[f+80>>2]=c;V(a,3027,29575,f+80|0)}S=f+224|0}function yd(a){a=a|0;var b=0,c=0,d=0,e=0;e=S-16|0;S=e;if(i[21886]>=5){V(i[22423],5004,7934,0)}c=i[22496];a:{if(!c){break a}b=i[c+4>>2];if(!b){break a}c=c+4|0;while(1){$(b,48);b=i[c+4>>2];c=c+4|0;if(b){continue}break}}c=i[22497];b:{if(!c){break b}b=i[c+4>>2];if(!b){break b}c=c+4|0;while(1){$(b,48);b=i[c+4>>2];c=c+4|0;if(b){continue}break}}c=i[22498];c:{if(!c){break c}b=i[c+4>>2];if(!b){break c}c=c+4|0;while(1){$(b,48);b=i[c+4>>2];c=c+4|0;if(b){continue}break}}i[22496]=0;i[22497]=0;i[22498]=0;ga(89996);if(i[21886]>=5){V(i[22423],5003,7966,0)}Ag();if(i[21886]>=1){V(i[22423],1005,8022,0)}c=i[22501];if(c){fb(c,0)}d:{e:{f:{g:{h:{if(a){b=i[22440];if(!b){i[22457]=0;i[22275]=0;break g}while(1){if(i[b>>2]){cc(b);b=i[22440];if(b){continue}break h}break}$(b,28);i[22442]=0;i[22440]=0;break h}if(!i[22275]){break f}b=i[22440];if(!b){break f}while(1){if(!i[b>>2]){break h}Fa(b+12|0);b=i[b>>2];if(b){continue}break}}i[22457]=0;i[22275]=0;if(!a){break e}}c=i[22428];if(!c){break d}while(1){a=c;c=i[c+48>>2];if(c){d=i[a+56>>2];i:{if(!d){break i}b=i[d+4>>2];if(!b){break i}c=d+4|0;while(1){g[b+16|0]=j[b+16|0]&254;b=i[c+4>>2];c=c+4|0;if(b){continue}break}c=i[a+48>>2]}if(c){continue}}break}a=i[22428];if(!a){break d}while(1){j:{if(!(!(j[a+81|0]&4)|!i[22473])){if((W(i[a+56>>2])|0)<2){break j}}if(i[21886]>=4){i[e>>2]=i[a+76>>2];V(i[22423],4095,8083,e)}c=i[a+56>>2];if(!c){break j}b=i[c+4>>2];if(!b){break j}c=c+8|0;while(1){d=j[b+16|0];k:{if(d&1){dc(b);break k}g[b+16|0]=d|1}b=i[c>>2];c=c+4|0;if(b){continue}break}}ga(a- -64|0);ga(a+68|0);ga(a+60|0);ga(a+56|0);ga(a+52|0);if(!i[a+48>>2]){$(a,88);i[22431]=0;i[22432]=0;i[22428]=0;break d}gb(a);a=i[22428];if(a){continue}break}break d}i[22457]=0;i[22275]=0}a=Bg(i[22007]+1|0,e+12|0);b=i[22428];if(!b){break d}if(!a){while(1){if(!i[b+48>>2]){break d}Fa(b- -64|0);Fa(b+68|0);Fa(b+60|0);Fa(b+56|0);Fa(b+52|0);b=i[b+48>>2];if(b){continue}break d}}while(1){if(!i[b+48>>2]){break d}Fa(b- -64|0);Fa(b+68|0);if(!(j[b+81|0]&32)){Fa(b+60|0);Fa(b+56|0);Fa(b+52|0)}b=i[b+48>>2];if(b){continue}break}}$(i[22424],i[22425]);i[22424]=0;S=e+16|0}function jh(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=S-176|0;S=d;if(i[21886]>=2){g=i[22423];e=Y(i[a+8>>2]);f=i[a+16>>2];n[d+152>>3]=b;i[d+148>>2]=f;i[d+144>>2]=e;V(g,2062,34598,d+144|0)}i[c>>2]=0;p=n[11235];q=n[11233];v=n[11157];w=n[10930];r=n[11144];Ce(i[22431],0);f=i[22496];a:{if(!f){break a}e=i[f+4>>2];if(!e){break a}k=f+8|0;l=4.4942328371557893e+307;f=0;g=0;while(1){s=i[e+40>>2];if((s|0)!=7){x=i[22423];t=-1;u=-1;h=i[e+16>>2];if(h){u=i[h+76>>2]}h=i[e+20>>2];if(h){t=i[h+76>>2]}i[d+136>>2]=s;i[d+132>>2]=t;i[d+128>>2]=u;V(x,6393,34715,d+128|0);X(5,0,0)}h=k;k=xh(e,a,d+172|0,d+160|0);m=n[d+160>>3];b:{if(!((k|0)!=(a|0)|m<l*3^1)){l=m/3;o=i[d+172>>2];g=e;f=a;break b}if(m<l^1){break b}o=i[d+172>>2];g=e;f=k;l=m}k=h+4|0;e=i[h>>2];if(e){continue}break}k=0;if(!g|l<b^1){break a}p=-p;m=r+w;b=v+r;b=b<m?m:b;b=b<q?q:b;b=l/(b<p?p:b);if(!(b>100^1)){c:{h=i[g+16>>2];if(!(j[h+83|0]&2)){a=i[g+20>>2];if(!(j[a+83|0]&2)){break c}}if(i[21886]<1){break a}e=i[o+16>>2];f=i[f+16>>2];c=i[i[g+20>>2]+76>>2];a=i[h+76>>2];n[d+48>>3]=l;i[d+56>>2]=a;i[d+60>>2]=c;n[d+32>>3]=b;i[d+40>>2]=f;i[d+44>>2]=e;V(i[22423],1051,34833,d+32|0);break a}e=i[o+16>>2];f=i[f+16>>2];c=i[a+76>>2];a=i[h+76>>2];n[d+16>>3]=b;i[d+24>>2]=a;i[d+28>>2]=c;i[d>>2]=f;i[d+4>>2]=e;n[d+8>>3]=l;V(i[22423],7081,35048,d);break a}if((a|0)==(f|0)){if(i[21886]>=2){k=i[22423];g=Y(i[a+8>>2]);e=i[a+16>>2];f=i[o+16>>2];n[d+80>>3]=l*3;i[d+72>>2]=f;i[d+68>>2]=e;i[d+64>>2]=g;V(k,2063,35218,d- -64|0)}i[22458]=i[a+8>>2];k=1;i[c>>2]=1;break a}c=da(i[i[g+16>>2]+52>>2],f);a=da(i[i[g+20>>2]+52>>2],f);e=i[21886];d:{if((a|0)!=(c|0)){if((e|0)>=2){e=i[o+16>>2];c=i[f+16>>2];a=i[i[g+20>>2]+76>>2];i[d+112>>2]=i[i[g+16>>2]+76>>2];i[d+116>>2]=a;i[d+120>>2]=c;i[d+124>>2]=e;V(i[22423],2064,35346,d+112|0)}break d}if((e|0)>=2){e=i[i[g+20>>2]+76>>2];c=i[i[g+16>>2]+76>>2];a=i[o+16>>2];i[d+96>>2]=i[f+16>>2];i[d+100>>2]=a;i[d+104>>2]=c;i[d+108>>2]=e;V(i[22423],2065,35455,d+96|0)}}mc(f,o,8,l,0,0);k=1}e=xa(i[22496]);if(e){while(1){$(e,48);e=xa(i[22496]);if(e){continue}break}}S=d+176|0;return k}function sd(a,b,c,d,e){var f=0,h=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;n=S-32|0;S=n;h=ba(i[22427]);i[22493]=i[22493]+1;i[n+24>>2]=h;k=i[22443];g[c+24|0]=j[c+24|0]|1;f=i[c+12>>2];a:{if(!f){break a}h=i[f+4>>2];if(h){f=f+8|0;while(1){if(l[h+72>>2]<k>>>0){i[h+80>>2]=i[h+80>>2]|16384}h=i[f>>2];f=f+4|0;if(h){continue}break}f=i[c+12>>2];if(!f){break a}}h=i[f+4>>2];if(h){f=f+8|0;v=(d|0)!=1;r=(d|0)!=2;while(1){s=f;b:{if(!(j[h+81|0]&64)){break b}d=i[h+52>>2];if(!d){break b}h=i[d+4>>2];if(!h){break b}q=d+8|0;while(1){k=h;o=q;c:{d:{if(!v){while(1){d=i[22493];if(g[k+24|0]&1|(d|0)==i[k+20>>2]){break c}i[k+20>>2]=d;fb(i[n+24>>2],0);e:{d=i[k+12>>2];f:{if(d){f=i[d+4>>2];if(f){m=d+8|0;d=0;p=1;while(1){h=m;m=i[f+80>>2];g:{if(!(m&16384)){break g}if(i[f+72>>2]){if(m&512){if(!Ea(n+24|0,i[f+40>>2])){break g}}d=d+1|0;break g}d=d+p|0;p=0}m=h+4|0;f=i[h>>2];if(f){continue}break}if((d|0)<(i[22007]+ -1|0)){break c}if(p){break f}break e}d=0;if(i[22007]<=1){break f}break c}d=0;if(i[22007]>1){break c}}if(!r){break e}h=0;break d}k=i[o>>2];o=o+4|0;if(k){continue}break}break b}while(1){d=i[22493];if(g[k+24|0]&1|(d|0)==i[k+20>>2]){break c}i[k+20>>2]=d;fb(i[n+24>>2],0);d=i[k+12>>2];h:{if(d){f=i[d+4>>2];if(f){m=d+8|0;d=0;p=1;while(1){t=m;m=i[f+80>>2];i:{if(!(m&16384)){break i}if(i[f+72>>2]){if(m&512){if(!Ea(n+24|0,i[f+40>>2])){break i}}d=d+1|0;break i}d=d+p|0;p=0}m=t+4|0;f=i[t>>2];if(f){continue}break}if((d|0)<(i[22007]+ -1|0)){break c}if(p){break h}h=1;break d}d=0;if(i[22007]<=1){break h}break c}d=0;if(i[22007]>1){break c}}if(!r){k=i[o>>2];o=o+4|0;if(!k){break b}continue}break}o=q;k=h;h=0}if(i[21886]>=4){m=i[22423];q=Y(i[c+8>>2]);i[n+8>>2]=Y(i[k+8>>2]);i[n+4>>2]=q;i[n>>2]=d;V(m,4017,12585,n)}u=u+1|0;if(!b){break c}d=n;j:{if(!(!e|i[22007]!=4)){m=Pe(c,k);break j}m=Qe(k)}i[d+28>>2]=m;U[b|0](a,c,k,m,h);_(n+28|0)}q=o+4|0;h=i[o>>2];if(h){continue}break}}f=s+4|0;h=i[s>>2];if(h){continue}break}f=i[c+12>>2];if(!f){break a}}h=i[f+4>>2];if(!h){break a}f=f+4|0;while(1){i[h+80>>2]=i[h+80>>2]&-16385;h=i[f+4>>2];f=f+4|0;if(h){continue}break}}_(n+24|0);S=n+32|0;return u}function ug(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=241;g[94227]=1;h[46985]=65535;i[23364]=73008;a=i[23640];i[23640]=a+1;g[a+92232|0]=245;g[94231]=1;h[46989]=65535;i[23368]=73027;a=i[23640];i[23640]=a+1;g[a+92232|0]=242;g[94228]=3;h[46986]=65535;i[23365]=73052;a=i[23640];i[23640]=a+1;g[a+92232|0]=246;g[94232]=3;h[46990]=65535;i[23369]=73069;a=i[23640];i[23640]=a+1;g[a+92232|0]=68;h[46812]=65535;i[23191]=73090;a=i[23640];i[23640]=a+1;g[94054]=0;g[a+92232|0]=53;g[94039]=2;h[46797]=65535;i[23176]=73146;a=i[23640];i[23640]=a+1;g[a+92232|0]=54;g[94040]=3;h[46798]=65535;i[23177]=73169;a=i[23640];i[23640]=a+1;g[a+92232|0]=90;g[94076]=1;h[46834]=65535;i[23213]=73212;a=i[23640];i[23640]=a+1;g[a+92232|0]=92;g[94078]=2;h[46836]=90;i[23215]=73230;a=i[23640];i[23640]=a+1;g[a+92232|0]=91;g[94077]=3;h[46835]=65535;i[23214]=73250;a=i[23640];i[23640]=a+1;g[a+92232|0]=93;g[94079]=2;h[46837]=90;i[23216]=73270;a=i[23640];i[23640]=a+1;g[a+92232|0]=99;g[94085]=1;h[46843]=65535;i[23222]=73292;a=i[23640];i[23640]=a+1;g[a+92232|0]=101;g[94087]=2;h[46845]=99;i[23224]=73230;a=i[23640];i[23640]=a+1;g[a+92232|0]=100;g[94086]=3;h[46844]=65535;i[23223]=73250;a=i[23640];i[23640]=a+1;g[a+92232|0]=102;g[94088]=1;h[46846]=99;i[23225]=73313;a=i[23640];i[23640]=a+1;g[a+92232|0]=103;g[94089]=1;h[46847]=65535;i[23226]=73334;a=i[23640];i[23640]=a+1;g[a+92232|0]=95;g[94081]=1;h[46839]=65535;i[23218]=73366;a=i[23640];i[23640]=a+1;g[a+92232|0]=97;g[94083]=2;h[46841]=95;i[23220]=73230;a=i[23640];i[23640]=a+1;g[a+92232|0]=96;g[94082]=3;h[46840]=65535;i[23219]=73250;a=i[23640];i[23640]=a+1;g[a+92232|0]=98;g[94084]=1;h[46842]=95;i[23221]=73313;a=i[23640];i[23640]=a+1;g[a+92232|0]=148;g[94134]=1;h[46892]=65535;i[23271]=73387;a=i[23640];i[23640]=a+1;g[a+92232|0]=170;g[94156]=1;h[46914]=65535;i[23293]=73429;a=i[23640];i[23640]=a+1;g[a+92232|0]=172;g[94158]=1;h[46916]=65535;i[23295]=73475;a=i[23640];i[23640]=a+1;g[a+92232|0]=173;g[94159]=1;h[46917]=65535;i[23296]=73528;a=i[23640];i[23640]=a+1;g[a+92232|0]=178;g[94164]=1;h[46922]=65535;i[23301]=73581}function zd(a,b,c,d,e,f,g,h,j){var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;k=S-128|0;S=k;a:{b:{c:{if(!ib(f,g,h,j,0,0,0,0)){break c}m=zf(f,g,h,j);s=e>>>16|0;p=s&32767;if((p|0)==32767){break c}if(m){break b}}ea(k+16|0,b,c,d,e,f,g,h,j);e=i[k+16>>2];d=i[k+20>>2];c=i[k+24>>2];b=i[k+28>>2];Ed(k,e,d,c,b,e,d,c,b);d=i[k+8>>2];e=i[k+12>>2];h=i[k>>2];j=i[k+4>>2];break a}m=p<<16;q=d;r=m|e&65535;n=r;o=h;r=j>>>16&32767;l=j&65535|r<<16;if((ib(b,c,q,n,f,g,h,l)|0)<=0){if(ib(b,c,q,n,f,g,o,l)){h=b;j=c;break a}ea(k+112|0,b,c,d,e,0,0,0,0);d=i[k+120>>2];e=i[k+124>>2];h=i[k+112>>2];j=i[k+116>>2];break a}if(p){j=c;h=b}else{ea(k+96|0,b,c,q,n,0,0,0,1081540608);h=i[k+108>>2];n=h;q=i[k+104>>2];p=(h>>>16|0)+ -120|0;j=i[k+100>>2];h=i[k+96>>2]}if(!r){ea(k+80|0,f,g,o,l,0,0,0,1081540608);f=i[k+92>>2];l=f;o=i[k+88>>2];r=(l>>>16|0)+ -120|0;g=i[k+84>>2];f=i[k+80>>2]}t=l&65535|65536;n=n&65535|65536;if((p|0)>(r|0)){while(1){l=q;m=o;u=l-m|0;m=n-((l>>>0<m>>>0)+t|0)|0;l=(g|0)==(j|0)&h>>>0<f>>>0|j>>>0<g>>>0;m=m-(u>>>0<l>>>0)|0;l=u-l|0;d:{if((m|0)>0?1:(m|0)>=0?l>>>0>=0:0){n=h;h=h-f|0;j=j-((n>>>0<f>>>0)+g|0)|0;if(!(h|l|(j|m))){ea(k+32|0,b,c,d,e,0,0,0,0);d=i[k+40>>2];e=i[k+44>>2];h=i[k+32>>2];j=i[k+36>>2];break a}m=m<<1|l>>>31;q=l<<1|j>>>31;break d}m=n<<1|q>>>31;q=q<<1|j>>>31}n=m;m=j<<1|h>>>31;h=h<<1;j=m;p=p+ -1|0;if((p|0)>(r|0)){continue}break}p=r}e:{m=q;r=m-o|0;l=n-((m>>>0<o>>>0)+t|0)|0;m=(g|0)==(j|0)&h>>>0<f>>>0|j>>>0<g>>>0;l=l-(r>>>0<m>>>0)|0;o=r-m|0;if((l|0)<0?1:(l|0)<=0?o>>>0<0:0){o=q;l=n;break e}q=h;h=h-f|0;j=j-((q>>>0<f>>>0)+g|0)|0;if(h|o|(j|l)){break e}ea(k+48|0,b,c,d,e,0,0,0,0);d=i[k+56>>2];e=i[k+60>>2];h=i[k+48>>2];j=i[k+52>>2];break a}if((l|0)==65535|l>>>0<65535){while(1){b=j>>>31|0;p=p+ -1|0;n=j<<1|h>>>31;h=h<<1;j=n;c=b;b=o;l=l<<1|b>>>31;o=c|b<<1;if((l|0)==65536&o>>>0<0|l>>>0<65536){continue}break}}b=s&32768;if((p|0)<=0){ea(k- -64|0,h,j,o,l&65535|(b|p+120)<<16,0,0,0,1065811968);d=i[k+72>>2];e=i[k+76>>2];h=i[k+64>>2];j=i[k+68>>2];break a}d=o;e=l&65535|(b|p)<<16}i[a>>2]=h;i[a+4>>2]=j;i[a+8>>2]=d;i[a+12>>2]=e;S=k+128|0}function wd(a,b,c,d){var e=0,f=0,g=0,h=0,j=0;e=S-208|0;S=e;i[22510]=i[21963];i[21963]=0;a:{b:{c:{d:{e:{f:{if(i[21867]){g:{switch(b|0){case 0:break a;case 18:break d;case 28:break e;case 2:break f;case 4:case 17:case 19:break g;default:break c}}V(i[22423],7056,16208,0)}switch(b|0){case 0:break a;case 18:break d;case 28:break e;case 2:break f;default:break c}}b=Ja(c,d,0);i[e+180>>2]=b;c=pd(b);i[e+128>>2]=i[22007];V(a,9186,16312,e+128|0);if(c){d=i[22007];if(d){b=c;while(1){n[e+112>>3]=n[b>>3];V(a,9214,13090,e+112|0);b=b+8|0;d=d+ -1|0;if(d){continue}break}}V(a,9215,13098,0)}$(c,i[22425]);_(e+180|0);break a}if(i[21874]){_e(a,c,d);break a}if(i[22007]!=2){break b}Ze(a,c,d);break a}i[e+148>>2]=88572;i[e+144>>2]=7840;V(a,9187,16318,e+144|0);break a}f=i[21999];if(!(f|(b|0)!=21)){Ye(a,c,d);break a}h:{switch(b+ -22|0){case 0:i[e+4>>2]=88056;i[e>>2]=88316;V(a,9188,16353,e);break a;case 1:V(a,9189,16362,0);n[e+32>>3]=n[11244];V(a,9190,13090,e+32|0);n[e+16>>3]=n[11245];V(a,9191,13090,e+16|0);V(a,9192,13098,0);break a;case 2:Ub(c,d,0,e+204|0,e+200|0,e+192|0,e+196|0,e+188|0,e+184|0);b=Ja(c,d,0);i[e+180>>2]=b;c=i[22009];d=i[22007];f=W(i[22500]);g=i[22433];h=i[22443];j=i[22444];i[e+80>>2]=W(b);b=i[e+204>>2];i[e+84>>2]=b;i[e+88>>2]=i[e+188>>2];i[e+96>>2]=i[22666];i[e+100>>2]=i[e+184>>2];i[e+92>>2]=b-i[e+200>>2];i[e+64>>2]=d;i[e+68>>2]=c+f;i[e+72>>2]=j;i[e+76>>2]=h-g;V(a,9193,16367,e- -64|0);_(e+180|0);Sa(0,e+168|0,e+160|0);n[e+48>>3]=n[e+168>>3];n[e+56>>3]=n[e+160>>3];V(a,9194,16403,e+48|0);break a;case 5:Xe(a,c,d);break a;default:break h}}if(!(!f|(b|0)!=17)){vd(a,17,c,d);break a}if(!(!f|(b|0)!=7)){Tb(a,7,c,d,0);vd(a,7,c,d);Sb(a,7,c,d,0);break a}if(!(!(1<<b&67113472)|(!f|b>>>0>26))){We(a,b,c,d);break a}Tb(a,b,c,d,0);i:{if(!c){break i}f=c;while(1){if(!i[f+48>>2]){break i}zc(a,b,f,0);f=i[f+48>>2];if(f){continue}break}}if(!d){Sb(a,b,c,0,0);break a}f=i[d+4>>2];if(f){g=d+4|0;while(1){zc(a,b,f,0);f=i[g+4>>2];g=g+4|0;if(f){continue}break}}Sb(a,b,c,d,0);break a}Ve(a,c,d)}i[21963]=i[22510];S=e+208|0}function Db(a,b,c,d,e,f){var h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;k=S-112|0;S=k;q=i[22492]+1|0;i[22492]=q;i[k+104>>2]=-1;i[k+108>>2]=-2097153;t=i[21886];if(!(i[b+48>>2]?b:0)){h=i[22423];a:{if(i[21899]){V(h,6001,1533,0);h=7;break a}i[k+96>>2]=i[22455];V(h,6002,1645,k+96|0);h=5}X(h,0,0)}h=0;i[22758]=i[22758]+1;r=i[21865]|d;if(!r){l=n[11233];o=n[10930]*+((i[21899]?2:1)|0);s=(o<l?l:o)*+((i[22992]>50?2:1)|0);h=1}if(e){i[e>>2]=1}i[f>>2]=0;m=i[21886];b:{if((m|0)<=3){if(!i[21986]){break b}m=i[21988];if((m|0)<0){break b}if((Y(a)|0)!=(m|0)){break b}m=i[21886]}p=i[21986];if((p|0)>(m|0)){i[21886]=p}m=i[22423];p=Y(a);u=i[b+76>>2];n[k+80>>3]=s;i[k+72>>2]=h;i[k+68>>2]=u;i[k+64>>2]=p;V(m,8008,1713,k- -64|0);i[k+52>>2]=q;i[k+48>>2]=i[22455];i[k+56>>2]=i[22493];V(i[22423],8009,1776,k+48|0);i[k+32>>2]=i[22992];V(i[22423],8010,1832,k+32|0)}c:{d:{if(!b){l=-8.988465674311579e+307;m=0;break d}m=0;l=-8.988465674311579e+307;if(!r){h=b;while(1){if(!i[h+48>>2]){break d}i[h+72>>2]=q;e:{if(g[h+82|0]&1){break e}aa(a,h,c);i[f>>2]=i[f>>2]+1;o=n[c>>3];if(o>l^1|(o>=n[10930]^1?j[h+82|0]&2:0)){break e}m=h;l=o;if(l>=s){break c}}h=i[h+48>>2];if(h){continue}break}break d}h=b;while(1){if(!i[h+48>>2]){break d}i[h+72>>2]=q;f:{if(g[h+82|0]&1){break f}aa(a,h,c);i[f>>2]=i[f>>2]+1;o=n[c>>3];if(o>l^1){break f}p=(o>=n[10930]^1)&j[h+82|0]>>>1;m=p?m:h;l=p?l:o}h=i[h+48>>2];if(h){continue}break}}h=i[22431];g:{if(!h){break g}r=(r|0)!=0^1;while(1){if(!i[h+48>>2]|(b|0)==(h|0)){break g}i[h+72>>2]=q;h:{if(g[h+82|0]&1){break h}aa(a,h,c);i[f>>2]=i[f>>2]+1;o=n[c>>3];if(o>l^1|(o>=n[10930]^1?j[h+82|0]&2:0)){break h}m=h;l=o;if(r&l>=s){break c}}h=i[h+48>>2];if(h){continue}break}}n[k+104>>3]=l;h=Ac(0,a,m?m:b,0,k+104|0,f);l=n[k+104>>3];n[c>>3]=l;if(!e|l<n[10930]^1){break c}i[e>>2]=0}i[22762]=i[22762]+i[f>>2];e=i[f>>2];if(i[22760]<(e|0)){i[22760]=e}if(i[21886]>=4){f=i[22423];e=h?i[h+76>>2]:-1;l=n[c>>3];a=Y(a);b=i[b+76>>2];i[k+24>>2]=d;i[k+20>>2]=b;i[k+16>>2]=a;n[k+8>>3]=l;i[k>>2]=e;V(f,4004,1849,k)}i[21886]=t;S=k+112|0;return h}function Bb(a,b,c,d){var e=0,f=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0;h=S-96|0;S=h;e=W(i[a+52>>2]);p=1;if(i[22454]==1){i[h+64>>2]=i[a+76>>2];V(i[22423],6272,33182,h- -64|0);X(5,a,0)}i[b>>2]=-1;i[b+4>>2]=2146435071;f=i[22007];a:{if((e|0)<=((f<<1)+20|0)){break a}p=0;q=1;i[22590]=i[22590]+1;if(i[a+40>>2]){break a}i[a+40>>2]=Da(a);f=i[22007]}b:{c:{if((e|0)<=(f+15|0)){break c}e=i[a+56>>2];if(!e){break c}k=i[e+4>>2];if(!k){break c}f=e+8|0;e=0;d:{if(p){while(1){e:{if(!(j[k+16|0]&4)){break e}m=i[k+4>>2];if((m|0)==(a|0)){m=i[k+8>>2]}if(!(!(i[m+80>>2]&65536)|(!(g[a+82|0]&1)|!e))){if(!(g[e+82|0]&1)){break e}}l=qb(a,m,h+80|0,h+72|0);if(l<n[b>>3]^1){break e}n[c>>3]=n[h+80>>3];n[d>>3]=n[h+72>>3];n[b>>3]=l;e=m}k=i[f>>2];f=f+4|0;if(k){continue}break d}}while(1){f:{if(!(j[k+16|0]&4)){break f}m=i[k+4>>2];if((m|0)==(a|0)){m=i[k+8>>2]}if(!(!(i[m+80>>2]&65536)|(!(g[a+82|0]&1)|!e))){if(!(g[e+82|0]&1)){break f}}i[22592]=i[22592]+1;aa(i[a+40>>2],m,h+88|0);l=n[h+88>>3]*+i[22007];k=l<0;o=k?-l:l;if(o<n[b>>3]^1){break f}n[c>>3]=k?l:0;n[d>>3]=t(l,0);n[b>>3]=o;e=m}k=i[f>>2];f=f+4|0;if(k){continue}break}}f=1;if(e){break b}}e=i[a+60>>2];g:{if(!e){break g}f=i[e+4>>2];if(!f){break g}k=e+4|0;e=0;h:{if(p){while(1){k=k+4|0;i:{if(!(!(i[f+80>>2]&65536)|(!(g[a+82|0]&1)|!e))){if(!(g[e+82|0]&1)){break i}}l=qb(a,f,h+80|0,h+72|0);if(l<n[b>>3]^1){break i}n[c>>3]=n[h+80>>3];n[d>>3]=n[h+72>>3];n[b>>3]=l;e=f}f=i[k>>2];if(f){continue}break h}}while(1){k=k+4|0;j:{if(!(!(i[f+80>>2]&65536)|(!(g[a+82|0]&1)|!e))){if(!(g[e+82|0]&1)){break j}}i[22592]=i[22592]+1;aa(i[a+40>>2],f,h+88|0);l=n[h+88>>3]*+i[22007];m=l<0;o=m?-l:l;if(o<n[b>>3]^1){break j}n[c>>3]=m?l:0;n[d>>3]=t(l,0);n[b>>3]=o;e=f}f=i[k>>2];if(f){continue}break}}f=0;if(e){break b}}i[h+48>>2]=i[a+76>>2];V(i[22423],6095,33280,h+48|0);X(5,a,0);e=0;f=0}if(!p){qb(a,e,c,d)}if(i[21886]>=3){a=i[a+76>>2];m=i[e+76>>2];l=n[d>>3];o=n[c>>3];n[h+16>>3]=n[b>>3];n[h+24>>3]=o;n[h+32>>3]=l;i[h>>2]=m;i[h+4>>2]=a;i[h+8>>2]=q;i[h+12>>2]=f;V(i[22423],3002,33346,h)}S=h+96|0;return e}function Ub(a,b,c,d,e,f,g,h,k){var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;a:{if(!a){break a}if(!c){while(1){if(!i[a+48>>2]){break a}b:{c:{l=i[a+80>>2];if(i[22472]?l&2048:0){break c}d:{e:{if(i[21922]){m=i[21920];if(l&524288){break e}m=i[a+60>>2];if(!m){break c}l=m+4|0;while(1){t=i[l>>2];if(!t){break c}l=l+4|0;if(!(j[t+82|0]&8)){continue}break}break d}m=l&524288;if(i[21920]){break e}l=i[a+24>>2];if(!l){break c}m=qa(l,0)}if(!m){break c}m=i[a+60>>2]}n=n+1|0;i[a+72>>2]=n;l=W(m);m=i[a+80>>2];f:{if(m&8192){o=o+1|0;p=((m&268435968)==268435968)+p|0;break f}q=W(i[a+56>>2])+q|0}r=l+r|0;l=i[a+68>>2];if(!l){break b}s=W(l)+s|0;break b}i[a+72>>2]=0}a=i[a+48>>2];if(a){continue}break}break a}while(1){if(!i[a+48>>2]){break a}g:{if(!(!(j[a+81|0]&8)|!i[22472])){i[a+72>>2]=0;break g}n=n+1|0;i[a+72>>2]=n;l=W(i[a+60>>2]);m=i[a+80>>2];h:{if(m&8192){o=o+1|0;p=((m&268435968)==268435968)+p|0;break h}q=W(i[a+56>>2])+q|0}r=l+r|0;l=i[a+68>>2];if(!l){break g}s=W(l)+s|0}a=i[a+48>>2];if(a){continue}break}}i:{if(!b){break i}a=i[b+4>>2];if(!a){break i}l=b+8|0;if(!c){while(1){b=l;j:{k:{c=i[a+80>>2];if(i[22472]?c&2048:0){break k}l:{m:{if(i[21922]){l=i[21920];if(c&524288){break m}m=i[a+60>>2];if(!m){break k}l=m+4|0;while(1){c=i[l>>2];if(!c){break k}l=l+4|0;if(!(j[c+82|0]&8)){continue}break}break l}l=c&524288;if(i[21920]){break m}c=i[a+24>>2];if(!c){break k}l=qa(c,0)}if(!l){break k}m=i[a+60>>2]}n=n+1|0;i[a+72>>2]=n;c=W(m);l=i[a+80>>2];n:{if(l&8192){o=o+1|0;p=((l&268435968)==268435968)+p|0;break n}q=W(i[a+56>>2])+q|0}r=c+r|0;a=i[a+68>>2];if(!a){break j}s=W(a)+s|0;break j}i[a+72>>2]=0}l=b+4|0;a=i[b>>2];if(a){continue}break i}}while(1){b=l;o:{if(!(!(j[a+81|0]&8)|!i[22472])){i[a+72>>2]=0;break o}n=n+1|0;i[a+72>>2]=n;c=W(i[a+60>>2]);l=i[a+80>>2];p:{if(l&8192){o=o+1|0;p=((l&268435968)==268435968)+p|0;break p}q=W(i[a+56>>2])+q|0}r=c+r|0;a=i[a+68>>2];if(!a){break o}s=W(a)+s|0}l=b+4|0;a=i[b>>2];if(a){continue}break}}i[22492]=(i[22492]+n|0)+1;i[d>>2]=n;i[e>>2]=o;i[f>>2]=r;i[g>>2]=q;i[h>>2]=s;i[k>>2]=p}function Pg(a){var b=0,c=0,d=0,e=0,f=0;d=S-80|0;S=d;Vg(a);Ga(0,1);i[22430]=i[22428];i[22424]=pd(a);if(i[21886]){V(i[22423],8105,63477,0);a=i[22423];b=i[22424];c=Y(b);Je(a,63494,i[22007],b,c)}c=i[22428];Cb(c);a=i[c+80>>2];if(a&65536){b=c;if(i[21886]>=1){i[d+48>>2]=i[c+76>>2];V(i[22423],1065,63512,d+48|0);a=i[c+80>>2]}i[b+80>>2]=a&-65537}i[22674]=i[22674]+1;aa(i[22424],c,d+72|0);e=n[d+72>>3];if(!(e>n[11144]^1)){if(i[21886]>=1){a=i[c+76>>2];n[d+32>>3]=e;i[d+40>>2]=a;V(i[22423],1060,63599,d+32|0)}a=i[22428];a:{if(!a){break a}b=i[a+48>>2];if(!b){break a}while(1){i[a+80>>2]=i[a+80>>2]^4096;a=b;b=i[a+48>>2];if(b){continue}break}}Cb(c)}a=i[22428];b:{if(!a){break b}while(1){b=i[a+48>>2];if(!b){break b}if((a|0)!=(c|0)){Cb(a);a=i[a+48>>2]}else{a=b}if(a){continue}break}}b=89712;c:{d:{while(1){a=i[b>>2];if(!a|!i[a+48>>2]){break d}b=i[a+80>>2];if(b&65536){c=a;if(i[21886]>=1){i[d+16>>2]=i[a+76>>2];V(i[22423],1066,63512,d+16|0);b=i[a+80>>2]}i[c+80>>2]=b&-65537}b=a+48|0;i[22674]=i[22674]+1;aa(i[22424],a,d+72|0);if(n[d+72>>3]>n[11144]^1){continue}break}if(i[21886]>=1){V(i[22423],1031,63721,0)}a=i[22428];if(!a){break c}while(1){if(!i[a+48>>2]){break d}i[a+80>>2]=i[a+80>>2]&-65537^4096;Gd(a);a=i[a+48>>2];if(a){continue}break}}c=i[22428];if(!c){break c}e=1.7976931348623157e+308;while(1){if(i[c+48>>2]){if(!pe(c)){e:{if(!(i[21863]|!i[21874])){sa(63903);a=i[22423];f:{if(i[21995]){V(a,6240,63946,0);break f}V(a,6239,64219,0)}He(i[22423],64550,i[22428]);a=1;break e}sa(64611);i[d>>2]=i[c+76>>2];V(i[22423],6154,64635,d);a=2}X(a,0,0)}b=i[c+60>>2];g:{if(!b){break g}a=i[b+4>>2];if(!a){break g}b=b+4|0;while(1){f=bb(i[c+24>>2],i[a+24>>2]);e=e>f?f:e;a=i[b+4>>2];b=b+4|0;if(a){continue}break}}c=i[c+48>>2];if(c){continue}}break}if(i[21908]|e<-.99999999^1){break c}i[22320]=1;n[d+64>>3]=e+1;ia(64730,0,d- -64|0);if(!i[21926]|(i[21973]|e<-.999999999999999^1)){break c}jg(i[22423],e)}i[22934]=i[22007]+1;Wa(i[22428]);Yc(i[22428],1);if(i[21886]>=1){V(i[22423],8105,64743,0)}S=d+80|0}function vc(a,b,c,d,e){var f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0;f=S-240|0;S=f;k=bb(i[b+24>>2],i[c+24>>2]);g=W(d);j=i[22007];a:{if((j|0)==3){i[f+180>>2]=g;i[f+176>>2]=g;V(a,9195,16418,f+176|0);break a}if(!((j|0)!=4|i[21876]<0)){V(a,9196,16436,0);break a}i[22483]=i[22483]+1}g=i[b+76>>2];i[f+164>>2]=i[c+76>>2];i[f+160>>2]=g;V(a,9197,16447,f+160|0);b:{if(!d){break b}j=i[d+4>>2];if(!j){break b}l=1-k*k;q=1/(n[11145]*10);m=d+8|0;while(1){i[22680]=i[22680]+2;aa(i[j+8>>2],b,f+232|0);aa(i[j+8>>2],c,f+224|0);o=Mb(k*n[f+224>>3]-n[f+232>>3],l,q,f+188|0);p=Mb(k*n[f+232>>3]-n[f+224>>3],l,q,f+184|0);c:{d:{e:{f:{g:{g=i[22007];h:{if(g){d=i[f+184>>2]|i[f+188>>2];o=d?0:o;p=d?0:p;r=i[c+24>>2];s=i[b+24>>2];t=i[j+8>>2];d=g;while(1){d=d+ -1|0;h=d<<3;n[h+(f+192|0)>>3]=n[h+t>>3]+o*n[h+s>>3]+p*n[h+r>>3];if(d){continue}break}if(i[21918]>=4){break h}if((g|0)<1){g=0;break e}d=0;h=i[21876];if((g|0)==4){g=(h|0)!=0;if((h|0)!=1){n[(f+192|g<<3)>>3]=n[f+200>>3];g=g+1|0}if((h|0)!=2){n[(f+192|0)+(g<<3)>>3]=n[f+208>>3];g=g+1|0}if((h|0)!=3){break g}break f}while(1){n[(f+192|0)+(d<<3)>>3]=(d|0)!=(h|0)?n[(f+192|0)+(d<<3)>>3]:0;d=d+1|0;if((g|0)!=(d|0)){continue}break}break f}g=0;if(i[21918]<4){break e}}n[f+144>>3]=n[f+208>>3];n[f+152>>3]=n[f+216>>3];n[f+128>>3]=n[f+192>>3];n[f+136>>3]=n[f+200>>3];V(a,9199,16489,f+128|0);break c}n[(f+192|0)+(g<<3)>>3]=n[f+216>>3];g=g+1|0}if((g|0)>2){break d}}d=g<<3;fa(d+(f+192|0)|0,0,24-d|0)}n[f+112>>3]=n[f+208>>3];n[f+96>>3]=n[f+192>>3];n[f+104>>3]=n[f+200>>3];V(a,9198,16468,f+96|0)}g=i[f+184>>2];h=i[f+188>>2];d=Y(i[j+8>>2]);i:{if((h|0)!=(0-g|0)){i[f+80>>2]=d;V(a,9200,16516,f+80|0);break i}i[f+64>>2]=d;V(a,9201,16538,f- -64|0)}j=i[m>>2];m=m+4|0;if(j){continue}break}}b=i[22007];j:{if((b|0)==3){k=n[e>>3];l=n[e+8>>3];n[f+16>>3]=n[e+16>>3];n[f+8>>3]=l;n[f>>3]=k;V(a,9202,14795,f);break j}if((b|0)!=4|i[21876]<0){break j}k=n[e>>3];l=n[e+8>>3];n[f+48>>3]=n[e+16>>3];n[f+40>>3]=l;n[f+32>>3]=k;V(a,9203,16553,f+32|0)}S=f+240|0}function qh(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,p=0,q=0,r=0,s=0;k=S+ -64|0;S=k;a:{b:{c:{d:{e:{if(!i[21977]){if((c|0)<=0){p=i[22007];g=-1.7976931348623157e+308;break c}q=c+ -1|0;p=i[22007];b=o(p,b);r=(b<<3)+a|0;m=i[21874];if(!i[21976]){break e}g=-1.7976931348623157e+308;if(m){break d}m=(b|0)>0;while(1){if((h|0)==(q|0)){d=j}else{d=-1.7976931348623157e+308;e=1.7976931348623157e+308;b=a;if(m){while(1){f=n[(h<<3)+b>>3];e=e>f?f:e;d=d<f?f:d;b=(p<<3)+b|0;if(b>>>0<r>>>0){continue}break}}f=d-e;j=j<f?f:j;e=-e;d=d<e?e:d}g=g<d?d:g;l=l+d;h=h+1|0;if((h|0)!=(c|0)){continue}break}break c}d=n[11144];break b}g=-1.7976931348623157e+308;if(!m){q=(b|0)<1;while(1){d=-1.7976931348623157e+308;e=1.7976931348623157e+308;b=a;if(!q){while(1){f=n[(h<<3)+b>>3];e=e>f?f:e;d=d<f?f:d;b=(p<<3)+b|0;if(b>>>0<r>>>0){continue}break}}f=d-e;j=j<f?f:j;e=-e;d=d<e?e:d;g=g<d?d:g;l=l+d;h=h+1|0;if((h|0)!=(c|0)){continue}break}break c}m=(b|0)>0;while(1){f:{g:{if((h|0)!=(q|0)){d=-1.7976931348623157e+308;e=1.7976931348623157e+308;b=a;if(!m){break g}while(1){f=n[(h<<3)+b>>3];e=e>f?f:e;d=d<f?f:d;b=(p<<3)+b|0;if(b>>>0<r>>>0){continue}break}break g}d=g*(g+g);break f}f=d-e;j=j<f?f:j;e=-e;d=d<e?e:d}g=g<d?d:g;l=l+d;h=h+1|0;if((h|0)!=(c|0)){continue}break}break c}m=(b|0)>0;while(1){if((h|0)==(q|0)){d=j}else{d=-1.7976931348623157e+308;e=1.7976931348623157e+308;b=a;if(m){while(1){f=n[(h<<3)+b>>3];e=e>f?f:e;d=d<f?f:d;b=(p<<3)+b|0;if(b>>>0<r>>>0){continue}break}}f=d-e;j=j<f?f:j;e=-e;d=d<e?e:d}g=g<d?d:g;l=l+d;h=h+1|0;if((h|0)!=(c|0)){continue}break}}d=+(p|0);e=g*w(d);e=e>l?l:e;d=(g+e*d*1.01)*2.220446049250313e-16;if(i[21963]){f=n[10982];s=g*f;d=d+s;b=i[21886];if((b|0)<4){break a}n[k+48>>3]=s;n[k+56>>3]=f;V(i[22423],4092,3844,k+48|0)}b=i[21886];if((b|0)<4){break a}n[k+32>>3]=l;n[k+40>>3]=e;n[k+16>>3]=d;n[k+24>>3]=g;V(i[22423],4008,3919,k+16|0)}b=i[21886]}d=t(d*3e4,6.661338147750939e-12);if((b|0)>=2){n[k>>3]=d;n[k+8>>3]=j;V(i[22423],2001,3066,k)}S=k- -64|0;return d}function Nh(a){var b=0,c=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0;c=S-96|0;S=c;a:{if(i[22992]==(i[21992]+ -1|0)){d=i[21986];i[21886]=d;i[22544]=d;break a}d=i[21886]}if((d|0)>=3){V(i[22423],3054,33743,0)}b=Lb();i[c+60>>2]=b;if((b|0)!=i[22496]){e=i[22423];f=W(b);i[c+52>>2]=W(i[22496]);i[c+48>>2]=f;V(e,6279,33777,c+48|0);X(5,0,0)}i[22496]=ba(i[22427]);kb(b);b:{if(!b){_(c+60|0);break b}d=b+4|0;f=0;while(1){h=i[d>>2];if(h){d=d+4|0;if(i[h+40>>2]!=7){continue}if(i[22992]==(i[21992]+ -1|0)){b=i[21986];i[21886]=b;i[22544]=b}f=1;b=Ab(i[h+16>>2]);e=Ab(i[h+20>>2]);if((b|0)==(e|0)){continue}if(!da(i[e+60>>2],b)){f=i[e+76>>2];p=i[b+76>>2];q=i[i[h+20>>2]+76>>2];i[c+32>>2]=i[i[h+16>>2]+76>>2];i[c+36>>2]=q;i[c+40>>2]=p;i[c+44>>2]=f;V(i[22423],6096,33877,c+32|0);ca(5,b,e)}k=qb(b,e,c+88|0,c+80|0);j=qb(e,b,c+72|0,c- -64|0);Kh(b,k,e,j);c:{d:{e:{if(!(k<j^1)){if(!(g[e+82|0]&1)|g[b+82|0]&1|j<(n[11157]+n[11144])*50^1){break e}break d}if(!(k<(n[11157]+n[11144])*50)|(!(g[b+82|0]&1)|g[e+82|0]&1)){break d}}f=e;j=k;e=b;break c}n[c+88>>3]=n[c+72>>3];n[c+80>>3]=n[c+64>>3];f=b}ob(e,f,i[h+40>>2],c+88|0,c+80|0,0);e=Ca();f:{if(g[b+82|0]&1){i[22814]=i[22814]+1;m=m+1|0;break f}o=o+1|0}l=e+l|0;f=1;if(!i[21958]){continue}i[22720]=i[22720]+1;n[11362]=j+n[11362];if(n[11361]<j^1){continue}n[11361]=j;continue}break}b=i[c+60>>2];g:{if(!b){break g}d=i[b+4>>2];if(!d){break g}b=b+8|0;while(1){h:{if(i[d+40>>2]==7){$(d,48);break h}Z(89984,d)}d=i[b>>2];b=b+4|0;if(d){continue}break}}_(c+60|0);if(!f){break b}d=i[22431];i:{if(!d){break i}while(1){if(!i[d+48>>2]){break i}b=i[d+80>>2];j:{if(!(b&2097152)){break j}i[d+80>>2]=b&-14680065;if((W(i[d+60>>2])|0)>=i[22007]){break j}la(d,d,10,0,1);if(i[21886]<2){break j}i[c+16>>2]=i[d+76>>2];i[c+20>>2]=i[22007];V(i[22423],2107,33993,c+16|0)}d=i[d+48>>2];if(d){continue}break}}l=Ca()+l|0}k:{if(!(m|o)){break k}i[a>>2]=1;if(i[21886]<1){break k}i[c>>2]=o;i[c+4>>2]=m;i[c+8>>2]=l;V(i[22423],1011,34067,c)}S=c+96|0}function De(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0;c=S-96|0;S=c;a:{b:{if(a){d=i[22428];break b}c:{d=i[22431];if(!d){break c}b=d;while(1){f=b;b=i[b+48>>2];if(!b){break c}g=i[i[f+60>>2]+4>>2];if(i[f+24>>2]?!(!(j[g+81|0]&32)|j[f+82|0]&33):0){continue}break}i[22495]=0;if(i[21886]<2){break a}a=i[g+76>>2];i[c+80>>2]=i[f+76>>2];i[c+84>>2]=a;V(i[22423],2013,31217,c+80|0);break a}if(!i[21897]|!i[22495]){break b}e=1;if(i[21886]<2){break a}V(i[22423],2011,31069,0);break a}d:{if(!d){break d}while(1){if(!i[d+48>>2]){break d}i[22493]=i[22493]+1;e:{f=i[d+60>>2];if(!f){break e}b=i[f+4>>2];l=W(f);if((l|0)<1){break e}e=0;f=0;f:{if(!a){while(1){g:{if(!e){f=b;break g}g=i[(i[d+52>>2]+(e<<2)|0)+4>>2];i[g+20>>2]=i[22493];i[22688]=i[22688]+1;aa(i[g+8>>2],b,c+88|0);h=n[c+88>>3];k=n[11144];if(h>=k*-2^1){break g}i[22495]=0;if(!i[21897]|h>k){break f}}e=e+1|0;b=i[(i[d+60>>2]+(e<<2)|0)+4>>2];if((e|0)!=(l|0)){continue}break}if(!f|a){break e}b=i[f+52>>2];if(!b){break e}e=b+4|0;g=i[22493];while(1){b=i[e>>2];if(!b){break e}e=e+4|0;if((g|0)==i[b+20>>2]){continue}break}i[22688]=i[22688]+1;aa(i[b+8>>2],d,c+88|0);h=n[c+88>>3];k=n[11144];if(h>=k*-2^1){break e}i[22495]=0;if(i[21897]?!(h>k):0){break e}e=0;if(i[21886]<2){break a}a=i[b+16>>2];b=i[f+76>>2];d=i[d+76>>2];n[c+32>>3]=h;i[c+16>>2]=d;i[c+20>>2]=b;i[c+24>>2]=a;V(i[22423],2060,31415,c+16|0);break a}while(1){h:{g=i[(i[d+52>>2]+(e<<2)|0)+4>>2];i[g+20>>2]=i[22493];i[22688]=i[22688]+1;aa(i[g+8>>2],b,c+88|0);h=n[c+88>>3];if(!(h>=n[11144]*-2^1)){break h}e=e+1|0;b=i[(i[d+60>>2]+(e<<2)|0)+4>>2];if((e|0)!=(l|0)){continue}break e}break}i[22495]=0}e=0;if(i[21886]<2){break a}a=i[g+16>>2];b=i[b+76>>2];d=i[d+76>>2];n[c- -64>>3]=h;i[c+48>>2]=d;i[c+52>>2]=b;i[c+56>>2]=a;V(i[22423],2014,31343,c+48|0);break a}d=i[d+48>>2];if(d){continue}break}}e=1;if(i[21886]<2){break a}b=i[21897];i[c>>2]=a;i[c+4>>2]=a?31202:b?31168:31202;V(i[22423],2012,31127,c)}S=c+96|0;return e}function Ja(a,b,c){var d=0,e=0,f=0,g=0;g=S-16|0;S=g;i[22493]=i[22493]+1;a:{if(!(!c|b|i[22428]!=(a|0))){i[g+12>>2]=ba(i[22444]);d=i[22440];if(!d){break a}while(1){if(!i[d>>2]){break a}i[d+20>>2]=i[22493];Z(g+12|0,d);d=i[d>>2];if(d){continue}break}break a}i[g+12>>2]=ba(i[22427]);if(!a){break a}if(c){while(1){f=a;a=i[a+48>>2];if(!a){break a}e=i[f+52>>2];b:{if(!e){break b}d=i[e+4>>2];if(!d){break b}e=e+8|0;while(1){a=i[22493];if((a|0)!=i[d+20>>2]){i[d+20>>2]=a;Z(g+12|0,d)}d=i[e>>2];e=e+4|0;if(d){continue}break}a=i[f+48>>2]}if(a){continue}break a}}while(1){if(!i[a+48>>2]){break a}c:{d:{e:{if(i[21922]){d=i[21920];if(j[a+82|0]&8){break e}d=i[a+60>>2];if(!d){break c}d=d+4|0;while(1){f=i[d>>2];if(!f){break c}d=d+4|0;if(!(j[f+82|0]&8)){continue}break}break d}d=i[a+80>>2]&524288;if(i[21920]){break e}d=i[a+24>>2];if(!d){break c}d=qa(d,0)}if(!d){break c}}f=i[a+52>>2];if(!f){break c}d=i[f+4>>2];if(!d){break c}e=f+8|0;while(1){f=i[22493];if((f|0)!=i[d+20>>2]){i[d+20>>2]=f;Z(g+12|0,d)}d=i[e>>2];e=e+4|0;if(d){continue}break}}a=i[a+48>>2];if(a){continue}break}}f:{if(!b){break f}e=i[b+4>>2];if(!e){break f}d=b+8|0;if(c){while(1){a=d;b=i[e+52>>2];g:{if(!b){break g}d=i[b+4>>2];if(!d){break g}e=b+8|0;while(1){b=i[22493];if((b|0)!=i[d+20>>2]){i[d+20>>2]=b;Z(g+12|0,d)}d=i[e>>2];e=e+4|0;if(d){continue}break}}d=a+4|0;e=i[a>>2];if(e){continue}break f}}while(1){a=d;h:{i:{j:{if(i[21922]){b=i[21920];if(j[e+82|0]&8){break j}b=i[e+60>>2];if(!b){break h}d=b+4|0;while(1){b=i[d>>2];if(!b){break h}d=d+4|0;if(!(j[b+82|0]&8)){continue}break}break i}b=i[e+80>>2]&524288;if(i[21920]){break j}b=i[e+24>>2];if(!b){break h}b=qa(b,0)}if(!b){break h}}b=i[e+52>>2];if(!b){break h}d=i[b+4>>2];if(!d){break h}e=b+8|0;while(1){b=i[22493];if((b|0)!=i[d+20>>2]){i[d+20>>2]=b;Z(g+12|0,d)}d=i[e>>2];e=e+4|0;if(d){continue}break}}d=a+4|0;e=i[a>>2];if(e){continue}break}}S=g+16|0;return i[g+12>>2]}function df(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0;d=S-32|0;S=d;if(i[21886]>=3){i[d+16>>2]=88056;V(i[22423],3024,10168,d+16|0)}if(!(i[21922]|i[21920]|(i[21911]|!(i[21879]|i[21882])?!(i[21890]|(i[21887]|i[21874])|n[10946]<8.988465674311579e+307):0))){i[21920]=1;ia(10198,0,0)}if(i[21960]){a:{if(!(i[21999]|(!i[21874]|i[22007]!=4))){if(i[21876]<0){break a}}V(i[22423],6215,10204,0);X(1,0,0)}i[21956]=1;i[21876]=3}a=28;while(1){c=b;b=1;b:{c:{d:{e:{f:{e=a;a=i[(a<<2)+87708>>2];switch(a+ -3|0){case 0:case 17:break e;case 10:case 12:break f;case 4:break b;default:break d}}g=1;break c}f=1;break c}b=i[21884];if(!(b|(a|0)!=19)){V(i[22423],6053,10286,0);X(1,0,0);break c}if((a|0)==25){if(!(b|i[21999])){break c}V(i[22423],6054,10371,0);X(1,0,0);break c}b=i[21999];if(!(!b|(a|0)!=4)){V(i[22423],6055,10480,0);X(1,0,0);break c}if((a|0)!=26){break c}if(b){ia(10556,0,0);break c}ia(10565,0,0)}b=c}a=e+ -1|0;if(e){continue}break}if(!(!f|!i[21874]|(!i[21926]|n[11231]<8.988465674311579e+307^1))){V(i[22423],7041,10575,0)}if(!(!g|(i[21999]?0:i[22007]<=3))){V(i[22423],6056,10682,0);X(1,0,0)}g:{if(!b){break g}if(i[22007]>=5){V(i[22423],6057,10811,0);X(1,0,0)}if(!(!i[21923]|(i[21875]+(i[21957]+(i[21919]+(i[21916]+i[21917]|0)|0)|0)|0)!=(0-i[21956]|0))){V(i[22423],6058,10887,0);X(1,0,0)}if(!(!i[21999]|(i[21876]<0?i[22007]<=3:0))){V(i[22423],6059,10941,0);X(1,0,0)}if(!(i[21916]|(i[21957]|i[21917]))|(i[22007]!=4|i[21876]!=-1)){break g}V(i[22423],7042,11012,0);i[21916]=0;i[21917]=0;i[21957]=0}h:{if(i[21911]|(i[21889]|i[21888])|(i[21917]!=0&i[21957]!=0?0:!f)){break h}if(i[22487]){V(i[22423],7072,11141,0);break h}i[21888]=1;ia(11242,0,0)}c=i[22007];i[21918]=c;a=i[21876];i:{if((a|0)>=0){if((a|0)<(c|0)){i[21918]=c+ -1;if((c|0)>2?b:0){break i}i[d>>2]=a;V(i[22423],7043,11252,d);break i}i[21876]=-1;break i}if(!i[21999]){break i}b=c+ -1|0;i[21918]=b;i[21876]=b}S=d+32|0}function Ie(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=S-320|0;S=d;e=i[3745];i[d+144>>2]=i[3744];i[d+148>>2]=e;e=i[3743];i[d+136>>2]=i[3742];i[d+140>>2]=e;e=i[3741];i[d+128>>2]=i[3740];i[d+132>>2]=e;j=i[22454];a:{if((j|0)==2){g=i[b+40>>2];if(g){break a}g=Da(b);i[b+40>>2]=g;break a}g=Da(b)}V(a,9072,14136,0);b:{if(i[22509]){i[22509]=0;i[d+112>>2]=i[b+76>>2];V(a,9073,14177,d+112|0);break b}i[d+96>>2]=i[b+76>>2];V(a,9074,14350,d+96|0)}e=i[i[b+52>>2]+4>>2];aa(i[e+8>>2],b,d+152|0);k=Ia(i[e+8>>2],b,n[d+152>>3]);f=i[22007];c:{if(!f){break c}l=i[b+24>>2];e=f;while(1){e=e+ -1|0;h=e<<3;n[h+(d+224|0)>>3]=n[h+k>>3]-n[g+h>>3];n[(d+160|0)+h>>3]=n[h+l>>3];if(e){continue}break}d:{switch(f+ -2|0){case 0:i[d+176>>2]=0;i[d+180>>2]=0;i[d+240>>2]=0;i[d+244>>2]=0;break c;case 2:break d;default:break c}}f=i[21876];e=(f|0)!=0;if((f|0)!=1){n[(d+224|e<<3)>>3]=n[d+232>>3];e=e+1|0}if((f|0)!=2){n[(d+224|0)+(e<<3)>>3]=n[d+240>>3];e=e+1|0}if((f|0)!=3){n[(d+224|0)+(e<<3)>>3]=n[d+248>>3];e=e+1|0}if((e|0)<3){e=e<<3;fa(e+(d+224|0)|0,0,24-e|0)}e=(f|0)!=0;if((f|0)!=1){n[(d+160|e<<3)>>3]=n[d+168>>3];e=e+1|0}if((f|0)!=2){n[(d+160|0)+(e<<3)>>3]=n[d+176>>3];e=e+1|0}if((f|0)!=3){n[(d+160|0)+(e<<3)>>3]=n[d+184>>3];e=e+1|0}if((e|0)<3){e=e<<3;fa(e+(d+160|0)|0,0,24-e|0)}_a(d+160|0,i[21918],1)}Ch(d+224|0,d+160|0,d+192|0);n[d+80>>3]=n[d+240>>3];n[d+64>>3]=n[d+224>>3];n[d+72>>3]=n[d+232>>3];V(a,9075,14394,d- -64|0);n[d+48>>3]=n[d+208>>3];n[d+32>>3]=n[d+192>>3];n[d+40>>3]=n[d+200>>3];V(a,9076,14394,d+32|0);n[d+16>>3]=n[d+176>>3];n[d>>3]=n[d+160>>3];n[d+8>>3]=n[d+168>>3];V(a,9077,14394,d);tc(a,g);V(a,9078,14415,0);$(k,i[22425]);e=i[22007];if(e){f=e<<3;b=i[b+24>>2];e:{if(b){oa(d+288|0,b,f);break e}fa(d+288|0,0,f)}while(1){e=e+ -1|0;b=e<<3;n[b+(d+256|0)>>3]=n[b+g>>3]+n[b+(d+288|0)>>3]*c;if(e){continue}break}}Rb(a,g,d+256|0,d+128|0);if((j|0)!=2){$(g,i[22425])}S=d+320|0}function Pa(a){var b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0;h=S-48|0;S=h;d=i[a+80>>2];a:{if(!(d&8192)){break a}f=a;if(i[21886]>=4){i[h+32>>2]=i[a+76>>2];V(i[22423],4027,35700,h+32|0);d=i[a+80>>2]}i[f+80>>2]=d&-8193;b:{d=i[a+60>>2];if(!d){break b}c=d+4|0;c:while(1){l=b;while(1){d=i[c>>2];c=c+4|0;b=1;d:{switch(d|0){case 0:break b;case 2:continue c;default:break d}}i[d+80>>2]=i[d+80>>2]&-16385;continue}}}b=i[a+56>>2];e:{if(!b){break e}e=i[b+4>>2];if(!e){break e}b=b+8|0;while(1){c=i[e+4>>2];if((c|0)==(a|0)){c=i[e+8>>2]}i[c+80>>2]=i[c+80>>2]|16384;e=i[b>>2];b=b+4|0;if(e){continue}break}}b=i[a+60>>2];f:{if(!b){break f}c=i[b+4>>2];k=W(b);if((k|0)<1){break f}m=a+56|0;e=0;if(!l){while(1){g:{if(j[c+81|0]&64|(c|0)==2){break g}b=_c();i[b>>2]=lb(i[a+52>>2],i[22007],e,0);f=b;h:{if((i[a+80>>2]>>>12^e)&1){i[b+8>>2]=c;i[b+4>>2]=a;d=j[b+16|0]|32;g[b+16|0]=d;d=i[c+80>>2]>>>7&64|d&-65;break h}i[b+8>>2]=a;i[b+4>>2]=c;d=j[b+16|0]&-97|j[c+81|0]&32|64}g[f+16|0]=d;if(j[a+83|0]&8){g[b+16|0]=d|2}Z(m,b);if(i[21886]>=5){d=i[c+76>>2];f=i[a+76>>2];i[h>>2]=i[b+12>>2];i[h+4>>2]=f;i[h+8>>2]=d;V(i[22423],5005,35736,h)}Z(c+56|0,b);if(i[22448]!=i[22436]){break g}i[22437]=b}e=e+1|0;c=i[(i[a+60>>2]+(e<<2)|0)+4>>2];if((e|0)!=(k|0)){continue}break f}}while(1){i:{if(j[c+81|0]&64|(c|0)==2){break i}b=_c();i[b>>2]=lb(i[a+52>>2],i[22007],e,0);d=b;j:{if((i[a+80>>2]>>>12^e)&1){i[b+8>>2]=c;i[b+4>>2]=a;f=j[b+16|0]|32;g[b+16|0]=f;f=i[c+80>>2]>>>7&64|f&-65;break j}i[b+8>>2]=a;i[b+4>>2]=c;f=j[b+16|0]&-97|j[c+81|0]&32|64}g[d+16|0]=f;Z(m,b);if(i[21886]>=5){d=i[c+76>>2];f=i[a+76>>2];i[h+16>>2]=i[b+12>>2];i[h+20>>2]=f;i[h+24>>2]=d;V(i[22423],5005,35736,h+16|0)}Z(c+56|0,b);if(i[22448]!=i[22436]){break i}i[22437]=b}e=e+1|0;c=i[(i[a+60>>2]+(e<<2)|0)+4>>2];if((e|0)!=(k|0)){continue}break}}if(!l){break a}while(1){if(ja(i[a+60>>2],2)){continue}break}}S=h+48|0}function qe(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0;k=S-16|0;S=k;if(i[21886]>=3){V(i[22423],3012,47729,0)}if(i[21869]){gd()}i[22492]=i[22492]+1;e=i[22432];a:{if(!e){break a}while(1){if(!(j[e+81|0]&8)){break a}i[e+72>>2]=i[22492];a=i[e+56>>2];b:{if(!a){break b}b=i[a+4>>2];if(!b){break b}f=a+8|0;while(1){a=i[b+4>>2];if((e|0)==(a|0)){a=i[b+8>>2]}c=i[a+80>>2];if(!((c&10240)!=8192?i[a+72>>2]!=i[22492]:0)){if(!(c&2048)){ja(i[a+56>>2],b)}dc(b)}b=i[f>>2];f=f+4|0;if(b){continue}break}}e=i[e+48>>2];if(e){continue}break}}if(i[21886]>=1){V(i[22423],1017,47773,0)}d=i[22431];c:{if(!d){break c}while(1){if(!i[d+48>>2]){break c}h=i[i[d+60>>2]+4>>2];l=h+60|0;c=i[h+60>>2];d:{if(j[h+81|0]&32){e:{if(!c){break e}a=i[c+4>>2];if(!a){break e}f=c+8|0;c=0;f:{while(1){e=f;g:{if(!(j[a+81|0]&8)){break g}if(!c){c=a;break g}if(Xd(i[d+52>>2],0,i[h+52>>2],(e-i[h+60>>2]|0)+ -8>>2)){break f}}f=e+4|0;a=i[e>>2];if(a){continue}break}a=c;if(!a){break e}}i[a+32>>2]=d;Aa(i[l>>2],a,d);break d}a=i[d+76>>2];i[k>>2]=i[h+76>>2];i[k+4>>2]=a;V(i[22423],6102,47830,k);ca(5,h,d);break d}h:{if(!c){break h}b=i[c+4>>2];if(!b){break h}a=c+4|0;f=a+4|0;while(1){i:{if(!(j[b+81|0]&8)){a=f;break i}i[b+32>>2]=d;c=i[l>>2];Ta(c,(f-c|0)+ -8>>2)}f=a+4|0;b=i[a>>2];if(b){continue}break}}Z(l,d);a=i[i[d+56>>2]+4>>2];if(i[a+4>>2]==(h|0)){i[a+8>>2]=d;g[a+16|0]=j[a+16|0]|64;break d}i[a+4>>2]=d;g[a+16|0]=j[a+16|0]|32}d=i[d+48>>2];if(d){continue}break}}if(i[21886]>=4){V(i[22423],4094,47935,0)}b=i[22432];j:{if(!b){break j}while(1){if(!(j[b+81|0]&8)){break j}a=i[b+56>>2];if(a){i[a+4>>2]=0}i[i[b+60>>2]+4>>2]=0;b=i[b+48>>2];if(b){continue}break}}i[22472]=1;i[22473]=0;k:{if(!i[21958]){break k}b=i[22432];if(!b){break k}while(1){if(!(j[b+81|0]&8)){break k}if(!i[b+32>>2]){i[22780]=i[22780]+1}b=i[b+48>>2];if(b){continue}break}}S=k+16|0}function Th(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=S-16|0;S=d;if(i[21886]>=1){V(i[22423],1042,20864,0)}g=ba(c);i[22445]=0;i[d+12>>2]=g;if(c){e=g+4|0;l=i[22007]<<3;f=c;while(1){i[e>>2]=b;e=e+4|0;b=b+l|0;f=f+ -1|0;if(f){continue}break}}fb(g,c);a:{if(!a){break a}b=i[a+4>>2];if(!b){break a}e=a+8|0;while(1){a=Y(i[b+8>>2]);if((a|0)>=0){i[(i[d+12>>2]+(a<<2)|0)+4>>2]=0}b=i[e>>2];e=e+4|0;if(b){continue}break}}a=Y(i[21880]);if(!((a|0)<0|(a|0)==(i[21982]+ -1|0)|(a|0)==(i[21983]^-1))){i[(i[d+12>>2]+(a<<2)|0)+4>>2]=0}a=i[21883];b:{if(i[21899]|(!a|!i[21911])){break b}a=Y(a);if((a|0)<0){break b}i[(i[d+12>>2]+(a<<2)|0)+4>>2]=0}b=i[21865];c:{if(b){break c}i[22996]=i[22009]+(i[22007]^-1);b=0;f=i[22428];if(!f){break c}h=n[11233];j=n[10930]*+((i[21899]?2:1)|0);m=(j<h?h:j)*+((i[22992]>50?2:1)|0);l=i[22443];h=-1.7976931348623157e+308;while(1){if(i[f+48>>2]){i[f+64>>2]=Ba(((c|0)/(l|0)|0)+100|0);g=f- -64|0;d:{e:{k=i[d+12>>2];if(!k){c=0;break e}b=i[k+4>>2];c=0;e=0;a=0;k=W(k);if((k|0)<1){break e}while(1){f:{if(!b){break f}i[22912]=i[22912]+1;aa(b,f,d);j=n[d>>3];if(!(j<m^1)){i[(i[d+12>>2]+(c<<2)|0)+4>>2]=b;c=c+1|0;break f}i[22445]=i[22445]+1;if(!a){a=b;h=j;break f}if(!(j>h^1)){Z(g,a);h=n[d>>3];a=b;break f}Z(g,b)}e=e+1|0;b=i[(i[d+12>>2]+(e<<2)|0)+4>>2];if((e|0)!=(k|0)){continue}break}if(!a){break e}Z(g,a);n[f>>3]=h;break d}ga(g)}l=l+ -1|0;fb(i[d+12>>2],c);f=i[f+48>>2];if(f){continue}}break}b=i[21865]}if(i[22006]|(i[21889]|(i[21888]|(i[21899]|b)))){b=0;i[22474]=1;a=i[d+12>>2];g:{if(!a){break g}e=i[a+4>>2];a=W(a);if((a|0)<1){break g}while(1){if(e){nd(e,i[22428])}b=b+1|0;e=i[(i[d+12>>2]+(b<<2)|0)+4>>2];if((a|0)!=(b|0)){continue}break}}i[22474]=0}i[22912]=i[22912]+i[22910];i[22910]=0;_(d+12|0);if(i[21886]>=4){Kb(i[22428])}S=d+16|0}function Vc(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,o=0;f=S-48|0;S=f;a:{if(!a){break a}g=i[a+48>>2];if(g){c=g;d=a;while(1){e=(i[d+80>>2]>>>19&1)+e|0;d=c;c=i[c+48>>2];if(c){continue}break}}if(!(!g|(i[21899]|i[21882]<1))){d=a;while(1){k=i[d+80>>2];b:{if(!(k&524288)){break b}c:{c=i[d+52>>2];if(!c){break c}o=i[21883];c=c+4|0;while(1){l=i[c>>2];if(!l){break c}c=c+4|0;if(i[l+8>>2]!=(o|0)){continue}break}break b}i[d+80>>2]=k&-524289;e=e+ -1|0}d=g;g=i[d+48>>2];if(g){continue}break}}if(!e|!i[21879]){break a}c=a;while(1){if(!i[c+48>>2]){break a}d:{if(!(j[c+82|0]&8)|!i[c+24>>2]){break d}i[22678]=i[22678]+1;aa(i[21880],c,f+32|0);if((i[21879]>0|0)==(n[f+32>>3]>0|0)){break d}i[c+80>>2]=i[c+80>>2]&-524289;e=e+ -1|0}c=i[c+48>>2];if(c){continue}break}}e:{f:{if(!i[21881]){break f}d=0;if(i[22457]?0:!(b|e)){break f}h=1.7976931348623157e+308;g:{if(!a){break g}while(1){if(!i[a+48>>2]){break g}h:{if(!(j[a+82|0]&8)){break h}c=i[a+24>>2];if(!c){break h}if(qa(c,f+40|0)){break h}i[a+80>>2]=i[a+80>>2]&-524289;e=e+ -1|0;m=n[f+40>>3];if(m<h^1){break h}d=a;h=m}a=i[a+48>>2];if(a){continue}break}}if(!e){e=0;a=i[22457];if(a?0:b){break f}i:{if(!a){break i}if(j[a+81|0]&8){i[22457]=0;break i}qa(i[a+24>>2],f+40|0);if(n[f+40>>3]<h^1){break i}d=i[22457]}if(!d){break f}a=i[22457];if((a|0)==(d|0)){break f}if(a){i[a+80>>2]=i[a+80>>2]&-524289}i[22457]=d;i[d+80>>2]=i[d+80>>2]|524288;c=1;if(i[21886]<2){break e}i[f+16>>2]=i[d+76>>2];n[f+24>>3]=h;V(i[22423],2044,61939,f+16|0);break e}a=i[22457];if(!a){break f}i[a+80>>2]=i[a+80>>2]&-524289;i[22457]=0}i[22770]=i[22770]+e;if(i[21886]>=2){c=i[22423];a=f;g=i[22457];d=-1;j:{if(!g){break j}d=i[g+76>>2]}i[a+8>>2]=d;i[f+4>>2]=b;i[f>>2]=e;V(c,2045,61989,f)}c=i[21882]<1?e:i[21899]|e?e:b}S=f+48|0;return c}function ei(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0;d=S-96|0;S=d;i[d+48>>2]=0;i[d+52>>2]=0;i[d+40>>2]=0;i[d+44>>2]=0;i[d+32>>2]=0;i[d+36>>2]=0;e=i[3745];i[d+16>>2]=i[3744];i[d+20>>2]=e;e=i[3743];i[d+8>>2]=i[3742];i[d+12>>2]=e;e=i[3741];i[d>>2]=i[3740];i[d+4>>2]=e;a:{if(!(n[11231]<8.988465674311579e+307^1?!i[21899]:0)){Sa(b,d+72|0,d- -64|0);g=n[11240];h=n[11231];if(!(h<8.988465674311579e+307^1)){g=g-h*w(+i[22007])}h=g+n[d+72>>3];n[d+72>>3]=h;g=n[d+64>>3]-g;n[d+64>>3]=g;if(!(i[21957]|i[21917])){break a}k=h;h=n[11145]*.002;n[d+72>>3]=k+h;n[d+64>>3]=g-h;break a}i[d+64>>2]=0;i[d+68>>2]=0;i[d+72>>2]=0;i[d+76>>2]=0}e=bc(b);i[d+88>>2]=e;i[d+92>>2]=ba(W(e));b:{if(!e){break b}f=i[e+4>>2];if(!f){break b}e=e+4|0;while(1){i[22680]=i[22680]+1;aa(i[f+8>>2],b,d+80|0);Z(d+92|0,Ia(i[f+8>>2],b,n[d+80>>3]));f=i[e+4>>2];e=e+4|0;if(f){continue}break}}c:{if(!i[21925]){f=i[21921];if(f|i[21923]){break c}}wc(a,i[d+92>>2],b,n[d+72>>3],c);f=i[21921]}d:{e:{if(f){g=n[d+64>>3];break e}if(i[21925]|i[21923]){break d}g=n[d+64>>3];h=n[11145];if(n[d+72>>3]-g>(h+h)*.002^1){break d}}n[c+16>>3]=1-n[c+16>>3];n[c+8>>3]=1-n[c+8>>3];n[c>>3]=1-n[c>>3];wc(a,i[d+92>>2],b,g,c)}c=i[d+92>>2];f:{if(!c){break f}f=i[c+4>>2];if(!f){break f}e=c+4|0;while(1){$(f,i[22425]);f=i[e+4>>2];e=e+4|0;if(f){continue}break}}_(d+92|0);_(d+88|0);g:{if(!(i[21956]|i[21875])|(i[22472]?j[b+81|0]&8:0)){break g}i[b+72>>2]=i[22492];c=i[b+56>>2];if(!c){break g}f=i[c+4>>2];if(!f){break g}c=c+8|0;while(1){e=c;c=i[f+4>>2];if((c|0)==(b|0)){c=i[f+8>>2]}h:{if(i[c+72>>2]==i[22492]){break h}if(i[21875]){vc(a,b,c,i[f>>2],d+32|0)}if(!i[21956]){break h}c=i[f>>2];Rb(a,i[i[c+4>>2]+8>>2],i[i[c+8>>2]+8>>2],d)}c=e+4|0;f=i[e>>2];if(f){continue}break}}S=d+96|0}function hh(a){var b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;b=S-112|0;S=b;c=i[22007];if((c|0)>=3){u=a+8|0;d=a+4|0;v=(c|0)==3;o=c+ -2|0;p=o<<2;t=1;while(1){f=i[d>>2];c=i[f+80>>2];a:{if(c&8192|!(c&511)){break a}c=i[f+56>>2];if(!c){break a}d=i[c+4>>2];if(!d){break a}c=c+8|0;if(!v){while(1){f=c;b:{if((a|0)==(d|0)){break b}h=i[d>>2];k=i[a>>2];if(i[h+4>>2]!=i[k+4>>2]|i[(h+p|0)+4>>2]!=i[(k+p|0)+4>>2]){break b}c=1;while(1){c:{e=c<<2;if(i[(e+h|0)+4>>2]!=i[(e+k|0)+4>>2]){if((c|0)!=(o|0)){break b}break c}c=c+1|0;if((o|0)!=(c|0)){continue}}break}m=cd(d,b+108|0,b+96|0);d:{if(i[21886]<=1){l=n[b+96>>3];break d}q=i[m+16>>2];r=i[i[b+108>>2]+16>>2];s=i[i[d+8>>2]+76>>2];h=i[i[d+4>>2]+76>>2];k=i[i[a+8>>2]+76>>2];e=i[i[a+4>>2]+76>>2];c=i[d+12>>2];i[b- -64>>2]=i[a+12>>2];i[b+68>>2]=c;i[b+72>>2]=e;i[b+76>>2]=k;i[b+80>>2]=h;i[b+84>>2]=s;i[b+48>>2]=r;i[b+52>>2]=q;l=n[b+96>>3];n[b+56>>3]=l;V(i[22423],2069,36336,b+48|0)}mc(i[b+108>>2],m,9,l,a,d);g[d+16|0]=j[d+16|0]|8;g[a+16|0]=j[a+16|0]|8}c=f+4|0;d=i[f>>2];if(d){continue}break a}}while(1){f=c;e:{if((a|0)==(d|0)){break e}e=i[d>>2];c=i[a>>2];if(i[e+4>>2]!=i[c+4>>2]|i[(e+p|0)+4>>2]!=i[(c+p|0)+4>>2]|(o|0)!=1){break e}m=cd(d,b+108|0,b+96|0);f:{if(i[21886]<=1){l=n[b+96>>3];break f}q=i[m+16>>2];r=i[i[b+108>>2]+16>>2];s=i[i[d+8>>2]+76>>2];h=i[i[d+4>>2]+76>>2];k=i[i[a+8>>2]+76>>2];e=i[i[a+4>>2]+76>>2];c=i[d+12>>2];i[b+16>>2]=i[a+12>>2];i[b+20>>2]=c;i[b+24>>2]=e;i[b+28>>2]=k;i[b+32>>2]=h;i[b+36>>2]=s;i[b>>2]=r;i[b+4>>2]=q;l=n[b+96>>3];n[b+8>>3]=l;V(i[22423],2069,36336,b)}mc(i[b+108>>2],m,9,l,a,d);g[d+16|0]=j[d+16|0]|8;g[a+16|0]=j[a+16|0]|8}c=f+4|0;d=i[f>>2];if(d){continue}break}}c=t;t=0;d=u;if(c){continue}break}}S=b+112|0}function ee(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0;d=S-96|0;S=d;a:{if(!(i[21980]|(i[21879]|(i[21881]|i[21882])))){break a}if(!i[21911]){Vc(i[22428],0)}b:{if(!a){break b}e=i[a+48>>2];if(e){c=e;b=a;while(1){f=(i[b+80>>2]>>>19&1)+f|0;b=c;c=i[b+48>>2];if(c){continue}break}}b=i[21882];c:{if(!e|(!b|!i[21899]?(b|0)>=0:0)){break c}b=a;while(1){d:{if(!(j[b+82|0]&8)){b=e;break d}k=i[21883];g=i[21882];e:{f:{g:{c=i[b+52>>2];if(!c){break g}c=c+4|0;while(1){l=i[c>>2];if(!l){break g}c=c+4|0;if(i[l+8>>2]!=(k|0)){continue}break}if((g|0)<=0){break f}break e}if((g|0)>0){break f}break e}f=f+ -1|0;h:{if(f){break h}c=i[22423];if(i[21911]){a=Y(k);i[d+84>>2]=i[b+76>>2];i[d+80>>2]=a;V(c,7064,62068,d+80|0);break a}if((g|0)>=1){e=g+ -1|0;i[d+52>>2]=e;i[d+48>>2]=e;V(c,7065,62146,d+48|0);break h}e=g^-1;i[d+68>>2]=e;i[d+64>>2]=e;V(c,7066,62197,d- -64|0)}i[b+80>>2]=i[b+80>>2]&-524289;e=i[b+48>>2]}b=e;if(!b){break c}}e=i[b+48>>2];if(e){continue}break}}i:{if(!a){break i}b=0;if(!i[21980]){break i}h=1.7976931348623157e+308;c=f;while(1){if(i[a+48>>2]){j:{if(!(j[a+82|0]&8)){break j}if(qa(i[a+24>>2],d+88|0)){break j}i[a+80>>2]=i[a+80>>2]&-524289;c=c+ -1|0;m=n[d+88>>3];if(m<h^1){break j}b=a;h=m}a=i[a+48>>2];if(a){continue}}break}if(c|!b){break b}i[b+80>>2]=i[b+80>>2]|524288;if(!i[21886]){break a}i[d+32>>2]=i[b+76>>2];n[d+40>>3]=h;V(i[22423],23,62261,d+32|0);break a}c=f}k:{if(i[21920]|(c|0)!=1){break k}b=i[22457];if(!b){break k}c=1;a=i[b+80>>2];if(!(a&524288)){break k}c=0;if(i[21886]>=2){i[d+16>>2]=i[b+76>>2];V(i[22423],2109,62321,d+16|0);b=i[22457];a=i[b+80>>2]}i[b+80>>2]=a&-524289}i[22446]=c;if(!i[21886]){break a}i[d>>2]=c;i[d+4>>2]=f;V(i[22423],24,62428,d)}S=d+96|0}function og(){var a=0;a=i[23640];i[23642]=a;i[23640]=a+1;g[a+92232|0]=75;h[46819]=65535;i[23198]=77631;a=i[23640];i[23640]=a+1;g[94061]=0;g[a+92232|0]=199;g[94185]=1;h[46943]=65535;i[23322]=77656;a=i[23640];i[23640]=a+1;g[a+92232|0]=200;g[94186]=6;h[46944]=199;i[23323]=77703;a=i[23640];i[23640]=a+1;g[a+92232|0]=201;g[94187]=7;h[46945]=65535;i[23324]=77728;a=i[23640];i[23640]=a+1;g[a+92232|0]=205;g[94191]=1;h[46949]=65535;i[23328]=77753;a=i[23640];i[23640]=a+1;g[a+92232|0]=206;g[94192]=6;h[46950]=205;i[23329]=77768;a=i[23640];i[23640]=a+1;g[a+92232|0]=207;g[94193]=7;h[46951]=65535;i[23330]=77805;a=i[23640];i[23640]=a+1;g[a+92232|0]=208;g[94194]=1;h[46952]=65535;i[23331]=77842;a=i[23640];i[23640]=a+1;g[a+92232|0]=209;g[94195]=6;h[46953]=208;i[23332]=77872;a=i[23640];i[23640]=a+1;g[a+92232|0]=210;g[94196]=7;h[46954]=65535;i[23333]=77894;a=i[23640];i[23640]=a+1;g[a+92232|0]=202;g[94188]=1;h[46946]=65535;i[23325]=77916;a=i[23640];i[23640]=a+1;g[a+92232|0]=203;g[94189]=6;h[46947]=202;i[23326]=77872;a=i[23640];i[23640]=a+1;g[a+92232|0]=204;g[94190]=7;h[46948]=65535;i[23327]=77894;a=i[23640];i[23640]=a+1;g[a+92232|0]=76;h[46820]=65535;i[23199]=77953;a=i[23640];i[23640]=a+1;g[94062]=0;g[a+92232|0]=222;g[94208]=1;h[46966]=65535;i[23345]=77985;a=i[23640];i[23640]=a+1;g[a+92232|0]=224;g[94210]=2;h[46968]=222;i[23347]=78020;a=i[23640];i[23640]=a+1;g[a+92232|0]=223;g[94209]=3;h[46967]=65535;i[23346]=78063;a=i[23640];i[23640]=a+1;g[a+92232|0]=227;g[94213]=1;h[46971]=65535;i[23350]=78089;a=i[23640];i[23640]=a+1;g[a+92232|0]=226;g[94212]=1;h[46970]=65535;i[23349]=78133;a=i[23640];i[23640]=a+1;g[a+92232|0]=225;g[94211]=1;h[46969]=65535;i[23348]=78186}function xg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=66;h[46810]=65535;i[23189]=70428;a=i[23640];i[23640]=a+1;g[94052]=0;g[a+92232|0]=151;g[94137]=1;h[46895]=65535;a=i[23640];i[23640]=a+1;i[23274]=0;g[a+92232|0]=152;g[94138]=6;h[46896]=151;i[23275]=70449;a=i[23640];i[23640]=a+1;g[a+92232|0]=153;g[94139]=7;h[46897]=65535;i[23276]=70490;a=i[23640];i[23640]=a+1;g[a+92232|0]=233;g[94219]=7;h[46977]=65535;i[23356]=70531;a=i[23640];i[23640]=a+1;g[a+92232|0]=234;g[94220]=8;h[46978]=65535;i[23357]=70576;a=i[23640];i[23640]=a+1;g[a+92232|0]=140;g[94126]=8;h[46884]=65535;i[23263]=70621;a=i[23640];i[23641]=a;i[23640]=a+1;g[a+92232|0]=67;h[46811]=65535;i[23190]=70664;a=i[23640];i[23640]=a+1;g[94053]=0;g[a+92232|0]=41;g[94027]=1;h[46785]=65535;i[23164]=70719;a=i[23640];i[23640]=a+1;g[a+92232|0]=32;g[94018]=1;h[46776]=65535;i[23155]=70750;a=i[23640];i[23640]=a+1;g[a+92232|0]=87;g[94073]=1;h[46831]=65535;i[23210]=70780;a=i[23640];i[23640]=a+1;g[a+92232|0]=38;g[94024]=1;h[46782]=65535;i[23161]=70795;a=i[23640];i[23640]=a+1;g[a+92232|0]=40;g[94026]=1;h[46784]=65535;i[23163]=70836;a=i[23640];i[23640]=a+1;g[a+92232|0]=142;g[94128]=1;h[46886]=65535;i[23265]=70872;a=i[23640];i[23640]=a+1;g[a+92232|0]=144;g[94130]=1;h[46888]=65535;i[23267]=70932;a=i[23640];i[23640]=a+1;g[a+92232|0]=14;g[94e3]=1;h[46758]=65535;i[23137]=70977;a=i[23640];i[23640]=a+1;g[a+92232|0]=104;g[94090]=1;h[46848]=65535;i[23227]=71014;a=i[23640];i[23640]=a+1;g[a+92232|0]=143;g[94129]=1;h[46887]=65535;i[23266]=71056;a=i[23640];i[23640]=a+1;g[a+92232|0]=88;g[94074]=1;h[46832]=65535;i[23211]=71090;a=i[23640];i[23640]=a+1;g[a+92232|0]=89;g[94075]=1;h[46833]=65535;i[23212]=71135}function Af(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;g=i[a+4>>2];c=g&3;d=g&-8;f=d+a|0;a:{if(!c){c=0;if(b>>>0<256){break a}if(d>>>0>=b+4>>>0){c=a;if(d-b>>>0<=i[24324]<<1>>>0){break a}}return 0}b:{if(d>>>0>=b>>>0){c=d-b|0;if(c>>>0<16){break b}i[a+4>>2]=g&1|b|2;b=a+b|0;i[b+4>>2]=c|3;i[f+4>>2]=i[f+4>>2]|1;Ad(b,c);break b}c=0;if(i[24210]==(f|0)){d=d+i[24207]|0;if(d>>>0<=b>>>0){break a}i[a+4>>2]=g&1|b|2;c=a+b|0;b=d-b|0;i[c+4>>2]=b|1;i[24207]=b;i[24210]=c;break b}if(i[24209]==(f|0)){d=d+i[24206]|0;if(d>>>0<b>>>0){break a}c=d-b|0;c:{if(c>>>0>=16){i[a+4>>2]=g&1|b|2;b=a+b|0;i[b+4>>2]=c|1;d=a+d|0;i[d>>2]=c;i[d+4>>2]=i[d+4>>2]&-2;break c}i[a+4>>2]=d|g&1|2;b=a+d|0;i[b+4>>2]=i[b+4>>2]|1;c=0;b=0}i[24209]=b;i[24206]=c;break b}e=i[f+4>>2];if(e&2){break a}h=d+(e&-8)|0;if(h>>>0<b>>>0){break a}k=h-b|0;d:{if(e>>>0<=255){c=i[f+8>>2];e=e>>>3|0;d=i[f+12>>2];if((d|0)==(c|0)){i[24204]=i[24204]&pi(e);break d}i[c+12>>2]=d;i[d+8>>2]=c;break d}j=i[f+24>>2];d=i[f+12>>2];e:{if((f|0)!=(d|0)){c=i[f+8>>2];i[c+12>>2]=d;i[d+8>>2]=c;break e}f:{c=f+20|0;e=i[c>>2];if(e){break f}c=f+16|0;e=i[c>>2];if(e){break f}d=0;break e}while(1){l=c;d=e;c=d+20|0;e=i[c>>2];if(e){continue}c=d+16|0;e=i[d+16>>2];if(e){continue}break}i[l>>2]=0}if(!j){break d}c=i[f+28>>2];e=(c<<2)+97120|0;g:{if(i[e>>2]==(f|0)){i[e>>2]=d;if(d){break g}i[24205]=i[24205]&pi(c);break d}i[j+(i[j+16>>2]==(f|0)?16:20)>>2]=d;if(!d){break d}}i[d+24>>2]=j;c=i[f+16>>2];if(c){i[d+16>>2]=c;i[c+24>>2]=d}c=i[f+20>>2];if(!c){break d}i[d+20>>2]=c;i[c+24>>2]=d}if(k>>>0<=15){i[a+4>>2]=g&1|h|2;b=a+h|0;i[b+4>>2]=i[b+4>>2]|1;break b}i[a+4>>2]=g&1|b|2;b=a+b|0;i[b+4>>2]=k|3;c=a+h|0;i[c+4>>2]=i[c+4>>2]|1;Ad(b,k)}c=a}return c}function Mh(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0;e=S-112|0;S=e;d=i[22992];c=d+1|0;i[22992]=c;f=i[21972];if(!(!f|!i[22482]|(d|0)<(f+i[22525]|0))){i[22525]=c;E(e+108|0)|0;c=Hb(e+108|0);d=C()|0;f=i[22433];g=i[22443];h=i[22423];k=i[c+8>>2];l=i[c+4>>2];c=i[c>>2];m=i[22648];o=i[22650];p=i[22992];q=i[22444];r=n[11233];s=n[11235];t=W(i[22501]);i[e+96>>2]=g-f;n[e+88>>3]=s;n[e+80>>3]=r;n[e- -64>>3]=+(d>>>0)/1e6;i[e+100>>2]=q-t;i[e+72>>2]=(p-o|0)+m;i[e+56>>2]=c;i[e+52>>2]=l;i[e+48>>2]=k;V(h,8087,47215,e+48|0);c=i[22992]}a:{if(i[21992]==(c|0)){d=i[21986];i[21886]=d;i[22544]=d;break a}d=i[21886]}if((d|0)>=2){d=i[b+76>>2];f=i[a+76>>2];i[e+32>>2]=c;i[e+36>>2]=f;i[e+40>>2]=d;V(i[22423],2030,38956,e+32|0)}f=0;g=i[22435]!=(b|0);if(!g){f=i[21886];i[21886]=4;c=i[b+76>>2];d=i[a+76>>2];i[e+16>>2]=i[22992];i[e+20>>2]=d;i[e+24>>2]=c;i[e+28>>2]=i[22455];V(i[22423],8068,39034,e+16|0)}b:{if(i[21886]<4){break b}V(i[22423],8069,39123,0);c=i[a+32>>2];c:{if(!c){break c}while(1){i[e>>2]=i[c+76>>2];V(i[22423],8070,39137,e);if((a|0)==(c|0)){break c}c=i[c+32>>2];if(c){continue}break}}V(i[22423],8071,32237,0);if(i[21886]<4){break b}ma(39142,a,b,0,0)}c=i[b+80>>2];if(c&512){d=b;if(!i[21994]){V(i[22423],6224,39156,0);X(5,b,0);c=i[b+80>>2]}i[d+80>>2]=c&-268435969}if(i[21869]){gd()}if(!i[22275]){Na()}c=i[i[a+52>>2]+4>>2];Pa(b);gh(a,b);fh(a,b);eh(a,b);d=b+52|0;if((c|0)!=i[i[b+52>>2]+4>>2]){Va(d,0,c)}d:{if(j[b+81|0]&4){break d}d=i[d>>2];if(!d){break d}c=i[d+4>>2];if(!c){break d}d=d+8|0;while(1){if(!(j[c+24|0]&16)){Xa(c);Oa(c)}c=i[d>>2];d=d+4|0;if(c){continue}break}}dh(a,b);te(a,b,13);if(!g){V(i[22423],8072,39251,0);i[21886]=f}S=e+112|0}function tg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=174;g[94160]=1;h[46918]=65535;i[23297]=73635;a=i[23640];i[23640]=a+1;g[a+92232|0]=177;g[94163]=1;h[46921]=65535;i[23300]=73649;a=i[23640];i[23640]=a+1;g[a+92232|0]=39;g[94025]=1;h[46783]=65535;i[23162]=73688;a=i[23640];i[23640]=a+1;g[a+92232|0]=17;g[94003]=1;h[46761]=65535;i[23140]=73736;a=i[23640];i[23640]=a+1;g[a+92232|0]=20;g[94006]=1;h[46764]=65535;i[23143]=73759;a=i[23640];i[23640]=a+1;g[a+92232|0]=18;g[94004]=1;h[46762]=65535;i[23141]=73793;a=i[23640];i[23640]=a+1;g[a+92232|0]=19;g[94005]=3;h[46763]=65535;i[23142]=73826;a=i[23640];i[23640]=a+1;g[a+92232|0]=117;g[94103]=6;h[46861]=65535;i[23240]=73860;a=i[23640];i[23640]=a+1;g[a+92232|0]=176;g[94162]=1;h[46920]=65535;i[23299]=73901;a=i[23640];i[23640]=a+1;g[a+92232|0]=218;g[94204]=1;h[46962]=65535;i[23341]=73938;a=i[23640];i[23640]=a+1;g[a+92232|0]=175;g[94161]=1;h[46919]=65535;i[23298]=73960;a=i[23640];i[23640]=a+1;g[a+92232|0]=57;g[94043]=1;h[46801]=65535;i[23180]=73992;a=i[23640];i[23640]=a+1;g[a+92232|0]=58;g[94044]=1;h[46802]=65535;i[23181]=74035;a=i[23640];i[23640]=a+1;g[a+92232|0]=59;g[94045]=1;h[46803]=65535;i[23182]=74073;a=i[23640];i[23640]=a+1;g[a+92232|0]=60;g[94046]=1;h[46804]=65535;i[23183]=74112;a=i[23640];i[23640]=a+1;g[a+92232|0]=62;g[94048]=1;h[46806]=65535;i[23185]=74138;a=i[23640];i[23640]=a+1;g[a+92232|0]=61;g[94047]=1;h[46805]=65535;i[23184]=74168;a=i[23640];i[23640]=a+1;g[a+92232|0]=217;g[94203]=1;h[46961]=65535;i[23340]=74199;a=i[23640];i[23640]=a+1;g[a+92232|0]=171;g[94157]=1;h[46915]=65535;i[23294]=74249;a=i[23640];i[23640]=a+1;g[a+92232|0]=23;g[94009]=1;h[46767]=65535;i[23146]=74288}function Pf(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=S-128|0;S=e;i[22466]=0;i[22467]=0;i[22298]=-1;i[22299]=-1048577;i[22290]=0;i[22291]=0;i[22470]=0;i[22471]=0;i[22296]=0;i[22297]=0;i[22494]=0;if(i[22276]){i[22495]=1}i[e+124>>2]=ba(c<<1);if(i[21886]>=1){V(i[22423],8082,4889,0)}if((c|0)>=1){q=c+ -1|0;u=(c<<3)+a|0;while(1){p=i[21880];j=(p|0)==(a|0)?u:a;r=i[22007];d=o(r,b);a:{if((d|0)<1){h=j;break a}v=(d<<3)+a|0;d=a;h=j;while(1){b:{if((d|0)==(p|0)){break b}l=k<<3;f=n[l+d>>3];if(n[j+l>>3]<f){j=d;break b}if(n[h+l>>3]>f^1){break b}h=d}d=(r<<3)+d|0;if(d>>>0<v>>>0){continue}break}}c:{d:{l=(k|0)!=(q|0);if(l){break d}d=q<<3;n[11154]=n[d+h>>3];n[11146]=n[d+j>>3];if(!i[21976]){break d}f=n[11145];break c}d=k<<3;s=n[d+h>>3];f=-s;m=n[d+j>>3];f=m<f?f:m;e:{if(!p){break e}g=n[d+p>>3];t=-g;g=g<t?t:g;if(f<g^1){break e}f=g}g=m-s;if(n[11149]<g^1){break c}n[11149]=g}if(!(n[11145]<f^1)){n[11145]=f}n[11148]=f+n[11148];Z(e+124|0,h);Z(e+124|0,j);d=k<<3;m=n[11148]*80*2.220446049250313e-16;n[d+i[22310]>>3]=m;if(i[21886]>=1){f=n[d+j>>3];g=n[d+h>>3];d=i[22423];h=Y(h);i[e+108>>2]=Y(j);i[e+104>>2]=h;n[e+96>>3]=m;n[e+88>>3]=f-g;n[e+80>>3]=f;n[e+72>>3]=g;i[e+64>>2]=k;V(d,8106,4987,e- -64|0)}if(!(l|!i[21976]|i[21886]<1)){f=n[11149];n[e+48>>3]=f;g=n[11145];n[e+40>>3]=g;n[e+32>>3]=g-f;V(i[22423],8107,5046,e+32|0)}k=k+1|0;if((k|0)!=(c|0)){continue}break}}if(i[21886]>=1){i[e+16>>2]=5129;a=i[e+124>>2];b=i[22423];V(b,9004,6264,e+16|0);f:{if(!a){break f}d=i[a+4>>2];if(!d){break f}a=a+4|0;while(1){i[e>>2]=Y(d);V(b,9005,6267,e);d=i[a+4>>2];a=a+4|0;if(d){continue}break}}V(b,9006,6262,0)}S=e+128|0;return i[e+124>>2]}function fh(a,b){var c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0,n=0,o=0,p=0;l=S-32|0;S=l;if(i[21886]>=4){V(i[22423],4033,39868,0)}n=b+56|0;o=i[22492]+ -1|0;c=i[b+56>>2];a:{if(!c){break a}e=i[c+4>>2];if(!e){d=c;break a}k=c+4|0;c=k+4|0;while(1){f=i[e+4>>2];if((f|0)==(b|0)){f=i[e+8>>2]}if(i[f+72>>2]==(o|0)){i[k>>2]=0}d=c;c=c+4|0;k=d;e=i[d>>2];if(e){continue}break}d=i[n>>2]}wb(d);k=0;if(i[21886]>=4){V(i[22423],4034,39926,0)}e=i[a+32>>2];b:{if(!e){break b}while(1){c=i[e+56>>2];c:{if(!c){break c}d=i[c+4>>2];d:{if(!d){break d}h=c+8|0;while(1){c=h;e:{while(1){h=i[d+4>>2];if((h|0)==(e|0)){i[d+4>>2]=b;f=i[d+8>>2];break e}m=i[d+8>>2];if((m|0)==(e|0)){i[d+8>>2]=b;f=h;break e}if(!((b|0)!=(m|0)?(b|0)!=(h|0):0)){Z(n,d);k=k+1|0;d=i[c>>2];c=c+4|0;if(d){continue}break d}break}i[l+16>>2]=i[d+12>>2];V(i[22423],6098,39972,l+16|0);X(5,0,d)}f:{g:{h:{if((b|0)==(f|0)){if(i[22437]!=(d|0)){break g}break h}if(i[f+72>>2]==(o|0)){ja(i[f+56>>2],d);if(i[22437]==(d|0)){break h}break g}Z(n,d);break f}i[22437]=0}ga(d);$(d,20)}h=c+4|0;k=k+1|0;d=i[c>>2];if(d){continue}break}}c=i[e+56>>2];if(!c){break c}fb(c,0)}i:{if(!(j[e+81|0]&32)){break i}c=i[e+60>>2];if(!c){f=0;break i}f=i[c+4>>2];m=W(c);if((m|0)<1){break i}d=0;while(1){if(!(!(j[f+81|0]&32)|i[f+72>>2]==(o|0))){c=_c();i[c>>2]=lb(i[e+52>>2],i[22007],d,0);h=(i[e+80>>2]>>>12^d)&1;i[c+8>>2]=h?f:b;i[c+4>>2]=h?b:f;g[c+16|0]=j[c+16|0]|(h?64:32);Z(n,c);Z(f+56|0,c);if(i[22448]==i[22436]){i[22437]=c}p=p+1|0}d=d+1|0;f=i[(i[e+60>>2]+(d<<2)|0)+4>>2];if((d|0)!=(m|0)){continue}break}}if((a|0)==(e|0)){break b}e=i[e+32>>2];if(e){continue}break}}if(i[21886]>=2){i[l>>2]=k;i[l+4>>2]=p;V(i[22423],2033,40032,l)}S=l+32|0}function Rb(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0;f=S-224|0;S=f;j=i[22007];a:{if((j|0)>=1){g=i[21876];b:{if((j|0)!=4){while(1){n[(f+192|0)+(e<<3)>>3]=(e|0)!=(g|0)?n[(e<<3)+b>>3]:0;e=e+1|0;if((j|0)!=(e|0)){continue}break}h=j;break b}if(g){n[f+192>>3]=n[b>>3];e=1}else{e=0}if((g|0)!=1){n[(f+192|e<<3)>>3]=n[b+8>>3];e=e+1|0}if((g|0)!=2){n[(f+192|0)+(e<<3)>>3]=n[b+16>>3];e=e+1|0}h=e;if((g|0)==3){break b}n[(f+192|0)+(e<<3)>>3]=n[b+24>>3];h=e+1|0}e=h;if((e|0)>2){break a}}e=e<<3;fa(e+(f+192|0)|0,0,24-e|0)}e=0;c:{if((j|0)>=1){g=i[21876];d:{if((j|0)!=4){while(1){n[(f+160|0)+(e<<3)>>3]=(e|0)!=(g|0)?n[(e<<3)+c>>3]:0;e=e+1|0;if((j|0)!=(e|0)){continue}break}h=j;break d}if(g){n[f+160>>3]=n[c>>3];e=1}else{e=0}if((g|0)!=1){n[(f+160|e<<3)>>3]=n[c+8>>3];e=e+1|0}if((g|0)!=2){n[(f+160|0)+(e<<3)>>3]=n[c+16>>3];e=e+1|0}h=e;if((g|0)==3){break d}n[(f+160|0)+(e<<3)>>3]=n[c+24>>3];h=e+1|0}e=h;if((e|0)>2){break c}}e=e<<3;fa(e+(f+160|0)|0,0,24-e|0)}e:{f:{o=n[f+192>>3];p=n[f+160>>3];g:{if(!(q(o-p)>.001^1)){k=n[f+200>>3];l=n[f+168>>3];break g}k=n[f+200>>3];l=n[f+168>>3];if(q(k-l)>.001){break g}m=n[f+208>>3];if(q(m-n[f+176>>3])>.001^1){break f}}V(a,9204,16584,0);n[f+144>>3]=p;V(a,9205,14922,f+144|0);n[f+128>>3]=l;V(a,9205,14922,f+128|0);n[f+112>>3]=n[f+176>>3];V(a,9205,14922,f+112|0);i[f+96>>2]=Y(c);V(a,9206,16600,f+96|0);m=n[f+208>>3];break e}V(a,9207,16608,0)}n[f+80>>3]=o;V(a,9208,14922,f+80|0);n[f+64>>3]=k;V(a,9208,14922,f- -64|0);n[f+48>>3]=m;V(a,9208,14922,f+48|0);i[f+32>>2]=Y(b);V(a,9209,16600,f+32|0);k=n[d>>3];l=n[d+8>>3];n[f+16>>3]=n[d+16>>3];n[f+8>>3]=l;n[f>>3]=k;V(a,9210,16624,f);S=f+224|0}function aa(a,b,c){var d=0,e=0,f=0,g=0,h=0;e=S-32|0;S=e;d=i[b+24>>2];a:{b:{c:{d:{e:{f:{g:{h:{i:{h=i[22007];switch(h+ -2|0){case 6:break c;case 5:break d;case 4:break e;case 3:break f;case 2:break g;case 1:break h;case 0:break i;default:break b}}n[c>>3]=n[b+16>>3]+n[a>>3]*n[d>>3]+n[a+8>>3]*n[d+8>>3];break a}n[c>>3]=n[b+16>>3]+n[a>>3]*n[d>>3]+n[a+8>>3]*n[d+8>>3]+n[a+16>>3]*n[d+16>>3];break a}n[c>>3]=n[b+16>>3]+n[a>>3]*n[d>>3]+n[a+8>>3]*n[d+8>>3]+n[a+16>>3]*n[d+16>>3]+n[a+24>>3]*n[d+24>>3];break a}n[c>>3]=n[b+16>>3]+n[a>>3]*n[d>>3]+n[a+8>>3]*n[d+8>>3]+n[a+16>>3]*n[d+16>>3]+n[a+24>>3]*n[d+24>>3]+n[a+32>>3]*n[d+32>>3];break a}n[c>>3]=n[b+16>>3]+n[a>>3]*n[d>>3]+n[a+8>>3]*n[d+8>>3]+n[a+16>>3]*n[d+16>>3]+n[a+24>>3]*n[d+24>>3]+n[a+32>>3]*n[d+32>>3]+n[a+40>>3]*n[d+40>>3];break a}n[c>>3]=n[b+16>>3]+n[a>>3]*n[d>>3]+n[a+8>>3]*n[d+8>>3]+n[a+16>>3]*n[d+16>>3]+n[a+24>>3]*n[d+24>>3]+n[a+32>>3]*n[d+32>>3]+n[a+40>>3]*n[d+40>>3]+n[a+48>>3]*n[d+48>>3];break a}n[c>>3]=n[b+16>>3]+n[a>>3]*n[d>>3]+n[a+8>>3]*n[d+8>>3]+n[a+16>>3]*n[d+16>>3]+n[a+24>>3]*n[d+24>>3]+n[a+32>>3]*n[d+32>>3]+n[a+40>>3]*n[d+40>>3]+n[a+48>>3]*n[d+48>>3]+n[a+56>>3]*n[d+56>>3];break a}f=n[b+16>>3];n[c>>3]=f;if(!h){break a}g=a;while(1){f=f+n[g>>3]*n[d>>3];n[c>>3]=f;d=d+8|0;g=g+8|0;h=h+ -1|0;if(h){continue}break}}i[22682]=i[22682]+1;d=i[21963];g=i[21886];j:{if((g|0)<4?!d:0){break j}if(d){f=+(db()|0);n[c>>3]=n[c>>3]+n[11145]*(n[10982]*((f+f)/2147483646+ -1));g=i[21886]}if((g|0)<4){break j}V(i[22423],8001,1024,0);n[e+16>>3]=n[c>>3];V(i[22423],8002,1039,e+16|0);c=i[22423];a=Y(a);i[e+4>>2]=i[b+76>>2];i[e>>2]=a;V(c,8003,1047,e)}S=e+32|0}function Ca(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0;a=S-128|0;S=a;if(i[21886]>=2){c=i[22423];i[a+96>>2]=W(i[22497]);V(c,2095,37231,a+96|0)}i[a+100>>2]=ba(i[22427]);b=xa(i[22497]);a:{if(!b){break a}while(1){h=i[b+40>>2];e=i[b+20>>2];d=i[b+16>>2];$(b,48);b:{c=i[d+80>>2];if(c&2048){break b}i[d+80>>2]=c&1073741823;if(i[22992]==(i[21992]+ -1|0)){c=i[21986];i[21886]=c;i[22544]=c}c:{if((h|0)==11){i[22850]=i[22850]+1;h=Ab(e);if(!h){b=i[d+76>>2];f=i[22423];i[a+20>>2]=e?i[e+76>>2]:-1;i[a+16>>2]=b;V(f,6097,37307,a+16|0);ca(5,d,e)}Ea(a+100|0,h);if((d|0)==(h|0)){break b}if(i[21886]>=2){f=i[e+76>>2];c=i[h+76>>2];i[a>>2]=i[d+76>>2];i[a+4>>2]=c;i[a+8>>2]=f;V(i[22423],2025,37407,a)}ob(d,h,11,0,0,0);k=k+1|0;break c}e=W(i[d+60>>2]);if(!e){i[22662]=i[22662]+1;if(i[21886]>=2){i[a+48>>2]=i[d+76>>2];V(i[22423],2026,37472,a+48|0)}nb(d,0);c=i[d+52>>2];d:{if(!c){break d}b=i[c+4>>2];if(!b){break d}f=c+8|0;while(1){ja(i[b+12>>2],d);if(!i[i[b+12>>2]+4>>2]){i[22660]=i[22660]+1;if(i[21886]>=2){c=i[d+76>>2];i[a+32>>2]=i[b+16>>2];i[a+36>>2]=c;V(i[22423],2027,37535,a+32|0)}g[b+24|0]=j[b+24|0]|4;Z(90004,b)}b=i[f>>2];f=f+4|0;if(b){continue}break}}k=k+1|0;break c}if((e|0)>=i[22007]){break c}b=Bb(d,a+120|0,a+112|0,a+104|0);if(i[21886]>=2){f=i[b+76>>2];c=i[d+76>>2];n[a+80>>3]=n[a+120>>3];i[a+64>>2]=c;i[a+68>>2]=e;i[a+72>>2]=f;V(i[22423],2028,37602,a- -64|0)}ob(d,b,h,a+112|0,a+104|0,0);k=k+1|0;if(!i[21958]){break c}i[22654]=i[22654]+1;l=n[a+120>>3];n[11329]=l+n[11329];if(n[11328]<l^1){break c}n[11328]=l}b=xa(i[22497]);if(b){continue}break a}b=xa(i[22497]);if(b){continue}break}}_(a+100|0);S=a+128|0;return k}function sg(){var a=0;a=i[23640];i[23640]=a+1;g[a+92232|0]=69;h[46813]=65535;i[23192]=74326;a=i[23640];i[23640]=a+1;g[94055]=0;g[a+92232|0]=106;g[94092]=1;h[46850]=65535;i[23229]=74357;a=i[23640];i[23640]=a+1;g[a+92232|0]=109;g[94095]=1;h[46853]=106;i[23232]=74405;a=i[23640];i[23640]=a+1;g[a+92232|0]=107;g[94093]=1;h[46851]=65535;i[23230]=74446;a=i[23640];i[23640]=a+1;g[a+92232|0]=108;g[94094]=1;h[46852]=107;i[23231]=74499;a=i[23640];i[23640]=a+1;g[a+92232|0]=83;g[94069]=1;h[46827]=65535;i[23206]=74536;a=i[23640];i[23640]=a+1;g[a+92232|0]=79;g[94065]=1;h[46823]=65535;i[23202]=74574;a=i[23640];i[23640]=a+1;g[a+92232|0]=70;h[46814]=65535;i[23193]=74612;a=i[23640];i[23640]=a+1;g[94056]=0;g[a+92232|0]=7;g[93993]=1;h[46751]=65535;i[23130]=74646;a=i[23640];i[23640]=a+1;g[a+92232|0]=15;g[94001]=1;h[46759]=65535;i[23138]=74682;a=i[23640];i[23640]=a+1;g[a+92232|0]=16;g[94002]=1;h[46760]=65535;i[23139]=74727;a=i[23640];i[23640]=a+1;g[a+92232|0]=21;g[94007]=1;h[46765]=65535;i[23144]=74757;a=i[23640];i[23640]=a+1;g[a+92232|0]=232;g[94218]=1;h[46976]=65535;i[23355]=74794;a=i[23640];i[23640]=a+1;g[a+92232|0]=64;g[94050]=1;h[46808]=65535;i[23187]=74830;a=i[23640];i[23640]=a+1;g[a+92232|0]=36;g[94022]=1;h[46780]=65535;i[23159]=74879;a=i[23640];i[23640]=a+1;g[a+92232|0]=37;g[94023]=1;h[46781]=65535;i[23160]=74910;a=i[23640];i[23640]=a+1;g[a+92232|0]=31;g[94017]=1;h[46775]=65535;i[23154]=74955;a=i[23640];i[23640]=a+1;g[a+92232|0]=30;g[94016]=1;h[46774]=65535;i[23153]=74985;a=i[23640];i[23640]=a+1;g[a+92232|0]=231;g[94217]=1;h[46975]=65535;i[23354]=75024}function Jf(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,m=0,n=0;g=-2147483648;k=S-16|0;S=k;while(1){b=i[a+4>>2];a:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break a}b=na(a)}if((b|0)==32|b+ -9>>>0<5){continue}break}b:{c:{switch(b+ -43|0){case 0:case 2:break c;default:break b}}m=(b|0)==45?-1:0;b=i[a+4>>2];if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break b}b=na(a)}d:{if(10<=j[b+86385|0]){if(i[a+104>>2]){i[a+4>>2]=i[a+4>>2]+ -1}g=0;i[a+112>>2]=0;i[a+116>>2]=0;b=i[a+8>>2];c=b-i[a+4>>2]|0;i[a+120>>2]=c;i[a+124>>2]=c>>31;i[a+104>>2]=b;i[23646]=28;break d}c=b+ -48|0;if(c>>>0<=9){while(1){d=o(d,10)+c|0;b=i[a+4>>2];e:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break e}b=na(a)}c=b+ -48|0;if(d>>>0<429496729?c>>>0<=9:0){continue}break}f=d}f:{g:{h:{if(c>>>0>9){break h}h=ni(f,0,10,0);d=T;while(1){b=d;e=c+h|0;if(e>>>0<c>>>0){b=b+1|0}f=e;e=b;d=(b|0)==429496729&f>>>0>=2576980378|b>>>0>429496729;b=i[a+4>>2];i:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break i}b=na(a)}c=b+ -48|0;if(d|c>>>0>9){break h}h=ni(f,e,10,0);d=T;if((d|0)==-1&h>>>0<=(c^-1)>>>0|(d|0)!=-1){continue}break}break g}if(c>>>0<=9){break g}break f}if(10<=j[b+86385|0]){break f}while(1){b=i[a+4>>2];j:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break j}b=na(a)}if(10>j[b+86385|0]){continue}break}i[23646]=68;f=-2147483648;e=0}if(i[a+104>>2]){i[a+4>>2]=i[a+4>>2]+ -1}k:{if(!e&f>>>0<2147483648|e>>>0<0){break k}if(!m){i[23646]=68;g=2147483647;break d}if(!e&f>>>0<=2147483648|e>>>0<0){break k}i[23646]=68;break d}a=m;b=a^f;g=b-a|0;c=a>>31;n=(c^e)-(c+(b>>>0<a>>>0)|0)|0}S=k+16|0;T=n;return g}function X(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=S-96|0;S=d;i[22439]=0;i[22437]=0;i[22435]=0;if(i[22508]){V(i[22423],8126,79387,0);Jb(6)}i[22508]=1;if(!i[22487]){i[22451]=(C()|0)-i[22451]}ma(79460,b,0,c,0);ia(79470,0,89176);i[d+80>>2]=88316;i[d+84>>2]=88056;V(i[22423],8127,79482,d+80|0);i[d+64>>2]=7840;i[d+68>>2]=88572;V(i[22423],8128,79509,d- -64|0);e=i[22455];if((e|0)>=0){i[d+48>>2]=e;V(i[22423],8129,79544,d+48|0);e=i[22992];if(e){i[d+32>>2]=e;V(i[22423],8130,79578,d+32|0)}a:{if(i[22487]){V(i[22423],8131,79600,0);break a}if(!i[22482]){break a}V(i[22423],8132,79643,0)}V(i[22423],8133,79676,0)}b:{c:{if(!(!i[21878]|(b|c?!i[22487]:0))){cf();break c}b=a;d:{e:{switch(a+ -1|0){case 1:break d;case 0:break b;default:break e}}if(i[22984]<=(i[22007]+1|0)){break d}V(i[22423],8134,79678,0);rc(i[22423]);if(!i[21958]){break d}Mc();Vd();Lc(i[22423],79695);md(i[22423])}if(!i[21926]){break c}$b(i[22423],i[23641],0)}b=6;if(!a){break b}if(!(i[21915]|(a|0)!=3)){Ud(i[22423]);b=3;break b}f:{switch(a+ -2|0){case 3:V(i[22423],9426,82321,0);b=5;break b;case 0:kg(i[22423]);b=2;break b;case 7:V(i[22423],8016,79709,0);b=9;break b;case 1:case 5:case 6:if(!(i[21899]|!i[21910])){Ud(i[22423]);b=a;break b}b=a;g:{switch(a+ -7|0){case 0:V(i[22423],9427,84921,0);b=7;break b;case 1:break g;default:break b}}V(i[22423],9428,85163,0);b=8;break b;default:break f}}if((a|0)<256){b=a;break b}i[d+16>>2]=a;V(i[22423],6426,79740,d+16|0);b=255}if(i[22476]){i[d+4>>2]=b;i[d>>2]=i[22456];V(i[22423],6187,79859,d);Jb(b)}i[22476]=1;i[22508]=0;i[22452]=0;D(89292,b|0);x()}function Yh(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0;g=S-32|0;S=g;b=i[22430];d=i[22429];a:{if((b|0)==(d|0)){break a}while(1){b:{if(b){c=k+1|0;if((k|0)<=i[22443]){k=c;break b}k=c;f=i[b+76>>2]}else{f=-1}e=i[22423];i[g+20>>2]=d?i[d+76>>2]:-1;i[g+16>>2]=f;V(e,6406,20639,g+16|0);ya();i[22439]=0;i[22437]=0;i[22435]=0;ma(19042,b,i[22429],0,0);X(5,0,0)}c:{c=i[b+64>>2];if(!c){break c}d=i[c>>2];f=i[(c+(d<<2)|0)+4>>2];if(!(f?f+ -1|0:d)){ga(b- -64|0);break c}if(i[22320]){if(j[b+82|0]&4){Rg(b);c=i[b+64>>2]}vb(c);if(n[b>>3]<n[10930]){break c}}c=i[21970];if(!(c|i[21998])){if(i[21913]){de();b=i[22430]}i[a>>2]=b;c=xa(i[b+64>>2]);break a}d:{e:{if(c){d=0;f:{if(!i[22320]){break f}b=i[22428];if(!b){break f}while(1){c=i[b+48>>2];if(!c|i[22430]==(b|0)){break f}f=i[b+64>>2];if(f){d=W(f)+d|0;c=i[b+48>>2]}b=c;if(b){continue}break}}h=+(db()|0)/2147483647;c=i[22445];h=u(h*+(c-d|0));g:{if(q(h)<2147483648){d=~~h;break g}d=-2147483648}f=g;h:{b=i[22430];if(b){while(1){c=i[b+48>>2];if(c){e=i[b+64>>2];i:{if(e){l=i[e>>2];e=i[(e+(l<<2)|0)+4>>2];e=e?e+ -1|0:l;if(!e){ga(b- -64|0);c=i[b+48>>2];break i}if((d|0)<(e|0)){break h}d=d-e|0}}b=c;if(b){continue}}break}c=i[22445]}i[f>>2]=c;n[g+8>>3]=h;i[g+4>>2]=d+1;V(i[22423],6169,20754,g);X(5,0,0);break e}i[a>>2]=b;c=Ta(i[b+64>>2],d);break a}b=i[i[22429]+44>>2];c=xa(i[b+64>>2]);if(c){break d}c=b- -64|0;if(i[c>>2]){ga(c)}Ha(b);be(b,89712)}c=0;b=i[22430];d=i[22429];if((b|0)!=(d|0)){continue}break a}i[a>>2]=b;break a}c=0;b=i[b+48>>2];i[22430]=b;d=i[22429];if((d|0)!=(b|0)){continue}break}}S=g+32|0;return c}function fi(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0;d=S-80|0;S=d;i[d+48>>2]=0;i[d+52>>2]=0;i[d+40>>2]=0;i[d+44>>2]=0;i[d+32>>2]=0;i[d+36>>2]=0;e=i[3745];i[d+16>>2]=i[3744];i[d+20>>2]=e;e=i[3743];i[d+8>>2]=i[3742];i[d+12>>2]=e;e=i[3741];i[d>>2]=i[3740];i[d+4>>2]=e;a:{if(!(n[11231]<8.988465674311579e+307^1?!i[21899]:0)){Sa(b,d- -64|0,d+56|0);g=n[11240];h=n[11231];if(!(h<8.988465674311579e+307^1)){g=g-h*w(+i[22007])}h=g+n[d+64>>3];n[d+64>>3]=h;g=n[d+56>>3]-g;n[d+56>>3]=g;if(!(i[21957]|i[21917])){break a}k=h;h=n[11145]*.002;n[d+64>>3]=k+h;n[d+56>>3]=g-h;break a}i[d+56>>2]=0;i[d+60>>2]=0;i[d+64>>2]=0;i[d+68>>2]=0}f=bc(b);i[d+72>>2]=f;i[d+76>>2]=ba(i[22427]);b:{if(!f){break b}e=i[f+4>>2];if(!e){break b}f=f+4|0;while(1){Z(d+76|0,i[e+8>>2]);e=i[f+4>>2];f=f+4|0;if(e){continue}break}}c:{if(!i[21925]){e=i[21921];if(e|i[21923]){break c}}wc(a,i[d+76>>2],b,n[d+64>>3],c);e=i[21921]}d:{e:{if(e){g=n[d+56>>3];break e}if(i[21925]|i[21923]){break d}g=n[d+56>>3];h=n[11145];if(n[d+64>>3]-g>(h+h)*.002^1){break d}}n[c+16>>3]=1-n[c+16>>3];n[c+8>>3]=1-n[c+8>>3];n[c>>3]=1-n[c>>3];wc(a,i[d+76>>2],b,g,c)}_(d+76|0);_(d+72|0);f:{if(!(i[21956]|i[21875])|(i[22472]?j[b+81|0]&8:0)){break f}c=i[22492];i[b+72>>2]=c;e=i[b+60>>2];if(!e){break f}f=i[e+4>>2];if(!f){break f}e=e+8|0;while(1){if(i[f+72>>2]!=(c|0)){c=lb(i[b+52>>2],i[22007],(e-i[b+60>>2]|0)+ -8>>2,0);i[d+72>>2]=c;if(i[21875]){vc(a,b,f,c,d+32|0)}if(i[21956]){c=i[d+72>>2];Rb(a,i[i[c+4>>2]+8>>2],i[i[c+8>>2]+8>>2],d)}ga(d+72|0)}f=i[e>>2];if(!f){break f}e=e+4|0;c=i[22492];continue}}S=d+80|0}function ha(a){var b=0,c=0,d=0,e=0,f=0,g=0;c=S-160|0;S=c;a:{b:{if((a|0)<=-1){i[c+48>>2]=a;V(i[22543],6235,25379,c+48|0);X(4,0,0);break b}if(i[22534]<(a|0)){break b}b=i[i[22538]+(a<<2)>>2]<<2;e=i[b+i[22537]>>2];d=e+i[22555]|0;i[22555]=d;f=b+i[22536]|0;b=i[f>>2];if(b){a=i[22545]+1|0;i[22545]=a;i[22552]=i[22552]-e;i[f>>2]=i[b>>2];if(i[22544]<5){break a}a=a+i[22546]|0;f=i[22548];i[c+144>>2]=a-f;i[c+128>>2]=b;i[c+136>>2]=e;i[c+140>>2]=d;i[c+132>>2]=a+f;V(i[22543],8141,25468,c+128|0);break a}i[22546]=i[22546]+1;b=i[22541];c:{if((e|0)<=(b|0)){break c}i[22551]=i[22551]+b;b=i[(i[22539]?90120:90124)>>2];d=za(b);if(!d){i[c+112>>2]=b;V(i[22543],6080,25523,c+112|0);X(4,0,0)}i[d>>2]=i[22539];i[22539]=d;g=b;b=i[22535];f=b+4&(b^-1);b=g-f|0;i[22541]=b;i[22540]=d+f;d=i[22550]+b|0;i[22550]=d;f=i[22551]+(i[22552]+(i[22555]+(b-e|0)|0)|0)|0;if((f|0)==(d|0)){break c}i[c+96>>2]=d;i[c+100>>2]=f;V(i[22543],6212,25614,c+96|0);X(4,0,0);b=i[22541]}i[22541]=b-e;b=i[22540];i[22540]=e+b;i[22556]=i[22556]+(e-a|0);if(i[22544]<5){break a}a=i[22545]+i[22546]|0;d=i[22548];i[c+80>>2]=a-d;i[c+64>>2]=b;i[c+72>>2]=e;i[c+68>>2]=a+d;i[c+76>>2]=i[22555];V(i[22543],8140,25696,c- -64|0);break a}if(!i[22538]){V(i[22543],6081,25751,0);X(5,0,0)}i[22547]=i[22547]+1;b=i[22553]+a|0;i[22553]=b;if(i[22554]<(b|0)){i[22554]=b}b=za(a);if(!b){i[c+32>>2]=a;V(i[22543],6082,25820,c+32|0);X(4,0,0)}if(i[22544]<5){break a}e=i[22547];d=i[22549];i[c+16>>2]=e-d;i[c>>2]=b;i[c+8>>2]=a;i[c+12>>2]=i[22553];i[c+4>>2]=d+e;V(i[22543],8057,25889,c)}S=c+160|0;return b}function Ce(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;e=S-80|0;S=e;a:{b:{if(i[21886]>=4){i[e+64>>2]=i[a+76>>2];i[e+68>>2]=b;V(i[22423],4028,35814,e- -64|0);break b}if(!a){break a}}d=i[a+48>>2];if(d){c=a;while(1){i[c+80>>2]=i[c+80>>2]&-12582913;c=d;d=i[c+48>>2];if(d){continue}break}}d=a;while(1){if(i[d+48>>2]){c:{if(!(j[d+82|0]&32)){break c}c=i[d+60>>2];if(!c){break c}c=c+4|0;while(1){h=c+4|0;f=i[c>>2];if((f|0)!=2){if(!f){break c}c=h;if(!(j[f+82|0]&32)){continue}if(!da(i[f+60>>2],d)){la(d,f,7,0,1);i[d+80>>2]=i[d+80>>2]|12582912;g=g+1|0;continue}if(!Pc(i[d+52>>2],i[f+52>>2])){continue}if(i[21886]>=3){c=i[f+76>>2];i[e+48>>2]=i[d+76>>2];i[e+52>>2]=c;V(i[22423],3043,35885,e+48|0)}la(d,f,7,0,1);i[d+80>>2]=i[d+80>>2]|12582912;g=g+1|0}else{i[d+80>>2]=i[d+80>>2]|4194304;c=h;continue}break}}d=i[d+48>>2];if(d){continue}}break}if(!g){break a}c=i[21886];if(!b){if((c|0)<1){break a}i[e>>2]=g;V(i[22423],1012,35967,e);break a}if((c|0)>=1){i[e+32>>2]=g;V(i[22423],1048,36052,e+32|0)}while(1){b=i[a+48>>2];if(b){if((i[a+80>>2]&12582912)==4194304){Pa(a);a=i[a+48>>2]}else{a=b}if(a){continue}}break}if(i[21886]>=3){V(i[22423],3075,36158,0)}a=i[22496];if(!a){break a}c=i[a+4>>2];if(!c){break a}d=a+8|0;while(1){if(i[c+40>>2]==7){d:{e:{a=i[c+20>>2];if(j[a+82|0]&128){if(da(i[a+60>>2],i[c+16>>2])){break e}a=i[c+20>>2]}Z(a+60|0,i[c+16>>2]);break d}a=i[i[c+20>>2]+76>>2];i[e+16>>2]=i[i[c+16>>2]+76>>2];i[e+20>>2]=a;V(i[22423],6361,36236,e+16|0);ca(7,i[c+16>>2],i[c+20>>2])}Pa(i[c+16>>2])}c=i[d>>2];d=d+4|0;if(c){continue}break}}S=e+80|0}function uc(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,l=0,m=0,p=0;f=S-112|0;S=f;h=i[c>>2];a:{b:{if(d){break b}c:{if(i[21922]){d=i[21920];if(j[b+82|0]&8){break c}d=i[b+60>>2];if(!d){break a}d=d+4|0;while(1){e=i[d>>2];if(!e){break a}d=d+4|0;if(!(j[e+82|0]&8)){continue}break}break b}d=i[b+80>>2]&524288;if(i[21920]){break c}d=i[b+24>>2];if(!d){break a}d=qa(d,0)}if(!d){break a}}if(i[21923]){break a}e=i[b+80>>2];if(i[22472]?e&2048:0){break a}d=i[b+24>>2];if(!d){break a}if(a){k=s(t((n[d>>3]+1)*.5,-1),1);l=s(t((n[d+16>>3]+1)*.5,-1),1);m=s(t((n[d+8>>3]+1)*.5,-1),1)}g=i[22492];i[b+72>>2]=g;d:{if(e&8192){d=i[b+60>>2];if(!d){break d}e=i[d+4>>2];if(!e){break d}d=d+8|0;if(!a){while(1){h=(i[e+72>>2]!=(g|0))+h|0;e=i[d>>2];d=d+4|0;if(e){continue}break d}}while(1){if(i[e+72>>2]!=(g|0)){g=i[b+76>>2];i[f+108>>2]=i[e+76>>2];i[f+104>>2]=g;n[f+96>>3]=l;n[f+88>>3]=m;n[f+80>>3]=k;e=o(h,3);i[f+64>>2]=e;i[f+72>>2]=e+2;i[f+68>>2]=e+1;V(a,9084,14561,f- -64|0);h=h+1|0}e=i[d>>2];if(!e){break d}d=d+4|0;g=i[22492];continue}}e=i[b+56>>2];if(!e){break d}d=i[e+4>>2];if(!d){break d}e=e+8|0;if(!a){while(1){a=i[d+4>>2];if((a|0)==(b|0)){a=i[d+8>>2]}h=(i[a+72>>2]!=(g|0))+h|0;d=i[e>>2];e=e+4|0;if(d){continue}break d}}while(1){g=i[d+4>>2];if((g|0)==(b|0)){g=i[d+8>>2]}if(i[g+72>>2]!=i[22492]){d=i[d+12>>2];p=i[b+76>>2];i[f+48>>2]=i[g+76>>2];i[f+44>>2]=p;i[f+40>>2]=d;n[f+32>>3]=l;n[f+24>>3]=m;n[f+16>>3]=k;d=o(h,3);i[f>>2]=d;i[f+8>>2]=d+2;i[f+4>>2]=d+1;V(a,9085,14603,f);h=h+1|0}d=i[e>>2];e=e+4|0;if(d){continue}break}}i[c>>2]=h}S=f+112|0}function gg(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;c=S+ -64|0;S=c;a:{b:{if(!i[22012]){b=i[22011];i[22012]=i[22010];i[22013]=b;b=za(o(i[22009],i[22007])<<3);i[22010]=b;if(!b){i[c+48>>2]=i[22009];V(i[22423],6009,4589,c+48|0);X(4,0,0)}i[22011]=1;if(n[11231]!=0){break a}n[11231]=qh(i[22012],i[22009],i[22007]);break b}if(i[21973]|i[22453]<3){break b}f=n[11231];a=n[11149]*.01;if(f<a^1){break b}f=f*10;n[11231]=f;if(f>a^1){break b}n[11231]=a}ia(4643,0,89848)}c:{if(i[22453]<2){break c}a=n[11231];if(a>t(n[11149]*.25,.1)^1){break c}n[c+32>>3]=a;V(i[22423],6010,4651,c+32|0);X(1,0,0)}i[c+60>>2]=db();ia(4824,c+60|0,0);if(i[21886]){i[c+24>>2]=i[c+60>>2];n[c+16>>3]=n[11231];V(i[22423],6,4837,c+16|0)}e=o(i[22007],i[22009]);if(e){a=n[11231];f=(a+a)/2147483646;b=i[22012];d=i[22010];while(1){g=db();n[d>>3]=n[b>>3]+(f*+(g|0)-a);d=d+8|0;b=b+8|0;e=e+ -1|0;if(e){continue}break}}d:{if(!i[21874]){break d}i[22514]=-1;i[22515]=2146435071;i[22516]=-1;i[22517]=2146435071;i[22512]=-1;i[22513]=2146435071;g=i[22010];h=i[22009];j=i[22007];if(i[21886]){i[c>>2]=h;V(i[22423],11,7518,c)}e:{if((h|0)<1){break e}k=j+ -2|0;if(!k){d=0;b=g;while(1){a=n[b>>3];n[b+8>>3]=a*a;b=b+16|0;d=d+1|0;if((h|0)!=(d|0)){continue}break}break e}m=j+ -1<<3;e=g;while(1){a=n[e>>3];a=a*a;b=e;d=k;while(1){f=a;a=n[b+8>>3];a=f+a*a;b=b+8|0;d=d+ -1|0;if(d){continue}break}n[e+m>>3]=a;e=(j<<3)+e|0;l=l+1|0;if((l|0)!=(h|0)){continue}break}}a=n[11256];if(a<8.988465674311579e+307^1){break d}Fc(g,h,j,a,n[11257],n[11258])}S=c- -64|0}function hc(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0;c=S+ -64|0;S=c;i[c+60>>2]=0;b=i[22007];if(i[21886]>=1){V(i[22423],1019,49700,0)}a=i[22431];a:{if(!a){break a}e=b<<2;f=b+1|0;while(1){if(!i[a+48>>2]){break a}b=i[a+60>>2];i[((i[b>>2]<<2)+b|0)+4>>2]=f;fa(b+8|0,0,e);g=g+1|0;a=i[a+48>>2];if(a){continue}break}}$d(o(i[22007]+ -1|0,g));f=W(i[22499]);b=i[22431];b:{if(!b){break b}while(1){if(!i[b+48>>2]){break b}if(!(j[b+81|0]&32)){a=i[b+76>>2];i[c+48>>2]=i[i[22431]+76>>2];i[c+52>>2]=a;V(i[22423],6377,49752,c+48|0);ca(5,b,i[22431])}a=1;if(i[22007]>=2){while(1){Zg(b,a,f,c+60|0);a=a+1|0;if((a|0)<i[22007]){continue}break}}b=i[b+48>>2];if(b){continue}break}}a=i[c+60>>2];c:{if(!a){break c}sa(49934);b=i[22431];if(b){while(1){if(i[b+48>>2]){d:{if(!(j[b+82|0]&32)){break d}d=i[b+60>>2];if(!d){break d}e=i[d+4>>2];a=0;d=W(d);if((d|0)<1){break d}while(1){e:{if((e|0)!=1){break e}k=Ng(b,a,f,c+60|0);if(h<k^1){break e}h=k}a=a+1|0;e=i[(i[b+60>>2]+(a<<2)|0)+4>>2];if((a|0)!=(d|0)){continue}break}}b=i[b+48>>2];if(b){continue}}break}a=i[c+60>>2];if(!a){break c}}i[c+32>>2]=a;V(i[22423],6108,49964,c+32|0);Lg(i[22423]);X(5,0,0)}if(i[21886]>=3){a=i[22499];f:{if(!a){e=0;b=0;break f}f=i[a+4>>2];d=W(a);b=0;e=i[22499];if((d|0)<1){break f}a=0;while(1){b=!f+b|0;a=a+1|0;f=i[((a<<2)+e|0)+4>>2];if((a|0)!=(d|0)){continue}break}}a=i[22423];i[c+16>>2]=W(e);i[c+12>>2]=b;i[c+8>>2]=g;n[c>>3]=h;V(a,3063,50037,c)}ga(89996);if(!(!(i[21897]|i[21915])|i[21886]<4)){Kb(i[22431])}S=c- -64|0;return h}function Lc(a,b){var c=0,d=0,e=0,f=0,g=0;c=S-288|0;S=c;a:{b:{if(i[22009]==i[22444]){f=i[22918];if(f){break b}}i[22920]=0;i[22921]=0;e=0;break a}d=n[11461];g=n[11460];if((f|0)<=0){n[c+272>>3]=d;i[c+256>>2]=f;n[c+264>>3]=g;V(i[22423],7101,79289,c+256|0);e=0;break a}e=+(f|0);g=g/e;e=w(q(d/e-g*g))}n[11461]=e;d=0;f=i[22934];c:{if(!f){break c}g=n[11427];e=n[11426];if((f|0)<=0){n[c+240>>3]=g;i[c+224>>2]=f;n[c+232>>3]=e;V(i[22423],7101,79289,c+224|0);break c}d=e;e=+(f|0);d=d/e;d=w(q(g/e-d*d))}n[11427]=d;i[c+208>>2]=88572;i[c+192>>2]=b;i[c+196>>2]=88316;i[c+200>>2]=88056;i[c+204>>2]=7840;V(a,9350,78422,c+192|0);n[c+144>>3]=n[11141];n[c+152>>3]=n[10930];n[c+160>>3]=n[10953];n[c+168>>3]=n[10947];n[c+176>>3]=n[11159];n[c+128>>3]=n[11145];n[c+136>>3]=n[11144];V(a,9351,78475,c+128|0);if(i[22006]){n[c+112>>3]=n[11156];V(a,9352,78871,c+112|0)}d=n[10935];if(!(d<8.988465674311579e+307^1)){n[c+96>>3]=d;V(a,9353,78916,c+96|0)}if(i[21915]){n[c+80>>3]=n[10950];V(a,9354,78956,c+80|0)}d=n[10936];if(!(d<8.988465674311579e+307^1)){n[c+64>>3]=d;V(a,9355,78992,c- -64|0)}if(i[21914]){n[c+48>>3]=n[10951];V(a,9356,79033,c+48|0)}b=0;n[c+32>>3]=n[11151];i[c+24>>2]=0;i[c+28>>2]=1018167296;n[c+16>>3]=n[11157];V(a,9357,79070,c+16|0);if(i[22007]>=1){while(1){n[c>>3]=n[i[22310]+(b<<3)>>3];V(a,9358,79243,c);b=b+1|0;if((b|0)<i[22007]){continue}break}}b=0;V(a,9359,79250,0);i[c+284>>2]=0;if(i[23640]>=1){while(1){$b(a,b,c+284|0);b=i[c+284>>2];if((b|0)<i[23640]){continue}break}}S=c+288|0}function Xe(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0;f=S-96|0;S=f;d=i[22009];e=W(i[22500]);Ub(b,c,0,f+92|0,f+88|0,f+80|0,f+84|0,f+76|0,f+72|0);d=d+e|0;i[f+48>>2]=d;V(a,9248,13110,f+48|0);Na();e=Ja(b,c,0);i[f+68>>2]=e;g=ba(d);i[f+64>>2]=g;j=ba(d);i[f+60>>2]=j;jb(g,d);jb(j,d);a:{if(!e){break a}d=i[e+4>>2];if(!d){break a}e=e+4|0;while(1){Rc(g,i[d+8>>2],d);d=i[e+4>>2];e=e+4|0;if(d){continue}break}}b:{if(!b){break b}while(1){e=b;b=i[b+48>>2];if(!b){break b}h=i[e+68>>2];c:{if(!h){break c}d=i[h+4>>2];if(!d){break c}b=h+4|0;while(1){Rc(j,d,e);d=i[b+4>>2];b=b+4|0;if(d){continue}break}b=i[e+48>>2]}if(b){continue}break}}d:{if(!c){break d}e=i[c+4>>2];if(!e){break d}d=c+8|0;while(1){c=d;b=i[e+68>>2];e:{if(!b){break e}d=i[b+4>>2];if(!d){break e}b=b+4|0;while(1){Rc(j,d,e);d=i[b+4>>2];b=b+4|0;if(d){continue}break}}d=c+4|0;e=i[c>>2];if(e){continue}break}}f:{if(!g){break f}d=i[g+4>>2];k=W(g);if((k|0)<1){break f}c=0;while(1){g:{if(d){i[f+32>>2]=W(i[d+12>>2]);V(a,9249,13103,f+32|0);qd(d);b=i[d+12>>2];h:{if(!b){break h}d=i[b+4>>2];if(!d){break h}b=b+8|0;while(1){e=f;h=i[d+72>>2];i:{if(h){d=h+ -1|0;break i}d=0-i[d+76>>2]|0}i[e+16>>2]=d;V(a,9250,13106,f+16|0);d=i[b>>2];b=b+4|0;if(d){continue}break}}V(a,9251,13098,0);break g}d=i[((c<<2)+j|0)+4>>2];if(d){b=f;e=i[d+72>>2];j:{if(e){d=e+ -1|0;break j}d=0-i[d+76>>2]|0}i[b>>2]=d;V(a,9252,17764,f);break g}V(a,9253,13100,0)}c=c+1|0;d=i[((c<<2)+g|0)+4>>2];if((c|0)!=(k|0)){continue}break}}_(f+60|0);_(f- -64|0);_(f+68|0);S=f+96|0}function lh(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=S-144|0;S=e;if(!i[a+40>>2]){i[a+40>>2]=Da(a)}i[22602]=i[22602]+1;aa(i[a+40>>2],b,e+136|0);g=n[e+136>>3];f=n[11142];h=0;a:{if(g>f){break a}k=1;h=0;if(g>=-f^1){break a}j=1;h=1}if(!i[b+40>>2]){i[b+40>>2]=Da(b)}l=1;i[22602]=i[22602]+1;aa(i[b+40>>2],a,e+128|0);b:{c:{d:{e:{g=n[e+128>>3];f=n[11142];m=g>f;if(!(h|m)){if(!(g>=-f^1)){break e}j=0;h=0;if(!k){break c}break b}j=m?j:1;if(!((m^1)&k)){break c}if(j){break d}h=0;break b}j=1;if(!k){break c}}l=0;j=1;if(!i[21897]){break c}h=0;if(!i[22482]){break b}}if(!(!i[21858]|d)){c=bb(i[a+24>>2],i[b+24>>2]);i[22574]=i[22574]+1}if(!(!j|l^1)){i[22620]=i[22620]+1;g=n[e+136>>3];f=n[e+128>>3];f:{if(!(g>f^1)){la(a,b,4,g,c);break f}la(b,a,4,f,c)}h=1;if(!i[21886]){break b}b=i[b+76>>2];a=i[a+76>>2];n[e+16>>3]=n[e+128>>3];n[e+24>>3]=c;i[e+32>>2]=i[22455];i[e>>2]=a;i[e+4>>2]=b;n[e+8>>3]=n[e+136>>3];V(i[22423],36,45491,e);break b}g=n[e+136>>3];if(l){h=1;i[22622]=i[22622]+1;f=n[e+128>>3];la(a,b,3,g<f?f:g,c);if(!i[21886]){break b}b=i[b+76>>2];a=i[a+76>>2];n[e- -64>>3]=n[e+128>>3];n[e+72>>3]=c;i[e+80>>2]=i[22455];i[e+48>>2]=a;i[e+52>>2]=b;n[e+56>>3]=n[e+136>>3];V(i[22423],37,45602,e+48|0);break b}h=1;i[22634]=i[22634]+1;f=n[e+128>>3];f=f<0?-f:f;g=g<0?-g:g;la(a,b,1,g>f?f:g,c);if(i[21886]<2){break b}b=i[b+76>>2];a=i[a+76>>2];n[e+112>>3]=n[e+128>>3];n[e+120>>3]=c;i[e+96>>2]=a;i[e+100>>2]=b;n[e+104>>3]=n[e+136>>3];V(i[22423],2097,45704,e+96|0)}S=e+144|0;return h}function ye(a){var b=0,c=0,d=0,e=0,f=0,h=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0;b=S-80|0;S=b;q=i[22007];a:{if(!i[21868]|(q|0)<3){break a}e=i[a+56>>2];if(!e){break a}d=i[e+4>>2];p=W(e);if((p|0)<1){break a}r=q+ -2|0;e=0;while(1){e=e+1|0;m=i[d+4>>2];if((m|0)==(a|0)){m=i[d+8>>2]}if(!(k[m+82>>1]&49185|(e|0)>=(p|0))){m=e;while(1){f=i[(i[a+56>>2]+(m<<2)|0)+4>>2];c=i[f+4>>2];if((c|0)==(a|0)){c=i[f+8>>2]}b:{if(k[c+82>>1]&49185){break b}h=i[d>>2];c=r<<2;l=i[f>>2];if(i[(h+c|0)+4>>2]!=i[(l+c|0)+4>>2]|i[h+4>>2]!=i[l+4>>2]){break b}c=1;c:{d:{if((q|0)<4){break d}while(1){o=c<<2;if(i[(o+h|0)+4>>2]!=i[(l+o|0)+4>>2]){break d}c=c+1|0;if((r|0)!=(c|0)){continue}break}break c}if((c|0)!=(r|0)){break b}}c=cd(d,b+76|0,b- -64|0);e:{f:{h=i[d+4>>2];if((h|0)!=i[f+8>>2]){break f}l=i[d+8>>2];if((l|0)!=i[f+4>>2]){break f}if(i[21886]<2){break e}o=i[c+16>>2];s=i[i[b+76>>2]+16>>2];l=i[l+76>>2];h=i[h+76>>2];t=i[f+12>>2];i[b+16>>2]=i[d+12>>2];i[b+20>>2]=t;i[b+24>>2]=h;i[b+28>>2]=l;i[b>>2]=s;i[b+4>>2]=o;n[b+8>>3]=n[b+64>>3];V(i[22423],2088,36472,b);break e}if(i[21886]<2){break e}h=i[c+16>>2];l=i[i[b+76>>2]+16>>2];o=i[a+76>>2];s=i[f+12>>2];i[b+48>>2]=i[d+12>>2];i[b+52>>2]=s;i[b+56>>2]=o;i[b+32>>2]=l;i[b+36>>2]=h;n[b+40>>3]=n[b+64>>3];V(i[22423],2083,36592,b+32|0)}mc(i[b+76>>2],c,9,n[b+64>>3],d,f);g[d+16|0]=j[d+16|0]|8;g[f+16|0]=j[f+16|0]|8}m=m+1|0;if((p|0)!=(m|0)){continue}break}}d=i[(i[a+56>>2]+(e<<2)|0)+4>>2];if((e|0)!=(p|0)){continue}break}}S=b+80|0}function ce(a,b,c,d,e,f,g){var h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0;k=S-48|0;S=k;p=i[22503];j=i[22502];a:{b:{if(!c){break b}c=c+4|0;if(d){while(1){g=i[c>>2];if(!g){break b}c=c+4|0;if((d|0)==(g|0)){continue}i[(m<<2)+p>>2]=j;m=m+1|0;if(!a){continue}h=i[g+8>>2];g=a;o=b;while(1){n[j>>3]=n[h>>3]-n[o>>3];j=j+8|0;o=o+8|0;h=h+8|0;g=g+ -1|0;if(g){continue}break}continue}}h=i[c>>2];if(!h){break b}c=c+4|0;while(1){q=c;i[(m<<2)+p>>2]=j;l=n[g>>3];o=i[h+8>>2];c:{d:{e:{if(a){d=a;c=f;h=o;while(1){l=l+n[h>>3]*n[c>>3];c=c+8|0;h=h+8|0;d=d+ -1|0;if(d){continue}break}if(l<-n[11159]){break e}d=a;c=f;h=b;if(a){break d}break c}if(!(l<-n[11159])){break c}}i[22870]=i[22870]+1;l=0;break a}while(1){n[j>>3]=n[o>>3]-l*n[c>>3]-n[h>>3];j=j+8|0;h=h+8|0;c=c+8|0;o=o+8|0;d=d+ -1|0;if(d){continue}break}}m=m+1|0;c=q+4|0;h=i[q>>2];if(h){continue}break}}g=a+ -1|0;if((g|0)!=(m|0)){i[k+32>>2]=m;i[k+36>>2]=a;V(i[22423],6008,4019,k+32|0);X(5,0,0)}i[(m<<2)+p>>2]=j;c=0;f:{if(i[21874]){if((a|0)>1){f=g<<3;while(1){d=f+i[(c<<2)+p>>2]|0;i[d>>2]=0;i[d+4>>2]=0;c=c+1|0;if((g|0)!=(c|0)){continue}break}}if(a){fa(j,0,a<<3)}c=i[(g<<2)+p>>2]+(g<<3)|0;i[c>>2]=0;i[c+4>>2]=-1074790400;break f}if(!a){break f}c=a;while(1){n[j>>3]=n[f>>3];j=j+8|0;f=f+8|0;c=c+ -1|0;if(c){continue}break}}i[22670]=i[22670]+1;l=lc(p,a,k+44|0);l=(e?-l:l)*n[11e3];if(i[21886]<4){break a}c=i[22423];a=Y(b);i[k+16>>2]=i[k+44>>2];n[k>>3]=l;i[k+8>>2]=a;i[k+12>>2]=e;V(c,4010,4089,k)}S=k+48|0;return l}function fd(a){var b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0,o=0;e=S+ -64|0;S=e;if(i[21886]>=3){b=i[i[a+8>>2]+76>>2];d=i[i[a+4>>2]+76>>2];i[e+48>>2]=i[a+12>>2];i[e+52>>2]=d;i[e+56>>2]=b;V(i[22423],3036,31901,e+48|0)}b=j[a+16|0];a:{if(!(b&4)){break a}g[a+16|0]=b&251;h=i[a+4>>2];b=i[h+56>>2];if(!b){break a}c=i[b+4>>2];if(!c){break a}f=i[a+8>>2];b=b+8|0;while(1){d=b;b:{c:{if((f|0)!=i[c+4>>2]){if((a|0)==(c|0)){break b}if((f|0)==i[c+8>>2]){break c}break b}if((a|0)==(c|0)){break b}}g[c+16|0]=j[c+16|0]|4;if(i[21886]<4){break a}b=i[f+76>>2];d=i[h+76>>2];c=i[c+12>>2];i[e+32>>2]=i[a+12>>2];i[e+36>>2]=c;i[e+40>>2]=d;i[e+44>>2]=b;V(i[22423],4020,31495,e+32|0);break a}b=d+4|0;c=i[d>>2];if(c){continue}break}}b=i[a>>2];d:{if(!b){break d}c=i[b+4>>2];if(!c){break d}d=b+4|0;while(1){g[c+24|0]=j[c+24|0]|8;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}b=i[22498];e:{if(!b){break e}d=i[b+4>>2];f=W(b);if((f|0)<1){break e}c=0;while(1){b=i[d+32>>2];if(!(i[d+36>>2]!=(a|0)?(b|0)!=(a|0):0)){if(i[21886]>=3){k=n[d+8>>3];h=i[i[d+28>>2]+16>>2];l=i[i[d+24>>2]+16>>2];m=i[a+12>>2];o=i[i[d+36>>2]+12>>2];i[e+16>>2]=i[b+12>>2];i[e+20>>2]=o;i[e+24>>2]=m;i[e>>2]=l;i[e+4>>2]=h;n[e+8>>3]=k;V(i[22423],3029,31958,e);b=i[d+32>>2]}if((a|0)==(b|0)){b=i[d+36>>2]}g[b+16|0]=j[b+16|0]&247;Ta(i[22498],c);f=f+ -1|0;c=c+ -1|0}c=c+1|0;d=i[(i[22498]+(c<<2)|0)+4>>2];if((c|0)<(f|0)){continue}break}}ja(i[i[a+4>>2]+56>>2],a);ja(i[i[a+8>>2]+56>>2],a);dc(a);S=e- -64|0}function vh(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0,m=0,n=0,o=0;g=S-16|0;S=g;a:{if(j[b+81|0]&32){d=i[b+52>>2];if(!d){break a}e=i[d+4>>2];if(!e){break a}d=d+8|0;while(1){f=i[22493];if((f|0)!=i[e+20>>2]){i[e+20>>2]=f;Z(c,e);h=h+1|0}e=i[d>>2];d=d+4|0;if(e){continue}break}break a}d=i[b+56>>2];if(!d){break a}e=i[d+4>>2];if(!e){break a}m=i[22007];f=m+ -2|0;d=d+8|0;if((m|0)>=5){m=f<<2;while(1){f=d;d=i[e+4>>2];if((d|0)==(b|0)){d=i[e+8>>2]}b:{if(i[d+72>>2]!=i[22492]){break b}d=i[e>>2];c:{if(i[d+4>>2]==(a|0)){break c}k=i[d+8>>2];n=i[a+16>>2];if(l[k+16>>2]<n>>>0){break b}o=i[(d+m|0)+4>>2];if(l[o+16>>2]>n>>>0){break b}if((a|0)==(k|0)|(a|0)==(o|0)){break c}if(!da(d,a)){break b}d=i[e>>2];if(!d){break b}}e=i[d+4>>2];if(!e){break b}d=d+8|0;while(1){k=i[22493];if((k|0)!=i[e+20>>2]){i[e+20>>2]=k;Z(c,e);h=h+1|0}e=i[d>>2];d=d+4|0;if(e){continue}break}}d=f+4|0;e=i[f>>2];if(e){continue}break}break a}k=f<<2;while(1){f=d;d=i[e+4>>2];if((d|0)==(b|0)){d=i[e+8>>2]}d:{if(i[d+72>>2]!=i[22492]){break d}d=i[e>>2];e=i[d+4>>2];if((i[d+8>>2]!=(a|0)|(m|0)<4?!((e|0)==(a|0)|i[(d+k|0)+4>>2]==(a|0)):0)|!e){break d}d=d+8|0;while(1){n=i[22493];if((n|0)!=i[e+20>>2]){i[e+20>>2]=n;Z(c,e);h=h+1|0}e=i[d>>2];d=d+4|0;if(e){continue}break}}d=f+4|0;e=i[f>>2];if(e){continue}break}}i[b+72>>2]=i[22492]+ -1;if(!(!h|i[21886]<4)){c=i[b+80>>2];b=i[b+76>>2];a=i[a+16>>2];i[g>>2]=h;i[g+4>>2]=a;i[g+8>>2]=b;i[g+12>>2]=c>>>13&1;V(i[22423],4079,42563,g)}S=g+16|0}function td(a,b){var c=0,d=0,e=0,f=0,h=0,k=0,l=0;e=S-32|0;S=e;a:{if(!(!(j[b+81|0]&8)|!i[22472])){V(a,9179,16100,0);b=i[b+56>>2];b:{if(!b){break b}d=i[b+4>>2];if(!d){break b}c=b+4|0;while(1){i[e>>2]=i[d+12>>2];V(a,9180,16130,e);d=i[c+4>>2];c=c+4|0;if(d){continue}break}}V(a,9181,13098,0);break a}V(a,9182,16135,0);c=i[b+56>>2];c:{if(!c){break c}d=i[c+4>>2];if(!d){break c}c=c+4|0;while(1){g[d+16|0]=j[d+16|0]&254;d=i[c+4>>2];c=c+4|0;if(d){continue}break}}d:{if(i[22007]==3){d=i[i[b+56>>2]+4>>2];if(!d){break d}while(1){c=j[d+16|0];if(c&1){break d}g[d+16|0]=c|1;Pb(a,d);f=f+1|0;d=Tg(d,b);if(d){continue}break}break d}c=i[b+60>>2];if(!c){break d}h=i[c+4>>2];if(!h){break d}d=c+8|0;while(1){k=d;c=i[b+56>>2];e:{if(!c){break e}d=i[c+4>>2];if(!d){break e}c=c+8|0;while(1){l=c;c=i[d+4>>2];if((c|0)==(b|0)){c=i[d+8>>2]}f:{if((c|0)!=(h|0)){break f}c=j[d+16|0];if(c&1){break f}g[d+16|0]=c|1;Pb(a,d);f=f+1|0}c=l+4|0;d=i[l>>2];if(d){continue}break}}d=k+4|0;h=i[k>>2];if(h){continue}break}}c=W(i[b+56>>2]);if(!((c|0)!=1|!(j[b+81|0]&4)|!i[22473])){V(a,9411,16150,0)}if((c|0)!=(f|0)){V(a,9183,16189,0);c=i[b+56>>2];g:{if(!c){break g}d=i[c+4>>2];if(!d){break g}c=c+4|0;while(1){i[e+16>>2]=i[d+12>>2];V(a,9184,16130,e+16|0);d=i[c+4>>2];c=c+4|0;if(d){continue}break}}V(a,9185,13098,0)}b=i[b+56>>2];if(!b){break a}d=i[b+4>>2];if(!d){break a}c=b+8|0;while(1){if(!(g[d+16|0]&1)){Pb(a,d)}d=i[c>>2];c=c+4|0;if(d){continue}break}}S=e+32|0}function sc(a){var b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0;e=S-80|0;S=e;if(i[21886]>=3){b=i[i[22431]+76>>2];i[e+64>>2]=i[i[22432]+76>>2];i[e+68>>2]=b;V(i[22423],3042,22695,e- -64|0)}a:{if(!i[21912]){break a}k=n[11234];if(n[10930]<k^1){break a}n[10930]=k}i[a>>2]=0;d=i[22432];b:{if(!d){break b}while(1){if(!(j[d+81|0]&8)){break b}c:{if(i[d+68>>2]?0:!i[d+64>>2]){break c}b=Ab(d);f=b?b:i[22431];if(!i[f+48>>2]){V(i[22423],6170,22808,0);X(7,0,0)}b=i[d+64>>2];d:{if(!b){break d}b=W(b);i[a>>2]=b+i[a>>2];i[22445]=i[22445]-b;b=i[d+64>>2];if(!b){break d}c=i[b+4>>2];if(!c){break d}b=b+4|0;while(1){nd(c,f);c=i[b+4>>2];b=b+4|0;if(c){continue}break}}b=i[d+68>>2];if(!b|(i[21889]+i[21888]|0)==(0-i[22006]|0)){break c}l=W(b)+l|0;b=i[d+68>>2];if(!b){break c}c=i[b+4>>2];if(!c){break c}b=b+8|0;while(1){$a(c,f,0,i[22474]);c=i[b>>2];b=b+4|0;if(c){continue}break}}d=i[d+48>>2];if(d){continue}break}}h=W(i[22501]);e:{if((h|0)<1){break e}if(i[21886]>=3){b=i[i[22431]+76>>2];i[e+48>>2]=h;i[e+52>>2]=1;i[e+56>>2]=b;V(i[22423],3049,22923,e+48|0)}b=i[22501];if(!b){break e}c=i[b+4>>2];if(!c){break e}b=b+8|0;while(1){f=b;b=i[c+8>>2];if(!(!b|j[c+24|0]&32)){d=i[22431];if(!(i[22429]!=(d|0)?d:0)){i[e+16>>2]=i[c+16>>2];V(i[22423],6284,23018,e+16|0);X(5,0,0);d=i[22431];b=i[c+8>>2]}$a(b,d,0,1);g[c+24|0]=j[c+24|0]|32}b=f+4|0;c=i[f>>2];if(c){continue}break}}if(i[21886]>=1){i[e>>2]=i[a>>2];i[e+4>>2]=l;i[e+8>>2]=h;V(i[22423],1043,23135,e)}S=e+80|0}function Jg(a,b){var c=0,d=0,e=0,f=0,g=0;e=S-16|0;S=e;i[e+12>>2]=0;a:{if(i[21886]<=2){i[22450]=i[22447];break a}i[e>>2]=i[a+76>>2];V(i[22423],3020,68656,e);i[22450]=i[22447];if(i[21886]<4){break a}rb(i[22423],a)}d=i[a+60>>2];b:{if(!d){break b}c=i[d+4>>2];if(!c){break b}d=d+4|0;while(1){i[c+80>>2]=i[c+80>>2]&-16793601;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}c:{if(i[a+40>>2]|i[22454]!=1){break c}f=n[(i[a+24>>2]+(i[22007]<<3)|0)+ -8>>3];g=f<0?-f:f;f=n[11141];if(g>=f+f^1){break c}i[a+40>>2]=Sc(i[a+52>>2])}c=i[22429];i[22432]=c;i[22431]=c;i[a+72>>2]=i[22492];me(a,i[i[a+52>>2]+4>>2],e+12|0);nb(a,0);c=i[22431];d:{if(!c){break d}while(1){if(!i[c+48>>2]){break d}i[c+32>>2]=a;d=i[c+80>>2]|512;i[c+80>>2]=d&-1073741825;d=i[a+80>>2]&131072|d&-1073872897;i[c+80>>2]=d;d=d&-1074266113|i[a+80>>2]&524288;i[c+80>>2]=d;e:{if(i[21994]){i[c+80>>2]=d|268435456;if(i[a+24>>2]){d=ha(i[22425]);i[c+24>>2]=d;oa(d,i[a+24>>2],i[22425])}f:{switch(i[22454]+ -1|0){case 1:i[c+40>>2]=Da(c);break e;case 0:break f;default:break e}}if(!i[a+40>>2]){break e}d=ha(i[22426]);i[c+40>>2]=d;oa(d,i[a+40>>2],i[22426]);break e}i[c+80>>2]=d&-1342177281;i[c+24>>2]=i[a+24>>2];i[c+40>>2]=i[a+40>>2]}n[c+16>>3]=n[a+16>>3];n[c+8>>3]=n[a+8>>3];c=i[c+48>>2];if(c){continue}break}}hc();i[23004]=i[23004]+1;a=i[e+12>>2];i[23008]=a+i[23008];if(i[23006]<(a|0)){i[23006]=a}if(!i[b>>2]){i[b>>2]=i[22442]}i[22432]=0;i[22442]=0;fc();Ga(0,0);S=e+16|0}function Xg(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0;c=S-96|0;S=c;a=i[22009]+W(i[22500])|0;e=ba(a);jb(e,a);i[22493]=i[22493]+1;f=i[22428];a:{if(!f){break a}while(1){if(!i[f+48>>2]){break a}a=i[f+52>>2];b:{if(!a){break b}d=i[a+4>>2];if(!d){break b}a=a+8|0;while(1){b=a;a=i[22493];c:{if((a|0)==i[d+20>>2]){break c}i[d+20>>2]=a;g=i[e>>2];h=i[((g<<2)+e|0)+4>>2];d=i[d+8>>2];a=Y(d);if((a|0)<=-1){i[c+64>>2]=d;i[c+68>>2]=a;V(i[22423],7067,66904,c- -64|0);break c}d=h?h+ -1|0:g;if((a|0)>=(d|0)){i[c+80>>2]=a;i[c+84>>2]=d;V(i[22423],6160,66964,c+80|0);X(5,0,0);break c}i[((a<<2)+e|0)+4>>2]=f}a=b+4|0;d=i[b>>2];if(d){continue}break}}b=i[f+68>>2];d:{if(!b){break d}a=i[b+4>>2];if(!a){break d}d=b+4|0;while(1){g=i[e>>2];h=i[((g<<2)+e|0)+4>>2];d=d+4|0;b=Y(a);e:{if((b|0)<=-1){i[c+32>>2]=a;i[c+36>>2]=b;V(i[22423],7067,66904,c+32|0);break e}a=h?h+ -1|0:g;if((b|0)>=(a|0)){i[c+48>>2]=b;i[c+52>>2]=a;V(i[22423],6160,66964,c+48|0);X(5,0,0);break e}i[((b<<2)+e|0)+4>>2]=f}a=i[d>>2];if(a){continue}break}}b=i[f+64>>2];f:{if(!b){break f}a=i[b+4>>2];if(!a){break f}d=b+4|0;while(1){g=i[e>>2];h=i[((g<<2)+e|0)+4>>2];d=d+4|0;b=Y(a);g:{if((b|0)<=-1){i[c>>2]=a;i[c+4>>2]=b;V(i[22423],7067,66904,c);break g}a=h?h+ -1|0:g;if((b|0)>=(a|0)){i[c+16>>2]=b;i[c+20>>2]=a;V(i[22423],6160,66964,c+16|0);X(5,0,0);break g}i[((b<<2)+e|0)+4>>2]=f}a=i[d>>2];if(a){continue}break}}f=i[f+48>>2];if(f){continue}break}}S=c+96|0;return e}function _a(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0;g=S-32|0;S=g;j=n[11420];a:{if((b|0)==2){d=n[a>>3];e=d*d;d=n[a+8>>3];d=w(e+d*d);break a}b:{switch(b+ -3|0){case 0:d=n[a>>3];e=d*d;d=n[a+8>>3];e=e+d*d;d=n[a+16>>3];d=w(e+d*d);break a;case 1:d=n[a>>3];e=d*d;d=n[a+8>>3];e=e+d*d;d=n[a+16>>3];e=e+d*d;d=n[a+24>>3];d=w(e+d*d);break a;default:break b}}d=0;if((b|0)<5){break a}f=a+32|0;h=b+ -4|0;d=n[a>>3];e=d*d;d=n[a+8>>3];e=e+d*d;d=n[a+16>>3];e=e+d*d;d=n[a+24>>3];d=e+d*d;while(1){e=d;d=n[f>>3];d=e+d*d;f=f+8|0;h=h+ -1|0;if(h){continue}break}d=w(d)}if(!(j>d^1)){n[11420]=d}c:{if(!(d>n[11151]^1)){d=c?d:-d;n[a>>3]=n[a>>3]/d;n[a+8>>3]=n[a+8>>3]/d;if((b|0)==2){break c}d:{switch(b+ -3|0){case 0:n[a+16>>3]=n[a+16>>3]/d;break c;case 1:n[a+16>>3]=n[a+16>>3]/d;n[a+24>>3]=n[a+24>>3]/d;break c;default:break d}}if((b|0)<5){break c}n[a+16>>3]=n[a+16>>3]/d;n[a+24>>3]=n[a+24>>3]/d;a=a+32|0;b=b+ -4|0;while(1){n[a>>3]=n[a>>3]/d;a=a+8|0;b=b+ -1|0;if(b){continue}break}break c}if(d==0){if(!b){break c}d=w(1/+(b|0));while(1){n[a>>3]=d;a=a+8|0;b=b+ -1|0;if(b){continue}break}break c}if(!b){break c}e=c?d:-d;h=b;f=a;while(1){e:{d=Mb(n[f>>3],e,n[11150],g+28|0);if(i[g+28>>2]){break e}n[f>>3]=d;f=f+8|0;h=h+ -1|0;if(h){continue}break c}break}c=Zf(a,b);d=n[c>>3];fa(a,0,b<<3);n[c>>3]=e*d>=0?1:-1;i[22848]=i[22848]+1;if(!i[21886]){break c}n[g>>3]=e;i[g+8>>2]=i[22455];V(i[22423],1,2254,g)}S=g+32|0}function ma(a,b,c,d,e){var f=0;f=S+ -64|0;S=f;if(e){i[f+48>>2]=a;V(i[22423],8138,80014,f+48|0);xc(i[22423],e)}a:{if(!d){e=c;break a}i[f+32>>2]=a;V(i[22423],8137,80026,f+32|0);Pb(i[22423],d);b=b?b:i[d+4>>2];e=i[d+4>>2];b:{if(!c){if((b|0)!=(e|0)){break b}e=i[d+8>>2];break b}if(!(!e|(c|0)==(e|0)|(b|0)==(e|0))){rb(i[22423],e)}e=c}c=i[d+8>>2];if((c|0)==(e|0)|!c|(b|0)==(c|0)){break a}rb(i[22423],c)}if(b){i[f+16>>2]=a;V(i[22423],8135,80037,f+16|0);rb(i[22423],b)}if(e){i[f>>2]=a;V(i[22423],8136,80048,f);rb(i[22423],e)}if(!(!b|(i[21886]|i[22487])|(!i[22422]|!i[21878]))){V(i[22423],8139,80065,0);ka(i[22422],i[21927],b,e);ka(i[22422],i[21928],b,e);ka(i[22422],i[21929],b,e);ka(i[22422],i[21930],b,e);ka(i[22422],i[21931],b,e);ka(i[22422],i[21932],b,e);ka(i[22422],i[21933],b,e);ka(i[22422],i[21934],b,e);ka(i[22422],i[21935],b,e);ka(i[22422],i[21936],b,e);ka(i[22422],i[21937],b,e);ka(i[22422],i[21938],b,e);ka(i[22422],i[21939],b,e);ka(i[22422],i[21940],b,e);ka(i[22422],i[21941],b,e);ka(i[22422],i[21942],b,e);ka(i[22422],i[21943],b,e);ka(i[22422],i[21944],b,e);ka(i[22422],i[21945],b,e);ka(i[22422],i[21946],b,e);ka(i[22422],i[21947],b,e);ka(i[22422],i[21948],b,e);ka(i[22422],i[21949],b,e);ka(i[22422],i[21950],b,e);ka(i[22422],i[21951],b,e);ka(i[22422],i[21952],b,e);ka(i[22422],i[21953],b,e);ka(i[22422],i[21954],b,e);ka(i[22422],i[21955],b,e)}S=f- -64|0}function _h(){var a=0,b=0,c=0,d=0,e=0,f=0;b=S-80|0;S=b;i[22451]=C();a:{if(!(n[11231]<8.988465674311579e+307^1?!i[21973]:0)){Zh();break a}ae();Ge()}b:{if(i[21983]|(i[21982]|i[21981])){break b}a=i[21985];c=i[22495];if(!(!i[21897]|(a|!c))){De(1);a=i[21985];c=i[22495]}c:{if(!(!c|(i[22494]|a))){if(i[21886]>=2){V(i[22423],2055,17947,0)}i[22002]=0;break c}kc();d:{e:{if(!(!i[21915]|i[22007]<6?!i[21897]:0)){jd(18058,n[10950],n[10935],i[21914]?0:i[21985]);break e}a=i[21914];if(a|!i[21985]){break d}jd(18075,n[10950],n[10935],1)}a=i[21914]}if(a){jd(18104,n[10951],n[10936],i[21985])}if(i[22432]==i[22428]){i[22474]=1;sc(b+72|0);i[22474]=0;jc();Ga(0,1)}id(-1,0,0);Ob()}f:{if(i[21988]!=-1){break f}a=i[21986];if((a|0)<=i[21886]){break f}i[21886]=a;V(i[22423],2112,18121,0)}if(i[22002]){if(i[21971]){i[22510]=i[21963];i[21963]=0;E(b+76|0)|0;a=Hb(b+76|0);c=C()|0;d=i[a>>2];e=i[a+4>>2];a=i[a+8>>2];f=i[22444];i[b+48>>2]=i[22443];i[b+52>>2]=f;i[b+56>>2]=i[22455];i[b+40>>2]=i[22447]+ -1;i[b+44>>2]=i[22648]+(i[22992]-i[22650]|0);n[b+32>>3]=(+(c>>>0)- +l[22451])/1e6;i[b+16>>2]=a;i[b+20>>2]=qi(d,e);i[b+24>>2]=T;V(i[22423],8118,19276,b+16|0);V(i[22423],8115,18193,0)}Wg()}if(i[22464]|!i[22006]){break b}ie()}if(W(i[22542])){a=i[22423];i[b>>2]=W(i[22542]);V(a,6164,18224,b);X(5,0,0)}a=C()|0;i[22487]=1;i[22451]=a-i[22451];if(i[21886]>=1){V(i[22423],1036,18303,0)}S=b+80|0}function Hh(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0;d=S-112|0;S=d;if(c+ -1>>>0>=4){f=i[b+76>>2];i[d+48>>2]=i[a+76>>2];i[d+52>>2]=f;i[d+56>>2]=c;V(i[22423],6398,37682,d+48|0);ca(5,a,b)}h=i[22992];a:{if((h|0)==(i[21992]+ -1|0)){f=i[21986];i[21886]=f;i[22544]=f;break a}f=i[21886]}if((f|0)>=3){f=i[b+76>>2];k=i[a+76>>2];i[d+32>>2]=h+1;i[d+36>>2]=k;i[d+40>>2]=f;i[d+44>>2]=c;V(i[22423],3003,37810,d+32|0)}k=i[a+80>>2]&1024;f=k?a:b;h=Bb(f,d+104|0,d+88|0,d+72|0);a=k?b:a;b=Bb(a,d+96|0,d+80|0,d- -64|0);b:{c:{g=n[d+104>>3];e=n[d+96>>3];if(g<e){break c}if(!(!i[21864]|j[a+81|0]&4|(g*1.5<e^1?!(n[d+72>>3]<=n[11233]?!(n[d+88>>3]>=-n[10947]^1):0):0))){i[22582]=i[22582]+1;n[11293]=g+n[11293];if(!(n[11292]<g^1)){n[11292]=g}if(i[21886]<2){break c}a=i[a+76>>2];i[d+16>>2]=i[f+76>>2];n[d+24>>3]=e;i[d>>2]=a;n[d+8>>3]=e;V(i[22423],2029,37865,d);break c}n[d+104>>3]=e;n[d+88>>3]=n[d+80>>3];n[d+72>>3]=n[d+64>>3];break b}e=g;a=f;b=h}ob(a,b,c,d+88|0,d+72|0,0);d:{if(!i[21958]){break d}e:{switch(c+ -2|0){case 0:i[22560]=i[22560]+1;n[11282]=e+n[11282];if(n[11281]<e^1){break d}n[11281]=e;break d;case 1:i[22608]=i[22608]+1;n[11306]=e+n[11306];if(n[11305]<e^1){break d}n[11305]=e;break d;case 2:i[22614]=i[22614]+1;n[11309]=e+n[11309];if(n[11308]<e^1){break d}n[11308]=e;break d;default:break e}}i[22626]=i[22626]+1;n[11315]=e+n[11315];if(n[11314]<e^1){break d}n[11314]=e}S=d+112|0}function Be(a,b){var c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0,n=0,o=0;e=S-32|0;S=e;if(i[21886]>=2){V(i[22423],2031,39286,0)}a:{if(!a){break a}while(1){d=i[a+48>>2];if(d){if(i[a+24>>2]){a=d}else{if(!(j[a+83|0]&2)){i[e+16>>2]=i[a+76>>2];V(i[22423],6225,39411,e+16|0);X(5,a,0)}h=i[i[a+60>>2]+4>>2];c=i[a+32>>2];b:{if((c|0)!=(a|0)){k=0;l=a;if(c){while(1){n=i[c+32>>2];o=c;f=i[c+80>>2];if(f&67110912){Uc(c);f=i[c+80>>2]}i[o+80>>2]=f|67108864;c:{if(i[c+24>>2]){i[l+32>>2]=i[c+32>>2];i[c+32>>2]=0;break c}k=k+1|0;l=c}c=(a|0)==(c|0)?0:n;if(c){continue}break}}d:{while(1){if(!(j[d+83|0]&4)){break d}d=i[d+48>>2];if(d){continue}break}d=0}i[h+32>>2]=0;Mh(a,h);a=i[h+80>>2];c=(a&511)+k|0;i[h+80>>2]=(c|0)>511?a|511:c&511|a&-512;i[22650]=i[22650]+1;i[22648]=i[22648]+k;if(i[22646]>=(k|0)){break b}i[22646]=k;break b}if(i[22992]==(i[21992]+ -1|0)){c=i[21986];i[21886]=c;i[22544]=c}i[22898]=i[22898]+1;c=i[a+52>>2];l=i[c+4>>2];if(l){f=c+8|0;c=l;while(1){if((c|0)!=(l|0)){g[c+24|0]=j[c+24|0]|8}c=i[f>>2];f=f+4|0;if(c){continue}break}}i[h+32>>2]=0;ob(a,h,13,0,0,1)}m=m+1|0;a=d}if(a){continue}}break}if(!m){break a}c=i[22431];e:{if(!c){break e}while(1){a=i[c+48>>2];if(!a){break e}if(g[c+83|0]&1){pc(c);ye(c);i[c+80>>2]=i[c+80>>2]&-16777217;a=i[c+48>>2]}c=a;if(c){continue}break}}a=Ca();i[b>>2]=1;if(i[21886]<1){break a}i[e>>2]=m;i[e+4>>2]=a;V(i[22423],1013,39473,e)}S=e+32|0}function Ae(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0;d=S-96|0;S=d;if(i[21886]>=4){V(i[22423],4024,33458,0)}a:{if(!a){break a}while(1){c=i[a+48>>2];if(!c){break a}if((i[a+80>>2]&67584)==65536){la(a,a,6,0,1);a=i[a+48>>2]}else{a=c}if(a){continue}break}}c=Lb();i[d+68>>2]=c;a=i[22496];if((a|0)!=(c|0)){e=i[22423];a=W(a);i[d+52>>2]=W(c);i[d+48>>2]=a;V(e,6392,33483,d+48|0);X(5,0,0)}i[22496]=ba(i[22427]);kb(c);b:{if(!c){break b}a=i[c+4>>2];c:{if(!a){break c}e=c+8|0;while(1){c=e;while(1){d:{if(i[a+40>>2]==6){e=i[a+16>>2];if(!(j[e+81|0]&8)){break d}}a=i[c>>2];c=c+4|0;if(a){continue}break c}break}if(i[22992]==(i[21992]+ -1|0)){f=i[21986];i[21886]=f;i[22544]=f}f=Bb(e,d+88|0,d+80|0,d+72|0);if(i[21886]){k=i[f+76>>2];l=i[e+76>>2];i[d+32>>2]=i[22455];i[d+16>>2]=l;i[d+20>>2]=k;n[d+24>>3]=n[d+88>>3];V(i[22423],15,33588,d+16|0)}ob(e,f,i[a+40>>2],d+80|0,d+72|0,0);e:{if(!i[21958]){break e}i[22728]=i[22728]+1;g=n[d+88>>3];n[11366]=g+n[11366];if(n[11365]<g^1){break e}n[11365]=g}h=h+1|0;e=c+4|0;a=i[c>>2];if(a){continue}break}}c=i[d+68>>2];if(!c){break b}a=i[c+4>>2];if(!a){break b}c=c+8|0;while(1){f:{if(!(j[i[a+20>>2]+81|0]&8?0:!(j[i[a+16>>2]+81|0]&8))){$(a,48);break f}Z(89984,a)}a=i[c>>2];c=c+4|0;if(a){continue}break}}_(d+68|0);a=Ca();if(h){i[b>>2]=1}if(i[21886]>=1){i[d>>2]=h;i[d+4>>2]=a;V(i[22423],1010,33656,d)}S=d+96|0}function gh(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0;k=S-16|0;S=k;h=i[22492]+1|0;i[22492]=h;c=h;d=i[a+32>>2];if(d){while(1){if(!(j[d+81|0]&8?0:i[d+72>>2]!=(h|0))){Uc(a)}i[d+72>>2]=h;if((a|0)!=(d|0)){d=i[d+32>>2];if(d){continue}}break}c=i[22492]}c=c+1|0;i[22492]=c;i[b+72>>2]=c;if(i[21886]>=4){V(i[22423],4031,39701,0)}l=b+60|0;d=i[b+60>>2];a:{if(!d){d=0;break a}f=i[d+4>>2];if(!f){break a}e=d+4|0;g=e+4|0;d=i[22492];while(1){c=g;b:{if(i[f+72>>2]==(h|0)){i[e>>2]=0;m=m+1|0;break b}i[f+72>>2]=d}g=c+4|0;e=c;f=i[c>>2];if(f){continue}break}d=i[l>>2]}wb(d);if(i[21886]>=4){V(i[22423],4032,39765,0)}f=0;e=i[a+32>>2];c:{if(!e){break c}while(1){d:{c=i[e+60>>2];if(!c){break d}d=c+4|0;e:while(1){c=i[d>>2];if(!c){break d}d=d+4|0;g=i[c+72>>2];if((g|0)==(h|0)){continue}f:{if(j[c+81|0]&32){if((g|0)!=i[22492]){Z(l,c);Aa(i[c+60>>2],e,b);i[c+72>>2]=i[22492];c=i[c+56>>2];if(!c){break f}g=c+4|0;while(1){c=i[g>>2];if(!c){break f}if(i[c+4>>2]==(e|0)){i[c+4>>2]=b;f=f+1|0;continue e}g=g+4|0;if(i[c+8>>2]!=(e|0)){continue}break}i[c+8>>2]=b;f=f+1|0;continue}Pa(c);ja(i[c+60>>2],e);continue}ja(i[c+60>>2],e);if(i[c+72>>2]==i[22492]){continue}Z(c+60|0,b);Z(l,c);i[c+72>>2]=i[22492]}f=f+1|0;continue}}if((a|0)==(e|0)){break c}e=i[e+32>>2];if(e){continue}break}}if(i[21886]>=2){i[k>>2]=m;i[k+4>>2]=f;V(i[22423],2032,39808,k)}S=k+16|0}function oe(a,b,c){var d=0,e=0,f=0,h=0,k=0;f=S+ -64|0;S=f;a:{if(!a){break a}e=i[a+4>>2];if(!e){break a}d=a+8|0;while(1){h=d;b:{if(j[e+24|0]&16){break b}k=i[e+4>>2];d=i[e>>2];if(i[21886]>=4){i[f+48>>2]=i[e+16>>2];V(i[22423],4058,50479,f+48|0)}if(i[22442]==(e|0)){i[22442]=d}c:{if(k){i[k>>2]=d;break c}i[22440]=d}i[d+4>>2]=k;i[22444]=i[22444]+ -1;d=i[22441];if((d|0)==i[22442]){i[22442]=e}g[e+24|0]=j[e+24|0]|16;k=i[d+4>>2];i[e>>2]=d;i[e+4>>2]=k;k=i[d+4>>2];d:{if(k){i[k>>2]=e;break d}i[22440]=e}i[d+4>>2]=e;i[22444]=i[22444]+1;if(i[21886]<4){break b}i[f+32>>2]=i[e+16>>2];V(i[22423],4045,47660,f+32|0)}d=h+4|0;e=i[h>>2];if(e){continue}break}}d=fa(ha(88),0,88);h=i[22447];if((h|0)==i[22434]){i[22435]=d}i[22447]=h+1;i[d+76>>2]=h;h=Ba(i[22007]);i[d>>2]=0;i[d+4>>2]=0;i[d+60>>2]=h;n[d+8>>3]=n[(i[21878]?i[21859]?87440:89152:89152)>>3];i[d+80>>2]=i[d+80>>2]|533504;if(i[21886]>=4){i[f+16>>2]=i[d+76>>2];V(i[22423],4055,50195,f+16|0)}i[d+52>>2]=a;if(b){i[d+80>>2]=i[d+80>>2]|4096}if(c){Z(d+60|0,c)}a=i[22429];e:{if((a|0)!=i[22431]){break e}i[22431]=d;if((a|0)!=i[22432]){break e}i[22432]=d}if((a|0)==i[22430]){i[22430]=d}b=i[a+44>>2];i[d+48>>2]=a;i[d+44>>2]=b;b=i[a+44>>2];i[(b?b+48|0:89712)>>2]=d;i[a+44>>2]=d;i[22443]=i[22443]+1;if(i[21886]>=4){i[f>>2]=i[d+76>>2];V(i[22423],4044,47618,f)}S=f- -64|0;return d}function pf(a,b,c,d,e){var f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=S-144|0;S=f;if((c|0)>=1){w=c+ -1|0;while(1){g=r<<3;h=n[g+d>>3];k=n[e+g>>3];u=k>8.988465674311579e+307;a:{if(h<-8.988465674311579e+307?!(u^1):0){break a}p=-1.7976931348623157e+308;q=1.7976931348623157e+308;s=a+g|0;g=s;m=b;if(b){while(1){j=n[g>>3];p=p<j?j:p;q=q>j?j:q;g=(c<<3)+g|0;m=m+ -1|0;if(m){continue}break}}j=u?p:k;k=h<-8.988465674311579e+307?q:h;if(!(!i[21874]|(j<k^1|(r|0)!=(w|0)))){n[f+128>>3]=k;i[f+112>>2]=w;i[f+116>>2]=w;n[f+120>>3]=j;V(i[22423],6021,7202,f+112|0);X(1,0,0)}l=p-q;t=n[11150];v=-t;b:{c:{h=j-k;if(!(h<t^1|h>v^1)){if((h<0?-h:h)<(l<0?-l:l)^1){break c}h=h/l;break b}o=l/h;if(o<v^1?!(o>t):0){break c}h=h/l;break b}n[f+80>>3]=j;n[f+88>>3]=q;n[f+96>>3]=p;i[f+64>>2]=r;n[f+72>>3]=k;V(i[22423],6022,7297,f- -64|0);X(1,0,0);h=0}t=(k*p-q*j)/l;g=s;m=b;d:{if(!b){break d}while(1){n[g>>3]=t+h*n[g>>3];u=c<<3;g=u+g|0;m=m+ -1|0;if(m){continue}break}if(!b){break d}g=k<j;v=g?j:k;l=g?k:j;g=b;while(1){g=g+ -1|0;o=n[s>>3];m=o>v;o=m?v:o;if(!(o<l^1?!m:0)){n[s>>3]=o<l?l:o}s=s+u|0;if(g){continue}break}}if(!i[21886]){break a}n[f+16>>3]=p;n[f+24>>3]=k;n[f+32>>3]=j;i[f+40>>2]=b;n[f+48>>3]=h;n[f+56>>3]=t;i[f>>2]=r;n[f+8>>3]=q;V(i[22423],10,7405,f)}r=r+1|0;if((r|0)!=(c|0)){continue}break}}S=f+144|0}function re(a){var b=0,c=0,d=0,e=0,f=0;c=S-112|0;S=c;i[22492]=i[22492]+1;if(i[21886]>=4){i[c+96>>2]=i[a+76>>2];V(i[22423],4029,36731,c+96|0)}if(j[a+81|0]&32){i[c+80>>2]=i[a+76>>2];i[c+84>>2]=i[22455];V(i[22423],6278,36789,c+80|0);X(5,a,0)}d=i[a+56>>2];a:{if(!d){break a}b=i[d+4>>2];if(!b){break a}d=d+4|0;e=i[22492];while(1){i[i[b+4>>2]+72>>2]=e;i[i[b+8>>2]+72>>2]=e;b=i[d+4>>2];d=d+4|0;if(b){continue}break}}e=i[a+60>>2];d=0;b:{if(!e){break b}b=i[e+4>>2];d=e;if(!b){break b}d=e+4|0;e=d+4|0;while(1){if(j[b+81|0]&8){f=i[b+76>>2];i[c+64>>2]=i[a+76>>2];i[c+68>>2]=f;V(i[22423],6358,36888,c- -64|0);ca(5,a,b)}if(i[b+72>>2]!=i[22492]){if(i[21886]>=2){e=i[b+76>>2];i[c+48>>2]=i[a+76>>2];i[c+52>>2]=e;i[c+56>>2]=i[22455];V(i[22423],2104,36985,c+48|0)}if(j[b+81|0]&32){e=i[a+76>>2];i[c+32>>2]=i[b+76>>2];i[c+36>>2]=e;i[c+40>>2]=i[22455];V(i[22423],6280,37075,c+32|0);ca(5,b,a)}i[22716]=i[22716]+1;ja(i[b+60>>2],a);c:{if((W(i[b+60>>2])|0)>=i[22007]){break c}i[22714]=i[22714]+1;la(b,b,10,0,2);if(i[21886]<2){break c}i[c+16>>2]=i[b+76>>2];V(i[22423],2023,37190,c+16|0)}ja(i[a+60>>2],b)}else{d=e}e=d+4|0;b=i[d>>2];if(b){continue}break}d=i[a+60>>2]}d:{if((W(d)|0)>=i[22007]){break d}i[22714]=i[22714]+1;la(a,a,10,0,2);if(i[21886]<2){break d}i[c>>2]=i[a+76>>2];V(i[22423],2024,37190,c)}S=c+112|0}function ah(a,b,c){var d=0,e=0,f=0,h=0,k=0,m=0;h=S+ -64|0;S=h;k=eb(i[a>>2],b);if((k|0)<=-1){e=i[c+16>>2];f=i[a+12>>2];i[h+48>>2]=i[b+16>>2];i[h+52>>2]=f;i[h+56>>2]=e;V(i[22423],6424,44572,h+48|0);X(5,0,a)}Qc(i[a>>2],k);e=0;f=i[a>>2];a:{b:{if(!f){break b}d=i[f+4>>2];if(!d){break b}f=f+8|0;while(1){if((c|0)==(d|0)){i[22664]=i[22664]+1;e=j[a+16|0];c:{d:{if(!(e&4)){break d}g[a+16|0]=e&251;m=i[a+4>>2];e=i[m+56>>2];if(!e){break d}d=i[e+4>>2];if(!d){break d}k=i[a+8>>2];e=e+8|0;while(1){f=e;e:{f:{if((k|0)!=i[d+4>>2]){if((a|0)==(d|0)){break e}if((k|0)==i[d+8>>2]){break f}break e}if((a|0)==(d|0)){break e}}g[d+16|0]=j[d+16|0]|4;f=i[21886];if((f|0)<4){break c}e=i[k+76>>2];f=i[m+76>>2];d=i[d+12>>2];i[h+32>>2]=i[a+12>>2];i[h+36>>2]=d;i[h+40>>2]=f;i[h+44>>2]=e;V(i[22423],4020,31495,h+32|0);break d}e=f+4|0;d=i[f>>2];if(d){continue}break}}f=i[21886]}if((f|0)>=2){c=i[c+16>>2];b=i[b+16>>2];i[h+16>>2]=i[a+12>>2];i[h+20>>2]=b;i[h+24>>2]=c;V(i[22423],2038,44672,h+16|0)}fd(a);d=0;break a}if(l[d+16>>2]<l[c+16>>2]){break b}e=e+1|0;d=i[f>>2];f=f+4|0;if(d){continue}break}}Va(a,e,c);g[a+16|0]=j[a+16|0]&159;d=1;c=k-e|0;b=c>>31;if(!((b^b+c)&1)){break a}if(i[21886]>=3){i[h>>2]=i[a+12>>2];V(i[22423],3010,44745,h)}i[a+4>>2]=qi(i[a+4>>2],i[a+8>>2]);i[a+8>>2]=T}S=h- -64|0;return d}function Ga(a,b){var c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0,n=0;e=S-48|0;S=e;if(i[21886]>=2){n=i[22423];c=-1;f=-1;d=i[22442];if(d){f=i[d+16>>2]}d=i[22431];if(d){c=i[d+76>>2]}d=-1;k=-1;h=i[22432];if(h){k=i[h+76>>2]}h=i[22428];if(h){d=i[h+76>>2]}h=-1;m=-1;l=i[22430];if(l){m=i[l+76>>2]}l=i[22440];if(l){h=i[l+16>>2]}i[e+16>>2]=m;i[e+20>>2]=h;h=i[22473];i[e+24>>2]=i[22472];i[e+28>>2]=h;i[e+32>>2]=a;i[e>>2]=f;i[e+4>>2]=c;i[e+8>>2]=k;i[e+12>>2]=d;V(n,2066,67545,e)}c=i[22442];a:{if(!a){break a}a=0;k=0;if(c){f=0;d=c;while(1){k=f;f=f+1|0;d=i[d>>2];if(d){continue}break}}f=i[22431];b:{if(!f){d=0;break b}while(1){d=a;a=a+1|0;f=i[f+48>>2];if(f){continue}break}}i[23046]=i[23046]+k;if(i[23048]<(k|0)){i[23048]=k}i[22858]=i[22858]+d;if(i[22860]>=(d|0)){break a}i[22860]=d}c:{if(!c){break c}a=i[c>>2];if(!a){break c}while(1){g[c+24|0]=j[c+24|0]&239;c=a;a=i[c>>2];if(a){continue}break}}i[22450]=0;i[22442]=0;c=i[22431];d:{if(!c){break d}a=i[c+48>>2];if(!a){break d}while(1){i[c+80>>2]=i[c+80>>2]&-2098177;c=a;a=i[c+48>>2];if(a){continue}break}}i[22431]=0;if(b){c=i[22432];e:{if(!c){break e}while(1){a=i[c+80>>2];if(!(a&2048)){break e}i[c+32>>2]=0;i[c+80>>2]=a&-2049;c=i[c+48>>2];if(c){continue}break}}i[22433]=0}i[22472]=0;i[22473]=0;i[22432]=0;S=e+48|0}function lb(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0;g=S-16|0;S=g;j=(c^-1)+b|0;if((j|0)<=-1){i[g>>2]=c;V(i[22543],6176,69574,g);Ua(i[22543],69245,a);X(5,0,0)}h=i[22534];k=b+d|0;b=k+ -1|0;b=b?b:1;e=(b<<2)+8|0;f=ha(e);a:{if((b|0)<-1|(e|0)>(h|0)){break a}h=i[i[22537]+(i[i[22538]+(e<<2)>>2]<<2)>>2];if((h|0)<=(e|0)){break a}b=((h-e|0)/4|0)+b|0}i[f>>2]=b;e=b<<2;b=f+4|0;i[e+b>>2]=1;i[f+4>>2]=0;i[b+(i[f>>2]<<2)>>2]=k;b=b+(d<<2)|0;d=a+4|0;b:{c:{switch(c|0){case 1:i[b>>2]=i[d>>2];b=b+4|0;d=d+4|0;break b;case 2:i[b>>2]=i[d>>2];i[b+4>>2]=i[d+4>>2];b=b+8|0;d=d+8|0;break b;case 3:i[b>>2]=i[d>>2];i[b+4>>2]=i[d+4>>2];i[b+8>>2]=i[d+8>>2];b=b+12|0;d=d+12|0;break b;case 4:i[b>>2]=i[d>>2];i[b+4>>2]=i[d+4>>2];i[b+8>>2]=i[d+8>>2];i[b+12>>2]=i[d+12>>2];b=b+16|0;d=d+16|0;break b;case 0:break b;default:break c}}a=c<<2;b=oa(b,d,a);d=a+d|0;b=a+b|0}a=d+4|0;d:{e:{switch(j|0){case 1:i[b>>2]=i[a>>2];b=b+4|0;break d;case 2:i[b>>2]=i[d+4>>2];i[b+4>>2]=i[d+8>>2];b=b+8|0;break d;case 3:i[b>>2]=i[d+4>>2];i[b+4>>2]=i[d+8>>2];i[b+8>>2]=i[d+12>>2];b=b+12|0;break d;case 4:i[b>>2]=i[d+4>>2];i[b+4>>2]=i[d+8>>2];i[b+8>>2]=i[d+12>>2];i[b+12>>2]=i[d+16>>2];b=b+16|0;break d;case 0:break d;default:break e}}c=a;a=j<<2;b=oa(b,c,a)+a|0}i[b>>2]=0;S=g+16|0;return f}function kf(a,b,c){var d=0;d=S-16|0;S=d;C()|0;fa(87416,0,2704);i[22423]=c;i[21876]=-1;i[22476]=1;i[22462]=-1;i[22463]=2146435071;i[22455]=-1;i[22422]=b;i[22421]=a;i[22518]=0;i[22519]=0;i[22516]=-1;i[22517]=2146435071;i[22514]=-1;i[22515]=2146435071;i[22512]=-1;i[22513]=2146435071;i[21892]=-1;i[21893]=2146435071;i[22466]=0;i[22467]=0;i[22296]=0;i[22297]=0;i[22290]=0;i[22291]=0;i[22468]=0;i[22469]=0;i[22298]=-1;i[22299]=-1048577;i[22300]=0;i[22301]=1048576;i[21898]=1;i[21906]=-1;i[21907]=2146435071;i[21860]=0;i[21861]=0;i[22316]=-1;i[22317]=2146435071;i[21894]=-1;i[21895]=2146435071;i[21900]=0;i[21901]=0;i[21926]=1;i[22480]=0;i[22481]=0;i[21870]=-1;i[21871]=2146435071;i[21974]=-2147483648;i[21902]=0;i[21903]=0;i[21872]=-1;i[21873]=2146435071;i[22488]=0;i[22489]=0;i[21905]=1;i[22490]=0;i[22491]=0;i[21990]=-1;i[21991]=2146435071;i[21988]=-3;i[22434]=-1;i[22436]=-1;i[22438]=-1;a=E(d+12|0)|0;i[21682]=(a|0)<1?1:(a|0)==2147483647?2147483646:a;a=db();i[22274]=a?a:1;ia(11336,89096,0);a=Qa(89284);b=a+89288|0;c=j[11347]|j[11348]<<8;g[b|0]=c;g[b+1|0]=c>>>8;a=a+89284|0;b=j[11343]|j[11344]<<8|(j[11345]<<16|j[11346]<<24);g[a|0]=b;g[a+1|0]=b>>>8;g[a+2|0]=b>>>16;g[a+3|0]=b>>>24;S=d+16|0}function Id(a){var b=0,c=0,d=0,e=0,f=0;a:{b:{c:{b=i[a+4>>2];d:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break d}b=na(a)}switch(b+ -43|0){case 0:case 2:break b;default:break c}}c=b+ -48|0;break a}f=(b|0)==45;b=i[a+4>>2];e:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break e}b=na(a)}c=b+ -48|0;if(!(c>>>0<10|!i[a+104>>2])){i[a+4>>2]=i[a+4>>2]+ -1}}f:{if(c>>>0<10){c=0;while(1){d=o(c,10)+b|0;b=i[a+4>>2];g:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break g}b=na(a)}e=b+ -48|0;c=d+ -48|0;if((c|0)<214748364?e>>>0<=9:0){continue}break}d=c;c=c>>31;h:{if(e>>>0>=10){break h}while(1){c=ni(d,c,10,0);d=c+b|0;b=T;b=d>>>0<c>>>0?b+1|0:b;d=d+ -48|0;c=b+ -1|0;c=d>>>0<4294967248?c+1|0:c;b=i[a+4>>2];i:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break i}b=na(a)}e=b+ -48|0;if(e>>>0>9){break h}if((c|0)<21474836?1:(c|0)<=21474836?d>>>0<2061584302:0){continue}break}}if(e>>>0<10){while(1){b=i[a+4>>2];j:{if(b>>>0<l[a+104>>2]){i[a+4>>2]=b+1;b=j[b|0];break j}b=na(a)}if(b+ -48>>>0<10){continue}break}}if(i[a+104>>2]){i[a+4>>2]=i[a+4>>2]+ -1}a=d;d=f?0-a|0:a;c=f?0-(c+(0<a>>>0)|0)|0:c;break f}c=-2147483648;if(!i[a+104>>2]){break f}i[a+4>>2]=i[a+4>>2]+ -1;T=-2147483648;return 0}T=c;return d}function kd(){var a=0,b=0,c=0,d=0,e=0,f=0,h=0,k=0,l=0;f=S-16|0;S=f;a=0;a:{if(i[22007]==2){break a}if(i[21886]>=2){V(i[22423],2101,43337,0)}c=(Ca()|0)!=0;b:while(1){h=c;a=i[22431];c:{if(!a){break c}while(1){if(!i[a+48>>2]){break c}d:{b=i[a+80>>2];if(!(b&536870912)){break d}if(!i[21905]){i[a+80>>2]=b&-536870913}if(!nc(a)){break d}Za(a);if(!Ca()){break d}h=1;a=i[22431];if(!a){break c}continue}a=i[a+48>>2];if(a){continue}break}}a=0;if(!i[21905]){break a}d=i[22431];e:{if(!d){break e}while(1){b=i[d+48>>2];if(!b){break e}c=i[d+80>>2];e=b;f:{if(!(c&536870912)){break f}i[d+80>>2]=c&-536870913;a=i[d+52>>2];e=b;if(!a){break f}c=i[a+4>>2];e=b;if(!c){break f}a=a+4|0;b=a+4|0;while(1){g:{if(!(j[c+24|0]&8)){a=b;break g}if(!Eh(c,d)){a=b;break g}c=1;k=k+1|0;if(Ca()){continue b}}b=a+4|0;c=i[a>>2];if(c){continue}break}e=i[d+48>>2]}d=e;if(d){continue}break}}a=i[22442];h:{if(!a){break h}while(1){if(!i[a>>2]){break h}b=j[a+24|0];i:{if((b&12)!=8){break i}g[a+24|0]=b&247;if(i[22007]<4){break i}if(!Dh(a)){break i}c=1;l=l+1|0;if(Ca()){continue b}}a=i[a>>2];if(a){continue}break}}break}if(i[21886]>=1){i[f>>2]=k;i[f+4>>2]=l;i[f+8>>2]=h;V(i[22423],1014,43420,f)}a=h}S=f+16|0;return a}



function me(a,b,c){var d=0,e=0,f=0,h=0,k=0,l=0,m=0,n=0;h=S-32|0;S=h;l=i[a+56>>2];a:{if(!l){break a}e=i[l+4>>2];if(!e){break a}d=l+8|0;while(1){l=d;n=i[e+12>>2];f=i[e+4>>2];d=f;m=(d|0)!=(a|0);if(!m){d=i[e+8>>2]}b:{if(j[d+81|0]&8){if(i[22473]|i[d+72>>2]!=i[22492]){break b}if(i[22437]==(e|0)){i[22437]=0}ga(e);$(e,20);break b}i[h+28>>2]=Ba(i[22007]);Z(h+28|0,b);Fg(h+28|0,i[e>>2]);k=oe(i[h+28>>2],(a|0)==(f|0),d);i[c>>2]=i[c>>2]+1;if(g[d+83|0]&1){i[k+80>>2]=i[k+80>>2]|33554432;c:{if(!(j[d+81|0]&64)){i[k+32>>2]=k;f=d+32|0;break c}f=i[d+32>>2];i[k+32>>2]=i[f+32>>2];f=f+32|0}i[f>>2]=k}f=i[d+80>>2];d:{if(i[22473]){if(f&8192){break d}Z(k+56|0,e);break d}e:{if(f&16384){if(f&8192){f=i[a+76>>2];i[h+16>>2]=i[d+76>>2];i[h+20>>2]=f;V(i[22423],6105,48603,h+16|0);ca(5,d,a)}Z(d+60|0,k);break e}Aa(i[d+60>>2],a,k)}if(j[d+81|0]&32){ja(i[d+56>>2],e);dc(e);break d}Z(k+56|0,e);if(!m){i[e+4>>2]=k;g[e+16|0]=j[e+16|0]|32;break d}i[e+8>>2]=k;g[e+16|0]=j[e+16|0]|64}if(i[21886]<4){break b}m=i[d+76>>2];f=i[b+16>>2];i[h>>2]=i[k+76>>2];i[h+4>>2]=f;i[h+8>>2]=n;i[h+12>>2]=m;V(i[22423],4048,48696,h)}i[d+80>>2]=i[d+80>>2]|16384;d=l+4|0;e=i[l>>2];if(e){continue}break}}S=h+32|0;return k}function Pe(a,b){var c=0,d=0,e=0,f=0,g=0;e=S-16|0;S=e;i[e+12>>2]=ba(i[22427]);i[e+8>>2]=ba(i[22427]);d=i[a+12>>2];a:{if(!d){break a}c=i[d+4>>2];if(!c){break a}d=d+4|0;while(1){i[c+80>>2]=i[c+80>>2]&-32769;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}c=i[b+12>>2];b:{if(!c){break b}d=c+4|0;while(1){c=i[d>>2];if(!c){break b}d=d+4|0;if(j[c+81|0]&128){continue}break}f=1;c:while(1){d=i[c+80>>2];i[c+80>>2]=d|32768;d:{if(!(d&16384)){break d}if(i[c+72>>2]){if(d&512){if(!Ea(e+8|0,i[c+40>>2])){break d}}Z(e+12|0,c);break d}if(f){Z(e+12|0,c)}f=0}d=i[c+60>>2];if(!d){break b}c=i[d+4>>2];if(!c){break b}d=d+8|0;while(1){if(!(j[c+81|0]&128)){if(da(i[b+12>>2],c)){continue c}i[c+80>>2]=i[c+80>>2]|32768}c=i[d>>2];d=d+4|0;if(c){continue}break}break}}e:{if(!i[21869]){break e}d=i[b+12>>2];if(!d){break e}c=i[d+4>>2];if(!c){break e}d=d+8|0;while(1){if(!(j[c+81|0]&128)){f=i[22423];g=Y(i[b+8>>2]);i[e+4>>2]=i[c+76>>2];i[e>>2]=g;V(f,6217,12492,e);X(5,c,0)}c=i[d>>2];d=d+4|0;if(c){continue}break}}a=i[a+12>>2];f:{if(!a){break f}c=i[a+4>>2];if(!c){break f}d=a+4|0;while(1){i[c+80>>2]=i[c+80>>2]|32768;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}_(e+8|0);S=e+16|0;return i[e+12>>2]}function kg(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0;b=S-112|0;S=b;i[b+96>>2]=i[22007];V(a,9376,82894,b+96|0);He(a,83053,i[22428]);n[b+80>>3]=n[11144];V(a,9377,83054,b+80|0);Je(a,83289,i[22007],i[22424],-1);V(a,9378,79676,0);c=i[22428];a:{if(!c){break a}while(1){if(!i[c+48>>2]){break a}V(a,9379,83302,0);d=i[c+52>>2];b:{if(!d){break b}e=i[d+4>>2];if(!e){break b}d=d+4|0;while(1){i[b+64>>2]=Y(i[e+8>>2]);V(a,9380,83308,b- -64|0);e=i[d+4>>2];d=d+4|0;if(e){continue}break}}i[22680]=i[22680]+1;aa(i[22424],c,b+104|0);n[b+48>>3]=n[b+104>>3];V(a,9381,83313,b+48|0);c=i[c+48>>2];if(c){continue}break}}if(i[21884]){V(a,9382,83331,0)}V(a,9383,83436,0);if(i[22007]>=8){V(a,9384,83623,0)}V(a,9385,83887,0);c=i[22007];if((c|0)>=1){while(1){d=i[22009];c:{if(!d){f=-2.2250738585072014e-308;g=1.7976931348623157e+308;break c}e=i[22010]+(h<<3)|0;g=1.7976931348623157e+308;f=-2.2250738585072014e-308;while(1){j=n[e>>3];g=g>j?j:g;f=f<j?j:f;e=(c<<3)+e|0;d=d+ -1|0;if(d){continue}break}}n[b+32>>3]=f;n[b+24>>3]=g;n[b+40>>3]=f-g;i[b+16>>2]=h;V(a,9386,83941,b+16|0);h=h+1|0;c=i[22007];if((h|0)<(c|0)){continue}break}}n[b>>3]=n[11144];V(a,9387,83981,b);V(a,9389,84469,0);S=b+112|0}function $e(a){var b=0,c=0,d=0,e=0,f=0;d=S-32|0;S=d;b=ba(i[22443]);i[d+28>>2]=b;if(i[21886]>=2){i[d>>2]=i[21887];i[d+4>>2]=i[21890];n[d+8>>3]=n[10946];V(i[22423],2006,12655,d)}if(a){b=a;while(1){c=i[b+48>>2];if(c){if((i[b+80>>2]&526336)==524288){Z(d+28|0,b);c=i[b+48>>2]}b=c;if(b){continue}}break}b=i[d+28>>2]}f=W(b);a:{if(!i[21887]){break a}cb(i[d+28>>2]+4|0,f,1);e=f-i[21887]|0;if((e|0)<1){break a}b=i[d+28>>2];if(!b){break a}b=b+4|0;while(1){c=i[b>>2];if(!c){break a}i[c+80>>2]=i[c+80>>2]&-524289;b=b+4|0;e=e+ -1|0;if(e){continue}break}}b:{if(!i[21890]){break b}cb(i[d+28>>2]+4|0,f,2);e=f-i[21890]|0;if((e|0)<1){break b}b=i[d+28>>2];if(!b){break b}b=b+4|0;while(1){c=i[b>>2];if(!c){break b}i[c+80>>2]=i[c+80>>2]&-524289;b=b+4|0;e=e+ -1|0;if(e){continue}break}}b=0;c:{if(n[10946]<8.988465674311579e+307^1){break c}f=i[d+28>>2];if(!f){break c}c=i[f+4>>2];if(!c){break c}e=f+8|0;while(1){f=i[c+80>>2];if(!(n[c+32>>3]<n[10946]^1?f&1048576:0)){i[c+80>>2]=f&-524289}c=i[e>>2];e=e+4|0;if(c){continue}break}}_(d+28|0);d:{if(!a){break d}c=i[a+48>>2];if(!c){break d}while(1){b=(i[a+80>>2]>>>19&1)+b|0;a=c;c=i[c+48>>2];if(c){continue}break}}i[22446]=b;S=d+32|0}function Me(a,b,c,d){var e=0,f=0,g=0,h=0;h=S-112|0;S=h;a:{if(i[22472]?j[b+81|0]&8:0){break a}e=i[b+56>>2];if(!e){break a}g=i[e+4>>2];if(!g){break a}e=e+8|0;if((d|0)==25){while(1){d=e;i[h+48>>2]=i[22007];V(a,9124,14929,h+48|0);i[h+32>>2]=c;V(a,9125,14929,h+32|0);f=i[g>>2];b:{if(i[g+4>>2]!=(b|0)){if(!f){break b}e=f+8|0;while(1){f=i[e>>2];if(!f){break b}i[h+16>>2]=Y(i[f+8>>2]);V(a,9127,14929,h+16|0);f=i[g>>2];e=(((f+4|0)==(e|0)?2:(f+8|0)==(e|0)?-1:1)<<2)+e|0;continue}}if(!f){break b}e=i[f+4>>2];if(!e){break b}g=f+4|0;while(1){i[h>>2]=Y(i[e+8>>2]);V(a,9126,14929,h);e=i[g+4>>2];g=g+4|0;if(e){continue}break}}V(a,9128,13098,0);e=d+4|0;g=i[d>>2];if(g){continue}break a}}while(1){d=e;i[h+96>>2]=c;V(a,9125,14929,h+96|0);f=i[g>>2];c:{if(i[g+4>>2]==(b|0)){if(!f){break c}e=i[f+4>>2];if(!e){break c}g=f+4|0;while(1){i[h+64>>2]=Y(i[e+8>>2]);V(a,9126,14929,h- -64|0);e=i[g+4>>2];g=g+4|0;if(e){continue}break}break c}if(!f){break c}e=f+8|0;while(1){f=i[e>>2];if(!f){break c}i[h+80>>2]=Y(i[f+8>>2]);V(a,9127,14929,h+80|0);f=i[g>>2];e=(((f+4|0)==(e|0)?2:(f+8|0)==(e|0)?-1:1)<<2)+e|0;continue}}V(a,9128,13098,0);e=d+4|0;g=i[d>>2];if(g){continue}break}}S=h+112|0}function we(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0;c=S-80|0;S=c;Na();f=i[22442];b=i[22432];h=i[22431];if(!(f?0:!(b|h))){e=i[22423];g=-1;j=-1;j=b?i[b+76>>2]:j;g=h?i[h+76>>2]:g;i[c+72>>2]=f?i[f+16>>2]:-1;i[c+68>>2]=g;i[c+64>>2]=j;V(e,6402,37954,c- -64|0);X(5,0,0)}f=1;i[22461]=1;b=i[22429];i[22432]=b;i[22431]=b;i[22442]=i[22441];d=ve();if(d){while(1){if(i[22992]==(i[21992]+ -1|0)){b=i[21986];i[21886]=b;i[22544]=b}a:{if(i[d+40>>2]==8){i[22928]=i[22928]+1;if(i[21886]>=1){e=i[22423];b=W(i[22498]);i[c+36>>2]=a;i[c+32>>2]=b+1;V(e,1050,38082,c+32|0)}Bh(i[22498]);break a}i[22924]=i[22924]+1;if(!f){f=0;break a}f=0;if(i[21886]<1){break a}e=i[22423];b=W(i[22498]);i[c+52>>2]=a;i[c+48>>2]=b+1;V(e,1056,38212,c+48|0)}k=n[d+8>>3];e=i[d+28>>2];b=i[d+24>>2];$(d,48);Ah(b,e,k);b:{if(i[21886]<2){break b}b=i[22497];if(!b){break b}d=i[b+4>>2];if(!d){break b}g=b+8|0;while(1){j=i[22423];h=i[i[d+16>>2]+76>>2];e=i[d+40>>2];c:{if((e|0)==10){i[c>>2]=h;V(j,2072,38307,c);break c}b=i[i[d+20>>2]+76>>2];i[c+24>>2]=e;i[c+20>>2]=b;i[c+16>>2]=h;V(j,2084,38378,c+16|0)}d=i[g>>2];g=g+4|0;if(d){continue}break}}Ca();d=ve();if(d){continue}break}}i[22461]=0;S=c+80|0}function Ge(){var a=0,b=0,c=0,d=0;b=S-80|0;S=b;if(i[21886]>=1){V(i[22423],1037,18865,0)}a=i[22428];i[b+76>>2]=a;a:{if(!a){break a}b:{while(1){c=i[a+48>>2];if(!c){break b}if(j[a+81|0]&12){i[b+64>>2]=i[a+76>>2];V(i[22423],6165,18897,b- -64|0);X(5,a,0);a=i[a+48>>2]}else{a=c}if(a){continue}break}i[b+76>>2]=0;break a}i[b+76>>2]=a}a=89760;c:{d:{while(1){a=i[a>>2];if(!a|!i[a>>2]){break d}if(j[a+24|0]&16){i[b+48>>2]=i[a+16>>2];V(i[22423],6166,18974,b+48|0);ma(19042,0,0,0,a);X(5,0,0)}c=Y(i[a+8>>2]);d=i[21983];if(!(((c|0)==(d+ -1|0)?(d|0)>=1:0)|((c|0)==(d^-1)?(d|0)<=-1:0))){d=i[21982];if((d|0)<1|(c|0)!=(d+ -1|0)){continue}}break}if(i[21886]<1){break c}i[b+32>>2]=c;V(i[22423],1038,19052,b+32|0);break c}i[22430]=i[22428];while(1){a=Yh(b+76|0);if(a){i[22445]=i[22445]+ -1;e:{c=i[21981];if((c|0)<1){break e}c=c+ -1|0;if((i[22444]+(i[22007]^-1)|0)<(c|0)){break e}if(i[21886]<1){break c}i[b+16>>2]=c;V(i[22423],1059,19106,b+16|0);break c}if(od(a,i[b+76>>2],i[21912])){continue}}break}if(i[22320]){Mg()}c=(a|0)!=0;a=i[22445];if(!(c|!a)){i[b>>2]=a;V(i[22423],6167,19151,b);X(5,0,0)}if(i[21886]<1){break c}V(i[22423],1039,19229,0)}S=b+80|0}function Dd(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0;g=S-32|0;S=g;e=d&2147483647;j=e;e=e+ -1006698496|0;h=c;f=c;if(c>>>0<0){e=e+1|0}k=f;f=e;e=j+ -1140785152|0;l=h;if(h>>>0<0){e=e+1|0}a:{if((e|0)==(f|0)&k>>>0<l>>>0|f>>>0<e>>>0){e=d<<4|c>>>28;c=c<<4|b>>>28;b=b&268435455;h=b;if((b|0)==134217728&a>>>0>=1|b>>>0>134217728){e=e+1073741824|0;a=c+1|0;if(a>>>0<1){e=e+1|0}f=a;break a}f=c;e=e-((c>>>0<0)+ -1073741824|0)|0;if(a|h^134217728){break a}a=f+(f&1)|0;if(a>>>0<f>>>0){e=e+1|0}f=a;break a}if(!(!h&(j|0)==2147418112?!(a|b):(j|0)==2147418112&h>>>0<0|j>>>0<2147418112)){e=d<<4|c>>>28;f=c<<4|b>>>28;e=e&524287|2146959360;break a}f=0;e=2146435072;if(j>>>0>1140785151){break a}e=0;h=j>>>16|0;if(h>>>0<15249){break a}e=d&65535|65536;ua(g+16|0,a,b,c,e,h+ -15233|0);Gb(g,a,b,c,e,15361-h|0);c=i[g+4>>2];a=i[g+8>>2];e=i[g+12>>2]<<4|a>>>28;f=a<<4|c>>>28;a=c&268435455;c=a;b=i[g>>2]|((i[g+16>>2]|i[g+24>>2])!=0|(i[g+20>>2]|i[g+28>>2])!=0);if((a|0)==134217728&b>>>0>=1|a>>>0>134217728){a=f+1|0;if(a>>>0<1){e=e+1|0}f=a;break a}if(b|c^134217728){break a}a=f+(f&1)|0;if(a>>>0<f>>>0){e=e+1|0}f=a}S=g+32|0;ti(0,f|0);ti(1,d&-2147483648|e);return+ui()}function oa(a,b,c){var d=0,e=0,f=0;if(c>>>0>=512){M(a|0,b|0,c|0)|0;return a}e=a+c|0;a:{if(!((a^b)&3)){b:{if((c|0)<1){c=a;break b}if(!(a&3)){c=a;break b}c=a;while(1){g[c|0]=j[b|0];b=b+1|0;c=c+1|0;if(c>>>0>=e>>>0){break b}if(c&3){continue}break}}d=e&-4;c:{if(d>>>0<64){break c}f=d+ -64|0;if(c>>>0>f>>>0){break c}while(1){i[c>>2]=i[b>>2];i[c+4>>2]=i[b+4>>2];i[c+8>>2]=i[b+8>>2];i[c+12>>2]=i[b+12>>2];i[c+16>>2]=i[b+16>>2];i[c+20>>2]=i[b+20>>2];i[c+24>>2]=i[b+24>>2];i[c+28>>2]=i[b+28>>2];i[c+32>>2]=i[b+32>>2];i[c+36>>2]=i[b+36>>2];i[c+40>>2]=i[b+40>>2];i[c+44>>2]=i[b+44>>2];i[c+48>>2]=i[b+48>>2];i[c+52>>2]=i[b+52>>2];i[c+56>>2]=i[b+56>>2];i[c+60>>2]=i[b+60>>2];b=b- -64|0;c=c- -64|0;if(c>>>0<=f>>>0){continue}break}}if(c>>>0>=d>>>0){break a}while(1){i[c>>2]=i[b>>2];b=b+4|0;c=c+4|0;if(c>>>0<d>>>0){continue}break}break a}if(e>>>0<4){c=a;break a}d=e+ -4|0;if(d>>>0<a>>>0){c=a;break a}c=a;while(1){g[c|0]=j[b|0];g[c+1|0]=j[b+1|0];g[c+2|0]=j[b+2|0];g[c+3|0]=j[b+3|0];b=b+4|0;c=c+4|0;if(c>>>0<=d>>>0){continue}break}}if(c>>>0<e>>>0){while(1){g[c|0]=j[b|0];b=b+1|0;c=c+1|0;if((e|0)!=(c|0)){continue}break}}return a}function Eh(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0;e=S-48|0;S=e;a:{b:{c:{d:{if((W(i[a+12>>2])|0)==2){f=i[a+12>>2];c=i[f+4>>2];if((c|0)!=(b|0)){break d}c=i[f+8>>2];break d}if(i[22007]==3){break a}g=i[22492]+1|0;i[22492]=g;c=i[b+60>>2];e:{if(!c){break e}d=i[c+4>>2];if(!d){break e}c=c+4|0;while(1){i[d+72>>2]=g;d=i[c+4>>2];c=c+4|0;if(d){continue}break}}c=i[a+12>>2];if(!c){break c}d=i[c+4>>2];if(!d){break c}h=c+8|0;while(1){f:{if((g|0)!=i[d+72>>2]){c=f;break f}c=d;if(!f){break f}d=0;break a}d=i[h>>2];h=h+4|0;f=c;if(d){continue}break}}if(c){break b}}c=i[b+76>>2];i[e>>2]=i[a+16>>2];i[e+4>>2]=c;d=0;V(i[22423],6101,44417,e);ma(44492,b,0,0,a);X(5,0,0);break a}f=ba(i[22427]);d=i[22492]+1|0;i[22492]=d;i[e+40>>2]=f;i[c+72>>2]=d;dd(a,b,e+40|0);if(i[21886]>=2){f=i[22423];d=Y(i[a+8>>2]);h=i[a+16>>2];g=i[b+76>>2];j=W(i[e+40>>2]);i[e+32>>2]=i[c+76>>2];i[e+28>>2]=j;i[e+24>>2]=g;i[e+20>>2]=h;i[e+16>>2]=d;V(f,2037,44502,e+16|0)}i[22788]=i[22788]+1;f=Wc(i[b+52>>2],i[c+52>>2]);i[e+44>>2]=f;ja(f,a);kb(f);d=ue(a,f,i[e+40>>2]);if(d){ad(a,d,i[e+40>>2],b,c)}_(e+44|0);_(e+40|0)}S=e+48|0;return d}function ci(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0;f=S-96|0;S=f;i[b+72>>2]=i[22492];a:{if(i[21923]|(i[22472]?j[b+81|0]&8:0)){break a}d=i[b+56>>2];if(!d){break a}e=i[d+4>>2];if(!e){break a}d=d+8|0;while(1){k=d;d=i[e+4>>2];if((d|0)==(b|0)){d=i[e+8>>2]}b:{if(i[d+72>>2]==i[22492]|(j[d+82|0]&8?0:i[21960])){break b}if(i[21875]){vc(a,b,d,i[e>>2],c);break b}c:{if(i[21876]>=0){i[f+48>>2]=i[b+76>>2];V(a,9114,15057,f+48|0);break c}i[22483]=i[22483]+1;g=i[e+12>>2];h=i[b+76>>2];i[f+72>>2]=i[d+76>>2];i[f+68>>2]=h;i[f+64>>2]=g;V(a,9115,15074,f- -64|0)}d=i[e>>2];d:{if(!d){break d}e=i[d+4>>2];if(!e){break d}g=d+8|0;while(1){d=0;i[22680]=i[22680]+1;aa(i[e+8>>2],b,f+88|0);h=Ia(i[e+8>>2],b,n[f+88>>3]);e=i[22007];if((e|0)>=1){while(1){if(i[21876]!=(d|0)){n[f+32>>3]=n[h+(d<<3)>>3];V(a,9116,14922,f+32|0);e=i[22007]}d=d+1|0;if((d|0)<(e|0)){continue}break}}V(a,9117,13098,0);$(h,i[22425]);e=i[g>>2];g=g+4|0;if(e){continue}break}}if(i[21876]<0){break b}l=n[c>>3];m=n[c+8>>3];n[f+16>>3]=n[c+16>>3];n[f+8>>3]=m;n[f>>3]=l;V(a,9118,15097,f)}d=k+4|0;e=i[k>>2];if(e){continue}break}}S=f+96|0}function oc(a){var b=0,c=0,d=0,e=0,f=0,h=0;e=S-16|0;S=e;W(i[22496]);if(i[21886]>=4){V(i[22423],4026,34498,0)}i[22492]=i[22492]+1;a:{if(!a){break a}while(1){b=i[a+48>>2];if(!b){break a}if(j[a+83|0]&8){a=b}else{i[a+72>>2]=i[22492];b=i[a+60>>2];b:{if(!b){break b}c=i[b+4>>2];if(!c){break b}b=b+4|0;while(1){i[c+80>>2]=i[c+80>>2]&-16385;c=i[b+4>>2];b=b+4|0;if(c){continue}break}}b=i[a+56>>2];c:{if(!b){break c}c=i[b+4>>2];if(!c){break c}b=b+8|0;while(1){f=b;d=j[c+16|0];d:{if((d&6)==2){break d}b=i[c+4>>2];if((b|0)==(a|0)){b=i[c+8>>2]}h=i[b+80>>2];if(h&16384){g[c+16|0]=d&249|2;break d}if(i[b+72>>2]==i[22492]){break d}i[b+80>>2]=h|16384;d=j[c+16|0];g[c+16|0]=d&251;d=ld(a,b,(d&96)==96);b=j[c+16|0];if(d){b=b|4;g[c+16|0]=b}g[c+16|0]=b|2}b=f+4|0;c=i[f>>2];if(c){continue}break}}i[a+80>>2]=i[a+80>>2]|134217728;a=i[a+48>>2]}if(a){continue}break}}a=W(i[22496]);cb(i[22496]+4|0,a,i[21858]?16:17);a=W(i[22497])+a|0;e:{if(i[22482]){i[22834]=a+i[22834];break e}i[22830]=a+i[22830];if(i[22832]>=(a|0)){break e}i[22832]=a}if(i[21886]>=2){i[e>>2]=a;V(i[22423],2021,34524,e)}S=e+16|0}function fe(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,o=0,p=0;f=S-48|0;S=f;o=i[21874];p=i[22007];a:{if(j[a+81|0]&2){if(!(i[a+40>>2]?i[22275]:0)){V(i[22423],6158,66365,0);X(5,a,0)}d=ba(i[22427]);i[f+44>>2]=d;g=i[i[i[a+52>>2]+4>>2]+12>>2];if(!g){break a}e=i[g+4>>2];if(!e){break a}k=i[a+40>>2];d=g+8|0;while(1){g=d;b:{if((k|0)!=i[e+40>>2]){break b}d=i[e+52>>2];if(!d){break b}e=i[d+4>>2];if(!e){break b}d=d+4|0;while(1){Z(f+44|0,e);e=i[d+4>>2];d=d+4|0;if(e){continue}break}}d=g+4|0;e=i[g>>2];if(e){continue}break}d=i[f+44>>2];break a}d=i[a+52>>2];i[f+44>>2]=d}c:{if(!d){h=1.7976931348623157e+308;break c}h=1.7976931348623157e+308;e=i[d+4>>2];if(!e){break c}g=((o|0)!=0)-p|0;d=d+4|0;while(1){l=Fb(i[e+8>>2],b,g);k=l<h;h=k?l:h;m=k?e:m;e=i[d+4>>2];d=d+4|0;if(e){continue}break}}if(j[a+81|0]&2){_(f+44|0)}n[c>>3]=w(h);if(!m){d=i[22423];g=i[a+76>>2];i[f+36>>2]=Y(b);i[f+32>>2]=g;V(d,6261,66473,f+32|0);X(5,a,0)}if(i[21886]>=3){d=i[22423];g=i[m+16>>2];l=n[c>>3];a=i[a+76>>2];i[f+20>>2]=Y(b);i[f+16>>2]=a;n[f+8>>3]=l;i[f>>2]=g;V(d,3019,66548,f)}S=f+48|0;return m}function Gh(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0;c=S-208|0;S=c;j=i[22992];a:{if((j|0)==(i[21992]+ -1|0)){d=i[21986];i[21886]=d;i[22544]=d;break a}d=i[21886]}if((d|0)>=3){d=i[b+76>>2];k=i[a+76>>2];i[c+128>>2]=j+1;i[c+132>>2]=k;i[c+136>>2]=d;V(i[22423],3050,38437,c+128|0)}d=Bb(a,c+192|0,c+176|0,c+160|0);j=Bb(b,c+184|0,c+168|0,c+152|0);g=n[c+192>>3];f=n[b+8>>3];e=n[a+8>>3];h=n[11157]*20;e=h<e?e:h;f=e<f?f:e;l=n[c+184>>3];if(!(g>f^1|l>f^1)){e=Vb(i[a+52>>2],c+204|0,c+200|0);k=i[b+76>>2];m=i[a+76>>2];o=i[22423];h=n[c+152>>3];p=n[c+168>>3];q=n[c+160>>3];r=n[c+176>>3];b:{if(!(e>f^1)){n[c+56>>3]=h;n[c+48>>3]=p;i[c+40>>2]=k;n[c+32>>3]=f;n[c+24>>3]=e;n[c+16>>3]=q;n[c+8>>3]=r;i[c>>2]=m;V(o,6417,38490,c);break b}n[c+112>>3]=h;n[c+104>>3]=p;i[c+96>>2]=k;n[c+88>>3]=e;n[c+80>>3]=q;n[c+72>>3]=r;i[c+64>>2]=m;V(o,6418,38724,c- -64|0)}ca(8,a,b)}if(!(g<l)){n[c+176>>3]=n[c+168>>3];n[c+160>>3]=n[c+152>>3];g=l;d=j;a=b}ob(a,d,5,c+176|0,c+160|0,0);i[23016]=i[23016]+1;n[11509]=g+n[11509];if(!(n[11510]<g^1)){n[11510]=g}S=c+208|0}function Qb(a,b,c,d,e){var f=0,g=0,h=0,j=0;g=S-128|0;S=g;f=i[4173];i[g+48>>2]=i[4172];i[g+52>>2]=f;f=i[4171];i[g+40>>2]=i[4170];i[g+44>>2]=f;f=i[4169];i[g+32>>2]=i[4168];i[g+36>>2]=f;f=i[4181];i[g+16>>2]=i[4180];i[g+20>>2]=f;f=i[4179];i[g+8>>2]=i[4178];i[g+12>>2]=f;f=i[4177];i[g>>2]=i[4176];i[g+4>>2]=f;f=i[22007];a:{b:{c:{if(f){if(d){h=f;while(1){h=h+ -1|0;j=h<<3;n[j+(g+96|0)>>3]=n[b+j>>3]-n[d+j>>3];if(h){continue}break}break c}h=f<<3;if(c){oa(g+96|0,c,h);break b}fa(g+96|0,0,h);break b}if(!d){break a}}_a(g+96|0,f,1);f=i[22007];if(!f){break a}}while(1){f=f+ -1|0;h=f<<3;n[h+(g- -64|0)>>3]=n[b+h>>3]+n[h+(g+96|0)>>3]*e;if(f){continue}break}}Rb(a,b,g- -64|0,g+32|0);f=i[22007];d:{e:{f:{if(f){if(d){h=f;while(1){h=h+ -1|0;c=h<<3;n[c+(g+96|0)>>3]=n[b+c>>3]-n[c+d>>3];if(h){continue}break}break f}d=f<<3;if(c){oa(g+96|0,c,d);break e}fa(g+96|0,0,d);break e}if(!d){break d}}_a(g+96|0,f,1);f=i[22007];if(!f){break d}}while(1){f=f+ -1|0;c=f<<3;n[c+(g- -64|0)>>3]=n[b+c>>3]-n[c+(g+96|0)>>3]*e;if(f){continue}break}}Rb(a,b,g- -64|0,g);S=g+128|0}function di(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0;e=S-80|0;S=e;f=i[22492];i[b+72>>2]=f;a:{if(i[21923]|(i[22472]?j[b+81|0]&8:0)){break a}g=i[b+60>>2];if(!g){break a}d=i[g+4>>2];if(!d){break a}g=g+8|0;while(1){if(!(i[d+72>>2]==(f|0)|(j[d+82|0]&8?0:i[21960]))){f=lb(i[b+52>>2],i[22007],(g-i[b+60>>2]|0)+ -8>>2,0);i[e+76>>2]=f;b:{if(i[21875]){vc(a,b,d,f,c);break b}c:{if(i[21876]>=0){f=i[b+76>>2];i[e+52>>2]=i[d+76>>2];i[e+48>>2]=f;V(a,9119,15124,e+48|0);break c}i[22483]=i[22483]+1;f=i[b+76>>2];i[e+68>>2]=i[d+76>>2];i[e+64>>2]=f;V(a,9120,15159,e- -64|0)}d=i[e+76>>2];d:{if(!d){break d}h=i[d+4>>2];if(!h){break d}k=d+8|0;while(1){f=i[22007];if((f|0)>=1){d=0;while(1){if(i[21876]!=(d|0)){n[e+32>>3]=n[i[h+8>>2]+(d<<3)>>3];V(a,9121,14922,e+32|0);f=i[22007]}d=d+1|0;if((d|0)<(f|0)){continue}break}}V(a,9122,13098,0);h=i[k>>2];k=k+4|0;if(h){continue}break}}if(i[21876]<0){break b}l=n[c>>3];m=n[c+8>>3];n[e+16>>3]=n[c+16>>3];n[e+8>>3]=m;n[e>>3]=l;V(a,9123,15097,e)}ga(e+76|0)}d=i[g>>2];if(!d){break a}g=g+4|0;f=i[22492];continue}}S=e+80|0}function cb(a,b,c){var d=0,e=0,f=0,g=0,h=0;d=S-208|0;S=d;i[d+8>>2]=1;i[d+12>>2]=0;a:{h=b<<2;if(!h){break a}i[d+16>>2]=4;i[d+20>>2]=4;b=4;g=4;f=2;while(1){e=b;b=(g+4|0)+b|0;i[(d+16|0)+(f<<2)>>2]=b;f=f+1|0;g=e;if(b>>>0<h>>>0){continue}break}e=(a+h|0)+ -4|0;b:{if(e>>>0<=a>>>0){f=1;b=1;break b}f=1;b=1;while(1){c:{if((f&3)==3){Ec(a,c,b,d+16|0);_b(d+8|0,2);b=b+2|0;break c}g=b+ -1|0;d:{if(l[(d+16|0)+(g<<2)>>2]>=e-a>>>0){Zb(a,c,d+8|0,b,0,d+16|0);break d}Ec(a,c,b,d+16|0)}if((b|0)==1){Yb(d+8|0,1);b=0;break c}Yb(d+8|0,g);b=1}f=i[d+8>>2]|1;i[d+8>>2]=f;a=a+4|0;if(a>>>0<e>>>0){continue}break}}Zb(a,c,d+8|0,b,0,d+16|0);while(1){e:{f:{g:{if(!((b|0)!=1|(f|0)!=1)){if(i[d+12>>2]){break g}break a}if((b|0)>1){break f}}g=d+8|0;e=mi(i[d+8>>2]+ -1|0);if(!e){e=mi(i[d+12>>2]);e=e?e+32|0:0}_b(g,e);f=i[d+8>>2];b=b+e|0;break e}Yb(d+8|0,2);i[d+8>>2]=i[d+8>>2]^7;_b(d+8|0,1);g=a+ -4|0;e=b+ -2|0;Zb(g-i[(d+16|0)+(e<<2)>>2]|0,c,d+8|0,b+ -1|0,1,d+16|0);Yb(d+8|0,1);f=i[d+8>>2]|1;i[d+8>>2]=f;Zb(g,c,d+8|0,e,1,d+16|0);b=e}a=a+ -4|0;continue}}S=d+208|0}function Za(a){var b=0,c=0,d=0,e=0,f=0,h=0;c=S-80|0;S=c;if(i[21886]>=3){i[c+64>>2]=i[a+76>>2];V(i[22423],3028,31571,c- -64|0)}a:{if(g[a+82|0]&1){if(i[21886]<2){break a}i[c+48>>2]=i[a+76>>2];V(i[22423],3074,31633,c+48|0);break a}f=i[a+60>>2];b=0;b:{if(!f){break b}b=f;e=i[b+4>>2];if(!e){break b}f=f+8|0;while(1){c:{b=i[e+80>>2];if(b&65536){break c}if(b&2048){b=i[e+76>>2];i[c+32>>2]=i[a+76>>2];i[c+36>>2]=b;V(i[22423],6357,31693,c+32|0);ca(5,a,e)}h=i[22493]+1|0;i[22493]=h;d=i[e+52>>2];d:{if(!d){break d}b=i[d+4>>2];if(!b){break d}d=d+4|0;while(1){i[b+20>>2]=h;b=i[d+4>>2];d=d+4|0;if(b){continue}break}}e:{b=i[a+52>>2];if(!b){break e}b=b+4|0;while(1){d=i[b>>2];if(!d){break e}b=b+4|0;if(i[d+20>>2]==(h|0)){continue}break}break c}if(i[21886]>=2){b=i[e+76>>2];i[c+16>>2]=i[a+76>>2];i[c+20>>2]=b;V(i[22423],2015,31796,c+16|0)}la(a,e,11,0,1);break a}e=i[f>>2];f=f+4|0;if(e){continue}break}b=i[a+60>>2]}if((W(b)|0)>=i[22007]){break a}la(a,a,10,0,1);if(i[21886]<2){break a}i[c>>2]=i[a+76>>2];V(i[22423],2016,31855,c)}S=c+80|0}function nc(a){var b=0,c=0,d=0,e=0,f=0;d=S-48|0;S=d;a:{if(j[a+81|0]&32){break a}if(i[21886]>=4){i[d+32>>2]=i[a+76>>2];V(i[22423],4043,43575,d+32|0)}b=i[a+52>>2];b:{if(!b){break b}c=i[b+4>>2];if(!c){break b}b=b+4|0;while(1){g[c+24|0]=j[c+24|0]&254;c=i[b+4>>2];b=b+4|0;if(c){continue}break}}b=i[a+56>>2];c:{if(!b){break c}c=i[b+4>>2];if(!c){break c}b=b+8|0;while(1){e=b;b=i[c>>2];d:{if(!b){break d}c=i[b+4>>2];if(!c){break d}b=b+4|0;while(1){g[c+24|0]=j[c+24|0]|1;c=i[b+4>>2];b=b+4|0;if(c){continue}break}}b=e+4|0;c=i[e>>2];if(c){continue}break}}e=0;b=i[a+52>>2];if(!b){break a}c=i[b+4>>2];if(!c){break a}b=b+4|0;while(1){e:{if(g[c+24|0]&1){b=b+4|0;break e}i[22936]=i[22936]+1;Ma(i[a+52>>2],c);ja(i[c+12>>2],a);if(!W(i[c+12>>2])){g[c+24|0]=j[c+24|0]|4;Z(90004,c);e=1;i[22938]=i[22938]+1;if(i[21886]<2){break e}i[d>>2]=i[c+16>>2];V(i[22423],2036,43644,d);break e}e=1;if(i[21886]<3){break e}f=i[a+76>>2];i[d+16>>2]=i[c+16>>2];i[d+20>>2]=f;V(i[22423],3009,43711,d+16|0)}c=i[b>>2];if(c){continue}break}}S=d+48|0;return e}function pc(a){var b=0,c=0,d=0,e=0,f=0,g=0;c=S+ -64|0;S=c;if(i[21886]>=4){i[c+48>>2]=i[a+76>>2];i[c+52>>2]=i[22493]+1;V(i[22423],4022,46639,c+48|0)}e=W(i[a+60>>2]);a:{if((e|0)<i[22007]){la(a,a,10,0,1);if(i[21886]<2){break a}i[c>>2]=i[a+76>>2];i[c+4>>2]=e;V(i[22423],2017,46707,c);break a}e=i[22493]+1|0;i[22493]=e;f=i[a+52>>2];b:{if(!f){break b}b=i[f+4>>2];if(!b){break b}d=f+4|0;while(1){i[b+20>>2]=e;b=i[d+4>>2];d=d+4|0;if(b){continue}break}}e=i[a+60>>2];if(!e){break a}d=i[e+4>>2];if(!d){break a}b=e+8|0;while(1){e=b;b=i[d+80>>2];if(b&2048){b=i[d+76>>2];i[c+32>>2]=i[a+76>>2];i[c+36>>2]=b;V(i[22423],6360,46774,c+32|0);ca(5,a,d);b=i[d+80>>2]}c:{if(b&-1071644672|(i[a+80>>2]&65536?!(b&65536):0)){break c}d:{b=i[d+52>>2];if(!b){break d}b=b+4|0;g=i[22493];while(1){f=i[b>>2];if(!f){break d}b=b+4|0;if(i[f+20>>2]==(g|0)){continue}break}break c}la(d,a,11,0,1);if(i[21886]<2){break c}b=i[a+76>>2];i[c+16>>2]=i[d+76>>2];i[c+20>>2]=b;V(i[22423],2018,46880,c+16|0)}b=e+4|0;d=i[e>>2];if(d){continue}break}}S=c- -64|0}function Kh(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0;e=S-112|0;S=e;Sa(0,e+96|0,e+104|0);p=b>d?d:b;k=1.7976931348623157e+308;a:{g=i[a+52>>2];if(!g){break a}l=i[g+4>>2];if(!l){break a}o=g+8|0;while(1){b:{if(!g){break b}m=i[g+4>>2];if(!m){break b}g=g+8|0;while(1){h=g;c:{if(l>>>0<=m>>>0){break c}f=Fb(i[l+8>>2],i[m+8>>2],i[22007]);if(k>f^1){break c}k=f}g=h+4|0;m=i[h>>2];if(m){continue}break}}l=i[o>>2];if(!l){break a}o=o+4|0;g=i[a+52>>2];continue}}f=n[11144];q=f+n[10930];r=n[11157]+f;j=n[e+104>>3];f=n[e+96>>3];f=f<j?j:f;f=f<r?r:f;f=f<q?q:f;j=p/f;if(i[21886]){g=i[c+76>>2];h=i[a+76>>2];n[e- -64>>3]=b;n[e+72>>3]=d;n[e+80>>3]=j;i[e+88>>2]=i[22455];i[e+48>>2]=h;i[e+52>>2]=g;n[e+56>>3]=k;V(i[22423],16,30024,e+48|0)}d:{if(j>100^1){break d}g=i[c+76>>2];h=i[a+76>>2];n[e+16>>3]=k;n[e+24>>3]=p;i[e+32>>2]=i[22455];n[e>>3]=j;i[e+8>>2]=h;i[e+12>>2]=g;V(i[22423],6271,30159,e);if(!(k/f<100^1)){V(i[22423],8145,30355,0)}if(i[21874]){V(i[22423],8145,30468,0)}if(i[21857]){break d}ca(8,a,c)}S=e+112|0}function Lg(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0;e=S-48|0;S=e;b=i[22499];a:{if(!b){break a}f=i[b+4>>2];k=W(b);if((k|0)<1){break a}b=0;while(1){b:{if(!f){break b}d=i[f+60>>2];c:{if(!d){break c}b=0;c=l[d+4>>2]<3;g=W(d);if(c|(g|0)<1){break c}c=i[f+60>>2];while(1){b=b+1|0;if(l[(c+(b<<2)|0)+4>>2]<3){break c}if((b|0)<(g|0)){continue}break}}if((b|0)==(g|0)){g=b;break b}i[e+36>>2]=i[f+76>>2];i[e+32>>2]=j;V(a,9283,67071,e+32|0);c=i[f+52>>2];d:{if(!c){break d}d=i[c+4>>2];if(!d){break d}h=c+4|0;while(1){i[e+16>>2]=i[d+16>>2];V(a,9284,67084,e+16|0);d=i[h+4>>2];h=h+4|0;if(d){continue}break}}V(a,9285,67089,0);c=i[f+60>>2];e:{if(!c){break e}h=i[c+4>>2];b=0;g=W(c);if((g|0)<1){break e}while(1){c=-1;d=-3;f:{g:{switch(h|0){case 1:d=-2;break f;default:c=i[h+76>>2];break;case 2:break f;case 0:break g}}d=c}i[e>>2]=d;V(a,9286,67102,e);b=b+1|0;h=i[(i[f+60>>2]+(b<<2)|0)+4>>2];if((b|0)!=(g|0)){continue}break}b=g}V(a,9287,67106,0)}j=j+1|0;f=i[(i[22499]+(j<<2)|0)+4>>2];if((j|0)!=(k|0)){continue}break}}S=e+48|0}function We(a,b,c,d){var e=0,f=0,h=0,k=0,l=0;e=S-32|0;S=e;h=3;a:{b:{switch(b+ -9|0){case 0:h=4;k=1;break a;case 3:h=4;k=2;break a;case 17:break a;default:break b}}i[e+16>>2]=b;V(i[22423],6219,17615,e+16|0);X(5,0,0);h=0}d=rd(c,d,e+20|0,e+24|0);i[e+28>>2]=d;b=i[22440];c:{if(!b){break c}c=i[b>>2];if(!c){break c}while(1){g[b+24|0]=j[b+24|0]&254;b=c;c=i[b>>2];if(c){continue}break}}d:{if(!d){break d}c=i[d+4>>2];l=W(d);if((l|0)<1){break d}b=0;while(1){e:{if(!c){break e}if(i[21882]>=1){if((Y(i[c+8>>2])+1|0)!=i[21882]){break e}}f=sd(0,0,c,k,0)+f|0}b=b+1|0;c=i[(d+(b<<2)|0)+4>>2];if((b|0)!=(l|0)){continue}break}}i[e>>2]=f;V(a,9231,13110,e);b=i[22440];f:{if(!b){break f}c=i[b>>2];if(!c){break f}while(1){g[b+24|0]=j[b+24|0]&254;b=c;c=i[b>>2];if(c){continue}break}}g:{if(!d){break g}c=i[d+4>>2];f=W(d);if((f|0)<1){break g}b=0;while(1){h:{if(!c){break h}if(i[21882]>=1){if((Y(i[c+8>>2])+1|0)!=i[21882]){break h}}sd(a,h,c,k,1)}b=b+1|0;c=i[(d+(b<<2)|0)+4>>2];if((b|0)!=(f|0)){continue}break}}_(e+28|0);S=e+32|0}function ud(a,b,c,d,e){var f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0;m=S-32|0;S=m;i[e>>2]=0;if((b|0)>=1){while(1){o=j;p=j<<3;q=(j<<2)+a|0;k=i[q>>2];g=n[p+k>>3];g=g<0?-g:g;h=j;j=j+1|0;f=j;s=(f|0)>=(b|0);a:{if(s){f=k;break a}while(1){l=n[i[(f<<2)+a>>2]+p>>3];l=l<0?-l:l;r=l>g;g=r?l:g;h=r?f:h;f=f+1|0;if((f|0)!=(b|0)){continue}break}if((h|0)==(o|0)){f=k;break a}h=(h<<2)+a|0;f=i[h>>2];i[h>>2]=k;i[q>>2]=f;i[d>>2]=i[d>>2]^1}b:{c:{if(g<=n[i[22310]+p>>3]^1){break c}i[e>>2]=1;if(g!=0){break c}if(i[21886]>=4){n[m+16>>3]=n[11144];i[m>>2]=o;n[m+8>>3]=g;V(i[22423],8011,2003,m);Wb(i[22423],2056,a,b,c)}i[22768]=i[22768]+1;sa(2064);break b}if(s){break b}r=c-j|0;if(!r){break b}q=f+p|0;l=n[q>>3];k=j;while(1){f=i[(k<<2)+a>>2]+p|0;t=n[f>>3]/l;h=q;o=r;while(1){n[f+8>>3]=n[f+8>>3]-t*n[h+8>>3];h=h+8|0;f=f+8|0;o=o+ -1|0;if(o){continue}break}k=k+1|0;if((k|0)!=(b|0)){continue}break}}if((b|0)!=(j|0)){continue}break}}if(!(n[11420]>g^1)){n[11420]=g}if(i[21886]>=5){Wb(i[22423],2100,a,b,c)}S=m+32|0}function Fh(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0;e=S-16|0;S=e;if(i[21886]>=1){V(i[22423],1015,46942,0)}if(!i[22275]){Na()}b=i[22431];a:{if(!b){break a}a=i[b+48>>2];if(a){while(1){i[b+80>>2]=i[b+80>>2]&-16385;b=a;a=i[a+48>>2];if(a){continue}break}}c=i[22431];if(!c){break a}while(1){if(!i[c+48>>2]){break a}i[c+80>>2]=i[c+80>>2]|16384;a=i[22492];d=a+1|0;i[22492]=d;i[c+72>>2]=a;a=i[c+60>>2];if(!(!a|!i[a+4>>2])){b=a+4|0;while(1){a=i[b+4>>2];b=b+4|0;if(a){continue}break}i[c+72>>2]=d}a=i[c+52>>2];b:{if(!a){break b}b=i[a+4>>2];if(!b){break b}a=a+8|0;while(1){d=a;a=i[b+12>>2];c:{if(!a){break c}b=i[a+4>>2];if(!b){break c}a=a+8|0;while(1){g=i[22492];while(1){if(!(i[b+72>>2]!=(g|0)?!(j[b+81|0]&64):0)){b=i[a>>2];a=a+4|0;if(b){continue}break c}break}f=((ld(c,b,0)|0)!=0)+f|0;b=i[a>>2];a=a+4|0;if(b){continue}break}}a=d+4|0;b=i[d>>2];if(b){continue}break}}c=i[c+48>>2];if(c){continue}break}}i[22986]=i[22986]+f;if(i[21886]>=1){i[e>>2]=f;V(i[22423],1016,47002,e)}S=e+16|0;return(f|0)>0}function ze(a){var b=0,c=0,d=0,e=0,f=0,h=0;f=S-16|0;S=f;i[22492]=i[22492]+1;a:{if(!a){break a}while(1){if(!i[a+48>>2]){break a}c=i[22492];i[a+72>>2]=c;b:{d=i[a+60>>2];if(!d){break b}b=i[d+4>>2];if(!b){break b}h=d+8|0;while(1){c:{if(i[b+72>>2]==(c|0)){break c}if(!ld(a,b,j[a+81|0]&32?i[b+80>>2]>>>13&1:0)){break c}d=i[b+56>>2];if(!d){break c}c=d+4|0;while(1){e=i[c>>2];if(!e){break c}c=c+4|0;d=i[e+4>>2];if((d|0)==(b|0)){d=i[e+8>>2]}if((a|0)!=(d|0)){continue}break}g[e+16|0]=j[e+16|0]|4}b=i[h>>2];if(!b){break b}h=h+4|0;c=i[22492];continue}}i[a+80>>2]=i[a+80>>2]|134217728;b=i[a+56>>2];d:{if(!b){break d}c=i[b+4>>2];if(!c){break d}b=b+4|0;while(1){g[c+16|0]=j[c+16|0]|2;c=i[b+4>>2];b=b+4|0;if(c){continue}break}}a=i[a+48>>2];if(a){continue}break}}a=W(i[22496]);cb(i[22496]+4|0,a,i[21858]?16:17);a=W(i[22497])+a|0;e:{if(i[22482]){i[22822]=a+i[22822];break e}i[22818]=a+i[22818];if(i[22820]>=(a|0)){break e}i[22820]=a}if(i[21886]>=2){i[f>>2]=a;V(i[22423],2022,34557,f)}S=f+16|0}function ge(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,l=0,m=0;e=S+ -64|0;S=e;i[22594]=i[22594]+1;i[e+56>>2]=-1;i[e+60>>2]=-2097153;i[e+44>>2]=0;f=i[a+60>>2];a:{b:{if(!f){h=-8.988465674311579e+307;break b}f=f+4|0;h=-8.988465674311579e+307;while(1){g=i[f>>2];if(g){f=f+4|0;if(j[g+82|0]&3){continue}i[d>>2]=i[d>>2]+1;aa(b,g,e+48|0);m=g;l=n[e+48>>3];g=l>h;k=g?m:k;h=g?l:h;continue}break}n[e+56>>3]=h;if(k){break a}}k=0;i[22600]=i[22600]+1;f=fe(a,b,e+48|0);Na();f=i[f+12>>2];if(f){f=f+4|0;while(1){g=i[f>>2];if(g){f=f+4|0;if(j[g+82|0]&3){continue}i[d>>2]=i[d>>2]+1;aa(b,g,e+48|0);m=g;l=n[e+48>>3];g=l>h;k=g?m:k;h=g?l:h;continue}break}n[e+56>>3]=h;if(k){break a}}i[22596]=i[22596]+1;k=i[22443];if(i[22598]<(k|0)){i[22598]=k}if(i[21886]>=3){i[e+32>>2]=i[a+76>>2];V(i[22423],3025,61719,e+32|0)}k=Sg(b,e+56|0,e+44|0,d);h=n[e+56>>3]}n[c>>3]=h;if(i[21886]>=3){c=i[22423];d=i[k+76>>2];a=i[a+76>>2];i[e+20>>2]=Y(b);i[e+16>>2]=a;n[e+8>>3]=h;i[e>>2]=d;V(c,3015,61814,e)}S=e- -64|0;return k}function jd(a,b,c,d){var e=0,f=0;f=S-48|0;S=f;i[f+44>>2]=0;e=i[21886];if(e|i[21971]){Fe(0,0);rc(i[22423]);if(i[21958]){e=i[22423];fa(94235,0,249);Mc();Lc(e,27727);md(e)}n[f+32>>3]=c;i[f+16>>2]=a;n[f+24>>3]=b;V(i[22423],8062,27734,f+16|0);e=i[21886]}if((e|0)>=2){i[f>>2]=d;V(i[22423],2009,27764,f)}i[22482]=1;n[11143]=c;n[11142]=b;e=i[22428];a:{if((e|0)==i[22432]){break a}i[22432]=e;i[22431]=e;i[22472]=1;b:{if(!e){break b}while(1){if(!i[e+48>>2]){break b}a=i[e+80>>2];i[e+80>>2]=(a&8192?1024:536871936)|a;i[22930]=i[22930]+1;e=i[e+48>>2];if(e){continue}break}}e=i[22440];i[22442]=e;c:{if(!e){break c}a=i[e>>2];if(!a){break c}while(1){g[e+24|0]=j[e+24|0]|16;e=a;a=i[e>>2];if(a){continue}break}}if(!(!i[22275]|!i[21897]|i[22007]>5)){kd()}if(i[21897]|i[21915]){break a}Ae(i[22431],f+44|0)}ze(i[22431]);qc(0,d);e=i[22431];d:{if(!e){break d}a=i[e+48>>2];if(!a){break d}while(1){i[e+80>>2]=i[e+80>>2]&-536870913;e=a;a=i[e+48>>2];if(a){continue}break}}S=f+48|0}function ab(a,b,c,d){var e=0,f=0,g=0;e=S-80|0;S=e;f=i[22454];a:{if(f+ -1>>>0>1){break a}if(c){V(a,9066,c,0);f=i[22454]}c=i[22007];b:{c:{if((f|0)==1){f=c+ -1|0;if(!(!i[21863]|(!i[d+24>>2]|!(j[d+82|0]&2)))){if((c|0)<=1){break c}c=0;while(1){i[e+32>>2]=1168231105;i[e+36>>2]=-1071369290;V(a,9068,13090,e+32|0);c=c+1|0;if((f|0)!=(c|0)){continue}break}break c}g=i[d+40>>2];if(!g){g=Sc(i[d+52>>2]);i[d+40>>2]=g}if((c|0)<2){break c}n[e+16>>3]=n[g>>3];V(a,9067,13090,e+16|0);c=1;if((f|0)==1){break c}while(1){n[e>>3]=n[i[d+40>>2]+(c<<3)>>3];V(a,9067,13090,e);c=c+1|0;if((f|0)!=(c|0)){continue}break}break c}f=c-((b|0)==25&i[21874]!=0)|0;g=i[d+40>>2];if(!g){g=Da(d);i[d+40>>2]=g}c=1;if((f|0)<1){break b}n[e+64>>3]=n[g>>3];V(a,9069,13090,e- -64|0);if((f|0)==1){break c}while(1){n[e+48>>3]=n[i[d+40>>2]+(c<<3)>>3];V(a,9069,13090,e+48|0);c=c+1|0;if((f|0)!=(c|0)){continue}break}}if((b|0)!=7|(f|0)!=2){break b}V(a,9070,14132,0);break a}V(a,9071,13098,0)}S=e+80|0}function $g(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0;g=S-32|0;S=g;k=i[b+60>>2]+4|0;j=i[22007];e=i[a+60>>2];a:{if(i[e+4>>2]==(b|0)){i[c>>2]=0;break a}e=e+4|0;if(i[e+4>>2]==(b|0)){i[c>>2]=1;break a}if(i[e+8>>2]==(b|0)){i[c>>2]=2;break a}h=3;if((j|0)<4){break a}f=e+12|0;while(1){if(i[f>>2]==(b|0)){i[c>>2]=h;break a}f=f+4|0;h=h+1|0;if((j|0)!=(h|0)){continue}break}h=j}f=0;b:{c:{d:{e:{if(i[k>>2]==(a|0)){e=0;break e}if(i[k+4>>2]==(a|0)){e=1;break e}if(i[k+8>>2]==(a|0)){e=2;break e}f=3;if((j|0)<4){break d}f=k+12|0;e=3;while(1){if(i[f>>2]==(a|0)){f=e;break e}f=f+4|0;e=e+1|0;if((j|0)!=(e|0)){continue}break}break c}i[d>>2]=e}if((h|0)>=(j|0)){break c}if((f|0)<(j|0)){break b}}h=i[b+76>>2];i[g+16>>2]=i[a+76>>2];i[g+20>>2]=h;V(i[22423],6104,48323,g+16|0);ca(5,a,b)}e=lb(i[a+52>>2],i[22007],i[c>>2],1);if(i[21886]>=4){h=i[d>>2];d=i[b+76>>2];b=i[c>>2];i[g>>2]=i[a+76>>2];i[g+4>>2]=b;i[g+8>>2]=d;i[g+12>>2]=h;V(i[22423],4047,48402,g)}S=g+32|0;return e}function _d(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,n=0;d=S+ -64|0;S=d;if(i[21886]>=3){e=i[a+76>>2];g=i[c+16>>2];i[d+48>>2]=i[b+16>>2];i[d+52>>2]=g;i[d+56>>2]=e;V(i[22423],3038,67272,d+48|0)}if(!(j[a+81|0]&32)){i[d+32>>2]=i[a+76>>2];V(i[22423],6283,67324,d+32|0);X(5,a,0)}n=a+52|0;g=-1;e=i[a+52>>2];a:{b:{if(!e){break b}k=i[e+4>>2];l=W(e);if((l|0)<1){break b}f=-1;e=0;while(1){h=i[k+16>>2];m=i[c+16>>2];c:{if(!((g|0)!=-1|h>>>0>=m>>>0)){g=e;break c}if((h|0)!=(m|0)){break c}i[d+16>>2]=i[a+76>>2];i[d+20>>2]=m;V(i[22423],6281,67393,d+16|0);X(5,a,0);h=i[k+16>>2]}f=i[b+16>>2]==(h|0)?e:f;e=e+1|0;k=i[(i[n>>2]+(e<<2)|0)+4>>2];if((e|0)!=(l|0)){continue}break}if((f|0)!=-1){break a}}b=i[b+16>>2];i[d>>2]=i[a+76>>2];i[d+4>>2]=b;V(i[22423],6282,67469,d);X(5,a,0);f=-1}b=(g|0)==-1?l:g;b=b-((f|0)<(b|0))|0;if((b^f)&1){i[a+80>>2]=i[a+80>>2]^4096}Qc(i[a+52>>2],f);Va(n,b,c);c=i[a+60>>2];e=i[(c+(f<<2)|0)+4>>2];Qc(c,f);Va(a+60|0,b,e);S=d- -64|0}function Cg(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,l=0,m=0;e=S+ -64|0;S=e;i[e+56>>2]=-1;i[e+60>>2]=-1048577;if(j[b+82|0]&8){i[22604]=i[22604]+1;aa(a,b,e+56|0);k=b;g=1}Ha(b);Ya(b);i[d>>2]=b;d=i[22492]+1|0;i[22492]=d;i[b+72>>2]=d;l=b;while(1){d=i[l+48>>2];if(d){h=i[l+60>>2];if(h){d=h+4|0;while(1){h=g;g=i[22492];a:{while(1){f=i[d>>2];if(!f){break a}d=d+4|0;if((g|0)==i[f+72>>2]){continue}break}i[f+72>>2]=g;if(h){g=1;if(!(j[f+82|0]&8)){continue}}i[22604]=i[22604]+1;aa(a,f,e+48|0);g=h;if(n[e+48>>3]>0^1){continue}Ha(f);Ya(f);if(!(j[f+82|0]&8)){continue}g=1;m=n[e+48>>3];if(m>n[e+56>>3]^1){continue}n[e+56>>3]=m;k=f;continue}break}g=h;d=i[l+48>>2]}l=d;if(d){continue}}break}b:{if(k){n[c>>3]=n[e+56>>3];if(i[21886]<2){break b}b=i[22423];a=Y(a);i[e+32>>2]=i[k+76>>2];i[e+16>>2]=a;n[e+24>>3]=n[e+56>>3];V(b,2003,4165,e+16|0);break b}if(i[21886]<4){break b}c=i[22423];a=Y(a);i[e+4>>2]=i[b+76>>2];i[e>>2]=a;V(c,4011,4217,e)}S=e- -64|0;return k}function wc(a,b,c,d,e){var f=0,g=0,h=0,j=0,k=0,l=0;f=S-96|0;S=f;k=W(b);i[f+84>>2]=i[c+76>>2];i[f+80>>2]=k;V(a,9098,14902,f+80|0);a:{if(d!=0){h=ba(k);i[f+92>>2]=h;if(!b){break a}g=i[b+4>>2];if(!g){break a}j=b+4|0;d=-d;while(1){Z(f+92|0,Ia(g,c,d));g=i[j+4>>2];j=j+4|0;if(g){continue}break}h=i[f+92>>2];break a}i[f+92>>2]=b;h=b}b:{if(!h){h=0;break b}j=i[h+4>>2];if(!j){break b}c=h+8|0;while(1){g=0;if(i[22007]>=1){while(1){c:{if(i[21876]==(g|0)){V(a,9099,13691,0);break c}n[f+64>>3]=n[(g<<3)+j>>3];V(a,9100,14922,f- -64|0)}g=g+1|0;if((g|0)<i[22007]){continue}break}}if(i[f+92>>2]!=(b|0)){$(j,i[22425])}V(a,9101,13098,0);j=i[c>>2];c=c+4|0;if(j){continue}break}h=i[f+92>>2]}if((b|0)!=(h|0)){_(f+92|0)}i[f+48>>2]=k;V(a,9102,14929,f+48|0);if((k|0)>=1){g=0;while(1){i[f+32>>2]=g;V(a,9103,14929,f+32|0);g=g+1|0;if((k|0)!=(g|0)){continue}break}}d=n[e>>3];l=n[e+8>>3];n[f+16>>3]=n[e+16>>3];n[f+8>>3]=l;n[f>>3]=d;V(a,9104,14933,f);S=f+96|0}function rf(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0;j=S-32|0;S=j;a:{if(i[21886]<1){break a}i[j+16>>2]=6756;h=i[22423];V(h,9001,6251,j+16|0);if((c|0)<1){break a}while(1){e=i[(g<<2)+d>>2];f=0;while(1){n[j>>3]=n[e>>3];V(h,9002,6255,j);e=e+8|0;f=f+1|0;if((f|0)!=(c|0)){continue}break}V(h,9003,6262,0);g=g+1|0;if((g|0)!=(c|0)){continue}break}}b:{if(!b){break b}e=b+ -1|0;h=i[(c<<2)+d>>2];if((c|0)<1){while(1){a=e;e=c;f=h;if(c){while(1){k=k+ -8|0;f=f+ -8|0;n[k>>3]=n[f>>3];e=e+ -1|0;if(e){continue}break}}e=a+ -1|0;if(a){continue}break}break b}o=c<<3;while(1){l=0;b=h;if(!c){fa(h,0,o);while(1)continue}p=e;while(1){e=i[(l<<2)+d>>2];m=0;k=c;f=a;while(1){m=m+n[e>>3]*n[f>>3];g=f+8|0;f=g;e=e+8|0;k=k+ -1|0;if(k){continue}break}n[b>>3]=m;b=b+8|0;l=l+1|0;if((l|0)!=(c|0)){continue}break}e=c;if(c){while(1){g=g+ -8|0;b=b+ -8|0;n[g>>3]=n[b>>3];e=e+ -1|0;if(e){continue}break}}e=p+ -1|0;a=a+o|0;if(p){continue}break}}S=j+32|0}function ac(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;g=S+ -64|0;S=g;l=i[22493]+1|0;i[22493]=l;e=i[b+52>>2];a:{if(!e){break a}f=i[e+4>>2];if(!f){break a}j=e+4|0;while(1){i[f+20>>2]=l;f=i[j+4>>2];j=j+4|0;if(f){continue}break}}b:{c:{e=i[a+52>>2];d:{if(!e){break d}f=i[e+4>>2];if(!f){break d}j=e+8|0;k=-1.7976931348623157e+308;m=1.7976931348623157e+308;e=0;while(1){e:{f:{if(i[f+20>>2]==(l|0)){break f}i[f+20>>2]=l;i[23024]=i[23024]+1;aa(i[f+8>>2],b,g+56|0);h=n[g+56>>3];if(!e){e=f;k=h;break e}if(h>k){e=f;k=h;break f}if(!(h<m^1)){break e}}h=m}f=i[j>>2];if(f){j=j+4|0;l=i[22493];m=h;continue}break}if(e){break c}}e=0;k=0;if(i[21886]<3){h=0;break b}b=i[b+76>>2];i[g>>2]=i[a+76>>2];i[g+4>>2]=b;V(i[22423],3067,4267,g);h=0;break b}if(i[21886]<4){break b}f=i[e+16>>2];b=i[b+76>>2];a=i[a+76>>2];n[g+32>>3]=h;i[g+40>>2]=a;i[g+44>>2]=b;i[g+16>>2]=f;n[g+24>>3]=k;V(i[22423],4084,4354,g+16|0)}n[c>>3]=k;n[d>>3]=h;S=g- -64|0;return e}function hi(a,b,c,d){var e=0,f=0,g=0,h=0,j=0;f=S-96|0;S=f;if(d){V(a,9105,14984,0)}e=bc(b);i[f+88>>2]=e;i[f+92>>2]=ba(W(e));a:{if(!e){break a}d=i[e+4>>2];if(!d){break a}e=e+4|0;while(1){i[22680]=i[22680]+1;aa(i[d+8>>2],b,f+80|0);Z(f+92|0,Ia(i[d+8>>2],b,n[f+80>>3]));d=i[e+4>>2];e=e+4|0;if(d){continue}break}}b:{if((c|0)==13){V(a,9106,14987,0);j=15014;b=14989;break b}V(a,9107,15016,0);j=15051;b=15026}e=i[f+92>>2];c:{if(!e){break c}c=i[e+4>>2];if(c){g=n[c>>3];h=n[c+8>>3];n[f- -64>>3]=n[c+16>>3];n[f+56>>3]=h;n[f+48>>3]=g;V(a,9109,b,f+48|0);c=e+4|0;d=i[c+4>>2];if(d){e=c+8|0;while(1){V(a,9108,14984,0);g=n[d>>3];h=n[d+8>>3];n[f+32>>3]=n[d+16>>3];n[f+24>>3]=h;n[f+16>>3]=g;V(a,9109,b,f+16|0);d=i[e>>2];e=e+4|0;if(d){continue}break}}e=i[f+92>>2];if(!e){break c}}d=i[e+4>>2];if(!d){break c}e=e+4|0;while(1){$(d,i[22425]);d=i[e+4>>2];e=e+4|0;if(d){continue}break}}_(f+92|0);_(f+88|0);i[f>>2]=j;V(a,9110,15054,f);S=f+96|0}function Vb(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,t=0,u=0,v=0;g=1.7976931348623157e+308;a:{if(!a){break a}k=i[a+4>>2];j=W(a);if((j|0)<1){break a}d=i[22007];e=d>>31;q=e^d+e;if(!q){l=(d|0)<0;while(1){f=f+1|0;b:{if((f|0)>=(j|0)){break b}d=f;e=d;if(!l){while(1){e=g>0;m=e?i[((d<<2)+a|0)+4>>2]:m;o=e?k:o;g=s(g,0);d=d+1|0;if((j|0)!=(d|0)){continue}break b}}while(1){d=g>0;m=d?i[((e<<2)+a|0)+4>>2]:m;o=d?k:o;g=s(g,0);e=e+1|0;if((j|0)!=(e|0)){continue}break}}k=i[((f<<2)+a|0)+4>>2];if((f|0)!=(j|0)){continue}break}break a}t=(d|0)<0;while(1){f=f+1|0;if((f|0)<(j|0)){u=i[k+8>>2];l=f;while(1){r=i[((l<<2)+a|0)+4>>2];d=i[r+8>>2];h=0;p=q;e=u;while(1){v=h;h=n[e>>3]-n[d>>3];h=v+h*h;e=e+8|0;d=d+8|0;p=p+ -1|0;if(p){continue}break}h=t?w(h):h;d=h<g;g=d?h:g;o=d?k:o;m=d?r:m;l=l+1|0;if((l|0)!=(j|0)){continue}break}}k=i[((f<<2)+a|0)+4>>2];if((f|0)!=(j|0)){continue}break}}i[b>>2]=o;i[c>>2]=m;return w(g)}function yb(a){var b=0,c=0,d=0,e=0,f=0,g=0;g=i[a>>2];a:{if(g){b=i[g>>2];c=i[((b<<2)+g|0)+4>>2];i[22557]=i[22557]+1;d=c?c+ -1|0:b;f=d+1|0;i[22558]=f+i[22558];c=d<<1;b=i[22534];e=(b+ -8|0)/4|0;if(!((c|0)<=(e|0)|(d+4|0)>(e|0))){c=(d+((d|0)/3|0)|0)>(e|0)?c:e}c=c?c:1;e=(c<<2)+8|0;d=ha(e);b:{if((c|0)<-1|(e|0)>(b|0)){break b}b=i[i[22537]+(i[i[22538]+(e<<2)>>2]<<2)>>2];if((b|0)<=(e|0)){break b}c=((b-e|0)/4|0)+c|0}i[d>>2]=c;b=d+4|0;i[b+(c<<2)>>2]=1;i[d+4>>2]=0;i[oa(b,g+4|0,f<<2)+(i[d>>2]<<2)>>2]=f;b=i[22542];c:{if(!b){break c}f=i[b+4>>2];if(!f){break c}c=b+4|0;b=c+4|0;while(1){if((f|0)==(g|0)){i[c>>2]=d}c=b;b=b+4|0;f=i[c>>2];if(f){continue}break}}b=i[a>>2];if(!b){break a}$(b,(i[b>>2]<<2)+8|0);i[a>>2]=d;return}b=i[22534];c=3;d=ha(20);d:{if((b|0)<20){break d}b=i[i[22537]+(i[i[22538]+80>>2]<<2)>>2];if((b|0)<21){break d}c=((b+ -20|0)/4|0)+3|0}i[d>>2]=c;i[(d+4|0)+(c<<2)>>2]=1;i[d+4>>2]=0}i[a>>2]=d}function bc(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,k=0,l=0,m=0,n=0;c=S-32|0;S=c;e=W(i[a+52>>2]);i[c+28>>2]=ba(e);a:{if(j[a+81|0]&32){if((e|0)!=3){b=i[a+76>>2];i[c+16>>2]=e;i[c+20>>2]=b;V(i[22423],6147,61542,c+16|0);X(5,a,0)}Z(c+28|0,i[i[a+52>>2]+4>>2]);b=i[i[a+52>>2]+8>>2];b:{if(j[a+81|0]&16){Z(c+28|0,b);break b}Va(c+28|0,0,b)}Z(c+28|0,i[i[a+52>>2]+12>>2]);break a}l=i[i[a+56>>2]+4>>2];g=l;c:{d:while(1){e:{b=i[a+56>>2];if(!b){break e}d=i[b+4>>2];if(!d){break e}h=i[g>>2];h=i[(i[g+4>>2]==(a|0)?h+8|0:h+4|0)>>2];b=b+8|0;while(1){f:{if((d|0)==(g|0)){break f}f=i[d>>2];m=f+4|0;f=f+8|0;n=i[d+4>>2]==(a|0);if((h|0)!=i[(n?m:f)>>2]){break f}Z(c+28|0,i[(n?f:m)>>2]);b=k+1|0;if((k|0)<(e|0)){g=d;k=b;if((d|0)!=(l|0)){continue d}}if((b|0)==(e|0)){break a}break c}d=i[b>>2];b=b+4|0;if(d){continue}break}}break}b=k;d=0}i[c>>2]=i[a+76>>2];i[c+4>>2]=b;V(i[22423],6148,61625,c);X(5,a,d)}S=c+32|0;return i[c+28>>2]}function gi(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=S-16|0;S=d;h=i[b+52>>2];g=i[b+80>>2]&4096;j=i[h+(g?8:4)>>2];g=i[h+(g?4:8)>>2];i[22680]=i[22680]+2;aa(i[g+8>>2],b,d+8|0);g=Ia(i[g+8>>2],b,n[d+8>>3]);aa(i[j+8>>2],b,d+8|0);j=Ia(i[j+8>>2],b,n[d+8>>3]);a:{if(!(n[11231]<8.988465674311579e+307^1?!i[21899]:0)){Sa(b,d,d+8|0);f=n[11240];e=n[11231];if(!(e<8.988465674311579e+307^1)){f=f-e*w(+i[22007])}e=f+n[d>>3];n[d>>3]=e;f=n[d+8>>3]-f;n[d+8>>3]=f;if(!(i[21957]|i[21917])){break a}k=n[11145]*.002;e=e+k;n[d>>3]=e;n[d+8>>3]=f-k;break a}i[d+8>>2]=0;i[d+12>>2]=0;i[d>>2]=0;i[d+4>>2]=0}b:{if(!i[21925]){h=i[21921];if(h|i[21923]){break b}}Ke(a,g,j,b,e,c);h=i[21921]}c:{d:{if(h){e=n[d+8>>3];break d}if(i[21925]|i[21923]){break c}e=n[d+8>>3];f=n[11145];if(n[d>>3]-e>(f+f)*.002^1){break c}}n[c+16>>3]=1-n[c+16>>3];n[c+8>>3]=1-n[c+8>>3];n[c>>3]=1-n[c>>3];Ke(a,g,j,b,e,c)}$(j,i[22425]);$(g,i[22425]);S=d+16|0}function he(a,b,c){var d=0,e=0,f=0,g=0,h=0;d=S+ -64|0;S=d;if((Y(i[a+8>>2])|0)==-1){i[d+48>>2]=i[a+8>>2];V(i[22423],6144,61034,d+48|0);f=1}e=i[a+16>>2];g=i[22449];if(e>>>0>=g>>>0){i[d+32>>2]=e;i[d+36>>2]=g;V(i[22423],6145,61094,d+32|0);f=1}e=i[a+20>>2];g=i[22493];a:{b:{if(e>>>0>g>>>0){i[d>>2]=i[a+16>>2];i[d+4>>2]=g;i[d+8>>2]=e;V(i[22423],6413,61177,d);ma(55651,0,0,0,a);break b}c:{if(!(f|!b)){if(j[a+24|0]&4){break a}if(!W(i[a+12>>2])){break a}b=i[a+12>>2];if(!b){break a}e=i[b+4>>2];if(!e){break a}b=b+8|0;h=1;g=0;while(1){f=e;d:{while(1){if(!da(i[f+52>>2],a)){break d}f=i[b>>2];b=b+4|0;if(f){continue}break}if(h){break a}ma(55651,0,0,0,a);if(!g){break b}break c}e=i[a+16>>2];i[d+16>>2]=i[f+76>>2];i[d+20>>2]=e;h=0;V(i[22423],6146,61280,d+16|0);e=i[b>>2];b=b+4|0;g=f;if(e){continue}break}ma(55651,0,0,0,a);break c}if(!f){break a}ma(55651,0,0,0,a);break b}X(5,g,0)}i[c>>2]=1}S=d- -64|0}function li(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{d=b;if(d){e=c;if(!e){break i}break h}a=(a>>>0)/(c>>>0)|0;T=0;return a}if(!a){break g}break f}if(!(e+ -1&e)){break e}i=(r(e)+33|0)-r(d)|0;g=0-i|0;break c}a=(d>>>0)/0|0;T=0;return a}d=32-r(d)|0;if(d>>>0<31){break d}break b}if((e|0)==1){break a}d=mi(e);c=d&31;if(32<=(d&63)>>>0){e=0;a=b>>>c|0}else{e=b>>>c|0;a=((1<<c)-1&b)<<32-c|a>>>c}T=e;return a}i=d+1|0;g=63-d|0}d=b;e=i&63;f=e&31;if(32<=e>>>0){e=0;f=d>>>f|0}else{e=d>>>f|0;f=((1<<f)-1&d)<<32-f|a>>>f}g=g&63;d=g&31;if(32<=g>>>0){b=a<<d;a=0}else{b=(1<<d)-1&a>>>32-d|b<<d;a=a<<d}if(i){g=-1;d=c+ -1|0;if((d|0)!=-1){g=0}while(1){h=f<<1|b>>>31;j=h;e=e<<1|f>>>31;h=g-(e+(d>>>0<h>>>0)|0)>>31;k=c&h;f=j-k|0;e=e-(j>>>0<k>>>0)|0;b=b<<1|a>>>31;a=l|a<<1;h=h&1;l=h;i=i+ -1|0;if(i){continue}break}}T=b<<1|a>>>31;return h|a<<1}a=0;b=0}T=b;return a}function Fg(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0;a:{if(!b){break a}c=i[b>>2];f=i[((c<<2)+b|0)+4>>2];g=f?f+ -1|0:c;f=i[a>>2];if(!f){d=i[22534];c=g?g:1;e=(c<<2)+8|0;f=ha(e);b:{if((c|0)<-1|(e|0)>(d|0)){break b}d=i[i[22537]+(i[i[22538]+(e<<2)>>2]<<2)>>2];if((d|0)<=(e|0)){break b}c=((d-e|0)/4|0)+c|0}i[f>>2]=c;i[(f+4|0)+(c<<2)>>2]=1;i[f+4>>2]=0;i[a>>2]=f}e=i[f>>2];c=((e<<2)+f|0)+4|0;d=i[c>>2];h=d?d+ -1|0:e;k=h+g|0;if((k|0)>(e|0)){j=i[22534];c=((g|0)>0?g:0)+h|0;c=c?c:1;d=(c<<2)+8|0;e=ha(d);c:{if((c|0)<-1|(d|0)>(j|0)){break c}j=i[i[22537]+(i[i[22538]+(d<<2)>>2]<<2)>>2];if((j|0)<=(d|0)){break c}c=((j-d|0)/4|0)+c|0}i[e>>2]=c;d=c<<2;c=e+4|0;i[d+c>>2]=1;i[e+4>>2]=0;d=h+1|0;i[c+(i[e>>2]<<2)>>2]=d;oa(c,f+4|0,d<<2);i[a>>2]=e;$(f,(i[f>>2]<<2)+8|0);c=i[a>>2];c=((i[c>>2]<<2)+c|0)+4|0}if((g|0)<1){break a}i[c>>2]=k+1;oa((i[a>>2]+(h<<2)|0)+4|0,b+4|0,(g<<2)+4|0)}}function Ze(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0;d=S-80|0;S=d;Ub(b,c,0,d+76|0,d+60|0,d+68|0,d+72|0,d- -64|0,d+56|0);e=Ja(b,c,0);i[d+52>>2]=e;i[d+48>>2]=W(e);V(a,9088,13110,d+48|0);_(d+52|0);a:{if(!i[d+76>>2]){break a}b=b?b:i[c+4>>2];i[22493]=i[22493]+1;g=i[22492]+1|0;i[22492]=g;c=b;while(1){e=i[c+52>>2];b:{if(j[c+81|0]&16){f=e+8|0;h=e+4|0;e=i[c+60>>2]+4|0;break b}f=e+4|0;h=e+8|0;e=i[c+60>>2]+8|0}e=i[e>>2];h=i[h>>2];k=i[f>>2];f=i[c+72>>2];if((f|0)==(g|0)){f=i[e+76>>2];i[d+32>>2]=i[c+76>>2];i[d+36>>2]=f;V(i[22423],6218,14648,d+32|0);ca(5,c,e);f=i[c+72>>2]}c:{if(!f){break c}f=i[h+20>>2];g=i[22493];if((f|0)!=(g|0)){i[h+20>>2]=g;i[d+16>>2]=Y(i[h+8>>2]);V(a,9089,13110,d+16|0);f=i[22493]}if(i[k+20>>2]==(f|0)){break c}i[k+20>>2]=f;i[d>>2]=Y(i[k+8>>2]);V(a,9090,13110,d)}g=i[22492];i[c+72>>2]=g;if(!e){break a}c=e;if((c|0)!=(b|0)){continue}break}}S=d+80|0}function Og(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;c=S-32|0;S=c;i[c+28>>2]=0;if(i[21869]){gd()}i[22431]=i[22429];i[22442]=i[22441];g=Tc(a);Oa(g);i[22492]=i[22492]+1;b=i[22432];a:{if(!b){break a}while(1){if(!(j[b+81|0]&8)){break a}e=i[b+60>>2];b:{if(!e){break b}d=i[e+4>>2];if(!d){break b}e=e+4|0;while(1){i[d+80>>2]=i[d+80>>2]&-16385;d=i[e+4>>2];e=e+4|0;if(d){continue}break}}if(i[b+56>>2]){i[b+72>>2]=i[22492];h=me(b,g,c+28|0)}if(j[b+81|0]&32){f=_g(b,g,c+28|0)}if(!i[22473]){f=h?h:f;c:{if(f){i[b+32>>2]=f;break c}i[22780]=i[22780]+1}d=i[b+56>>2];if(d){i[d+4>>2]=0}i[i[b+60>>2]+4>>2]=0}b=i[b+48>>2];if(b){continue}break}}if(!i[22473]){i[22472]=1}d:{if(i[21886]<1){break d}b=i[22423];d=i[22450];e=i[22447];f=i[c+28>>2];i[c+12>>2]=Y(a);i[c+8>>2]=e+ -1;i[c+4>>2]=d;i[c>>2]=f;V(b,1032,64780,c);if(i[21886]<4){break d}Kb(i[22431])}S=c+32|0;return g}function eh(a,b){var c=0,d=0,e=0,f=0,h=0,k=0,l=0,m=0;d=S-32|0;S=d;if(i[21886]>=4){V(i[22423],4035,40091,0)}m=i[22492]+ -1|0;i[b+72>>2]=m;i[d+28>>2]=zh(a);Z(d+28|0,i[i[a+52>>2]+4>>2]);c=i[d+28>>2];a:{if(!c){break a}e=i[c+4>>2];if(!e){break a}k=c+8|0;while(1){g[e+24|0]=j[e+24|0]|8;l=e+12|0;f=i[e+12>>2];c=0;b:{if(!f){break b}c=f;h=i[c+4>>2];if(!h){break b}c=f+4|0;f=c+4|0;while(1){if(i[h+72>>2]==(m|0)){i[c>>2]=0}c=f;f=c+4|0;h=i[c>>2];if(h){continue}break}c=i[l>>2]}wb(c);Z(l,b);if(!i[i[l>>2]+8>>2]){i[22652]=i[22652]+1;if(i[21886]>=2){c=i[b+76>>2];f=i[a+76>>2];i[d+16>>2]=i[e+16>>2];i[d+20>>2]=f;i[d+24>>2]=c;V(i[22423],2034,40155,d+16|0)}Ma(i[b+52>>2],e);g[e+24|0]=j[e+24|0]|4;Z(90004,e)}e=i[k>>2];k=k+4|0;if(e){continue}break}}_(d+28|0);if(i[21886]>=3){b=i[b+76>>2];i[d>>2]=i[a+76>>2];i[d+4>>2]=b;V(i[22423],3005,40226,d)}S=d+32|0}function id(a,b,c){var d=0,e=0,f=0;d=S-32|0;S=d;if(c){i[c>>2]=b}a:{if((W(i[22498])|0)<1){break a}if(!b){while(1){b:{if(i[21886]<1){break b}b=i[22423];e=W(i[22498]);i[d+8>>2]=-1;i[d+4>>2]=a;i[d>>2]=e;V(b,1057,28616,d);if(i[21886]<4|i[22443]>999){break b}ya()}we(a);fc();oc(i[22431]);qc(1,0);if(i[21869]){Wa(i[22428])}sc(d+28|0);if(c){i[c>>2]=Ab(i[c>>2])}jc();Ga(0,1);if(!(i[21886]<4|i[22443]>999)){ya();Wa(i[22428])}if((W(i[22498])|0)>0){continue}break a}}while(1){c:{if(i[21886]<1){break c}e=i[22423];f=W(i[22498]);i[d+24>>2]=i[b+76>>2];i[d+20>>2]=a;i[d+16>>2]=f;V(e,1057,28616,d+16|0);if(i[21886]<4|i[22443]>999){break c}ya()}we(a);fc();oc(i[22431]);qc(1,0);if(i[21869]){Wa(i[22428])}sc(d+28|0);if(c){i[c>>2]=Ab(i[c>>2])}jc();Ga(0,1);if(!(i[21886]<4|i[22443]>999)){ya();Wa(i[22428])}if((W(i[22498])|0)>0){continue}break}}S=d+32|0}function lg(a,b){var c=0,d=0,e=0,f=0;c=S-96|0;S=c;a:{if(j[b+94235|0]|(b|0)>248){break a}d=j[b+93986|0];if(!d){i[c>>2]=i[(b<<2)+92492>>2];V(a,9360,79253,c);break a}e=d<<24>>24;b:{if((e|0)>=6){if(n[(b<<3)+90240>>3]!=n[(d<<3)+94488>>3]){break b}break a}if((e|0)==5){break b}if(i[(b<<3)+90240>>2]==i[(d<<3)+94488>>2]){break a}}f=(b<<2)+92492|0;if(!i[f>>2]){break a}g[b+94235|0]=1;c:{d:{e:{d=k[(b<<1)+93488>>1];if((d|0)!=65535){d=i[((d&255)<<3)+90240>>2];if(d){break e}V(a,9361,79257,0);break c}if((e|0)>4){break d}i[c+48>>2]=i[(b<<3)+90240>>2];V(a,9364,79272,c+48|0);break c}if((e|0)<=4){n[c+80>>3]=+i[(b<<3)+90240>>2]/+(d|0);V(a,9365,79276,c+80|0);break c}n[c+64>>3]=n[(b<<3)+90240>>3]/+(d|0);V(a,9363,79266,c- -64|0);break c}n[c+32>>3]=n[(b<<3)+90240>>3];V(a,9362,79266,c+32|0)}i[c+16>>2]=i[f>>2];V(a,9366,79282,c+16|0)}S=c+96|0}function xc(a,b){var c=0,d=0,e=0;e=S-48|0;S=e;a:{if(!b){V(a,9234,17682,0);break a}c=Y(i[b+8>>2]);i[e+36>>2]=i[b+16>>2];i[e+32>>2]=c;V(a,9235,17696,e+32|0);c=i[b+8>>2];b:{if(!c){break b}d=i[22007];if(!d){break b}while(1){n[e+16>>3]=n[c>>3];V(a,9236,17708,e+16|0);c=c+8|0;d=d+ -1|0;if(d){continue}break}}c=j[b+24|0];if(c&4){V(a,9237,17715,0);c=j[b+24|0]}if(c&8){V(a,9238,17724,0);c=j[b+24|0]}if(c&16){V(a,9415,15308,0);c=j[b+24|0]}d=i[21886];if(!(!(c&1)|!d)){V(a,9416,15332,0);d=i[21886];c=j[b+24|0]}if(!(!(c&2)|!d)){V(a,9417,15338,0)}V(a,9239,13098,0);if(!i[b+12>>2]){break a}V(a,9240,17734,0);b=i[b+12>>2];c:{if(!b){break c}c=i[b+4>>2];if(!c){break c}d=b+8|0;b=0;while(1){b=b+1|0;if(!((b>>>0)%100|0)){V(a,9241,17747,0)}i[e>>2]=i[c+76>>2];V(a,9242,16095,e);c=i[d>>2];d=d+4|0;if(c){continue}break}}V(a,9243,13098,0)}S=e+48|0}function qd(a){var b=0,c=0,d=0,e=0,f=0;c=S-32|0;S=c;if(i[21886]>=4){i[c+16>>2]=i[a+16>>2];V(i[22423],4018,12782,c+16|0)}if(!i[22275]){V(i[22423],6428,12899,0);X(5,0,0)}a:{b:{switch(i[22007]+ -2|0){case 0:d=i[a+12>>2];b=i[d+4>>2];e=i[b+52>>2];if(i[(j[b+81|0]&16?e+4|0:e+8|0)>>2]==(a|0)){break a}i[d+4>>2]=i[d+8>>2];i[i[a+12>>2]+8>>2]=b;break a;case 1:i[c+28>>2]=ba(W(i[a+12>>2]));d=xa(i[a+12>>2]);Z(c+28|0,d);e=a+12|0;if(W(i[a+12>>2])){while(1){c:{d:{b=i[e>>2];if(!b){break d}f=b+4|0;while(1){b=i[f>>2];if(!b){break d}f=f+4|0;if(!da(i[d+60>>2],b)){continue}break}ja(i[e>>2],b);Z(c+28|0,b);d=b;break c}b=i[d+76>>2];i[c>>2]=i[a+16>>2];i[c+4>>2]=b;V(i[22423],6066,13013,c);X(5,d,0)}if(W(i[e>>2])){continue}break}}ga(e);Lb();i[e>>2]=i[c+28>>2];break a;default:break b}}d=W(i[a+12>>2]);cb(i[a+12>>2]+4|0,d,5)}S=c+32|0}function Sb(a,b,c,d,e){var f=0;f=S-16|0;S=f;if(!i[22484]){V(i[22423],7055,14422,0)}a:{b:{switch(b+ -7|0){case 0:if(!(i[21923]|(i[22007]!=4|i[21876]>-1))){i[22492]=i[22492]+1;i[f+12>>2]=0;c:{if(!c){break c}while(1){if(!i[c+48>>2]){break c}uc(a,c,f+12|0,e);c=i[c+48>>2];if(c){continue}break}}d:{if(!d){break d}c=i[d+4>>2];if(!c){break d}b=d+4|0;while(1){uc(a,c,f+12|0,e);c=i[b+4>>2];b=b+4|0;if(c){continue}break}}b=i[f+12>>2];a=i[22528];c=i[22483];if((c|0)==(a|0)?(b|0)==(a|0):0){break a}i[f>>2]=a;i[f+4>>2]=c;i[f+8>>2]=b;V(i[22423],6069,14456,f);X(5,0,0);break a}V(a,9079,14548,0);break a;case 2:case 4:case 5:if(!i[21867]){break a}V(a,9080,14551,0);break a;case 6:V(a,9081,14556,0);break a;case 8:V(a,9082,14548,0);break a;case 14:break b;default:break a}}if(!i[21867]){break a}V(a,9083,14551,0)}S=f+16|0}function Sf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;e=S-32|0;S=e;g=i[a+28>>2];i[e+16>>2]=g;d=i[a+20>>2];i[e+28>>2]=c;i[e+24>>2]=b;b=d-g|0;i[e+20>>2]=b;g=b+c|0;k=2;b=e+16|0;a:{b:{f=H(i[a+60>>2],e+16|0,2,e+12|0)|0;d=0;c:{if(!f){break c}i[23646]=f;d=-1}d:{if(!d){while(1){d=i[e+12>>2];if((d|0)==(g|0)){break d}if((d|0)<=-1){break b}h=i[b+4>>2];f=d>>>0>h>>>0;j=(f<<3)+b|0;h=d-(f?h:0)|0;i[j>>2]=h+i[j>>2];j=(f?12:4)+b|0;i[j>>2]=i[j>>2]-h;g=g-d|0;b=f?b+8|0:b;k=k-f|0;f=H(i[a+60>>2],b|0,k|0,e+12|0)|0;d=0;e:{if(!f){break e}i[23646]=f;d=-1}if(!d){continue}break}}if((g|0)!=-1){break b}}b=i[a+44>>2];i[a+28>>2]=b;i[a+20>>2]=b;i[a+16>>2]=b+i[a+48>>2];a=c;break a}i[a+28>>2]=0;i[a+16>>2]=0;i[a+20>>2]=0;i[a>>2]=i[a>>2]|32;a=0;if((k|0)==2){break a}a=c-i[b+4>>2]|0}S=e+32|0;return a|0}function gd(){var a=0,b=0,c=0,d=0,e=0;e=S-48|0;S=e;a=i[22498];if(!(!a|!i[a+4>>2])){d=i[22423];i[e+32>>2]=W(a);V(d,6382,30641,e+32|0);X(5,0,0)}a=i[22431];a:{if(!a){break a}while(1){d=a;a=i[a+48>>2];if(!a){break a}b=i[d+56>>2];b:{if(!b){break b}c=i[b+4>>2];if(!c){break b}a=b+8|0;while(1){if(j[c+16|0]&4){b=i[d+76>>2];i[e+16>>2]=i[c+12>>2];i[e+20>>2]=b;V(i[22423],6313,30778,e+16|0);X(5,d,c)}c=i[a>>2];a=a+4|0;if(c){continue}break}a=i[d+48>>2]}if(a){continue}break}}b=i[22432];c:{if(!b){break c}while(1){if(!(j[b+81|0]&8)){break c}d=i[b+56>>2];d:{if(!d){break d}c=i[d+4>>2];if(!c){break d}a=d+8|0;while(1){if(j[c+16|0]&4){d=i[b+76>>2];i[e>>2]=i[c+12>>2];i[e+4>>2]=d;V(i[22423],6385,30921,e);X(5,b,c)}c=i[a>>2];a=a+4|0;if(c){continue}break}}b=i[b+48>>2];if(b){continue}break}}S=e+48|0}function ya(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0;c=S+ -64|0;S=c;n[c+48>>3]=n[11233];V(i[22423],3062,67108,c+48|0);a=i[22428];a:{if(!a){break a}while(1){if(!i[a+48>>2]){break a}d=d+1|0;if(!((d>>>0)%100|0)){V(i[22423],8109,67153,0)}i[c+32>>2]=i[a+76>>2];V(i[22423],8110,67102,c+32|0);a=i[a+48>>2];if(a){continue}break}}f=i[22423];a=-1;d=-1;b=i[22432];if(b){d=i[b+76>>2]}b=i[22431];if(b){a=i[b+76>>2]}e=-1;b=i[22430];if(b){e=i[b+76>>2]}g=c;b=i[22442];if(b){b=i[b+16>>2]}else{b=-1}i[g+28>>2]=b;i[c+24>>2]=e;i[c+20>>2]=a;i[c+16>>2]=d;V(f,8111,67160,c+16|0);d=0;a=i[22440];b:{if(!a){break b}while(1){if(!i[a>>2]){break b}d=d+1|0;if(!((d>>>0)%100|0)){V(i[22423],8112,67153,0)}i[c>>2]=i[a+16>>2];V(i[22423],8113,67102,c);a=i[a>>2];if(a){continue}break}}V(i[22423],8114,67106,0);S=c- -64|0}function te(a,b,c){var d=0,e=0,f=0,g=0;d=S-48|0;S=d;i[d+44>>2]=0;f=i[(c+ -1>>>0<13?(c<<2)+86672|0:86672)>>2];if(i[21886]>=4){ma(47061,b,0,0,0)}e=i[22435];a:{b:{if((e|0)!=(b|0)){g=i[22439];if(!g){break a}if(!(j[g+24|0]&16)){break b}}e=i[b+76>>2];g=i[a+76>>2];a=0;i[d+32>>2]=i[22455];i[d+16>>2]=g;i[d+20>>2]=e;i[d+24>>2]=c;i[d+28>>2]=f;V(i[22423],8085,47068,d+16|0);e=i[22435];if((e|0)==(b|0)){break b}c=i[22439];c:{if(!c){break c}f=i[c+12>>2];if(!f){break c}a=i[f+4>>2]}ma(42349,e,a,0,c)}a=i[22439];d:{if(!a){break d}if(j[a+24|0]&4){i[d>>2]=i[22455];V(i[22423],8086,47162,d);break d}he(a,1,d+44|0)}e=i[22435]}if(!(j[e+81|0]&8|(!e|!i[e+24>>2]))){Xc(e,1,d+44|0)}a=i[21886];if(!((a|0)<4?!i[21869]:0)){if(!((a|0)<4|i[22443]>499)){ya()}Xc(b,1,d+44|0)}if(i[d+44>>2]){X(5,0,0)}S=d+48|0}function ka(a,b,c,d){var e=0,f=0,g=0,h=0,k=0,l=0;g=S-16|0;S=g;if(b){ee(i[22428]);f=ba((W(i[c+60>>2])<<1)+2|0);e=i[22492]+1|0;i[22492]=e;i[g+12>>2]=f;h=(c|0)==(d|0)?0:d;f=c;while(1){if(i[f+72>>2]!=(e|0)){i[f+72>>2]=e;Z(g+12|0,f)}d=i[f+60>>2];a:{if(!d){break a}e=i[d+4>>2];if(!e){break a}d=d+8|0;while(1){k=d;d=i[22492];b:{if((d|0)==i[e+72>>2]){break b}i[e+72>>2]=d;c:{d:{if(i[21922]){d=i[21920];if(j[e+82|0]&8){break d}d=i[e+60>>2];if(!d){break b}d=d+4|0;while(1){l=i[d>>2];if(!l){break b}d=d+4|0;if(!(j[l+82|0]&8)){continue}break}break c}d=i[e+80>>2]&524288;if(i[21920]){break d}d=i[e+24>>2];if(!d){break b}d=qa(d,0)}if(!d){break b}}Z(g+12|0,e)}d=k+4|0;e=i[k>>2];if(e){continue}break}}if(!(!h|(c|0)!=(f|0))){e=i[22492];f=h;continue}break}wd(a,b,0,i[g+12>>2]);_(g+12|0)}S=g+16|0}function _g(a,b,c){var d=0,e=0,f=0,h=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=S-48|0;S=d;i[d+44>>2]=0;i[d+40>>2]=0;h=i[a+60>>2];a:{if(!h){break a}e=i[h+4>>2];if(!e){break a}h=h+8|0;while(1){l=h;b:{if(j[e+81|0]&72){break b}f=$g(e,a,d+44|0,d+40|0);i[f+4>>2]=b;h=i[d+40>>2];k=i[d+44>>2];m=k&1;n=m^i[e+80>>2]>>>12&1^1;f=oe(f,n,e);i[c>>2]=i[c>>2]+1;if(!(!(g[e+83|0]&1)|!(i[21897]|i[21915]))){i[f+80>>2]=i[f+80>>2]|33554432;i[f+32>>2]=f}if(!i[22473]){i[(i[e+60>>2]+(k<<2)|0)+4>>2]=f}if(i[21886]<4){break b}o=i[e+76>>2];p=i[b+16>>2];q=i[f+76>>2];e=i[e+80>>2];r=i[a+76>>2];i[d+16>>2]=k;i[d+24>>2]=r;i[d+28>>2]=h;i[d+32>>2]=h&1^m;i[d+20>>2]=e>>>12&1;i[d>>2]=q;i[d+4>>2]=n;i[d+8>>2]=p;i[d+12>>2]=o;V(i[22423],4049,48773,d)}h=l+4|0;e=i[l>>2];if(e){continue}break}}S=d+48|0;return f}function yg(a){var b=0,c=0,d=0,e=0,f=0;d=S-16|0;S=d;if(!i[22459]){a:{if(i[21971]){V(i[22423],8020,4434,0);break a}if(i[21886]<1){break a}V(i[22423],1001,4494,0)}i[22490]=0;i[22491]=0;i[22488]=0;i[22489]=0;b:{if(!a){break b}while(1){if(!i[a+48>>2]){break b}c:{if(!i[a+24>>2]){break c}c=i[a+80>>2];if(i[21863]?c&131072:0){break c}d:{if(c&1048576){b=n[a+32>>3];break d}b=Ug(a);n[a+32>>3]=b;c=i[a+80>>2]|1048576;i[a+80>>2]=c}e:{f:{if(i[21874]){if(i[21995]!=(c>>>17&1)){break e}e=n[11244];c=89952;f=b;break f}n[11244]=b+n[11244];aa(i[22424],a,d+8|0);e=b*-n[d+8>>3]/+i[22007];c=89960;f=n[11245]}n[c>>3]=f+e}if(!i[21958]){break c}n[11288]=b+n[11288];if(!(n[11289]<b^1)){n[11289]=b}if(n[11290]>b^1){break c}n[11290]=b}a=i[a+48>>2];if(a){continue}break}}i[22459]=1}S=d+16|0}function dd(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i[b+56>>2];a:{if(!d){break a}e=i[d+4>>2];if(!e){break a}g=i[22007];f=g+ -2|0;d=d+8|0;if((g|0)>=5){g=f<<2;while(1){f=d;d=i[e+4>>2];if((d|0)==(b|0)){d=i[e+8>>2]}b:{if(i[d+72>>2]!=i[22492]){break b}d=i[e>>2];c:{if(i[d+4>>2]==(a|0)){break c}h=i[d+8>>2];j=i[a+16>>2];if(l[h+16>>2]<j>>>0){break b}k=i[(d+g|0)+4>>2];if(l[k+16>>2]>j>>>0){break b}if((a|0)==(h|0)|(a|0)==(k|0)){break c}if(!da(d,a)){break b}}Z(c,e)}d=f+4|0;e=i[f>>2];if(e){continue}break}break a}h=f<<2;while(1){f=d;d=i[e+4>>2];if((d|0)==(b|0)){d=i[e+8>>2]}d:{if(i[d+72>>2]!=i[22492]){break d}d=i[e>>2];if(i[d+8>>2]!=(a|0)|(g|0)<4?!(i[d+4>>2]==(a|0)|i[(d+h|0)+4>>2]==(a|0)):0){break d}Z(c,e)}d=f+4|0;e=i[f>>2];if(e){continue}break}}i[b+72>>2]=i[22492]+ -1}function mh(a,b){var c=0,d=0,e=0,f=0,h=0;d=S-48|0;S=d;if(i[21886]>=4){c=i[b+76>>2];i[d+32>>2]=i[a+76>>2];i[d+36>>2]=c;V(i[22423],4042,42214,d+32|0)}c=i[22439];if(c){c=i[i[c+12>>2]+4>>2];f=i[b+76>>2];i[d+16>>2]=i[a+76>>2];i[d+20>>2]=f;i[d+24>>2]=i[22455];i[d+28>>2]=c;V(i[22423],8081,42283,d+16|0);ma(42349,0,0,0,i[22439])}c=i[a+52>>2];a:{if(!c){break a}e=i[c+4>>2];if(!e){break a}c=c+8|0;while(1){f=c;c=i[e+12>>2];b:{if(i[e+20>>2]!=i[22493]){Aa(c,a,b);break b}ja(c,a);if(i[i[e+12>>2]+8>>2]){break b}i[22838]=i[22838]+1;if(i[21886]>=2){c=i[b+76>>2];h=i[a+76>>2];i[d>>2]=i[e+16>>2];i[d+4>>2]=h;i[d+8>>2]=c;V(i[22423],2035,42155,d)}Ma(i[b+52>>2],e);g[e+24|0]=j[e+24|0]|4;Z(90004,e)}c=f+4|0;e=i[f>>2];if(e){continue}break}}a=i[22439];if(a){ma(42349,0,0,0,a)}S=d+48|0}function sh(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,m=0,n=0;e=S-16|0;S=e;k=i[b+52>>2];m=i[k+8>>2];d=i[a+52>>2];c=i[d+8>>2];g=i[b+60>>2];f=i[g+4>>2];n=i[a+60>>2];h=i[n+4>>2];d=i[d+4>>2];j=i[k+4>>2];a:{if((d|0)==(j|0)){d=c;c=m;break a}g=i[g+8>>2];if((d|0)==(m|0)){d=c;f=g;c=j;break a}h=i[n+8>>2];c=(c|0)==(j|0);f=c?f:g;c=c?m:j}b:{c:{if(l[d+16>>2]>l[c+16>>2]){i[k+4>>2]=d;i[i[b+52>>2]+8>>2]=c;if((c|0)!=(j|0)){break c}i[b+80>>2]=i[b+80>>2]^4096;break c}i[k+4>>2]=c;i[i[b+52>>2]+8>>2]=d;if((c|0)==(m|0)){i[b+80>>2]=i[b+80>>2]^4096}c=h;break b}c=f;f=h}i[i[b+60>>2]+4>>2]=c;i[i[b+60>>2]+8>>2]=f;Aa(i[h+60>>2],a,b);if(i[21886]>=4){c=i[b+76>>2];b=i[a+76>>2];a=i[h+76>>2];i[e>>2]=i[d+16>>2];i[e+4>>2]=a;i[e+8>>2]=b;i[e+12>>2]=c;V(i[22423],4036,41543,e)}S=e+16|0}function ch(a){var b=0,c=0,d=0,e=0,f=0,g=0;d=S-16|0;S=d;a:{b:{g=i[a+12>>2];if(!g){break b}e=g+4|0;while(1){b=i[e>>2];if(!b){break b}e=e+4|0;if(!(j[b+81|0]&32)){continue}break}break a}f=i[g+8>>2];b=i[g+4>>2];i[22788]=i[22788]+1;if(!b){break a}c=i[b+52>>2];b=d;c:{if(!f){c=Eg(c);break c}c=Wc(c,i[f+52>>2])}i[b+12>>2]=c;kb(c);Ma(c,a);b=i[a+12>>2];d:{if(!b){break d}f=i[b+4>>2];b=W(b);if((b|0)<1){break d}e=0;while(1){e:{if(e>>>0<2){break e}i[22788]=i[22788]+1;Hg(d+12|0,i[f+52>>2]);c=i[d+12>>2];if(i[c+4>>2]){break e}c=0;i[22784]=i[22784]+1;_(d+12|0);break a}e=e+1|0;f=i[(i[a+12>>2]+(e<<2)|0)+4>>2];if((b|0)!=(e|0)){continue}break}}if(i[21886]<3){break a}f=i[22423];b=W(c);i[d+4>>2]=i[a+16>>2];i[d>>2]=b;V(f,3007,42426,d);c=i[d+12>>2]}S=d+16|0;return c}function md(a){var b=0,c=0,d=0,e=0,f=0;b=S-96|0;S=b;Ee();c=i[22549];i[b+48>>2]=c;i[b+52>>2]=i[22555];i[b+56>>2]=i[22552];i[b- -64>>2]=i[22556];i[b+80>>2]=i[22550];d=i[22531];i[b+84>>2]=i[22530];i[b+88>>2]=d;i[b+60>>2]=i[22541]+i[22551];i[b+68>>2]=qi(i[22553],i[22554]);i[b+72>>2]=T;d=i[22547];i[b+76>>2]=d-c;c=i[22546];i[b+32>>2]=i[22545];i[b+36>>2]=c;i[b+40>>2]=d;i[b+44>>2]=i[22548];V(a,9278,26946,b+32|0);c=i[22557];if(c){i[b+16>>2]=c;n[b+24>>3]=+i[22558]/+(c|0);V(a,9279,27423,b+16|0);V(a,9280,27478,0)}if(i[22532]>=1){while(1){c=0;f=e<<2;d=i[f+i[22536]>>2];if(d){while(1){c=c+1|0;d=i[d>>2];if(d){continue}break}}i[b>>2]=i[i[22537]+f>>2];i[b+4>>2]=c;V(a,9281,27505,b);e=e+1|0;if((e|0)<i[22532]){continue}break}}V(a,9282,27513,0);S=b+96|0}function ji(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;h=S-16|0;S=h;lf(i[21397],i[21398],i[21396]);i[22476]=1;jf(a,b,c);_h();i[21852]=0;f=i[22428];a:{if(!f){break a}while(1){if(!i[f+48>>2]){break a}b=i[f+52>>2];b:{if(!b){break b}e=i[b+4>>2];if(!e){break b}b=b+4|0;while(1){b=b+4|0;g=i[21664];j=(i[e+8>>2]-a>>3)/(c|0)|0;c:{if((g|0)>(j|0)){e=i[21853];break c}i[21664]=g<<1;e=Bc(i[21853],g<<3);i[21853]=e}g=i[21852];i[21852]=g+1;i[(g<<2)+e>>2]=j;e=i[b>>2];if(e){continue}break}}b=i[21664];d:{if((b|0)>=0){b=i[21853];break d}i[21664]=b<<1;b=Bc(i[21853],b<<3);i[21853]=b}k=k+1|0;e=i[21852];i[21852]=e+1;i[(e<<2)+b>>2]=-1;f=i[f+48>>2];if(f){continue}break}}mf();Sh(h+12|0,h+8|0);i[d>>2]=k;S=h+16|0;return i[21853]}function xd(a,b,c,d,e,f){var g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0;h=S-16|0;S=h;p=(c<<3)+e|0;g=p+ -8|0;q=d?-1:1;n[g>>3]=q;a:{if(!b){break a}r=-1;while(1){s=g;g=g+ -8|0;i[g>>2]=0;i[g+4>>2]=0;j=b;b=b+ -1|0;t=i[(b<<2)+a>>2];k=0;if((j|0)<(c|0)){d=(j<<3)+t|0;m=s;while(1){k=k-n[d>>3]*n[m>>3];n[g>>3]=k;m=m+8|0;d=d+8|0;j=j+1|0;if((j|0)<(c|0)){continue}break}}l=n[(b<<3)+t>>3];b:{if(!((l<0?-l:l)>n[11153]^1)){n[g>>3]=k/l;break b}i[h+12>>2]=0;n[g>>3]=Mb(k,l,n[11152],h+12|0);if(!i[h+12>>2]){break b}n[g>>3]=q;r=b;if(s>>>0>=p>>>0){break b}fa(((o^-1)+c<<3)+e|0,0,(o<<3)+8|0)}o=o+1|0;if(b){continue}break}if((r|0)==-1){break a}i[f>>2]=1;if(i[21886]>=4){i[h>>2]=-1;V(i[22423],4005,1924,h)}i[22588]=i[22588]+1;sa(1968)}S=h+16|0}function ie(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0;c=S-16|0;S=c;a=i[21889];b=i[21888];a:{if(!(a|b)){a=i[22428];if(!a){break a}while(1){b=i[a+48>>2];if(!b){break a}if(i[a+68>>2]){ga(a+68|0);a=i[a+48>>2]}else{a=b}if(a){continue}break}break a}if(a?b:0){break a}Sa(0,0,c);f=n[11231];if(!(f<8.988465674311579e+307^1)){n[c>>3]=n[c>>3]-f*w(+i[22007])}b=i[22428];b:{if(!b){break b}while(1){a=i[b+48>>2];if(!a){break b}d=i[b+68>>2];if(d){e=i[d+4>>2];if(e){a=d+4|0;d=a+4|0;while(1){h=a;a=d;aa(e,b,c+8|0);c:{d:{if(!(n[c+8>>3]<n[c>>3]^1)){if(!i[21889]){break d}break c}if(i[21888]){break c}}i[h>>2]=0}g=g+1|0;d=a+4|0;e=i[a>>2];if(e){continue}break}d=i[b+68>>2]}wb(d);a=i[b+48>>2]}b=a;if(a){continue}break}}i[22604]=i[22604]+g}S=c+16|0}function fa(a,b,c){var d=0,e=0,f=0,h=0;a:{if(!c){break a}d=a+c|0;g[d+ -1|0]=b;g[a|0]=b;if(c>>>0<3){break a}g[d+ -2|0]=b;g[a+1|0]=b;g[d+ -3|0]=b;g[a+2|0]=b;if(c>>>0<7){break a}g[d+ -4|0]=b;g[a+3|0]=b;if(c>>>0<9){break a}d=0-a&3;e=d+a|0;b=o(b&255,16843009);i[e>>2]=b;c=c-d&-4;d=c+e|0;i[d+ -4>>2]=b;if(c>>>0<9){break a}i[e+8>>2]=b;i[e+4>>2]=b;i[d+ -8>>2]=b;i[d+ -12>>2]=b;if(c>>>0<25){break a}i[e+24>>2]=b;i[e+20>>2]=b;i[e+16>>2]=b;i[e+12>>2]=b;i[d+ -16>>2]=b;i[d+ -20>>2]=b;i[d+ -24>>2]=b;i[d+ -28>>2]=b;h=e&4|24;c=c-h|0;if(c>>>0<32){break a}d=b;f=b;b=e+h|0;while(1){i[b+24>>2]=f;i[b+28>>2]=d;i[b+16>>2]=f;i[b+20>>2]=d;i[b+8>>2]=f;i[b+12>>2]=d;i[b>>2]=f;i[b+4>>2]=d;b=b+32|0;c=c+ -32|0;if(c>>>0>31){continue}break}}return a}function _e(a,b,c){var d=0,e=0,f=0,h=0,k=0,l=0,m=0;d=S+ -64|0;S=d;f=Ja(b,c,0);i[d+60>>2]=f;Na();a:{if(!f){i[d>>2]=0;V(a,9091,13110,d);break a}e=i[f+4>>2];b:{if(!e){i[d+32>>2]=0;V(a,9091,13110,d+32|0);break b}h=f+8|0;while(1){c:{d:{c=i[e+12>>2];if(!c){break d}b=i[c+4>>2];if(!b){break d}c=c+4|0;k=0;l=0;while(1){b=j[b+82|0]&2;k=b?k:1;l=b?1:l;b=i[c+4>>2];c=c+4|0;if(b){continue}break}if(!l|!k){break d}g[e+24|0]=j[e+24|0]|1;m=m+1|0;break c}g[e+24|0]=j[e+24|0]&254}e=i[h>>2];h=h+4|0;if(e){continue}break}i[d+48>>2]=m;V(a,9091,13110,d+48|0);if(!f){break a}}b=i[f+4>>2];if(!b){break a}c=f+8|0;while(1){if(g[b+24|0]&1){i[d+16>>2]=Y(i[b+8>>2]);V(a,9092,13110,d+16|0)}b=i[c>>2];c=c+4|0;if(b){continue}break}}_(d+60|0);S=d- -64|0}function Pb(a,b){var c=0,d=0,e=0,f=0;d=S+ -64|0;S=d;i[d+48>>2]=i[b+12>>2];V(a,9222,16728,d+48|0);c=j[b+16|0];if(c&2){V(a,9223,15318,0);c=j[b+16|0]}if(c&4){V(a,9224,16739,0);c=j[b+16|0]}if(c&8){V(a,9421,16750,0);c=j[b+16|0]}if(c&16){V(a,9422,16763,0);c=j[b+16|0]}if(c&32){V(a,9425,16777,0);c=j[b+16|0]}if(c&64){V(a,9423,16792,0)}V(a,9225,13098,0);e=i[b>>2];i[d+32>>2]=16807;V(a,9245,15054,d+32|0);a:{if(!e){break a}c=i[e+4>>2];if(!c){break a}f=e+4|0;while(1){e=Y(i[c+8>>2]);i[d+20>>2]=i[c+16>>2];i[d+16>>2]=e;V(a,9246,17754,d+16|0);c=i[f+4>>2];f=f+4|0;if(c){continue}break}}V(a,9247,13098,0);e=i[b+4>>2];b:{if(!e){break b}c=i[b+8>>2];if(!c){break b}b=i[e+76>>2];i[d+4>>2]=i[c+76>>2];i[d>>2]=b;V(a,9226,16828,d)}S=d- -64|0}function ic(a,b,c,d,e){var f=0,g=0;g=S-16|0;S=g;b=((d<<2)+b|0)+4|0;a:{b:{switch((d^-1)+c|0){case 0:f=i[b>>2]-e|0;break a;case 1:f=i[b+4>>2]+(i[b>>2]-e|0)|0;break a;case 2:f=i[b+8>>2]+(i[b+4>>2]+(i[b>>2]-e|0)|0)|0;break a;case 3:f=i[b+12>>2]+(i[b+8>>2]+(i[b+4>>2]+(i[b>>2]-e|0)|0)|0)|0;break a;case 4:f=i[b+16>>2]+(i[b+12>>2]+(i[b+8>>2]+(i[b+4>>2]+(i[b>>2]-e|0)|0)|0)|0)|0;break a;case 5:f=i[b+20>>2]+(i[b+16>>2]+(i[b+12>>2]+(i[b+8>>2]+(i[b+4>>2]+(i[b>>2]-e|0)|0)|0)|0)|0)|0;break a;default:break b}}d=i[b>>2];c=3;while(1){b=b+4|0;if((d|0)!=(e|0)){f=(d<<c)+(d>>32-c)^f;c=((c|0)>28?-29:3)+c|0}d=i[b>>2];if(d){continue}break}}if((a|0)<=-1){i[g>>2]=a;V(i[22423],6202,48454,g);ca(5,0,0)}S=g+16|0;return(f>>>0)%(a>>>0)|0}function gb(a){var b=0,c=0,d=0;b=S-32|0;S=b;if(i[21886]>=3){i[b+16>>2]=i[a+76>>2];V(i[22423],3057,48143,b+16|0)}if(!(i[22476]|!(i[21997]|i[21869]))){hd(a,i[22496]);hd(a,i[22497]);hd(a,i[22498])}if(i[22435]==(a|0)){i[22435]=0}if(i[22457]==(a|0)){i[22457]=0}d=i[a+44>>2];c=i[a+48>>2];if(i[22431]==(a|0)){i[22431]=c}if(i[22430]==(a|0)){i[22430]=c}if(i[22432]==(a|0)){i[22432]=c}i[(d?d+48|0:89712)>>2]=c;i[c+44>>2]=d;i[22443]=i[22443]+ -1;if(i[21886]>=4){i[b>>2]=i[a+76>>2];V(i[22423],4057,50401,b)}if((i[a+80>>2]&268435968)!=512){$(i[a+24>>2],i[22425]);$(i[a+40>>2],i[(i[22454]==1?89704:89700)>>2])}ga(a+60|0);if(i[a+56>>2]){ga(a+56|0)}ga(a+52|0);if(i[a+64>>2]){ga(a- -64|0)}if(i[a+68>>2]){ga(a+68|0)}$(a,88);S=b+32|0}function Zd(a,b,c,d){var e=0,f=0,g=0,h=0;e=S-48|0;S=e;f=i[21886];a:{if((a|0)==(c|0)){if((f|0)<3){break a}f=i[a+76>>2];g=i[d+76>>2];i[e+16>>2]=i[b+76>>2];i[e+20>>2]=g;i[e+24>>2]=f;V(i[22423],3052,68701,e+16|0);break a}if((f|0)<3){break a}f=i[c+76>>2];g=i[a+76>>2];h=i[d+76>>2];i[e+32>>2]=i[b+76>>2];i[e+36>>2]=h;i[e+40>>2]=g;i[e+44>>2]=f;V(i[22423],3021,68770,e+32|0)}g=da(i[b+60>>2],d);f=da(i[d+60>>2],b);b:{c:{if(g){if(!f){break c}if(!(i[b+80>>2]>-1|i[d+80>>2]>-1)){if(se(i[22497],b,d)){break b}}la(b,d,12,0,1);break b}if(!f){break b}}f=i[c+76>>2];g=i[a+76>>2];h=i[d+76>>2];i[e>>2]=i[b+76>>2];i[e+4>>2]=h;i[e+8>>2]=g;i[e+12>>2]=f;V(i[22423],6163,68852,e);ca(5,b,d)}Aa(i[d+60>>2],c,b);Aa(i[b+60>>2],a,d);S=e+48|0}function Kd(a,b,c,d,e,f){var g=0;g=S-80|0;S=g;a:{if((f|0)>=16384){ea(g+32|0,b,c,d,e,0,0,0,2147352576);d=i[g+40>>2];e=i[g+44>>2];b=i[g+32>>2];c=i[g+36>>2];if((f|0)<32767){f=f+ -16383|0;break a}ea(g+16|0,b,c,d,e,0,0,0,2147352576);f=((f|0)<49149?f:49149)+ -32766|0;d=i[g+24>>2];e=i[g+28>>2];b=i[g+16>>2];c=i[g+20>>2];break a}if((f|0)>-16383){break a}ea(g- -64|0,b,c,d,e,0,0,0,65536);d=i[g+72>>2];e=i[g+76>>2];b=i[g+64>>2];c=i[g+68>>2];if((f|0)>-32765){f=f+16382|0;break a}ea(g+48|0,b,c,d,e,0,0,0,65536);f=((f|0)>-49146?f:-49146)+32764|0;d=i[g+56>>2];e=i[g+60>>2];b=i[g+48>>2];c=i[g+52>>2]}ea(g,b,c,d,e,0,0,0,f+16383<<16);b=i[g+12>>2];i[a+8>>2]=i[g+8>>2];i[a+12>>2]=b;b=i[g+4>>2];i[a>>2]=i[g>>2];i[a+4>>2]=b;S=g+80|0}function Pd(a,b,c,d){a:{if(b>>>0>20){break a}b:{switch(b+ -9|0){case 0:b=i[c>>2];i[c>>2]=b+4;i[a>>2]=i[b>>2];return;case 1:b=i[c>>2];i[c>>2]=b+4;b=i[b>>2];i[a>>2]=b;i[a+4>>2]=b>>31;return;case 2:b=i[c>>2];i[c>>2]=b+4;i[a>>2]=i[b>>2];i[a+4>>2]=0;return;case 3:b=i[c>>2]+7&-8;i[c>>2]=b+8;c=i[b+4>>2];i[a>>2]=i[b>>2];i[a+4>>2]=c;return;case 4:b=i[c>>2];i[c>>2]=b+4;b=h[b>>1];i[a>>2]=b;i[a+4>>2]=b>>31;return;case 5:b=i[c>>2];i[c>>2]=b+4;i[a>>2]=k[b>>1];i[a+4>>2]=0;return;case 6:b=i[c>>2];i[c>>2]=b+4;b=g[b|0];i[a>>2]=b;i[a+4>>2]=b>>31;return;case 7:b=i[c>>2];i[c>>2]=b+4;i[a>>2]=j[b|0];i[a+4>>2]=0;return;case 8:b=i[c>>2]+7&-8;i[c>>2]=b+8;n[a>>3]=n[b>>3];return;case 9:break b;default:break a}}U[d|0](a,c)}}function mc(a,b,c,d,e,f){var g=0,h=0,j=0,k=0,l=0;g=S+ -64|0;S=g;if(!i[22498]){i[g+48>>2]=0;V(i[22423],6387,29687,g+48|0);X(5,0,0)}h=ha(48);i[h+40>>2]=c;i[h+36>>2]=f;i[h+32>>2]=e;i[h+28>>2]=b;i[h+24>>2]=a;i[h+16>>2]=0;i[h+20>>2]=0;n[h+8>>3]=d;i[h>>2]=0;i[h+4>>2]=1073741824;k=i[(c+ -1>>>0<13?(c<<2)+86672|0:86672)>>2];if(!((c|0)!=9|(f?!(!e|(e|0)==(f|0)):0))){c=i[22423];j=-1;j=e?i[e+12>>2]:j;i[g+36>>2]=f?i[f+12>>2]:-1;i[g+32>>2]=j;V(c,6106,29801,g+32|0);X(5,0,e)}Z(89992,h);if(i[21886]>=3){b=i[b+16>>2];j=i[a+16>>2];l=i[22423];c=-1;a=-1;a=e?i[e+12>>2]:a;c=f?i[f+12>>2]:c;e=i[h+40>>2];i[g+28>>2]=k;i[g+24>>2]=e;n[g+16>>3]=d;i[g+12>>2]=c;i[g+8>>2]=a;i[g+4>>2]=b;i[g>>2]=j;V(l,3034,29907,g)}S=g- -64|0}function Sa(a,b,c){var d=0,e=0,f=0,g=0;f=S-32|0;S=f;a:{if(!b){break a}b:{if(!(i[22464]?a:0)){d=n[11144];e=n[11233];d=d+(e<d?d:e);if(i[21886]<4){break b}n[f>>3]=d;n[f+8>>3]=e;V(i[22423],4012,5179,f);break b}d=n[a+8>>3]+n[11144]}n[b>>3]=d;e=n[11231];if(e<8.988465674311579e+307^1){break a}n[b>>3]=d+e*w(+i[22007])}c:{if(!c){break c}d:{if(a){g=i[a+52>>2];if(!g){d=1.7976931348623157e+308;break d}d=1.7976931348623157e+308;b=i[g+4>>2];if(!b){break d}g=g+4|0;while(1){i[22680]=i[22680]+1;aa(i[b+8>>2],a,f+24|0);e=n[f+24>>3];d=d>e?e:d;b=i[g+4>>2];g=g+4|0;if(b){continue}break}break d}d=n[11235]}d=d-n[11144];n[c>>3]=d;e=n[11231];if(e<8.988465674311579e+307^1){break c}n[c>>3]=d-e*w(+i[22007])}S=f+32|0}function lc(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=S-16|0;S=e;i[e+12>>2]=0;i[c>>2]=0;a:{if((b|0)<=1){V(i[22423],6005,2990,0);X(5,0,0);break a}b:{switch(b+ -2|0){case 0:b=i[a>>2];a=i[a+4>>2];d=n[b>>3]*n[a+8>>3]-n[b+8>>3]*n[a>>3];if((d<0?-d:d)<n[i[22310]+8>>3]*10^1){break a}i[c>>2]=1;break a;case 1:b=i[a+8>>2];d=n[b+16>>3];g=i[a+4>>2];f=n[g+16>>3];a=i[a>>2];h=n[a+8>>3];j=n[g+8>>3];k=n[a+16>>3];l=n[b>>3]*(f*h-j*k);m=f;f=n[b+8>>3];d=l+(n[a>>3]*(j*d-m*f)-n[g>>3]*(d*h-f*k));if((d<0?-d:d)<n[i[22310]+16>>3]*10^1){break a}i[c>>2]=1;break a;default:break b}}ud(a,b,b,e+12|0,c);d=1;while(1){b=b+ -1|0;d=d*n[i[(b<<2)+a>>2]+(b<<3)>>3];if(b){continue}break}d=i[e+12>>2]?-d:d}S=e+16|0;return d}function oh(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0;e=S-16|0;S=e;h=W(a);c=W(i[b>>2]);d=i[b>>2];j=((c+h|0)-i[22007]|0)+1|0;i[e+12>>2]=ba(j);c=d+4|0;a:{if(!a){break a}f=i[a+4>>2];if(!f){break a}a=a+8|0;while(1){h=a;a=i[c>>2];b:{if(!a){break b}g=i[f+16>>2];d=i[a+16>>2];if(g>>>0>d>>>0){break b}if(d>>>0>g>>>0){while(1){Z(e+12|0,a);d=c+4|0;a=i[c+4>>2];if(!a){c=d;break b}c=d;d=i[a+16>>2];g=i[f+16>>2];if(d>>>0>g>>>0){continue}break}}d=d>>>0<g>>>0;c=d?c:c+4|0;f=d?f:a}Z(e+12|0,f);a=h+4|0;f=i[h>>2];if(f){continue}break}}a=i[c>>2];if(a){while(1){Z(e+12|0,a);a=i[c+4>>2];c=c+4|0;if(a){continue}break}}if((j|0)<(W(i[e+12>>2])|0)){V(i[22423],6100,42355,0);X(5,0,0)}ga(b);i[b>>2]=i[e+12>>2];Lb();S=e+16|0}function af(){var a=0,b=0,c=0,d=0;a=S-48|0;S=a;d=W(i[22542]);Ib(0);a:{if(i[21959]){c=89692}else{if(i[21927]){break a}c=89688}rc(i[c>>2])}while(1){wd(i[22422],i[(b<<2)+87708>>2],i[22428],0);b=b+1|0;if((b|0)!=29){continue}break}Ib(0);Vd();if(!(i[21899]|!i[21926]|(i[21973]?0:!(n[11231]>8.988465674311579e+307)))){$b(i[22423],i[23641],0)}if(!(!i[21997]|(i[22970]<1?i[22958]<=0:0))){$b(i[22423],i[23642],0)}if(i[21958]){Lc(i[22423],12015);md(i[22423]);i[a+32>>2]=i[22425];b=i[22007]<<2;i[a+36>>2]=b+4;i[a+40>>2]=b+8;i[a+16>>2]=48;i[a+20>>2]=20;i[a+24>>2]=28;i[a+28>>2]=88;V(i[22423],8040,12016,a+16|0)}if((W(i[22542])|0)!=(d|0)){b=i[22423];i[a>>2]=W(i[22542]);V(b,6065,12141,a);X(5,0,0)}S=a+48|0}function Vg(a){var b=0,c=0,d=0,e=0,f=0,g=0;e=S-16|0;S=e;d=1;i[e+12>>2]=ba(i[22007]+1|0);a:{if(!a){break a}g=i[a+4>>2];f=W(a);if((f|0)<1){break a}while(1){c=ne();i[c+52>>2]=lb(a,f,b,0);if(d){i[c+80>>2]=i[c+80>>2]|4096}Ya(c);i[c+80>>2]=i[c+80>>2]|1024;Oa(g);Z(e+12|0,c);d=d^1;b=b+1|0;g=i[((b<<2)+a|0)+4>>2];if((b|0)!=(f|0)){continue}break}}b=i[22431];b:{if(!b){break b}while(1){if(!i[b+48>>2]){break b}a=i[22431];c:{if(!a){break c}d=0;while(1){c=i[a+48>>2];if(!c){break c}if((a|0)==(b|0)){a=c}else{i[(i[b+60>>2]+(d<<2)|0)+4>>2]=a;d=d+1|0;a=i[a+48>>2]}if(a){continue}break}}fb(i[b+60>>2],i[22007]);b=i[b+48>>2];if(b){continue}break}}_(e+12|0);if(i[21886]>=1){V(i[22423],1028,61399,0)}S=e+16|0}function xe(a,b,c,d,e,f,g){var h=0,j=0,k=0,l=0,m=0;h=S-32|0;S=h;i[h+28>>2]=d;i[h+24>>2]=0;j=a+ -1|0;ud(b,j,a,h+28|0,g);if(j){m=a+ -2|0;l=i[h+28>>2];while(1){d=m;l=n[i[(d<<2)+b>>2]+(d<<3)>>3]<0^l;m=d+ -1|0;if(d){continue}break}i[h+28>>2]=l}a:{b:{if(i[g>>2]){i[22848]=i[22848]+1;if(i[21886]){i[h+16>>2]=i[22455];V(i[22423],4,2766,h+16|0)}xd(b,j,a,i[h+28>>2],e,h+24|0);if(i[h+24>>2]){break b}break a}xd(b,j,a,i[h+28>>2],e,h+24|0);if(!i[h+24>>2]){break a}i[22848]=i[22848]+1;if(!i[21886]){break b}i[h>>2]=i[22455];V(i[22423],5,2847,h)}i[g>>2]=1}_a(e,a,1);k=n[e>>3]*-n[c>>3];n[f>>3]=k;if(j){while(1){k=k-n[c+8>>3]*n[e+8>>3];n[f>>3]=k;c=c+8|0;e=e+8|0;j=j+ -1|0;if(j){continue}break}}S=h+32|0}function de(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0;d=S-32|0;S=d;a=i[22428];a:{if(!a){break a}f=-1.7976931348623157e+308;e=i[a+48>>2];if(e){while(1){b=a;a=e;b:{if(!i[b+64>>2]){break b}h=n[b>>3];if(h>f^1){break b}c=b;f=h}e=i[a+48>>2];if(e){continue}break}}if(!c){break a}Ha(c);if(i[21886]>=4){e=i[c+76>>2];a=i[22423];j=d;b=i[22430];g=-1;c:{if(!b){break c}g=i[b+76>>2]}i[j+20>>2]=g;i[d+16>>2]=e;V(a,4061,67030,d+16|0)}a=i[22430];if(!a){a=i[22429];i[22430]=a}b=i[a+44>>2];i[c+44>>2]=b;if(b){i[b+48>>2]=c}i[a+44>>2]=c;i[c+48>>2]=i[22430];if(i[22428]==(a|0)){i[22428]=c}i[22430]=c;i[22443]=i[22443]+1;if(i[21886]<1){break a}i[d>>2]=i[c+76>>2];n[d+8>>3]=f;V(i[22423],1029,62485,d)}S=d+32|0}function nf(){var a=0;if(i[21886]>=5){V(i[22423],5001,7858,0)}ga(9e4);ga(90004);ga(90044);$(i[22310],i[22007]<<3);$(i[22278],(i[22008]<<3)+8|0);$(i[22277],(i[22008]<<3)+8|0);$(i[22280],(i[22008]<<3)+8|0);$(i[22279],(i[22008]<<3)+8|0);a=i[22007];$(i[22502],o(a+1|0,a)<<3);$(i[22503],(i[22007]<<2)+4|0);i[22502]=0;i[22503]=0;i[22277]=0;i[22278]=0;i[22279]=0;i[22280]=0;i[22310]=0;a=i[22504];if(a){ta(a)}a=i[22506];if(a){ta(a)}a=i[22507];if(a){ta(a)}a=i[22004];if(a){ta(a)}a=i[22003];if(a){ta(a)}i[22003]=0;i[22004]=0;i[22506]=0;i[22507]=0;i[22504]=0;a=i[22010];if(!(!a|!i[22011])){ta(a);i[22010]=0}a=i[22012];if(!(!a|!i[22013])){ta(a);i[22012]=0}if(i[21886]>=5){V(i[22423],5002,7908,0)}}function ng(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0;if((a|0)<=0){return}k=a<<3;while(1){d=a;e=0;h=i[(g<<2)+b>>2];c=h;while(1){m=e;e=n[c>>3];e=m+e*e;c=c+8|0;d=d+ -1|0;if(d){continue}break}e=w(e);if(!(n[11420]>e^1)){n[11420]=e}a:{if(e!=0){c=k+h|0;d=a;while(1){c=c+ -8|0;n[c>>3]=n[c>>3]/e;d=d+ -1|0;if(d){continue}break}g=g+1|0;if((g|0)>=(a|0)){break a}o=k+h|0;j=g;while(1){e=0;f=a;l=i[(j<<2)+b>>2];c=l;d=h;while(1){e=e+n[d>>3]*n[c>>3];c=c+8|0;d=d+8|0;f=f+ -1|0;if(f){continue}break}c=k+l|0;d=a;f=o;while(1){c=c+ -8|0;f=f+ -8|0;n[c>>3]=n[c>>3]-e*n[f>>3];d=d+ -1|0;if(d){continue}break}j=j+1|0;if((j|0)!=(a|0)){continue}break}break a}return}if((a|0)!=(g|0)){continue}break}}function qa(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;a:{b:{if(!b){e=i[22007];if((e|0)>0){break b}return 1}i[b>>2]=0;i[b+4>>2]=0;d=1;j=i[22007];if((j|0)<1){break a}k=i[22277];l=i[22278];while(1){e=f<<3;c=n[e+l>>3];if(!(c>-8.988465674311579e+307^1)){h=n[a+e>>3];g=c-h;n[b>>3]=(g<0?-g:g)+n[b>>3];d=h<c?0:d}c=n[e+k>>3];if(!(c<8.988465674311579e+307^1)){h=n[a+e>>3];g=c-h;n[b>>3]=(g<0?-g:g)+n[b>>3];d=h>c?0:d}f=f+1|0;if((j|0)!=(f|0)){continue}break}break a}j=i[22277];k=i[22278];d=1;while(1){b=f<<3;c=n[b+k>>3];if(!(c>-8.988465674311579e+307^1)){d=n[a+b>>3]<c?0:d}c=n[b+j>>3];if(!(c<8.988465674311579e+307^1)){d=n[a+b>>3]>c?0:d}f=f+1|0;if((e|0)!=(f|0)){continue}break}}return d}function mb(a,b,c){var d=0,e=0,f=0;d=S+ -64|0;S=d;a:{if(!a){break a}e=i[a>>2];f=i[((e<<2)+a|0)+4>>2];f=f?f+ -1|0:e;b:{if(!((f|0)<=(e|0)?e:0)){i[d+48>>2]=f;i[d+52>>2]=b;i[d+56>>2]=c;i[d+60>>2]=e;V(i[22543],6172,69246,d+48|0);break b}if(!i[((f<<2)+a|0)+4>>2]){break a}i[d+32>>2]=b;i[d+36>>2]=c;i[d+44>>2]=e;i[d+40>>2]=f+ -1;V(i[22543],6173,69334,d+32|0)}b=i[a>>2];c=i[((b<<2)+a|0)+4>>2];i[d+16>>2]=69416;i[d+20>>2]=a;i[d+24>>2]=b;c=c?c+ -1|0:b;i[d+28>>2]=c;b=0;e=i[22543];V(e,9347,69671,d+16|0);f=i[a>>2];c=(c|0)>(f|0)?f+1|0:c;if((c|0)>=1){while(1){i[d>>2]=i[((b<<2)+a|0)+4>>2];V(e,9348,69707,d);b=b+1|0;if((c|0)!=(b|0)){continue}break}}V(e,9349,69711,0);X(5,0,0)}S=d- -64|0}function uh(a,b){var c=0,d=0,e=0;i[b+80>>2]=i[b+80>>2]&-134217729;c=i[a+56>>2];a:{if(!c){break a}a=i[c+4>>2];if(!a){break a}c=c+4|0;while(1){g[a+16|0]=j[a+16|0]&253;a=i[c+4>>2];c=c+4|0;if(a){continue}break}}b:{if(!i[b+40>>2]){break b}c=W(i[b+52>>2]);d=i[22007];e=d+5|0;a=i[b+80>>2];c:{if(!(a&268435456)){if((c|0)<=(e|0)){break c}i[b+80>>2]=a|268435456;i[23056]=i[23056]+1;a=i[b+80>>2];break c}if((c|0)>(e|0)|(i[22482]?0:(c|0)!=(d|0))){break c}a=a&-268435457;i[b+80>>2]=a}if(a&268435456){break b}$(i[b+40>>2],i[22425]);i[b+40>>2]=0;b=i[b+56>>2];if(!b){break b}a=i[b+4>>2];if(!a){break b}c=b+4|0;while(1){g[a+16|0]=j[a+16|0]&253;a=i[c+4>>2];c=c+4|0;if(a){continue}break}}}function Fc(a,b,c,d,e,f){var g=0,h=0,j=0,k=0,l=0,m=0;g=S-96|0;S=g;if(i[21886]>=4){i[g+80>>2]=0;i[g+84>>2]=0;n[g+88>>3]=f;n[g+64>>3]=d;n[g+72>>3]=e;V(i[22423],4013,6790,g- -64|0)}n[11258]=f;n[11257]=e;n[11256]=d;h=e-d;j=n[11150];k=-j;a:{b:{if(!(j>f^1|k<f^1)){if((f<0?-f:f)<(h<0?-h:h)^1){break b}e=f/h;break a}l=h/f;if(l<k^1?!(l>j):0){break b}e=f/h;break a}m=i[22423];c:{if(i[21874]){n[g+56>>3]=f;i[g+48>>2]=0;i[g+52>>2]=0;V(m,6019,6865,g+48|0);break c}n[g+32>>3]=h;n[g+24>>3]=e;n[g+16>>3]=d;n[g+8>>3]=f;i[g>>2]=0;i[g+4>>2]=0;V(m,6020,7032,g)}X(1,0,0);e=0}if(b){d=0-e*d;c=c<<3;a=(c+a|0)+ -8|0;while(1){n[a>>3]=d+e*n[a>>3];a=a+c|0;b=b+ -1|0;if(b){continue}break}}S=g+96|0}function na(a){var b=0,c=0,d=0,e=0,f=0,h=0,k=0,m=0,n=0;a:{c=i[a+112>>2];d=i[a+116>>2];b:{if(c|d){b=l[a+120>>2]>=c>>>0;c=i[a+124>>2];if((c|0)>(d|0)?1:(c|0)>=(d|0)?b:0){break b}}k=Qf(a);if((k|0)>-1){break a}}i[a+104>>2]=0;return-1}m=a;e=i[a+116>>2];b=e;d=i[a+8>>2];c=d;f=i[a+112>>2];c:{if(!(b|f)){break c}c=d;e=(i[a+124>>2]^-1)+b|0;b=i[a+120>>2]^-1;f=b+f|0;if(f>>>0<b>>>0){e=e+1|0}b=f;f=i[a+4>>2];h=d-f|0;n=b>>>0>=h>>>0;h=h>>31;if((e|0)>(h|0)?1:(e|0)>=(h|0)?n:0){break c}c=b+f|0}i[m+104>>2]=c;m=i[a+4>>2];if(d){c=a;e=(d-m|0)+1|0;b=e;d=b+i[a+120>>2]|0;a=i[a+124>>2]+(b>>31)|0;i[c+120>>2]=d;i[c+124>>2]=d>>>0<b>>>0?a+1|0:a}a=m+ -1|0;if(j[a|0]!=(k|0)){g[a|0]=k}return k}function ph(a,b){var c=0,d=0,e=0,f=0,g=0;f=S-16|0;S=f;if(i[21886]>=4){c=i[b+76>>2];i[f>>2]=i[a+76>>2];i[f+4>>2]=c;V(i[22423],4037,41605,f)}e=i[22492]+1|0;i[22492]=e;d=i[b+60>>2];a:{if(!d){break a}c=i[d+4>>2];if(!c){break a}d=d+4|0;while(1){i[c+72>>2]=e;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}d=i[a+60>>2];b:{if(!d){d=0;break b}c=i[d+4>>2];if(!c){break b}g=b+60|0;d=d+8|0;while(1){c:{if(i[c+72>>2]==(e|0)){if(j[c+81|0]&32){Pa(c)}e=i[c+60>>2];if(i[e+4>>2]!=(a|0)){ja(e,a);break c}ja(e,b);Aa(i[c+60>>2],a,b);break c}if((b|0)==(c|0)){break c}Z(g,c);Aa(i[c+60>>2],a,b)}c=i[d>>2];if(c){d=d+4|0;e=i[22492];continue}break}d=i[a+60>>2]}ja(d,b);ja(i[b+60>>2],a);S=f+16|0}function tc(a,b){var c=0,d=0,e=0,f=0;d=S-96|0;S=d;e=i[22007];a:{if((e|0)>=1){f=i[21876];b:{if((e|0)!=4){while(1){n[(d- -64|0)+(c<<3)>>3]=(c|0)!=(f|0)?n[(c<<3)+b>>3]:0;c=c+1|0;if((e|0)!=(c|0)){continue}break}break b}if(f){n[d+64>>3]=n[b>>3];c=1}else{c=0}if((f|0)!=1){n[(d- -64|c<<3)>>3]=n[b+8>>3];c=c+1|0}if((f|0)!=2){n[(d- -64|0)+(c<<3)>>3]=n[b+16>>3];c=c+1|0}e=c;if((f|0)==3){break b}n[(d- -64|0)+(c<<3)>>3]=n[b+24>>3];e=c+1|0}c=e;if((c|0)>2){break a}}c=c<<3;fa(c+(d- -64|0)|0,0,24-c|0)}n[d+48>>3]=n[d+64>>3];V(a,9216,14922,d+48|0);n[d+32>>3]=n[d+72>>3];V(a,9216,14922,d+32|0);n[d+16>>3]=n[d+80>>3];V(a,9216,14922,d+16|0);i[d>>2]=Y(b);V(a,9217,16600,d);S=d+96|0}function ib(a,b,c,d,e,f,g,h){var i=0,j=0,k=0,l=0,m=0,n=0;j=1;i=d&2147483647;m=i;k=c;a:{if(!c&(i|0)==2147418112?a|b:(i|0)==2147418112&c>>>0>0|i>>>0>2147418112){break a}l=h&2147483647;n=l;i=g;if(!g&(l|0)==2147418112?e|f:(l|0)==2147418112&g>>>0>0|l>>>0>2147418112){break a}if(!(a|e|(i|k)|(b|f|(m|n)))){return 0}k=d&h;if((k|0)>0?1:(k|0)>=0?(c&g)>>>0>=0:0){j=-1;if((c|0)==(g|0)&(d|0)==(h|0)?(b|0)==(f|0)&a>>>0<e>>>0|b>>>0<f>>>0:(d|0)<(h|0)?1:(d|0)<=(h|0)?c>>>0<g>>>0:0){break a}return(a^e|c^g)!=0|(b^f|d^h)!=0}j=-1;if((c|0)==(g|0)&(d|0)==(h|0)?(b|0)==(f|0)&a>>>0>e>>>0|b>>>0>f>>>0:(d|0)>(h|0)?1:(d|0)>=(h|0)?c>>>0>g>>>0:0){break a}j=(a^e|c^g)!=0|(b^f|d^h)!=0}return j}function ed(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;e=S-16|0;S=e;c=ba(i[22427]);h=i[22492]+2|0;i[22492]=h;i[e+12>>2]=c;f=i[a+12>>2];a:{if(!f){break a}c=i[f+4>>2];if(!c){break a}d=c;f=f+4|0;g=f;while(1){i[d+72>>2]=h;d=i[g+4>>2];g=g+4|0;if(d){continue}break}if(!c){break a}d=f+4|0;if(!b){while(1){if(!i[d>>2]){break a}dd(a,c,e+12|0);c=i[d>>2];d=d+4|0;if(c){continue}break a}}while(1){dd(a,c,e+12|0);c=i[d>>2];d=d+4|0;if(c){continue}break}}b:{if(!(i[21886]|i[21958])){break b}b=W(i[e+12>>2]);i[23030]=i[23030]+1;i[23032]=b+i[23032];if(i[23034]<(b|0)){i[23034]=b}if(i[21886]<3){break b}a=i[a+16>>2];i[e>>2]=b;i[e+4>>2]=a;V(i[22423],3011,47363,e)}S=e+16|0;return i[e+12>>2]}function ff(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0;b=i[22534];a=(b+ -8|0)/4|0;a=(b|0)<12?8:(a|0)>(b|0)?8:a;i[22427]=a;i[22500]=Ba(a);i[22501]=Ba(i[22427]);i[22511]=Ba(i[22427]);i[22310]=ha(i[22007]<<3);i[22278]=ha((i[22008]<<3)+8|0);i[22277]=ha((i[22008]<<3)+8|0);i[22280]=ha((i[22008]<<3)+8|0);d=ha((i[22008]<<3)+8|0);i[22279]=d;b=i[22008];if((b|0)!=-1){e=i[22280];f=i[22277];g=i[22278];while(1){c=b<<3;a=c+g|0;i[a>>2]=-1;i[a+4>>2]=-1048577;a=c+f|0;i[a>>2]=-1;i[a+4>>2]=2146435071;a=c+e|0;i[a>>2]=-1;i[a+4>>2]=-1048577;a=c+d|0;i[a>>2]=-1;i[a+4>>2]=2146435071;a=b;b=a+ -1|0;if(a){continue}break}}a=i[22007];i[22502]=ha(o(a+1|0,a)<<3);i[22503]=ha((i[22007]<<2)+4|0)}function Eb(a,b,c,d,e,f,h){var k=0,l=0,m=0,o=0,p=0,q=0,r=0;m=S-32|0;S=m;k=e;if((b|0)>=1){while(1){k=g[a+l|0]+k|0;l=l+1|0;if((l|0)!=(b|0)){continue}break}}if((h|0)!=(k|0)){i[m+16>>2]=h;i[m+20>>2]=k;V(i[22423],6018,6613,m+16|0);X(5,0,0)}a:{if(!d|(b|0)<1){break a}l=0;k=0;while(1){p=k+1|0;o=j[a+q|0];b:{if((o|0)!=255){r=l+1|0;c:{if((o|0)==1){p=k;if((k|0)<(e|0)){break c}l=r;break b}p=k+1|0}l=(l<<3)+f|0;k=(k<<3)+c|0;o=d;while(1){n[l>>3]=n[k>>3];k=(e<<3)+k|0;l=(h<<3)+l|0;o=o+ -1|0;if(o){continue}break}l=r}k=p;if((k|0)>=(e|0)){break a}}q=q+1|0;if((q|0)!=(b|0)){continue}break}}if(i[21886]>=1){i[m>>2]=d;i[m+4>>2]=e;i[m+8>>2]=h;V(i[22423],1004,6695,m)}S=m+32|0}function Bh(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0;b=S-48|0;S=b;a:{if(!a){break a}c=i[a+4>>2];h=W(a);if((h|0)<1){break a}while(1){o=a;if(i[c+40>>2]==8){if(i[21886]>=3){p=i[22423];j=-1;k=-1;d=i[c+16>>2];if(d){k=i[d+76>>2]}d=i[c+20>>2];if(d){j=i[d+76>>2]}d=-1;l=-1;e=i[c+24>>2];if(e){l=i[e+16>>2]}e=i[c+28>>2];if(e){d=i[e+16>>2]}e=-1;m=-1;g=i[c+32>>2];if(g){m=i[g+12>>2]}g=i[c+36>>2];if(g){e=i[g+12>>2]}q=n[c+8>>3];i[b+32>>2]=8;n[b+24>>3]=q;i[b+20>>2]=e;i[b+16>>2]=m;i[b+12>>2]=d;i[b+8>>2]=l;i[b+4>>2]=j;i[b>>2]=k;V(p,3037,43787,b)}Ta(a,f);h=h+ -1|0;f=f+ -1|0}f=f+1|0;c=i[((f<<2)+o|0)+4>>2];if((f|0)<(h|0)){continue}break}}S=b+48|0}function wh(a,b){var c=0,d=0,e=0,f=0,g=0;e=S-16|0;S=e;c=ba(i[22427]);f=i[22492]+1|0;i[22492]=f;i[e+12>>2]=c;g=i[a+12>>2];a:{if(!g){break a}c=i[g+4>>2];if(!c){break a}d=g+4|0;while(1){i[c+72>>2]=f;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}f=i[22493]+1|0;i[22493]=f;i[a+20>>2]=f;b:{if(!b){break b}c=i[b+4>>2];if(!c){break b}d=b+4|0;while(1){i[c+20>>2]=f;c=i[d+4>>2];d=d+4|0;if(c){continue}break}}c:{if(!g){break c}d=i[g+4>>2];if(!d){break c}c=g+8|0;while(1){if(!i[c>>2]){break c}vh(a,d,e+12|0);d=i[c>>2];c=c+4|0;if(d){continue}break}}if(i[21886]>=3){b=i[22423];c=W(i[e+12>>2]);i[e+4>>2]=i[a+16>>2];i[e>>2]=c;V(b,3035,42498,e)}S=e+16|0;return i[e+12>>2]}function Zb(a,b,c,d,e,f){var g=0,h=0,j=0,k=0;g=S-240|0;S=g;h=i[c>>2];i[g+232>>2]=h;c=i[c+4>>2];i[g>>2]=a;i[g+236>>2]=c;j=1;a:{b:{c:{d:{if(c?0:(h|0)==1){break d}h=a-i[(d<<2)+f>>2]|0;if((U[b|0](h,a)|0)<1){break d}k=!e;while(1){e:{c=h;if(!(!k|(d|0)<2)){e=i[((d<<2)+f|0)+ -8>>2];h=a+ -4|0;if((U[b|0](h,c)|0)>-1){break e}if((U[b|0](h-e|0,c)|0)>-1){break e}}i[(j<<2)+g>>2]=c;e=g+232|0;a=mi(i[g+232>>2]+ -1|0);if(!a){a=mi(i[g+236>>2]);a=a?a+32|0:0}_b(e,a);j=j+1|0;d=a+d|0;if(i[g+236>>2]?0:i[g+232>>2]==1){break b}e=0;k=1;a=c;h=a-i[(d<<2)+f>>2]|0;if((U[b|0](h,i[g>>2])|0)>0){continue}break c}break}c=a;break b}c=a}if(e){break a}}Md(g,j);Ec(c,b,d,f)}S=g+240|0}function Tc(a){var b=0,c=0,d=0;d=S-16|0;S=d;i[23e3]=i[23e3]+1;b=ha(28);g[b|0]=0;g[b+1|0]=0;g[b+2|0]=0;g[b+3|0]=0;g[b+4|0]=0;g[b+5|0]=0;g[b+6|0]=0;g[b+7|0]=0;g[b+24|0]=0;g[b+25|0]=0;g[b+26|0]=0;g[b+27|0]=0;g[b+16|0]=0;g[b+17|0]=0;g[b+18|0]=0;g[b+19|0]=0;g[b+20|0]=0;g[b+21|0]=0;g[b+22|0]=0;g[b+23|0]=0;g[b+8|0]=0;g[b+9|0]=0;g[b+10|0]=0;g[b+11|0]=0;g[b+12|0]=0;g[b+13|0]=0;g[b+14|0]=0;g[b+15|0]=0;c=i[22449];if((c|0)==-1){$(b,28);V(i[22423],6159,66692,0);X(6,0,0);c=i[22449]}if(i[22438]==(c|0)){i[22439]=b}i[22449]=c+1;i[b+8>>2]=a;i[b+16>>2]=c;if(i[21886]>=4){c=i[22423];a=Y(a);i[d+4>>2]=i[b+16>>2];i[d>>2]=a;V(c,4060,66799,d)}S=d+16|0;return b}function qb(a,b,c,d){var e=0,f=0,h=0,k=0,l=0,m=0;k=S-16|0;S=k;e=i[a+52>>2];a:{if(!e){break a}f=i[e+4>>2];if(!f){break a}e=e+4|0;while(1){g[f+24|0]=j[f+24|0]&254;f=i[e+4>>2];e=e+4|0;if(f){continue}break}}e=i[b+52>>2];b:{if(!e){break b}f=i[e+4>>2];if(!f){break b}e=e+4|0;while(1){g[f+24|0]=j[f+24|0]|1;f=i[e+4>>2];e=e+4|0;if(f){continue}break}}a=i[a+52>>2];c:{if(!a){break c}e=i[a+4>>2];if(!e){break c}a=a+8|0;while(1){f=a;d:{if(g[e+24|0]&1){break d}i[22592]=i[22592]+1;aa(i[e+8>>2],b,k+8|0);h=n[k+8>>3];if(h<m){m=h;break d}if(h>l^1){break d}l=h}a=f+4|0;e=i[f>>2];if(e){continue}break}}n[c>>3]=m;n[d>>3]=l;S=k+16|0;h=-m;return l>h?l:h}function La(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0;f=S-16|0;S=f;vi(+b);h=si(1)|0;g=si(0)|0;e=h&2147483647;c=e;e=c+ -1048576|0;d=g;if(d>>>0<0){e=e+1|0}a:{if((e|0)==2145386495|e>>>0<2145386495){j=d<<28;e=(c&15)<<28|d>>>4;c=(c>>>4|0)+1006632960|0;d=e;c=d>>>0<0?c+1|0:c;break a}if((c|0)==2146435072&d>>>0>=0|c>>>0>2146435072){j=g<<28;e=g;c=h;g=c>>>4|0;d=(c&15)<<28|e>>>4;c=g|2147418112;break a}if(!(c|d)){d=0;c=0;break a}e=c;c=(c|0)==1&d>>>0<0|c>>>0<1?r(g)+32|0:r(c);ua(f,d,e,0,0,c+49|0);k=i[f>>2];j=i[f+4>>2];d=i[f+8>>2];c=i[f+12>>2]^65536|15372-c<<16}i[a>>2]=k;i[a+4>>2]=j;i[a+8>>2]=d;i[a+12>>2]=h&-2147483648|c;S=f+16|0}function jc(){var a=0,b=0,c=0,d=0,e=0;c=S-32|0;S=c;e=W(i[22501]);if(i[21886]>=1){i[c+20>>2]=e;i[c+16>>2]=i[22433];V(i[22423],1018,48168,c+16|0)}a=i[22432];a:{if(!a){break a}while(1){if(!(j[a+81|0]&8)){break a}b=i[a+48>>2];gb(a);d=d+1|0;a=b;if(a){continue}break}}a=i[22433];if((a|0)!=(d|0)){i[c>>2]=a;i[c+4>>2]=d;V(i[22423],6103,48228,c);X(5,0,0)}i[23038]=i[23038]+d;i[22433]=0;if(i[23040]<(d|0)){i[23040]=d}a=0;i[22666]=i[22666]+e;if(i[22668]<(e|0)){i[22668]=e}b=i[22501];b:{if(!b){break b}a=i[b+4>>2];if(!a){a=b;break b}b=b+4|0;while(1){cc(a);a=i[b+4>>2];b=b+4|0;if(a){continue}break}a=i[22501]}fb(a,0);S=c+32|0}function Qh(){var a=0,b=0,c=0,d=0,e=0,f=0;c=S-16|0;S=c;cb(i[22537],i[22532],15);a=i[(i[22537]+(i[22532]<<2)|0)+ -4>>2];i[22534]=a;d=i[22530];b=i[22531];if(!((a|0)<(b|0)?(a|0)<(d|0):0)){i[c>>2]=a;i[c+4>>2]=d;i[c+8>>2]=b;V(i[22543],6087,26621,c);X(4,0,0);a=i[22534]}a=za((a<<2)+4|0);i[22538]=a;if(!a){V(i[22543],6088,26716,0);X(4,0,0)}b=i[22534];a:{if((b|0)==-1){break a}d=i[22538];while(1){a=b;i[d+(a<<2)>>2]=a;b=a+ -1|0;if(a){continue}break}if(i[22534]<0){break a}f=i[22537];d=i[22538];b=0;while(1){a=d+(e<<2)|0;b=(i[a>>2]>i[(b<<2)+f>>2])+b|0;i[a>>2]=b;a=(e|0)<i[22534];e=e+1|0;if(a){continue}break}}S=c+16|0}function Ee(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0;a=S-48|0;S=a;c=i[22535];d=i[22543];b=i[22544];if(!(c&c+1?0:!(!d|b>>>0>10))){i[a+40>>2]=c;i[a+36>>2]=b;i[a+32>>2]=d;Kc(6244,25943,a+32|0);Jb(5);b=i[22544]}if(b){V(i[22543],8143,26143,0)}c=0;f=i[22532];if((f|0)>=1){h=i[22537];j=i[22536];d=0;while(1){b=0;g=d<<2;e=i[g+j>>2];if(e){while(1){b=b+1|0;e=i[e>>2];if(e){continue}break}}c=o(i[h+g>>2],b)+c|0;d=d+1|0;if((f|0)!=(d|0)){continue}break}}b=i[22552];if((b|0)!=(c|0)){i[a+16>>2]=b;i[a+20>>2]=c;V(i[22543],6211,26256,a+16|0);X(5,0,0)}if(i[22544]){i[a>>2]=c;V(i[22543],8144,26335,a)}S=a+48|0}function $(a,b){var c=0,d=0,e=0,f=0;c=S+ -64|0;S=c;a:{if(!a){break a}if(i[22534]>=(b|0)){e=i[22548]+1|0;i[22548]=e;d=i[i[22538]+(b<<2)>>2]<<2;b=i[d+i[22537]>>2];i[22552]=b+i[22552];f=i[22555]-b|0;i[22555]=f;d=d+i[22536]|0;i[a>>2]=i[d>>2];i[d>>2]=a;if(i[22544]<5){break a}d=i[22545]+i[22546]|0;i[c+48>>2]=d-e;i[c+32>>2]=a;i[c+40>>2]=b;i[c+44>>2]=f;i[c+36>>2]=d+e;V(i[22543],8142,26410,c+32|0);break a}e=i[22549]+1|0;i[22549]=e;d=i[22553]-b|0;i[22553]=d;if(i[22544]>=5){f=i[22547];i[c+16>>2]=f-e;i[c>>2]=a;i[c+8>>2]=b;i[c+12>>2]=d;i[c+4>>2]=e+f;V(i[22543],8058,26464,c)}ta(a)}S=c- -64|0}function Nb(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=S-48|0;S=e;i[22672]=i[22672]+1;k=i[22503];a:{if(!b|!c){break a}f=i[b+4>>2];if(!f){break a}g=b+8|0;b=i[22502];while(1){l=g;i[(h<<2)+k>>2]=b;g=a;j=c;while(1){n[b>>3]=n[f>>3]-n[g>>3];b=b+8|0;g=g+8|0;f=f+8|0;j=j+ -1|0;if(j){continue}break}h=h+1|0;if((h|0)==(c|0)){break a}g=l+4|0;f=i[l>>2];if(f){continue}break}}if((h|0)<(c|0)){i[e+32>>2]=h;i[e+36>>2]=c;V(i[22423],6007,3717,e+32|0);X(5,0,0)}m=lc(k,c,d);if(i[21886]>=2){b=i[22423];a=Y(a);i[e+16>>2]=i[d>>2];i[e+12>>2]=c;i[e+8>>2]=a;n[e>>3]=m;V(b,2002,3782,e)}S=e+48|0;return m}function Sg(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0;f=S-48|0;S=f;i[b>>2]=-1;i[b+4>>2]=-1048577;i[c>>2]=0;e=i[22428];a:{if(!e){break a}b:{while(1){if(!i[e+48>>2]){break a}k=i[e+80>>2];c:{if(!i[e+24>>2]|(k&65536|k&133120)){break c}aa(a,e,f+40|0);j=j+1|0;g=n[f+40>>3];if(g>n[b>>3]^1){break c}n[b>>3]=g;if(!(g>n[10930]^1)){break b}h=e}e=i[e+48>>2];if(e){continue}break}break a}h=e;i[c>>2]=1}i[d>>2]=j;if(i[21886]>=3){d=i[22423];e=Y(a);a=h?i[h+76>>2]:-1;g=n[b>>3];b=i[c>>2];i[f+28>>2]=j;i[f+24>>2]=b;n[f+16>>3]=g;i[f+8>>2]=a;i[f+4>>2]=1;i[f>>2]=e;V(d,3016,61860,f)}S=f+48|0;return h}function $b(a,b,c){var d=0,e=0,f=0,g=0,h=0,k=0,l=0;d=!j[j[b+92232|0]+93986|0]+b|0;e=i[23640];a:{if((d|0)>=(e|0)){break a}f=d+1|0;f=(e|0)>(f|0)?e:f;b:{while(1){g=j[d+92232|0];h=j[g+93986|0];if(!h){break b}k=h<<24>>24;c:{d:{if((k|0)>=6){if(n[(g<<3)+90240>>3]!=n[(h<<3)+94488>>3]){break d}break c}if((k|0)==5){break d}if(i[(g<<3)+90240>>2]==i[(h<<3)+94488>>2]){break c}}l=j[g+94235|0]?l:1}d=d+1|0;if((d|0)<(e|0)){continue}break}d=f}if(!l){break a}V(a,9367,79287,0);if((d|0)<=(b|0)){break a}while(1){lg(a,j[b+92232|0]);b=b+1|0;if((d|0)!=(b|0)){continue}break}}if(c){i[c>>2]=d}}function Wh(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,o=0;e=S-32|0;S=e;i[d>>2]=0;i[22450]=i[22447];i[22473]=(i[21911]|i[21904])!=0;f=Og(a);h=i[22433];j=i[22443];k=i[22007];l=i[22444];m=i[22450];o=i[22447];a:{b:{if(i[21911]){if(Vh(f,c)){break b}i[b+80>>2]=i[b+80>>2]|262144;c=0;break a}if(i[21904]){c=0;if(!Uh(f,b,d)){break b}break a}hc();$c();Zc()}b=o-m|0;g=+(b|0)- +(j-h|0)*+(k|0)/+(l|0);n[11426]=g+n[11426];n[11427]=g*g+n[11427];if(i[21886]>=2){c=i[22423];a=Y(a);d=i[f+16>>2];n[e+16>>3]=g;i[e+8>>2]=d;i[e+4>>2]=a;i[e>>2]=b;V(c,2067,18792,e)}c=f}S=e+32|0;return c}function bd(a){var b=0,c=0,d=0,e=0,f=0;c=S-48|0;S=c;if(i[21886]>=4){i[c+32>>2]=i[a+76>>2];V(i[22423],4073,45791,c+32|0)}b=i[a+60>>2];a:{if(!b){break a}d=i[b+4>>2];if(!d){break a}b=b+8|0;while(1){e=b;b=i[d+80>>2];if(b&2048){b=i[d+76>>2];i[c+16>>2]=i[a+76>>2];i[c+20>>2]=b;V(i[22423],6359,45854,c+16|0);ca(5,a,d);b=i[d+80>>2]}b:{if(b&-1071644672){break b}b=W(i[d+60>>2]);if((b|0)>=i[22007]){break b}la(d,d,10,0,1);if(i[21886]<2){break b}f=i[a+76>>2];i[c>>2]=i[d+76>>2];i[c+4>>2]=b;i[c+8>>2]=f;V(i[22423],2019,45956,c)}b=e+4|0;d=i[e>>2];if(d){continue}break}}S=c+48|0}function Ug(a){var b=0,c=0,d=0,e=0,f=0,g=0;f=S-16|0;S=f;e=i[a+80>>2];a:{if(e&8192){c=i[a+52>>2];b=i[c+4>>2];d=ce(i[22007],i[b+8>>2],c,b,e>>>12&1,i[a+24>>2],a+16|0);break a}if(i[22454]==2){e=i[a+40>>2]}else{e=Da(a)}b=i[a+56>>2];b:{if(!b){break b}c=i[b+4>>2];if(!c){break b}b=b+4|0;g=a+16|0;while(1){d=d+ce(i[22007],e,i[c>>2],0,i[c+4>>2]==(a|0),i[a+24>>2],g);c=i[b+4>>2];b=b+4|0;if(c){continue}break}}if(i[22454]==2){break a}$(e,i[22425])}d=(j[a+82|0]&2)>>>1|0?i[21874]?-d:d:d;if(i[21886]>=4){i[f>>2]=i[a+76>>2];n[f+8>>3]=d;V(i[22423],4009,3989,f)}S=f+16|0;return d}function ia(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=S-288|0;S=d;e=Qa(a);if(e>>>0>=141){i[d+64>>2]=e;i[d+68>>2]=140;i[d+72>>2]=a;V(i[22423],6408,11736,d- -64|0);X(5,0,0)}i[d+48>>2]=a;Td(d+80|0,11858,d+48|0);if(b){a=Qa(d+80|0);i[d+32>>2]=i[b>>2];Td(a+(d+80|0)|0,11863,d+32|0)}if(c){a=Qa(d+80|0);n[d+16>>3]=n[c>>3];fg(a+(d+80|0)|0,d+16|0)}a=i[22271];b=Qa(d+80|0);e=a+b|0;i[22271]=e;c=511-Qa(88572)|0;a=(c|0)>0?c:0;if(!((e|0)<80|(c|0)<1)){Hd(11874,a);i[22271]=b;a=a+ -1|0}if(!(i[21886]<1|(b|0)<=(a|0))){b=i[22423];i[d>>2]=d+80;V(b,1058,11876,d)}Hd(d+80|0,a);S=d+288|0}function Ve(a,b,c){var d=0,e=0,f=0,g=0;d=S-32|0;S=d;f=i[22009]+W(i[22500])|0;e=ba(f);i[d+24>>2]=e;jb(e,f);c=Ja(b,c,0);i[d+28>>2]=c;a:{if(!c){break a}b=i[c+4>>2];if(!b){break a}c=c+8|0;while(1){e=Y(i[b+8>>2]);if((e|0)>=0){i[(i[d+24>>2]+(e<<2)|0)+4>>2]=i[b+8>>2];g=g+1|0}b=i[c>>2];c=c+4|0;if(b){continue}break}e=i[d+24>>2]}_(d+28|0);i[d+16>>2]=g;V(a,9086,13110,d+16|0);b:{if(!e){break b}c=i[e+4>>2];e=W(e);if((e|0)<1){break b}b=0;while(1){if(c){i[d>>2]=b;V(a,9087,13110,d)}b=b+1|0;c=i[(i[d+24>>2]+(b<<2)|0)+4>>2];if((b|0)!=(e|0)){continue}break}}_(d+24|0);S=d+32|0}function Hc(a,b,c,d,e){var f=0,h=0,j=0;f=S-208|0;S=f;i[f+204>>2]=c;c=0;fa(f+160|0,0,40);i[f+200>>2]=i[f+204>>2];a:{if((Gc(0,b,f+200|0,f+80|0,f+160|0,d,e)|0)<0){break a}c=i[a+76>>2]>=0?1:c;h=i[a>>2];if(g[a+74|0]<=0){i[a>>2]=h&-33}j=h&32;b:{if(i[a+48>>2]){Gc(a,b,f+200|0,f+80|0,f+160|0,d,e);break b}i[a+48>>2]=80;i[a+16>>2]=f+80;i[a+28>>2]=f;i[a+20>>2]=f;h=i[a+44>>2];i[a+44>>2]=f;Gc(a,b,f+200|0,f+80|0,f+160|0,d,e);if(!h){break b}U[i[a+36>>2]](a,0,0)|0;i[a+48>>2]=0;i[a+44>>2]=h;i[a+28>>2]=0;i[a+16>>2]=0;i[a+20>>2]=0}i[a>>2]=i[a>>2]|j;if(!c){break a}}S=f+208|0}function Ne(a,b,c){var d=0,e=0;d=S-48|0;S=d;if((c&-9)==17){i[d+32>>2]=W(i[b+52>>2]);V(a,9129,14929,d+32|0)}c=i[b+80>>2];a:{if(!(c&8192|i[22007]<3?!(c&4096):0)){b=i[b+52>>2];if(!b){break a}c=i[b+4>>2];if(!c){break a}b=b+4|0;while(1){i[d>>2]=Y(i[c+8>>2]);V(a,9130,14929,d);c=i[b+4>>2];b=b+4|0;if(c){continue}break}break a}c=i[b+52>>2];if(!c){break a}c=c+8|0;e=i[c>>2];if(!e){break a}while(1){i[d+16>>2]=Y(i[e+8>>2]);V(a,9131,14929,d+16|0);e=i[b+52>>2];c=(((e+4|0)==(c|0)?2:(e+8|0)==(c|0)?-1:1)<<2)+c|0;e=i[c>>2];if(e){continue}break}}V(a,9132,13098,0);S=d+48|0}function ba(a){var b=0,c=0,d=0,e=0;d=S-16|0;S=d;e=i[22534];a=a?a:1;b=(a<<2)+8|0;c=ha(b);a:{if((a|0)<-1|(b|0)>(e|0)){break a}e=i[i[22537]+(i[i[22538]+(b<<2)>>2]<<2)>>2];if((e|0)<=(b|0)){break a}a=((e-b|0)/4|0)+a|0}i[c>>2]=a;i[(c+4|0)+(a<<2)>>2]=1;i[c+4>>2]=0;a=i[22542];b:{if(a){b=(a+(i[a>>2]<<2)|0)+4|0;a=i[b>>2];if(a){break b}}yb(90168);a=i[22542];b=((i[a>>2]<<2)+a|0)+4|0;a=i[b>>2]}i[b>>2]=a+1;a=i[22542]+(a<<2)|0;i[a>>2]=c;i[a+4>>2]=0;if(i[22544]>=5){a=i[22543];b=i[c>>2];i[d+8>>2]=W(i[22542]);i[d+4>>2]=b;i[d>>2]=c;V(a,8123,69871,d)}S=d+16|0;return c}function zh(a){var b=0,c=0,d=0,e=0;d=S-16|0;S=d;i[d+12>>2]=ba(i[22427]);b=i[i[a+52>>2]+4>>2];c=i[22493]+1|0;i[22493]=c;i[b+20>>2]=c;c=i[a+32>>2];a:{if(!c){break a}while(1){b:{if(j[c+82|0]&64){break b}e=i[c+52>>2];if(!e){break b}b=i[e+4>>2];if(!b){break b}e=e+8|0;while(1){if(i[b+20>>2]!=i[22493]){Z(d+12|0,b);i[b+20>>2]=i[22493];g[b+24|0]=j[b+24|0]&254}b=i[e>>2];e=e+4|0;if(b){continue}break}}if((a|0)==(c|0)){break a}c=i[c+32>>2];if(c){continue}break}}if(i[21886]>=4){a=i[22423];i[d>>2]=W(i[d+12>>2]);V(a,4019,29988,d)}S=d+16|0;return i[d+12>>2]}function W(a){var b=0,c=0,d=0,e=0,f=0,g=0;b=S-48|0;S=b;a:{if(!a){break a}d=i[a>>2];e=i[((d<<2)+a|0)+4>>2];if(!e){e=d;break a}e=e+ -1|0;if((e|0)<=(d|0)){break a}i[b+32>>2]=e;i[b+36>>2]=d;d=0;V(i[22543],6178,69777,b+32|0);c=i[a>>2];f=i[((c<<2)+a|0)+4>>2];i[b+16>>2]=69865;i[b+20>>2]=a;i[b+24>>2]=c;c=f?f+ -1|0:c;i[b+28>>2]=c;f=i[22543];V(f,9347,69671,b+16|0);g=i[a>>2];c=(c|0)>(g|0)?g+1|0:c;if((c|0)>=1){while(1){i[b>>2]=i[((d<<2)+a|0)+4>>2];V(f,9348,69707,b);d=d+1|0;if((c|0)!=(d|0)){continue}break}}V(f,9349,69711,0);X(5,0,0)}S=b+48|0;return e}function nh(a,b){var c=0,d=0,e=0,f=0,h=0;f=S-16|0;S=f;if(i[21886]>=4){c=i[b+76>>2];i[f>>2]=i[a+76>>2];i[f+4>>2]=c;V(i[22423],4038,41656,f)}c=i[b+56>>2];a:{if(!c){break a}d=i[c+4>>2];if(!d){break a}e=c+4|0;h=e+4|0;while(1){b:{if(i[d+4>>2]!=(a|0)){c=h;if(i[d+8>>2]!=(a|0)){break b}}fd(d);c=e}h=c+4|0;e=c;d=i[c>>2];if(d){continue}break}}e=i[a+56>>2];c:{if(!e){break c}c=i[e+4>>2];if(!c){break c}h=b+56|0;d=e+8|0;while(1){e=i[c+4>>2]==(a|0);i[(e?4:8)+c>>2]=b;g[c+16|0]=j[c+16|0]&(e?-33:-65);Z(h,c);c=i[d>>2];d=d+4|0;if(c){continue}break}}S=f+16|0}function mg(){var a=0,b=0,c=0,d=0;b=S-16|0;S=b;fa(94235,0,249);i[23640]=0;xg();wg();vg();ug();tg();sg();rg();qg();pg();og();a=i[23640];if((a|0)>=260){i[b+4>>2]=259;i[b>>2]=a;Kc(6184,78299,b);Jb(5)}i[23630]=2147483647;i[23638]=-1;i[23639]=2146435071;i[23634]=0;i[23635]=0;i[23628]=-2147483648;i[23636]=-1;i[23637]=-1048577;i[23626]=0;i[23624]=0;while(1){a=j[c+93986|0];d=a<<24>>24;a:{if((d|0)>=6){n[(c<<3)+90240>>3]=n[(a<<3)+94488>>3];break a}if(!d){break a}i[(c<<3)+90240>>2]=i[(a<<3)+94488>>2]}c=c+1|0;if((c|0)!=249){continue}break}S=b+16|0}function of(){var a=0,b=0,c=0,d=0,e=0,f=0;d=S-16|0;S=d;f=ha(i[22007]<<2);c=i[22431];b=0;a:{if(!c){break a}a=i[c+48>>2];b=0;if(!a){break a}b=c;while(1){e=b;b=a;a=i[22007];b:{if((c|0)==(e|0)){if(!a){break b}e=i[c+24>>2];while(1){a=a+ -1|0;i[(a<<2)+f>>2]=n[e+(a<<3)>>3]>0;if(a){continue}break}break b}while(1){if(!a){break b}a=a+ -1|0;if(i[(a<<2)+f>>2]==(n[i[e+24>>2]+(a<<3)>>3]>0|0)){continue}break}b=1;break a}a=i[b+48>>2];if(a){continue}break}b=0}$(f,i[22007]<<2);if(i[21886]>=3){i[d>>2]=b;V(i[22423],3001,7594,d)}S=d+16|0;return b}function Oh(a,b,c){var d=0,e=0,f=0,g=0,h=0;d=S-32|0;S=d;i[d+28>>2]=0;a:{if(i[22276]){if(De(0)){break a}}b:{if(i[21886]<2){break b}g=i[22423];h=d;f=i[22431];e=-1;c:{if(!f){break c}e=i[f+76>>2]}i[h+20>>2]=e;i[d+16>>2]=a;n[d+8>>3]=c;n[d>>3]=b;V(g,2008,27647,d);if(i[21886]<4|i[22443]>99){break b}ya()}n[11143]=c;n[11142]=b;a=i[22431];d:{if(i[22007]>=3){Ce(a,1);Be(i[22431],d+28|0);Nh(d+28|0);break d}Be(a,d+28|0)}Ae(i[22431],d+28|0);if(i[22992]?0:i[21897]){break a}i[22932]=i[22932]+1;i[22482]=0;ze(i[22431]);qc(i[d+28>>2],0)}S=d+32|0}function Yg(a,b,c,d,e){var f=0,g=0,h=0,j=0,k=0,l=0;g=S-32|0;S=g;a=a+4|0;k=a+(b<<2)|0;h=a+4|0;a=c+8|0;a:{while(1){b:{if((h|0)==(k|0)){break b}l=i[h>>2];while(1){j=f;f=a+4|0;if(i[a>>2]==(l|0)){a=f;f=j;break b}a=f;if(!j){continue}break}f=0;break a}j=i[h+4>>2];h=h+4|0;if(j){continue}break}a=f?f:a+4|0;c=(a-c|0)+ -8>>2;i[d>>2]=c;f=1;c=(b^c^-1)&1;i[e>>2]=c;if(i[21886]<4){break a}a=i[i[a+ -4>>2]+16>>2];d=i[d>>2];e=i[i[k>>2]+16>>2];i[g+16>>2]=c;i[g>>2]=b;i[g+4>>2]=e;i[g+8>>2]=d;i[g+12>>2]=a;V(i[22423],4054,50126,g)}S=g+32|0;return f}function Ig(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;e=S-16|0;S=e;if(i[21886]>=3){d=i[b+76>>2];i[e>>2]=i[a+76>>2];i[e+4>>2]=d;V(i[22423],3022,68978,e)}c=i[a+60>>2];a:{if(!c){break a}d=i[c+4>>2];h=W(c);if((h|0)<1){break a}while(1){c=i[(i[b+60>>2]+(f<<2)|0)+4>>2];b:{if((c|0)==(a|0)?(b|0)==(d|0):0){break b}g=i[d+80>>2];if(!((g|0)>-1|i[c+80>>2]>-1)){if(se(i[22497],d,c)){break b}g=i[d+80>>2]}if(j[c+81|0]&8?g&2048:0){break b}Zd(a,d,b,c)}f=f+1|0;d=i[(i[a+60>>2]+(f<<2)|0)+4>>2];if((f|0)!=(h|0)){continue}break}}nb(a,0);nb(b,0);S=e+16|0}function pd(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=S-16|0;S=d;b=W(a);if((b|0)<=1){i[d>>2]=b;V(i[22423],6003,2141,d);X(5,0,0)}f=ha(i[22425]);g=i[22007];a:{if((g|0)<1){break a}j=+(b|0);if(a){k=a+4|0;m=i[k>>2];while(1){l=h<<3;e=l+f|0;i[e>>2]=0;i[e+4>>2]=0;c=0;b=k;a=m;if(a){while(1){c=n[i[a+8>>2]+l>>3]+c;n[e>>3]=c;a=i[b+4>>2];b=b+4|0;if(a){continue}break}}n[e>>3]=c/j;h=h+1|0;if((g|0)!=(h|0)){continue}break}break a}c=0/j;a=0;while(1){n[(a<<3)+f>>3]=c;a=a+1|0;if((g|0)!=(a|0)){continue}break}}S=d+16|0;return f}function Gb(a,b,c,d,e,f){var g=0,h=0,j=0,k=0;a:{if(f&64){c=f+ -64|0;b=c&31;if(32<=(c&63)>>>0){c=0;b=e>>>b|0}else{c=e>>>b|0;b=((1<<b)-1&e)<<32-b|d>>>b}d=0;e=0;break a}if(!f){break a}h=e;j=d;k=64-f|0;g=k&31;if(32<=(k&63)>>>0){h=j<<g;k=0}else{h=(1<<g)-1&j>>>32-g|h<<g;k=j<<g}j=b;g=f;b=g&31;if(32<=(g&63)>>>0){g=0;b=c>>>b|0}else{g=c>>>b|0;b=((1<<b)-1&c)<<32-b|j>>>b}b=k|b;c=g|h;g=d;d=f&31;if(32<=(f&63)>>>0){h=0;d=e>>>d|0}else{h=e>>>d|0;d=((1<<d)-1&e)<<32-d|g>>>d}e=h}i[a>>2]=b;i[a+4>>2]=c;i[a+8>>2]=d;i[a+12>>2]=e}function Fd(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0;h=-1;f=d&2147483647;i=f;g=c;a:{if(!c&(f|0)==2147418112?a|b:(f|0)==2147418112&c>>>0>0|f>>>0>2147418112){break a}f=e&2147483647;j=f;if((f|0)==2147418112?0:f>>>0>2147418112){break a}if(!(a|g|(i|j|b))){return 0}g=d&e;if((g|0)>0?1:(g|0)>=0){if(!c&(d|0)==(e|0)?!b&a>>>0<0|b>>>0<0:(d|0)<(e|0)?1:(d|0)<=(e|0)?c>>>0<0:0){break a}return(a|c)!=0|(d^e|b)!=0}if(!c&(d|0)==(e|0)?!b&a>>>0>0|b>>>0>0:(d|0)>(e|0)?1:(d|0)>=(e|0)?c>>>0>0:0){break a}h=(a|c)!=0|(d^e|b)!=0}return h}function ua(a,b,c,d,e,f){var g=0,h=0,j=0,k=0;a:{if(f&64){d=b;e=f+ -64|0;b=e&31;if(32<=(e&63)>>>0){e=d<<b;d=0}else{e=(1<<b)-1&d>>>32-b|c<<b;d=d<<b}b=0;c=0;break a}if(!f){break a}g=d;j=f;d=f&31;if(32<=(f&63)>>>0){h=g<<d;k=0}else{h=(1<<d)-1&g>>>32-d|e<<d;k=g<<d}d=c;g=b;f=64-f|0;e=f&31;if(32<=(f&63)>>>0){f=0;d=d>>>e|0}else{f=d>>>e|0;d=((1<<e)-1&d)<<32-e|g>>>e}d=k|d;e=f|h;f=b;b=j&31;if(32<=(j&63)>>>0){h=f<<b;b=0}else{h=(1<<b)-1&f>>>32-b|c<<b;b=f<<b}c=h}i[a>>2]=b;i[a+4>>2]=c;i[a+8>>2]=d;i[a+12>>2]=e}function Va(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0;f=S-16|0;S=f;d=i[a>>2];a:{if(d){e=(d+(i[d>>2]<<2)|0)+4|0;d=i[e>>2];if(d){break a}}yb(a);d=i[a>>2];e=((i[d>>2]<<2)+d|0)+4|0;d=i[e>>2]}j=d+ -1|0;g=e;b:{if((b|0)>=0){h=d;if((d|0)>(b|0)){break b}}i[f>>2]=b;V(i[22543],6171,69174,f);Ua(i[22543],69245,i[a>>2]);X(5,0,0);h=i[e>>2]}i[g>>2]=h+1;g=d<<2;d=i[a>>2];a=(g+d|0)+4|0;b=(j-b|0)+1|0;if(b){d=(d+(j<<2)|0)+4|0;while(1){i[a>>2]=i[d>>2];a=a+ -4|0;d=d+ -4|0;b=b+ -1|0;if(b){continue}break}}i[a>>2]=c;S=f+16|0}function Lf(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=S-160|0;S=d;fa(d+16|0,0,144);i[d+92>>2]=-1;i[d+60>>2]=b;i[d+24>>2]=-1;i[d+20>>2]=b;i[d+128>>2]=0;i[d+132>>2]=0;e=i[d+24>>2];f=e-i[d+20>>2]|0;i[d+136>>2]=f;i[d+140>>2]=f>>31;i[d+120>>2]=e;Of(d,d+16|0);e=i[d+8>>2];f=i[d+12>>2];h=i[d>>2];j=i[d+4>>2];if(c){k=c;g=b;b=i[d+20>>2]-i[d+24>>2]|0;l=b;c=b+i[d+136>>2]|0;b=i[d+140>>2]+(b>>31)|0;b=c>>>0<l>>>0?b+1|0:b;i[k>>2]=!(b|c)?g:g+c|0}i[a>>2]=h;i[a+4>>2]=j;i[a+8>>2]=e;i[a+12>>2]=f;S=d+160|0}function ld(a,b,c){var d=0,e=0,f=0,g=0;d=S-16|0;S=d;g=i[22482];a:{if(g?0:i[21979]){break a}e=-1.7976931348623157e+308;b:{if(n[11143]<8.988465674311579e+307^1|(i[21897]?!g:0)){break b}e=bb(i[a+24>>2],i[b+24>>2]);f=1;i[22574]=i[22574]+1;if(e>n[11143]^1){break b}i[22632]=i[22632]+1;la(a,b,2,0,e);if(i[21886]<2){break a}b=i[b+76>>2];a=i[a+76>>2];n[d>>3]=e;i[d+8>>2]=a;i[d+12>>2]=b;V(i[22423],2039,45428,d);break a}if(!(i[22007]>3?!c:0)){f=lh(a,b,e,f);break a}f=kh(a,b,e,f)}S=d+16|0;return f}function jf(a,b,c){var d=0,e=0,f=0;hf(a,b,c);if(!i[22534]){gf()}ff();ef();if(!(!i[21874]|!i[21961]?!i[21962]:0)){tf()}if(i[21975]){qf()}if(i[21974]>=0){a=0;zg(i[22502],i[22007],i[22503]);b=i[22007];a:{if(!i[21874]){c=i[22503];break a}c=i[22503];e=b+ -1|0;f=i[c+(e<<2)>>2];if((b|0)>=2){while(1){d=i[(a<<2)+c>>2]+(e<<3)|0;i[d>>2]=0;i[d+4>>2]=0;d=(a<<3)+f|0;i[d>>2]=0;i[d+4>>2]=0;a=a+1|0;if((e|0)!=(a|0)){continue}break}}a=(e<<3)+f|0;i[a>>2]=0;i[a+4>>2]=1072693248}ng(b,c);sf(i[22503])}}function Ob(){var a=0,b=0,c=0,d=0,e=0;b=S-32|0;S=b;c=i[22498];a=i[22496];e=i[22497];a:{b:{c:{if(!(c?!(!a|!e):0)){i[b+16>>2]=a;i[b+20>>2]=e;i[b+24>>2]=c;V(i[22423],6388,34168,b+16|0);X(5,0,0);a=i[22496];if(!a){break c}}d=a;if(i[a+4>>2]){break b}}a=i[22497];if(!(!a|!i[a+4>>2])){a=d;break b}c=i[22498];if(!c){break a}a=d;if(!i[c+4>>2]){break a}}d=i[22423];a=W(a);c=W(i[22497]);i[b+8>>2]=W(i[22498]);i[b+4>>2]=c;i[b>>2]=a;V(d,6389,34331,b);X(5,0,0)}_(89984);_(89992);_(89988);S=b+32|0}function Uf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,h=0;d=S-32|0;S=d;i[d+16>>2]=b;e=i[a+48>>2];i[d+20>>2]=c-((e|0)!=0);f=i[a+44>>2];i[d+28>>2]=e;i[d+24>>2]=f;e=-1;a:{b:{h=P(i[a+60>>2],d+16|0,2,d+12|0)|0;f=0;c:{if(!h){break c}i[23646]=h;f=-1}if(!f){e=i[d+12>>2];if((e|0)>0){break b}}i[a>>2]=i[a>>2]|e&48^16;break a}h=i[d+20>>2];if(e>>>0<=h>>>0){break a}f=i[a+44>>2];i[a+4>>2]=f;i[a+8>>2]=f+(e-h|0);if(i[a+48>>2]){i[a+4>>2]=f+1;g[(b+c|0)+ -1|0]=j[f|0]}e=c}S=d+32|0;return e|0}function hd(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;d=S-16|0;S=d;a:{if(!b){break a}c=i[b+4>>2];if(!c){break a}b=b+8|0;while(1){e=i[c+20>>2];b:{c:{d:{f=i[c+16>>2];if((f|0)!=(a|0)){if((a|0)!=(e|0)){break b}f=i[f+76>>2];g=i[a+76>>2];h=i[22423];e=a;break d}f=i[f+76>>2];g=i[a+76>>2];h=i[22423];if(e){break d}e=-1;break c}e=i[e+76>>2]}i[d+12>>2]=i[c+40>>2];i[d+8>>2]=e;i[d+4>>2]=f;i[d>>2]=g;V(h,6390,30532,d);ca(5,i[c+16>>2],i[c+20>>2])}c=i[b>>2];b=b+4|0;if(c){continue}break}}S=d+16|0}function je(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0;b=S-32|0;S=b;a=i[22009]+W(i[22500])|0;c=ba(a);jb(c,a);a=i[22440];a:{if(!a){break a}while(1){if(!i[a>>2]){break a}f=i[c>>2];d=i[((f<<2)+c|0)+4>>2];g=i[a+8>>2];e=Y(g);b:{if((e|0)<=-1){i[b>>2]=g;i[b+4>>2]=e;V(i[22423],7067,66904,b);break b}d=d?d+ -1|0:f;if((e|0)>=(d|0)){i[b+16>>2]=e;i[b+20>>2]=d;V(i[22423],6160,66964,b+16|0);X(5,0,0);break b}i[((e<<2)+c|0)+4>>2]=a}a=i[a>>2];if(a){continue}break}}S=b+32|0;return c}function Uh(a,b,c){var d=0,e=0,f=0,g=0;f=S-16|0;S=f;i[c>>2]=0;g=hc();a:{if(!(g>n[11157]*4^1)){if(!(i[21886]<4|i[22443]>999)){ya()}kc();if(jh(a,g,f+12|0)){d=i[22431];b:{if(!d){break b}e=i[d+48>>2];if(!e){break b}while(1){gb(d);d=e;e=i[d+48>>2];if(e){continue}break}}d=i[a+8>>2];e=Y(d);cc(a);Ga(0,1);c:{if(i[f+12>>2]){i[22926]=i[22926]+1;i[b+80>>2]=i[b+80>>2]|262144;$a(d,b,0,i[22474]);break c}id(e,b,c)}Ob();d=1;break a}Ob()}qe();$c();Zc()}S=f+16|0;return d}function _c(){var a=0,b=0,c=0;c=S-16|0;S=c;a=ha(20);g[a|0]=0;g[a+1|0]=0;g[a+2|0]=0;g[a+3|0]=0;g[a+4|0]=0;g[a+5|0]=0;g[a+6|0]=0;g[a+7|0]=0;g[a+16|0]=0;g[a+17|0]=0;g[a+18|0]=0;g[a+19|0]=0;g[a+8|0]=0;g[a+9|0]=0;g[a+10|0]=0;g[a+11|0]=0;g[a+12|0]=0;g[a+13|0]=0;g[a+14|0]=0;g[a+15|0]=0;i[22998]=i[22998]+1;b=i[22448];if((b|0)==-1){V(i[22423],7074,50227,0);b=i[22448]}i[22448]=b+1;i[a+12>>2]=b;if(i[21886]>=4){i[c>>2]=b;V(i[22423],4056,50369,c)}S=c+16|0;return a}function Rg(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;c=S-16|0;S=c;b=i[a+64>>2];a:{if(!b){break a}d=i[b+4>>2];if(!d){break a}b=b+4|0;e=-1.7976931348623157e+308;while(1){aa(d,a,c+8|0);i[22606]=i[22606]+1;f=n[c+8>>3];g=f>e;e=g?f:e;h=g?d:h;d=i[b+4>>2];b=b+4|0;if(d){continue}break}if(!h){break a}ja(i[a+64>>2],0);Z(a- -64|0,0);n[a>>3]=e}i[a+80>>2]=i[a+80>>2]&-262145;if(i[21886]>=3){d=i[22423];b=Y(0);i[c+4>>2]=i[a+76>>2];i[c>>2]=b;V(d,3017,62534,c)}S=c+16|0}



function Ke(a,b,c,d,e,f){var g=0,h=0,j=0,k=0,l=0;g=S-96|0;S=g;i[g+80>>2]=i[d+76>>2];V(a,9093,14736,g+80|0);j=e==0;if(!j){e=-e;b=Ia(b,d,e);c=Ia(c,d,e)}e=n[b>>3];h=n[b+8>>3];k=n[c>>3];l=n[c+8>>3];i[g+72>>2]=0;i[g+76>>2]=0;n[g- -64>>3]=l;n[g+56>>3]=k;i[g+48>>2]=0;i[g+52>>2]=0;n[g+40>>3]=h;n[g+32>>3]=e;V(a,9094,14758,g+32|0);if(!j){$(b,i[22425]);$(c,i[22425])}e=n[f>>3];h=n[f+8>>3];n[g+16>>3]=n[f+16>>3];n[g+8>>3]=h;n[g>>3]=e;V(a,9095,14795,g);S=g+96|0}function Cf(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=0;e=S-16|0;S=e;f=(wi(b),si(2));c=f&2147483647;a:{if(c+ -8388608>>>0<=2130706431){d=c;c=c>>>7|0;d=d<<25;c=c+1065353216|0;g=d;c=d>>>0<0?c+1|0:c;break a}if(c>>>0>=2139095040){c=f;d=c>>>7|0;g=c<<25;c=d|2147418112;break a}if(!c){c=0;break a}d=c;c=r(c);ua(e,d,0,0,0,c+81|0);h=i[e>>2];j=i[e+4>>2];g=i[e+8>>2];c=i[e+12>>2]^65536|16265-c<<16}i[a>>2]=h;i[a+4>>2]=j;i[a+8>>2]=g;i[a+12>>2]=f&-2147483648|c;S=e+16|0}function Na(){var a=0,b=0,c=0,d=0;if(!i[22275]){if(i[21886]>=1){V(i[22423],1035,69106,0)}i[22493]=i[22493]+1;a=i[22428];a:{if(!a){break a}while(1){d=a;a=i[a+48>>2];if(!a){break a}b:{if(j[d+81|0]&8){break b}c=i[d+52>>2];if(!c){break b}b=i[c+4>>2];if(!b){break b}a=c+8|0;while(1){c=i[22493];if((c|0)!=i[b+20>>2]){i[b+20>>2]=c;i[b+12>>2]=Ba(i[22007])}Z(b+12|0,d);b=i[a>>2];a=a+4|0;if(b){continue}break}a=i[d+48>>2]}if(a){continue}break}}i[22275]=1}}function cg(a,b){a:{if(a){if(b>>>0<=127){break a}b:{if(!i[i[21837]>>2]){if((b&-128)==57216){break a}break b}if(b>>>0<=2047){g[a+1|0]=b&63|128;g[a|0]=b>>>6|192;return 2}if(!((b&-8192)!=57344?b>>>0>=55296:0)){g[a+2|0]=b&63|128;g[a|0]=b>>>12|224;g[a+1|0]=b>>>6&63|128;return 3}if(b+ -65536>>>0<=1048575){g[a+3|0]=b&63|128;g[a|0]=b>>>18|240;g[a+2|0]=b>>>6&63|128;g[a+1|0]=b>>>12&63|128;return 4}}i[23646]=25;a=-1}else{a=1}return a}g[a|0]=b;return 1}function Je(a,b,c,d,e){var f=0;f=S+ -64|0;S=f;if(d){a:{b:{if(b){i[f+48>>2]=b;V(a,9211,15054,f+48|0);if((e&-3)!=-3){i[f+32>>2]=e;V(a,9212,16645,f+32|0)}if(!c){break a}c=c+ -1|0;e=c;if(!b){break b}while(1){n[f+16>>3]=n[d>>3];V(a,9213,16652,f+16|0);b=c;c=c+ -1|0;d=d+8|0;if(b){continue}break}break a}if(!c){break a}e=c+ -1|0}c=e;while(1){n[f>>3]=n[d>>3];V(a,9214,13090,f);b=c;c=c+ -1|0;d=d+8|0;if(b){continue}break}}V(a,9215,13098,0)}S=f- -64|0}function ii(a,b,c,d){var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=S-48|0;S=e;g=i[b+52>>2];f=i[b+80>>2]&4096;h=i[g+(f?8:4)>>2];f=i[g+(f?4:8)>>2];i[22680]=i[22680]+2;aa(i[f+8>>2],b,e+40|0);f=Ia(i[f+8>>2],b,n[e+40>>3]);aa(i[h+8>>2],b,e+40|0);b=Ia(i[h+8>>2],b,n[e+40>>3]);if(d){V(a,9096,14818,0)}j=n[f>>3];k=n[f+8>>3];l=n[b>>3];n[e+24>>3]=n[b+8>>3];n[e+16>>3]=l;n[e+8>>3]=k;n[e>>3]=j;V(a,9097,(c|0)==13?14820:14858,e);$(b,i[22425]);$(f,i[22425]);S=e+48|0}function dh(a,b){var c=0,d=0,e=0;d=S-16|0;S=d;if(i[21886]>=4){V(i[22423],4030,39577,0)}Ha(b);Ya(b);i[b+80>>2]=i[b+80>>2]&-536880129|536871936;c=i[a+32>>2];if(c){while(1){e=i[c+32>>2];nb(c,b);c=(a|0)==(c|0)?0:e;if(c){continue}break}}a:{if(!i[b+40>>2]){break a}if((W(i[b+52>>2])|0)>(i[22007]+5|0)){break a}$(i[b+40>>2],i[22425]);i[b+40>>2]=0}if(i[21886]>=3){b=i[b+76>>2];i[d>>2]=i[a+76>>2];i[d+4>>2]=b;V(i[22423],3004,39640,d)}S=d+16|0}function Mg(){var a=0,b=0,c=0,d=0,e=0;d=S-16|0;S=d;if(i[21886]>=1){V(i[22423],1033,66838,0)}a=i[22428];a:{if(!a){break a}while(1){if(!i[a+48>>2]){break a}e=a- -64|0;b=i[a+64>>2];b:{if(!b){break b}c=i[b+4>>2];if(!c){break b}b=b+8|0;while(1){i[22445]=i[22445]+ -1;if(i[22006]|i[21888]){aa(c,a,d+8|0);i[22910]=i[22910]+1;$a(c,a,d+8|0,i[22474])}c=i[b>>2];b=b+4|0;if(c){continue}break}}ga(e);a=i[a+48>>2];if(a){continue}break}}S=d+16|0}function Qe(a){var b=0,c=0,d=0,e=0;b=S-16|0;S=b;c=ba(i[22427]);i[b+12>>2]=c;i[b+8>>2]=ba(i[22427]);d=i[a+12>>2];a:{if(!d){break a}a=i[d+4>>2];if(!a){break a}c=d+8|0;e=1;while(1){d=c;c=i[a+80>>2];b:{if(!(c&16384)){break b}if(i[a+72>>2]){if(c&512){if(!Ea(b+8|0,i[a+40>>2])){break b}}Z(b+12|0,a);break b}if(e){Z(b+12|0,a)}e=0}c=d+4|0;a=i[d>>2];if(a){continue}break}c=i[b+12>>2]}cb(c+4|0,W(c),5);_(b+8|0);S=b+16|0;return i[b+12>>2]}function Lb(){var a=0,b=0,c=0,d=0,e=0,f=0;d=S-16|0;S=d;a=i[22542];a:{if(!(!a|!i[a+4>>2])){e=i[a>>2];b=(e<<2)+a|0;f=b;c=i[b+4>>2];b:{if(c){a=((c<<2)+a|0)+ -4|0;c=i[a>>2];i[a>>2]=0;e=i[f+4>>2]+ -1|0;break b}c=i[b>>2];i[b>>2]=0}i[f+4>>2]=e;a=c;b=a;if(a){break a}}V(i[22543],6180,70037,0);X(5,0,0);b=0}a=b;if(i[22544]>=5){b=i[22543];e=W(i[22542]);i[d+8>>2]=W(c);i[d+4>>2]=a;i[d>>2]=e+1;V(b,8124,70107,d)}S=d+16|0;return c}function Hf(a,b){var c=0;c=(b|0)!=0;a:{b:{c:{if(!b|!(a&3)){break c}while(1){if(!j[a|0]){break b}a=a+1|0;b=b+ -1|0;c=(b|0)!=0;if(!b){break c}if(a&3){continue}break}}if(!c){break a}}d:{if(!j[a|0]|b>>>0<4){break d}while(1){c=i[a>>2];if((c^-1)&c+ -16843009&-2139062144){break d}a=a+4|0;b=b+ -4|0;if(b>>>0>3){continue}break}}if(!b){break a}while(1){if(!j[a|0]){return a}a=a+1|0;b=b+ -1|0;if(b){continue}break}}return 0}function Da(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0;b=S-32|0;S=b;c=pd(i[a+52>>2]);i[22602]=i[22602]+1;aa(c,a,b+24|0);h=n[b+24>>3];j=ha(i[22425]);e=i[22007];if(e){f=i[a+24>>2];d=c;g=j;while(1){n[g>>3]=n[d>>3]-h*n[f>>3];g=g+8|0;f=f+8|0;d=d+8|0;e=e+ -1|0;if(e){continue}break}}$(c,i[22425]);if(i[21886]>=4){c=i[22423];d=i[a+76>>2];a=W(i[a+52>>2]);n[b+8>>3]=h;i[b+4>>2]=a;i[b>>2]=d;V(c,4007,2205,b)}S=b+32|0;return j}function cd(a,b,c){var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=S-48|0;S=d;n[c>>3]=Vb(i[a>>2],d+44|0,b);if(i[21886]>=4){e=i[22423];f=Y(i[i[b>>2]+8>>2]);b=i[i[b>>2]+16>>2];g=Y(i[i[d+44>>2]+8>>2]);h=i[i[d+44>>2]+16>>2];j=i[i[a+8>>2]+76>>2];k=i[i[a+4>>2]+76>>2];a=i[a+12>>2];n[d+16>>3]=n[c>>3];i[d+24>>2]=a;i[d+28>>2]=k;i[d+32>>2]=j;i[d>>2]=f;i[d+4>>2]=b;i[d+8>>2]=g;i[d+12>>2]=h;V(e,4069,33033,d)}S=d+48|0;return i[d+44>>2]}function be(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;d=S-16|0;S=d;if(i[21886]>=4){g=i[a+76>>2];e=i[22423];h=d;c=i[b>>2];f=-1;a:{if(!c){break a}f=i[c+76>>2]}i[h+4>>2]=f;i[d>>2]=g;V(e,4061,67030,d)}c=i[b>>2];if(!c){c=i[22429];i[b>>2]=c}e=i[c+44>>2];i[a+44>>2]=e;if(e){i[e+48>>2]=a}i[c+44>>2]=a;i[a+48>>2]=i[b>>2];if(i[22428]==(c|0)){i[22428]=a}if(i[22430]==(c|0)){i[22430]=a}i[b>>2]=a;i[22443]=i[22443]+1;S=d+16|0}function nb(a,b){var c=0,d=0,e=0;c=S-32|0;S=c;if(i[21886]>=4){e=i[a+76>>2];d=i[22423];i[c+20>>2]=b?i[b+76>>2]:-1;i[c+16>>2]=e;V(d,4081,47405,c+16|0)}a:{if(i[22432]){break a}d=i[22431];if(!d){break a}i[c>>2]=i[d+76>>2];V(i[22423],6378,47510,c);ca(5,0,0)}Ha(a);be(a,89728);i[22433]=i[22433]+1;i[a+32>>2]=b;i[a+80>>2]=i[a+80>>2]|2048;b=i[a+56>>2];if(b){i[b+4>>2]=0}a=i[a+60>>2];if(a){i[a+4>>2]=0}S=c+32|0}function Jd(a,b,c){var d=0,e=0;d=S-48|0;S=d;a:{if(b){i[d+32>>2]=b;V(a,9004,6264,d+32|0);e=9006;if(!c){break a}b=i[c+4>>2];if(!b){break a}c=c+4|0;while(1){i[d+16>>2]=Y(b);V(a,9005,6267,d+16|0);b=i[c+4>>2];c=c+4|0;if(b){continue}break}break a}e=9008;if(!c){break a}b=i[c+4>>2];if(!b){break a}c=c+4|0;while(1){i[d>>2]=Y(b);V(a,9007,6272,d);b=i[c+4>>2];c=c+4|0;if(b){continue}break}}V(a,e,6262,0);S=d+48|0}function wb(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;e=S-16|0;S=e;if(a){c=a+4|0;d=i[a>>2];b=i[c+(d<<2)>>2];h=((b?b+ -1|0:d)<<2)+c|0;b=c;f=b;while(1){g=i[b>>2];i[f>>2]=g;b=b+4|0;if(g){f=f+4|0;continue}if(b>>>0<=h>>>0){continue}break}c=f-c|0;b=c>>2;if(!((d|0)>=(b|0)?(c|0)>=0:0)){i[e>>2]=b;V(i[22543],6181,70268,e);Ua(i[22543],69245,a);X(5,0,0);d=i[a>>2]}a=a+4|0;i[(d<<2)+a>>2]=b+1;i[a+(b<<2)>>2]=0}S=e+16|0}function Ua(a,b,c){var d=0,e=0,f=0;d=S-48|0;S=d;a:{if(!c){i[d>>2]=b;V(a,9346,69655,d);break a}e=i[c>>2];f=i[((e<<2)+c|0)+4>>2];i[d+40>>2]=e;i[d+36>>2]=c;i[d+32>>2]=b;b=f?f+ -1|0:e;i[d+44>>2]=b;V(a,9347,69671,d+32|0);e=i[c>>2];e=(b|0)>(e|0)?e+1|0:b;if((e|0)>=1){b=0;while(1){i[d+16>>2]=i[((b<<2)+c|0)+4>>2];V(a,9348,69707,d+16|0);b=b+1|0;if((e|0)!=(b|0)){continue}break}}V(a,9349,69711,0)}S=d+48|0}function pb(a){var b=0,c=0,d=0,e=0;b=S-32|0;S=b;if(i[22534]){V(i[22543],6089,26764,0);X(5,0,0)}c=a;a=i[22535];d=c+a&(a^-1);if(i[22544]>=3){i[b+16>>2]=d;V(i[22543],3078,26836,b+16|0)}e=i[22537];c=i[22532];a=c;a:{while(1){if(a){a=a+ -1|0;if(i[(a<<2)+e>>2]!=(d|0)){continue}break a}break}a=i[22533];if((c|0)<(a|0)){i[22532]=c+1;i[(c<<2)+e>>2]=d;break a}i[b>>2]=a;V(i[22543],7060,26874,b)}S=b+32|0}function $h(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;e=S+ -64|0;S=e;d=Re(b,c,d,e+56|0);g=i[22007];b=Y(i[b+8>>2]);i[e+40>>2]=Y(i[c+8>>2]);i[e+36>>2]=b;i[e+32>>2]=g+2;V(a,9271,17928,e+32|0);if(i[22007]>=2){while(1){n[e+16>>3]=n[d+(f<<3)>>3];V(a,9272,13090,e+16|0);f=f+1|0;if((f|0)<(i[22007]+ -1|0)){continue}break}}n[e>>3]=n[e+56>>3];V(a,9273,13090,e);V(a,9274,13098,0);S=e- -64|0}function ec(a){var b=0,c=0,d=0;c=S-16|0;S=c;if(i[22454]!=(a|0)){b=i[22428];a:{if(!b){break a}while(1){if(!i[b+48>>2]){break a}b:{c:{if((i[b+80>>2]&268435968)==512){break c}d=i[b+40>>2];if(i[22454]==1){if(!d){break b}$(d,i[22426]);break c}if(!d){break b}$(d,i[22425])}i[b+40>>2]=0}b=i[b+48>>2];if(b){continue}break}}i[22454]=a}if(i[21886]>=2){i[c>>2]=a;V(i[22423],2043,61354,c)}S=c+16|0}function pe(a){var b=0,c=0,d=0;b=S-32|0;S=b;a:{if(i[a+80>>2]&65536){break a}i[22674]=i[22674]+1;aa(i[22424],a,b+24|0);c=1;d=n[b+24>>3];if(d>=-n[11144]^1){break a}i[a+80>>2]=i[a+80>>2]|65536;c=0;if(i[21886]){a=i[a+76>>2];i[b+16>>2]=i[22455];i[b>>2]=a;i[b+4>>2]=1;n[b+8>>3]=d;V(i[22423],19,48050,b)}if(i[22443]<=(i[22007]+1|0)){break a}i[22734]=i[22734]+1;sa(48129)}S=b+32|0;return c}function kb(a){var b=0,c=0,d=0;c=S-16|0;S=c;a:{if(!a){V(i[22543],6267,70159,0);X(5,0,0);break a}b=i[22542];b:{if(b){d=(b+(i[b>>2]<<2)|0)+4|0;b=i[d>>2];if(b){break b}}yb(90168);b=i[22542];d=((i[b>>2]<<2)+b|0)+4|0;b=i[d>>2]}i[d>>2]=b+1;b=i[22542]+(b<<2)|0;i[b>>2]=a;i[b+4>>2]=0}if(i[22544]>=5){b=i[22543];d=W(i[22542]);i[c+8>>2]=W(a);i[c+4>>2]=a;i[c>>2]=d;V(b,8125,70215,c)}S=c+16|0}function Wb(a,b,c,d,e){var f=0,g=0,h=0;f=S-32|0;S=f;i[f+16>>2]=b;V(a,9001,6251,f+16|0);a:{if((d|0)<1){break a}if((e|0)>=1){while(1){b=i[(g<<2)+c>>2];h=0;while(1){n[f>>3]=n[b>>3];V(a,9002,6255,f);b=b+8|0;h=h+1|0;if((h|0)!=(e|0)){continue}break}V(a,9003,6262,0);g=g+1|0;if((g|0)!=(d|0)){continue}break a}}while(1){V(a,9003,6262,0);g=g+1|0;if((g|0)!=(d|0)){continue}break}}S=f+32|0}function Eg(a){var b=0,c=0,d=0,e=0,f=0;e=i[22534];b=i[a>>2];c=i[((b<<2)+a|0)+4>>2];f=c?c+ -1|0:b;b=f;b=b?b:1;d=(b<<2)+8|0;c=ha(d);a:{if((b|0)<-1|(d|0)>(e|0)){break a}e=i[i[22537]+(i[i[22538]+(d<<2)>>2]<<2)>>2];if((e|0)<=(d|0)){break a}b=((e-d|0)/4|0)+b|0}i[c>>2]=b;e=b<<2;b=c+4|0;i[e+b>>2]=1;i[c+4>>2]=0;d=f+1|0;i[b+(i[c>>2]<<2)>>2]=d;oa(b,a+4|0,d<<2);return c}function Ea(a,b){var c=0,d=0,e=0;a:{b:{c:{d=i[a>>2];if(d){c=d+4|0;d:{while(1){e=i[c>>2];if(!e){break d}c=c+4|0;if((b|0)!=(e|0)){continue}break}return 0}if(b){break c}return 1}if(b){break b}return 1}d=(d+(i[d>>2]<<2)|0)+4|0;c=i[d>>2];if(c){break a}}yb(a);c=i[a>>2];d=((i[c>>2]<<2)+c|0)+4|0;c=i[d>>2]}i[d>>2]=c+1;a=i[a>>2]+(c<<2)|0;i[a>>2]=b;i[a+4>>2]=0;return 1}function xf(a,b,c){var d=0,e=0,f=0;a:{d=i[c+16>>2];if(!d){if(yf(c)){break a}d=i[c+16>>2]}f=i[c+20>>2];if(d-f>>>0<b>>>0){U[i[c+36>>2]](c,a,b)|0;return}b:{if(g[c+75|0]<0){break b}d=b;while(1){e=d;if(!e){break b}d=e+ -1|0;if(j[d+a|0]!=10){continue}break}if(U[i[c+36>>2]](c,a,e)>>>0<e>>>0){break a}a=a+e|0;b=b-e|0;f=i[c+20>>2]}oa(f,a,b);i[c+20>>2]=i[c+20>>2]+b}}function Dg(a,b,c,d){var e=0,f=0,g=0;e=c+4|0;a=a+4|0;a:{while(1){c=i[a>>2]==(b|0);a=c?a+4|0:a;f=c+f|0;b:{c:{d:{if(d){if(i[e>>2]==(d|0)){break d}break c}c=i[a>>2];d=i[e>>2];if((c|0)==(d|0)){d=0;break b}if(!d){break a}}f=f+1|0;e=e+4|0}c=i[a>>2]}g=e;if(c){e=g+4|0;a=a+4|0;if(i[g>>2]==(c|0)){continue}break a}break}if((f|0)!=2){break a}return!i[g>>2]}return 0}function Qc(a,b){var c=0,d=0,e=0;d=S-16|0;S=d;c=i[a>>2];e=(c<<2)+a|0;a:{if(!((b|0)<0|(c|0)<=(b|0))){c=i[e+4>>2];if(!c|(c+ -1|0)>(b|0)){break a}}i[d>>2]=b;V(i[22543],6175,69497,d);Ua(i[22543],69245,a);X(5,0,0)}b=((b<<2)+a|0)+4|0;b;while(1){c=i[b+4>>2];i[b>>2]=c;b=b+4|0;if(c){continue}break}b=i[e+4>>2];i[e+4>>2]=b+ -1;if(!b){i[e+4>>2]=i[a>>2]}S=d+16|0}function Ka(a,b,c,d,e){var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;j=a;k=e;e=0;g=e;f=c;c=0;e=ni(k,e,f,c);l=T;h=b;m=ni(d,0,b,0);b=T;d=ni(d,n,f,c);c=b+d|0;b=T;b=c>>>0<d>>>0?b+1|0:b;f=b;d=b+e|0;b=l;b=d>>>0<f>>>0?b+1|0:b;f=d;e=b;b=ni(h,o,k,g)+c|0;d=T;g=b;d=b>>>0<c>>>0?d+1|0:d;h=d;d=d+f|0;if(d>>>0<h>>>0){e=e+1|0}i[j+8>>2]=d;i[j+12>>2]=e;i[a>>2]=m;i[a+4>>2]=g}function $c(){var a=0,b=0,c=0,d=0;b=S-16|0;S=b;if(i[21886]>=4){i[b>>2]=i[i[22431]+76>>2];V(i[22423],4074,48528,b)}a=i[22431];a:{if(!a){break a}while(1){c=i[a+48>>2];if(!c){break a}if(j[a+83|0]&2){a=c}else{Cb(a);a=i[a+48>>2]}if(a){continue}break}}b:{if(n[11231]<8.988465674311579e+307^1){break b}d=-n[11433];if(n[11235]>d^1){break b}n[11235]=d}S=b+16|0}function Xb(a,b){a:{if((b|0)>=1024){a=a*8.98846567431158e+307;if((b|0)<2047){b=b+ -1023|0;break a}a=a*8.98846567431158e+307;b=((b|0)<3069?b:3069)+ -2046|0;break a}if((b|0)>-1023){break a}a=a*2.2250738585072014e-308;if((b|0)>-2045){b=b+1022|0;break a}a=a*2.2250738585072014e-308;b=((b|0)>-3066?b:-3066)+2044|0}ti(0,0);ti(1,b+1023<<20);return a*+ui()}function Ya(a){var b=0,c=0,d=0;c=S-16|0;S=c;b=i[22429];a:{if((b|0)!=i[22431]){break a}i[22431]=a;if(i[22432]!=(b|0)){break a}i[22432]=a}if(i[22430]==(b|0)){i[22430]=a}d=i[b+44>>2];i[a+48>>2]=b;i[a+44>>2]=d;d=i[b+44>>2];i[(d?d+48|0:89712)>>2]=a;i[b+44>>2]=a;i[22443]=i[22443]+1;if(i[21886]>=4){i[c>>2]=i[a+76>>2];V(i[22423],4044,47618,c)}S=c+16|0}function ne(){var a=0,b=0,c=0;c=S-16|0;S=c;a=fa(ha(88),0,88);b=i[22447];if((b|0)==i[22434]){i[22435]=a}i[22447]=b+1;i[a+76>>2]=b;b=Ba(i[22007]);i[a>>2]=0;i[a+4>>2]=0;i[a+60>>2]=b;n[a+8>>3]=n[(i[21878]?i[21859]?87440:89152:89152)>>3];i[a+80>>2]=i[a+80>>2]|533504;if(i[21886]>=4){i[c>>2]=i[a+76>>2];V(i[22423],4055,50195,c)}S=c+16|0;return a}function ai(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;e=S-32|0;S=e;f=W(d);b=Y(i[b+8>>2]);i[e+24>>2]=Y(i[c+8>>2]);i[e+20>>2]=b;i[e+16>>2]=f+2;V(a,9275,17938,e+16|0);a:{if(!d){break a}c=i[d+4>>2];if(!c){break a}d=d+4|0;while(1){i[e>>2]=i[c+72>>2];V(a,9276,13106,e);c=i[d+4>>2];d=d+4|0;if(c){continue}break}}V(a,9277,13098,0);S=e+32|0}function zg(a,b,c){var d=0,e=0,f=0,g=0,h=0;if((b|0)>=1){d=i[21682];while(1){i[c>>2]=a;e=0;while(1){f=(d|0)/127773|0;d=o(f,-2836)+o(d-o(f,127773)|0,16807)|0;d=(d|0)>0?d:d+2147483647|0;g=+(d|0);n[a>>3]=(g+g)/2147483647+ -1;a=a+8|0;e=e+1|0;if((e|0)!=(b|0)){continue}break}c=c+4|0;h=h+1|0;if((h|0)!=(b|0)){continue}break}i[21682]=d}i[c>>2]=a}function Ta(a,b){var c=0,d=0,e=0,f=0;e=S-16|0;S=e;c=(i[a>>2]<<2)+a|0;f=i[c+4>>2];d=f+ -1|0;i[c+4>>2]=d;if(!f){d=i[a>>2];i[c+4>>2]=d}if(!((d|0)>(b|0)?(b|0)>=0:0)){i[e>>2]=b;V(i[22543],6174,69426,e);Ua(i[22543],69245,a);X(5,0,0);d=i[c+4>>2]}a=a+4|0;b=a+(b<<2)|0;c=i[b>>2];a=(a+(d<<2)|0)+ -4|0;i[b>>2]=i[a>>2];i[a>>2]=0;S=e+16|0;return c}function Qa(a){a=a|0;var b=0,c=0,d=0;a:{b:{b=a;if(!(b&3)){break b}if(!j[a|0]){return 0}while(1){b=b+1|0;if(!(b&3)){break b}if(j[b|0]){continue}break}break a}while(1){c=b;b=b+4|0;d=i[c>>2];if(!((d^-1)&d+ -16843009&-2139062144)){continue}break}if(!(d&255)){return c-a|0}while(1){d=j[c+1|0];b=c+1|0;c=b;if(d){continue}break}}return b-a|0}function Hg(a,b){var c=0,d=0,e=0,f=0;f=S-16|0;S=f;d=i[a>>2];c=Ba(i[22007]+ -1|0);i[f+12>>2]=c;e=i[d+4>>2];if(e){c=d+4|0;b=b+4|0;while(1){d=i[b>>2];if(d){a:{if((d|0)==(e|0)){Z(f+12|0,e);b=b+4|0;c=c+4|0;break a}if(l[e+16>>2]>l[d+16>>2]){c=c+4|0;break a}b=b+4|0}e=i[c>>2];if(e){continue}}break}c=i[f+12>>2]}_(a);i[a>>2]=c;kb(c);S=f+16|0}function Ec(a,b,c,d){var e=0,f=0,g=0,h=0,j=0;f=S-240|0;S=f;i[f>>2]=a;g=1;a:{if((c|0)<2){break a}e=a;while(1){e=e+ -4|0;j=c+ -2|0;h=e-i[(j<<2)+d>>2]|0;if((U[b|0](a,h)|0)>=0){if((U[b|0](a,e)|0)>-1){break a}}a=(U[b|0](h,e)|0)>-1;e=a?h:e;i[(g<<2)+f>>2]=e;g=g+1|0;c=a?c+ -1|0:j;if((c|0)<2){break a}a=i[f>>2];continue}}Md(f,g);S=f+240|0}function bi(a,b,c){var d=0,e=0,f=0;d=S-32|0;S=d;i[22484]=i[22484]+1;V(a,9227,16860,0);a:{if(!b){break a}e=i[b+4>>2];if(!e){break a}b=b+4|0;while(1){f=i[e+16>>2];n[d+24>>3]=c;n[d+16>>3]=c;i[d+8>>2]=f;n[d>>3]=c;V(a,9228,17563,d);tc(a,i[e+8>>2]);V(a,9229,17607,0);e=i[b+4>>2];b=b+4|0;if(e){continue}break}}V(a,9230,17610,0);S=d+32|0}function Kb(a){var b=0,c=0;c=S-16|0;S=c;a:{if(a){zb(a);V(i[22423],9424,80109,0);Tb(i[22423],5,a,0,1);V(i[22423],9413,80135,0);b=a;while(1){if(!i[b+48>>2]){break a}zc(i[22423],5,b,1);b=i[b+48>>2];if(b){continue}break}break a}V(i[22423],9424,80109,0);Tb(i[22423],5,0,0,1)}V(i[22423],9412,80189,0);Sb(i[22423],5,a,0,1);S=c+16|0}function If(a,b){var c=0,d=0,e=0;c=S-144|0;S=c;i[c+44>>2]=a;i[c+4>>2]=a;i[c>>2]=0;i[c+76>>2]=-1;i[c+8>>2]=(a|0)<0?-1:a+2147483647|0;i[c+112>>2]=0;i[c+116>>2]=0;d=i[c+8>>2];e=d-i[c+4>>2]|0;i[c+120>>2]=e;i[c+124>>2]=e>>31;i[c+104>>2]=d;d=Jf(c);e=T;if(b){i[b>>2]=((i[c+4>>2]+i[c+120>>2]|0)-i[c+8>>2]|0)+a}S=c+144|0;T=e;return d}function Ud(a){var b=0,c=0;b=S-16|0;S=b;a:{if(!(n[11231]<8.988465674311579e+307^1?!(i[21915]|i[21897]):0)){V(a,9368,80210,0);break a}V(a,9369,80364,0);c=i[21874];if(!(i[21976]|!c|n[11145]>1e4^1)){V(a,9371,81129,0);c=i[21874]}if(!(i[21863]|!c)){V(a,9372,81273,0)}n[b>>3]=n[11144];V(a,9373,81392,b);V(a,9374,82035,0)}S=b+16|0}function V(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=S-32|0;S=e;if(!a){Kc(6028,85421,0);i[22456]=6028;X(5,0,0)}a:{if((b|0)<=3999){i[e>>2]=b;Ic(a,85510,e);f=b+ -6e3|0;break a}f=b+ -6e3|0;if(f>>>0>1999){break a}i[e+16>>2]=b;Ic(a,85519,e+16|0)}i[e+28>>2]=d;Od(a,c,d);if(f>>>0<=999){i[22456]=b}if(i[21877]){Ib(a)}S=e+32|0}function Md(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;d=4;e=S-256|0;S=e;a:{if((b|0)<2){break a}h=(b<<2)+a|0;i[h>>2]=e;c=e;while(1){f=d>>>0<256?d:256;oa(c,i[a>>2],f);c=0;while(1){g=(c<<2)+a|0;c=c+1|0;oa(i[g>>2],i[(c<<2)+a>>2],f);i[g>>2]=i[g>>2]+f;if((b|0)!=(c|0)){continue}break}d=d-f|0;if(!d){break a}c=i[h>>2];continue}}S=e+256|0}function _(a){var b=0,c=0,d=0,e=0,f=0,g=0;b=S-32|0;S=b;a:{if(!i[a>>2]){break a}c=Lb();if((c|0)!=i[a>>2]){kb(c);e=i[22543];d=i[a>>2];f=W(d);g=W(i[22542]);i[b+16>>2]=W(c);i[b+12>>2]=c;i[b+8>>2]=g+1;i[b+4>>2]=f;i[b>>2]=d;V(e,6179,69921,b);X(5,0,0);c=i[a>>2]}if(!c){break a}$(c,(i[c>>2]<<2)+8|0);i[a>>2]=0}S=b+32|0}function Tg(a,b){var c=0,d=0,e=0,f=0;c=i[b+56>>2];if(!c){return 0}d=i[c+4>>2];if(!d){return 0}e=i[a>>2];e=i[(i[a+4>>2]==(b|0)?e+8|0:e+4|0)>>2];c=c+8|0;while(1){a:{if((a|0)==(d|0)){break a}f=i[d>>2];if((e|0)!=i[(i[d+4>>2]==(b|0)?f+4|0:f+8|0)>>2]){break a}return d}d=i[c>>2];c=c+4|0;if(d){continue}break}return 0}function Wc(a,b){var c=0,d=0,e=0;e=S-16|0;S=e;c=Ba(i[22007]+ -1|0);i[e+12>>2]=c;d=i[a+4>>2];if(d){a=a+4|0;c=b+4|0;while(1){b=i[c>>2];if(b){a:{if((b|0)==(d|0)){Z(e+12|0,d);c=c+4|0;a=a+4|0;break a}if(l[d+16>>2]>l[b+16>>2]){a=a+4|0;break a}c=c+4|0}d=i[a>>2];if(d){continue}}break}c=i[e+12>>2]}S=e+16|0;return c}function wa(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;d=S-16|0;S=d;g=a;h=a;a:{if(!b){b=0;break a}c=b>>31;e=c+b^c;c=r(e);ua(d,e,0,0,0,c+81|0);c=(i[d+12>>2]^65536)+(16414-c<<16)|0;e=0+i[d+8>>2]|0;if(e>>>0<f>>>0){c=c+1|0}f=b&-2147483648|c;c=i[d+4>>2];b=i[d>>2]}i[h>>2]=b;i[g+4>>2]=c;i[a+8>>2]=e;i[a+12>>2]=f;S=d+16|0}function Rc(a,b,c){var d=0,e=0,f=0,g=0;d=S-32|0;S=d;f=i[a>>2];g=i[((f<<2)+a|0)+4>>2];e=Y(b);a:{if((e|0)<=-1){i[d>>2]=b;i[d+4>>2]=e;V(i[22423],7067,66904,d);break a}b=g?g+ -1|0:f;if((e|0)>=(b|0)){i[d+16>>2]=e;i[d+20>>2]=b;V(i[22423],6160,66964,d+16|0);X(5,0,0);break a}i[((e<<2)+a|0)+4>>2]=c}S=d+32|0}function Oe(a,b,c){var d=0;d=S-32|0;S=d;b=bc(b);i[d+28>>2]=b;if((c|0)==17){i[d+16>>2]=W(b);V(a,9111,14929,d+16|0)}a:{if(!b){break a}c=i[b+4>>2];if(!c){break a}b=b+4|0;while(1){i[d>>2]=Y(i[c+8>>2]);V(a,9112,14929,d);c=i[b+4>>2];b=b+4|0;if(c){continue}break}}V(a,9113,13098,0);_(d+28|0);S=d+32|0}function Oa(a){var b=0,c=0,d=0;c=S-16|0;S=c;b=i[22441];if((b|0)==i[22442]){i[22442]=a}g[a+24|0]=j[a+24|0]|16;d=i[b+4>>2];i[a>>2]=b;i[a+4>>2]=d;d=i[b+4>>2];a:{if(d){i[d>>2]=a;break a}i[22440]=a}i[b+4>>2]=a;i[22444]=i[22444]+1;if(i[21886]>=4){i[c>>2]=i[a+16>>2];V(i[22423],4045,47660,c)}S=c+16|0}function ub(a,b,c){var d=0,e=0,f=0;a:{if((b|0)==1&a>>>0<0|b>>>0<1){d=a;break a}while(1){d=oi(a,b,10);e=T;f=e;e=ni(d,e,10,0);c=c+ -1|0;g[c|0]=a-e|48;e=b>>>0>9;a=d;b=f;if(e){continue}break}}if(d){while(1){c=c+ -1|0;a=(d>>>0)/10|0;g[c|0]=d-o(a,10)|48;b=d>>>0>9;d=a;if(b){continue}break}}return c}function le(a,b){var c=0,d=0,e=0,f=0;e=a+52|0;c=i[a+52>>2];a:{if(!c){break a}a=i[c+4>>2];c=W(c);if((c|0)<1){break a}f=i[b+16>>2];while(1){a=i[a+16>>2];if(a>>>0<f>>>0){break a}if((a|0)==(f|0)){return 0}d=d+1|0;a=i[(i[e>>2]+(d<<2)|0)+4>>2];if((c|0)!=(d|0)){continue}break}d=c}Va(e,d,b);return 1}function Ha(a){var b=0,c=0,d=0;c=S-16|0;S=c;d=i[a+44>>2];b=i[a+48>>2];if(i[22431]==(a|0)){i[22431]=b}if(i[22430]==(a|0)){i[22430]=b}if(i[22432]==(a|0)){i[22432]=b}i[(d?d+48|0:89712)>>2]=b;i[b+44>>2]=d;i[22443]=i[22443]+ -1;if(i[21886]>=4){i[c>>2]=i[a+76>>2];V(i[22423],4057,50401,c)}S=c+16|0}function se(a,b,c){var d=0,e=0;a:{if(!a){break a}d=i[a+4>>2];if(!d){break a}a=a+8|0;while(1){e=a;b:{if(i[d+40>>2]!=12){break b}a=i[d+16>>2];if(!((a|0)!=(b|0)|i[d+20>>2]!=(c|0))){return 1}if((a|0)!=(c|0)|i[d+20>>2]!=(b|0)){break b}return 1}a=e+4|0;d=i[e>>2];if(d){continue}break}}return 0}function ja(a,b){var c=0,d=0,e=0,f=0;a:{if(!a){break a}c=a+4|0;while(1){f=c;d=i[c>>2];if((d|0)!=(b|0)){c=f+4|0;if(d){continue}}break}if(!d){break a}e=(i[a>>2]<<2)+a|0;d=i[e+4>>2];c=d+ -1|0;i[e+4>>2]=c;if(!d){c=i[a>>2];i[e+4>>2]=c}a=(c<<2)+a|0;i[f>>2]=i[a>>2];i[a>>2]=0;e=b}return e}function Cd(a,b,c,d){var e=0,f=0,g=0;f=i[24201]+1|0;i[24201]=f;i[a>>2]=f;a:{if(d){while(1){g=(e<<3)+c|0;if(!i[g>>2]){break a}e=e+1|0;if((e|0)!=(d|0)){continue}break}}e=a;a=d<<1;b=Cd(e,b,Bc(c,d<<4|8),a);A(a|0);return b}i[g>>2]=f;a=(e<<3)+c|0;i[a+4>>2]=b;i[a+8>>2]=0;A(d|0);return c}function Ma(a,b){var c=0,d=0,e=0;a:{if(!a){break a}c=a+4|0;while(1){d=c;e=i[d>>2];if((e|0)!=(b|0)){c=d+4|0;if(e){continue}}break}if(!e){break a}while(1){b=i[d+4>>2];i[d>>2]=b;d=d+4|0;if(b){continue}break}c=(i[a>>2]<<2)+a|0;b=i[c+4>>2];i[c+4>>2]=b+ -1;if(!b){i[c+4>>2]=i[a>>2]}}}function bb(a,b){var c=0,d=0,e=0,f=0;d=S-16|0;S=d;e=i[22007];if(e){while(1){c=c+n[a>>3]*n[b>>3];a=a+8|0;b=b+8|0;e=e+ -1|0;if(e){continue}break}}if(i[21963]){f=+(db()|0);c=c+n[10982]*((f+f)/2147483646+ -1)}if(i[21886]>=4){n[d>>3]=c;V(i[22423],4006,2121,d)}S=d+16|0;return c}function tb(a,b){var c=0,d=0,e=0,f=0;i[a>>2]=0;i[a+4>>2]=0;e=a;f=a;if(b){a=b;c=r(a);d=(c|32)+113&63;b=d&31;if(32<=(d&63)>>>0){d=a<<b;b=0}else{d=(1<<b)-1&a>>>32-b;b=a<<b}a=16414-c<<16;c=0;b=b+c|0;a=a+(d^65536)|0;a=b>>>0<c>>>0?a+1|0:a}else{a=0;b=0}i[f+8>>2]=b;i[e+12>>2]=a}function qf(){var a=0,b=0,c=0,d=0,e=0;a=S-16|0;S=a;a:{if(i[22011]){b=i[22010];break a}c=i[22010];d=i[22009];e=o(d,i[22007])<<3;b=za(e);if(!b){i[a>>2]=d;V(i[22423],6004,2938,a);X(4,0,0)}c=oa(b,c,e);i[22011]=1;i[22010]=c}pf(b,i[22009],i[22007],i[22280],i[22279]);S=a+16|0}function Jc(a){var b=0,c=0;a:{if(l[a+20>>2]<=l[a+28>>2]){break a}U[i[a+36>>2]](a,0,0)|0;if(i[a+20>>2]){break a}return-1}b=i[a+4>>2];c=i[a+8>>2];if(b>>>0<c>>>0){b=b-c|0;U[i[a+40>>2]](a,b,b>>31,1)|0}i[a+28>>2]=0;i[a+16>>2]=0;i[a+20>>2]=0;i[a+4>>2]=0;i[a+8>>2]=0;return 0}function Rd(a,b){var c=0,d=0,e=0;vi(+a);c=si(1)|0;d=si(0)|0;e=c;c=c>>>20&2047;if((c|0)!=2047){if(!c){c=b;if(a==0){b=0}else{a=Rd(a*0x10000000000000000,b);b=i[b>>2]+ -64|0}i[c>>2]=b;return a}i[b>>2]=c+ -1022;ti(0,d|0);ti(1,e&-2146435073|1071644672);a=+ui()}return a}function Rh(a){var b=0,c=0,d=0;b=S-16|0;S=b;i[22533]=18;i[22544]=a;i[22531]=131072;i[22530]=65536;i[22535]=7;c=Bd();i[22537]=c;d=Bd();i[22536]=d;if(!(d?c:0)){V(i[22543],6086,26517,0);X(4,0,0);a=i[22544]}if((a|0)>=1){i[b>>2]=8;V(i[22543],8059,26564,b)}S=b+16|0}function Wf(a,b){var c=0,d=0;c=S-160|0;S=c;oa(c+8|0,86136,144);i[c+52>>2]=a;i[c+28>>2]=a;d=-2-a|0;d=2147483647>d>>>0?d:2147483647;i[c+56>>2]=d;a=a+d|0;i[c+36>>2]=a;i[c+24>>2]=a;Hc(c+8|0,11867,b,25,0);if(d){a=i[c+28>>2];g[a-((a|0)==i[c+24>>2])|0]=0}S=c+160|0}function bf(){if(i[21999]){ec(1);Na()}a:{if(i[22460]|!i[21993]){break a}Kg();if(i[21869]|!i[21997]){break a}Wa(i[22428])}ee(i[22428]);if(i[22005]){yg(i[22428])}if(!(n[10946]<8.988465674311579e+307^1?!(i[21890]|i[21887]):0)){$e(i[22428])}if(i[21958]){Mc()}}function sf(a){var b=0,c=0,d=0,e=0,f=0;b=S-16|0;S=b;a:{if(i[22011]){c=i[22010];break a}d=i[22010];e=i[22009];f=o(e,i[22007])<<3;c=za(f);if(!c){i[b>>2]=e;V(i[22423],6004,2938,b);X(4,0,0)}d=oa(c,d,f);i[22011]=1;i[22010]=d}rf(c,i[22009],i[22007],a);S=b+16|0}function Sc(a){var b=0,c=0,d=0;b=S-16|0;S=b;d=ba(W(a));i[b+12>>2]=d;a:{if(!a){break a}c=i[a+4>>2];if(!c){break a}a=a+4|0;while(1){Z(b+12|0,i[c+8>>2]);c=i[a+4>>2];a=a+4|0;if(c){continue}break}d=i[b+12>>2]}a=Gg(i[22007]+ -1|0,d);_(b+12|0);S=b+16|0;return a}function Y(a){var b=0,c=0;if(!a){return-3}if(i[22424]==(a|0)){return-2}a:{b=i[22010];if(b>>>0>a>>>0){break a}c=i[22007];if(b+(o(c,i[22009])<<3)>>>0<=a>>>0){break a}return(a-b>>3)/(c|0)|0}a=eb(i[22500],a);if((a|0)!=-1){a=a+i[22009]|0}else{a=-1}return a}function Rf(a){var b=0,c=0;b=j[a+74|0];g[a+74|0]=b+ -1|b;if(l[a+20>>2]>l[a+28>>2]){U[i[a+36>>2]](a,0,0)|0}i[a+28>>2]=0;i[a+16>>2]=0;i[a+20>>2]=0;b=i[a>>2];if(b&4){i[a>>2]=b|32;return-1}c=i[a+44>>2]+i[a+48>>2]|0;i[a+8>>2]=c;i[a+4>>2]=c;return b<<27>>31}function Xf(a,b,c){var d=0,e=0;d=S-160|0;S=d;oa(d+8|0,86136,144);i[d+52>>2]=a;i[d+28>>2]=a;e=-2-a|0;e=2147483647>e>>>0?e:2147483647;i[d+56>>2]=e;a=a+e|0;i[d+36>>2]=a;i[d+24>>2]=a;Nd(d+8|0,b,c);if(e){a=i[d+28>>2];g[a-((a|0)==i[d+24>>2])|0]=0}S=d+160|0}function Ba(a){var b=0,c=0,d=0;c=i[22534];a=a?a:1;b=(a<<2)+8|0;d=ha(b);a:{if((a|0)<-1|(b|0)>(c|0)){break a}c=i[i[22537]+(i[i[22538]+(b<<2)>>2]<<2)>>2];if((c|0)<=(b|0)){break a}a=((c-b|0)/4|0)+a|0}i[d>>2]=a;i[(d+4|0)+(a<<2)>>2]=1;i[d+4>>2]=0;return d}function ih(){var a=0,b=0,c=0,d=0,e=0,f=0;a=S-48|0;S=a;c=n[10930];e=n[11157];f=n[11144];b=e+f;d=n[11233];b=d<b?b:d;b=b<c?c:b;n[11147]=b;if(i[21886]>=3){n[a+16>>3]=e;n[a+24>>3]=c;n[a+32>>3]=f;n[a>>3]=b;n[a+8>>3]=d;V(i[22423],3056,3109,a)}S=a+48|0}function Dh(a){var b=0,c=0,d=0,e=0;b=S-16|0;S=b;if(i[21886]>=3){i[b>>2]=i[a+16>>2];V(i[22423],3008,43504,b)}c=ch(a);i[b+12>>2]=c;if(c){d=ed(a,0);i[b+8>>2]=d;e=ue(a,c,d);if(e){i[22942]=i[22942]+1;ad(a,e,d,0,0)}_(b+8|0);_(b+12|0)}S=b+16|0;return e}function Bc(a,b){var c=0,d=0;if(!a){return za(b)}if(b>>>0>=4294967232){i[23646]=48;return 0}c=Af(a+ -8|0,b>>>0<11?16:b+11&-8);if(c){return c+8|0}c=za(b);if(!c){return 0}d=i[a+ -4>>2];d=(d&3?-4:-8)+(d&-8)|0;oa(c,a,d>>>0<b>>>0?d:b);ta(a);return c}function kc(){var a=0,b=0,c=0,d=0;a=S-16|0;S=a;b=i[22498];c=i[22496];d=i[22497];if(!(b?0:!(c|d))){i[a>>2]=c;i[a+4>>2]=d;i[a+8>>2]=b;V(i[22423],6386,35549,a);X(5,0,0)}i[22497]=ba(i[22427]);i[22498]=ba(i[22427]);i[22496]=ba(i[22427]);S=a+16|0}function Vh(a,b){var c=0;$c();if(!(Vc(i[22431],b)|i[22457])){b=i[22431];a:{if(!b){break a}c=i[b+48>>2];if(!c){break a}while(1){gb(b);b=c;c=i[b+48>>2];if(c){continue}break}}cc(a);Ga(0,1);i[22878]=i[22878]+1;return 0}qe();hc();Zc();return 1}function Xa(a){var b=0,c=0,d=0;b=S-16|0;S=b;d=i[a+4>>2];c=i[a>>2];if(i[21886]>=4){i[b>>2]=i[a+16>>2];V(i[22423],4058,50479,b)}if(i[22442]==(a|0)){i[22442]=c}a:{if(d){i[d>>2]=c;break a}i[22440]=c}i[c+4>>2]=d;i[22444]=i[22444]+ -1;S=b+16|0}function $d(a){var b=0,c=0,d=0;c=S-16|0;S=c;d=(a<<1)+3|0;while(1){b=d;if((b|a)<=-1){i[c>>2]=a;i[c+4>>2]=b;V(i[22543],6236,66591,c);X(4,0,0)}d=b+2|0;if(!((b|0)%3|0)|!((b|0)%5|0)){continue}break}a=Ba(b);i[22499]=a;jb(a,b);S=c+16|0;return b}function ke(a,b,c,d){var e=0,f=0,g=0;f=((d<<2)+b|0)+4|0;e=i[f>>2];g=!e;a:{if(!e|(a|0)==(e|0)){break a}while(1){d=d+1|0;d=(d|0)<(c|0)?d:0;f=((d<<2)+b|0)+4|0;e=i[f>>2];g=!e;if(!e){break a}if((a|0)!=(e|0)){continue}break}}if(g){i[f>>2]=a}}function jb(a,b){var c=0,d=0;c=S-16|0;S=c;a:{if((b|0)>0){d=i[a>>2];if((d|0)>=(b|0)){break a}}i[c>>2]=0;i[c+4>>2]=b;V(i[22543],6182,70339,c);Ua(i[22543],69245,a);X(5,0,0);d=i[a>>2]}a=a+4|0;i[a+(d<<2)>>2]=b+1;fa(a,0,(b<<2)+4|0);S=c+16|0}function Yd(a,b){var c=0,d=0;c=i[a>>2];a:{if(c){d=(c+(i[c>>2]<<2)|0)+4|0;c=i[d>>2];if(c){break a}}yb(a);c=i[a>>2];d=((i[c>>2]<<2)+c|0)+4|0;c=i[d>>2]}i[d>>2]=c+1;a=i[a>>2]+(c<<2)|0;i[a+4>>2]=0;c=a;a=a+ -4|0;i[c>>2]=i[a>>2];i[a>>2]=b}function Xd(a,b,c,d){var e=0,f=0;c=c+4|0;d=c+(d<<2)|0;a=a+4|0;f=a+(b<<2)|0;a:{while(1){b=(c|0)==(d|0)?c+4|0:c;a=(a|0)==(f|0)?a+4|0:a;e=i[a>>2];if(!e){break a}c=b+4|0;a=a+4|0;if(i[b>>2]==(e|0)){continue}break}return 0}return!i[b>>2]}function Gd(a){var b=0,c=0,d=0;c=S-16|0;S=c;aa(i[22424],a,c+8|0);S=c+16|0;if(!(n[c+8>>3]>0^1)){b=i[22007];if(b){c=i[a+24>>2];while(1){b=b+ -1|0;d=(b<<3)+c|0;n[d>>3]=-n[d>>3];if(b){continue}break}}n[a+16>>3]=-n[a+16>>3];b=1}return b}function Aa(a,b,c){var d=0,e=0,f=0,g=0;d=S-16|0;S=d;g=a+4|0;while(1){e=g;f=i[e>>2];if((f|0)!=(b|0)){g=e+4|0;if(f){continue}}break}a:{if(f){i[e>>2]=c;break a}i[d>>2]=b;V(i[22543],6177,69713,d);Ua(i[22543],69245,a);X(5,0,0)}S=d+16|0}function Sh(a,b){i[a>>2]=i[22547]-i[22549];i[b>>2]=i[22553];b=i[22539];if(b){while(1){a=i[b>>2];ta(b);b=a;if(b){continue}break}}i[22539]=0;if(i[22534]){ta(i[22538]);ta(i[22536]);ta(i[22537])}a=i[22543];fa(90120,0,116);i[22543]=a}function He(a,b,c){var d=0,e=0;d=S-16|0;S=d;e=Ja(c,0,1);i[d>>2]=b;i[d+12>>2]=e;V(a,9244,15054,d);a:{if(!e){break a}c=i[e+4>>2];if(!c){break a}b=e+4|0;while(1){xc(a,c);c=i[b+4>>2];b=b+4|0;if(c){continue}break}}_(d+12|0);S=d+16|0}function eb(a,b){var c=0,d=0;if(!a){return-1}c=i[a>>2];d=i[((c<<2)+a|0)+4>>2];d=d?d+ -1|0:c;if(!((d|0)>(c|0)|(d|0)<1)){a=a+4|0;c=0;while(1){if(i[a>>2]==(b|0)){return c}a=a+4|0;c=c+1|0;if((d|0)!=(c|0)){continue}break}}return-1}function ki(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0;e=c>>>16|0;f=a>>>16|0;j=o(e,f);g=c&65535;h=a&65535;i=o(g,h);f=(i>>>16|0)+o(f,g)|0;e=(f&65535)+o(e,h)|0;a=(o(b,c)+j|0)+o(a,d)+(f>>>16)+(e>>>16)|0;b=i&65535|e<<16;T=a;return b}function Pc(a,b){var c=0,d=0,e=0;a:{if(a){c=i[a>>2];d=i[((c<<2)+a|0)+4>>2];c=d?d+ -1|0:c}if(b){d=i[b>>2];e=i[((d<<2)+b|0)+4>>2];e=e?e+ -1|0:d}if((e|0)==(c|0)){if(c){break a}a=1}else{a=0}return a}return!Gf(a+4|0,b+4|0,c<<2)}function fb(a,b){var c=0,d=0;c=S-16|0;S=c;a:{if((b|0)>=0){d=i[a>>2];if((d|0)>=(b|0)){break a}}i[c>>2]=b;V(i[22543],6181,70268,c);Ua(i[22543],69245,a);X(5,0,0);d=i[a>>2]}a=a+4|0;i[a+(d<<2)>>2]=b+1;i[a+(b<<2)>>2]=0;S=c+16|0}function Ag(){var a=0,b=0;a:{a=i[22542];if(!a){break a}b=i[a+4>>2];if(b){a=a+4|0;while(1){$(b,(i[b>>2]<<2)+8|0);b=i[a+4>>2];a=a+4|0;if(b){continue}break}a=i[22542];if(!a){break a}}$(a,(i[a>>2]<<2)+8|0);i[22542]=0}}function xa(a){var b=0,c=0,d=0,e=0;if(!(!a|!i[a+4>>2])){d=i[a>>2];c=(d<<2)+a|0;e=c;b=i[c+4>>2];a:{if(b){a=((b<<2)+a|0)+ -4|0;b=i[a>>2];i[a>>2]=0;d=i[e+4>>2]+ -1|0;break a}b=i[c>>2];i[c>>2]=0}i[e+4>>2]=d}return b}function Ue(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=-1;a=i[a>>2];a:{if(!(j[a+82|0]&16)){break a}c=1;b=i[b>>2];if(!(j[b+82|0]&16)){break a}d=n[a+32>>3];e=n[b+32>>3];if(d>e){break a}c=0;if(d==e){break a}c=-1}return c|0}function Z(a,b){var c=0,d=0;if(b){c=i[a>>2];a:{if(c){d=(c+(i[c>>2]<<2)|0)+4|0;c=i[d>>2];if(c){break a}}yb(a);c=i[a>>2];d=((i[c>>2]<<2)+c|0)+4|0;c=i[d>>2]}i[d>>2]=c+1;a=i[a>>2]+(c<<2)|0;i[a>>2]=b;i[a+4>>2]=0}}function Ib(a){var b=0;if(a){if(i[a+76>>2]<=-1){return Jc(a)}return Jc(a)}if(i[21792]){b=Ib(i[21792])}a=i[23649];if(a){while(1){if(l[a+20>>2]>l[a+28>>2]){b=Jc(a)|b}a=i[a+56>>2];if(a){continue}break}}return b}function Ih(a,b){a=a|0;b=b|0;var c=0,d=0;a=i[a>>2];d=i[a+40>>2];b=i[b>>2];c=i[b+40>>2];a:{if((d|0)!=(c|0)){c=d>>>0<c>>>0;break a}c=n[a>>3]>n[b>>3];if((d|0)==2){break a}c=n[a+8>>3]<n[b+8>>3]}return(c?1:-1)|0}function ra(a,b,c,d,e){var f=0;f=S-256|0;S=f;if(!(e&73728|(c|0)<=(d|0))){c=c-d|0;d=c>>>0<256;fa(f,b&255,d?c:256);if(!d){while(1){pa(a,f,256);c=c+ -256|0;if(c>>>0>255){continue}break}}pa(a,f,c)}S=f+256|0}function cc(a){var b=0,c=0;b=S-16|0;S=b;c=j[a+24|0];if(!(i[22476]|(!(c&4)|c&32))){i[b>>2]=i[a+16>>2];V(i[22423],6395,61434,b);X(5,0,0)}if(i[22439]==(a|0)){i[22439]=0}Xa(a);ga(a+12|0);$(a,28);S=b+16|0}function Tf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=S-16|0;S=e;a=L(i[a+60>>2],b|0,c|0,d&255,e+8|0)|0;b=0;a:{if(!a){break a}i[23646]=a;b=-1}a=b;S=e+16|0;T=a?-1:i[e+12>>2];return(a?-1:i[e+8>>2])|0}function Mb(a,b,c,d){var e=0,f=0;a:{e=-c;if(!(a<c^1|e<a^1)){if(!((a<0?-a:a)<(b<0?-b:b)^1)){break a}i[d>>2]=1;return 0}f=b/a;if(!(f<e^1?!(f>c):0)){break a}i[d>>2]=1;return 0}i[d>>2]=0;return a/b}function yf(a){var b=0;b=j[a+74|0];g[a+74|0]=b+ -1|b;b=i[a>>2];if(b&8){i[a>>2]=b|32;return-1}i[a+4>>2]=0;i[a+8>>2]=0;b=i[a+44>>2];i[a+28>>2]=b;i[a+20>>2]=b;i[a+16>>2]=b+i[a+48>>2];return 0}function Ra(a,b,c){var d=0,e=0;a:{if(!c){break a}while(1){e=i[(d<<3)+b>>2];if(!e){break a}if((a|0)==(e|0)){return i[((d<<3)+b|0)+4>>2]}d=d+1|0;if((d|0)!=(c|0)){continue}break}}return 0}function Ia(a,b,c){var d=0,e=0,f=0;f=ha(i[22425]);d=i[22007];if(d){b=i[b+24>>2];e=f;while(1){n[e>>3]=n[a>>3]-n[b>>3]*c;e=e+8|0;b=b+8|0;a=a+8|0;d=d+ -1|0;if(d){continue}break}}return f}function hb(a){var b=0,c=0;b=i[21851];c=a+3&-4;a=b+c|0;a:{if(a>>>0<=b>>>0?(c|0)>=1:0){break a}if(a>>>0>yi()<<16>>>0){if(!(N(a|0)|0)){break a}}i[21851]=a;return b}i[23646]=48;return-1}function Cc(a,b,c,d,e,f,g,h,j){var k=0;k=S-16|0;S=k;va(k,b,c,d,e,f,g,h,j^-2147483648);b=i[k+4>>2];i[a>>2]=i[k>>2];i[a+4>>2]=b;b=i[k+12>>2];i[a+8>>2]=i[k+8>>2];i[a+12>>2]=b;S=k+16|0}function sa(a){var b=0;b=S-16|0;S=b;if(!(!i[22452]|n[11231]<8.988465674311579e+307^1|(i[21897]|i[21915]))){if(i[21886]){i[b>>2]=a;V(i[22423],26,20591,b)}D(89488,3);x()}S=b+16|0}function Zf(a,b){var c=0,d=0,e=0,f=0;if(b){d=-1.7976931348623157e+308;while(1){c=n[a>>3];c=c<0?-c:c;e=c>d;d=e?c:d;f=e?a:f;a=a+8|0;b=b+ -1|0;if(b){continue}break}}return f}function Qd(a){var b=0,c=0,d=0;if(g[i[a>>2]]+ -48>>>0<10){while(1){b=i[a>>2];d=g[b|0];i[a>>2]=b+1;c=(o(c,10)+d|0)+ -48|0;if(g[b+1|0]+ -48>>>0<10){continue}break}}return c}function Gf(a,b,c){var d=0,e=0,f=0;a:{if(!c){break a}while(1){d=j[a|0];e=j[b|0];if((d|0)==(e|0)){b=b+1|0;a=a+1|0;c=c+ -1|0;if(c){continue}break a}break}f=d-e|0}return f}function Bg(a,b){var c=0,d=0,e=0;c=a<<1;i[b>>2]=c;d=c;c=(i[22534]+ -8|0)/4|0;a:{if((d|0)>(c|0)){if((a+4|0)>(c|0)|(((a|0)/3|0)+a|0)>(c|0)){break a}i[b>>2]=c}e=1}return e}function Ch(a,b,c){n[c>>3]=n[a+8>>3]*n[b+16>>3]-n[a+16>>3]*n[b+8>>3];n[c+8>>3]=-(n[a>>3]*n[b+16>>3]-n[a+16>>3]*n[b>>3]);n[c+16>>3]=n[a>>3]*n[b+8>>3]-n[a+8>>3]*n[b>>3]}function Hd(a,b){var c=0,d=0;c=Qa(88572)+88572|0;a:{if(!b){break a}while(1){d=j[a|0];if(!d){break a}g[c|0]=d;c=c+1|0;a=a+1|0;b=b+ -1|0;if(b){continue}break}}g[c|0]=0}function Fb(a,b,c){var d=0,e=0,f=0;d=c>>31;d=d+c^d;if(d){while(1){f=e;e=n[a>>3]-n[b>>3];e=f+e*e;a=a+8|0;b=b+8|0;d=d+ -1|0;if(d){continue}break}}return(c|0)>0?w(e):e}function Jh(a,b){a=a|0;b=b|0;var c=0,d=0;a=i[a>>2];c=i[a+40>>2];b=i[b>>2];d=i[b+40>>2];a:{if((c|0)!=(d|0)){a=c>>>0<d>>>0;break a}a=n[a>>3]>n[b>>3]}return(a?1:-1)|0}function cf(){var a=0,b=0;a=S-16|0;S=a;b=W(i[22542]);bf();af();if((W(i[22542])|0)!=(b|0)){b=i[22423];i[a>>2]=W(i[22542]);V(b,6206,11943,a);X(5,0,0)}S=a+16|0}function vb(a){var b=0,c=0,d=0;a:{if(!a){break a}c=(i[a>>2]<<2)+a|0;b=i[c+4>>2];if(!b){return i[c>>2]}if((b|0)<2){break a}d=i[((b<<2)+a|0)+ -4>>2]}return d}function Wd(a,b){var c=0,d=0;c=i[21682];d=(c|0)/127773|0;c=o(d,-2836)+o(c-o(d,127773)|0,16807)|0;c=(c|0)>0?c:c+2147483647|0;i[21682]=c;return+(c|0)*a+b}function Ab(a){var b=0,c=0;if(a){b=a;while(1){if(!(j[b+81|0]&8)){return b}b=i[b+32>>2];if(c>>>0>l[22447]){Uc(a)}c=c+1|0;if(b){continue}break}}return 0}function Te(a,b){a=a|0;b=b|0;var c=0;c=i[b>>2];b=i[a>>2];a=i[b+72>>2];if(!a){a=0-i[b+76>>2]|0}b=a;a=i[c+72>>2];if(!a){a=0-i[c+76>>2]|0}return b-a|0}function da(a,b){var c=0,d=0;a:{if(!a){break a}a=a+4|0;while(1){c=i[a>>2];if(!c){break a}a=a+4|0;if((b|0)!=(c|0)){continue}break}d=1}return d}function Yf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=i[a+20>>2];d=i[a+16>>2]-e|0;d=d>>>0>c>>>0?c:d;oa(e,b,d);i[a+20>>2]=d+i[a+20>>2];return c|0}function zf(a,b,c,d){var e=0,f=0;f=d&65535;d=d>>>16&32767;a:{if((d|0)!=32767){e=4;if(d){break a}return a|c|(b|f)?3:2}e=!(a|c|(b|f))}return e}function db(){var a=0,b=0;a=i[21682];b=(a|0)/127773|0;a=o(b,-2836)+o(a-o(b,127773)|0,16807)|0;a=(a|0)>0?a:a+2147483647|0;i[21682]=a;return a}function Qf(a){var b=0,c=0;b=S-16|0;S=b;c=-1;a:{if(Rf(a)){break a}if((U[i[a+32>>2]](a,b+15|0,1)|0)!=1){break a}c=j[b+15|0]}S=b+16|0;return c}function bg(a,b,c,d){if(a|b){while(1){c=c+ -1|0;g[c|0]=j[(a&15)+86080|0]|d;a=(b&15)<<28|a>>>4;b=b>>>4|0;if(a|b){continue}break}}return c}function _b(a,b){var c=0,d=0;a:{if(b>>>0<=31){d=i[a+4>>2];c=a;break a}b=b+ -32|0;c=a+4|0}c=i[c>>2];i[a+4>>2]=d>>>b;i[a>>2]=d<<32-b|c>>>b}function Yb(a,b){var c=0,d=0;a:{if(b>>>0<=31){d=i[a>>2];c=a+4|0;break a}b=b+ -32|0;c=a}c=i[c>>2];i[a>>2]=d<<b;i[a+4>>2]=c<<b|d>>>32-b}function gc(a,b,c,d){var e=0;e=n[d>>3];if(a){while(1){e=e+n[b>>3]*n[c>>3];b=b+8|0;c=c+8|0;a=a+ -1|0;if(a){continue}break}}return e}function Oc(a,b){var c=0,d=0;d=Kf(a,b);c=i[b>>2];a:{if(c>>>0<=a>>>0){break a}a=c+ -1|0;if(j[a|0]!=32){break a}i[b>>2]=a}return d}function Nc(a,b){var c=0,d=0;d=If(a,b);c=i[b>>2];a:{if(c>>>0<=a>>>0){break a}a=c+ -1|0;if(j[a|0]!=32){break a}i[b>>2]=a}return d}function gf(){var a=0;Rh(i[21886]);pb(28);if(i[21899]){pb(20);pb(48)}pb(88);a=i[22007]<<2;pb(a+4|0);pb(i[22425]);pb(a+8|0);Qh()}function _f(a,b){a=a|0;b=b|0;var c=0;c=b;b=i[b>>2]+15&-16;i[c>>2]=b+16;n[a>>3]=Dd(i[b>>2],i[b+4>>2],i[b+8>>2],i[b+12>>2])}function Kc(a,b,c){var d=0;d=S-16|0;S=d;i[d+12>>2]=c;c=i[21396];if(a){i[d>>2]=a;Ic(c,85413,d)}Od(c,b,i[d+12>>2]);S=d+16|0}function ag(a,b,c){if(a|b){while(1){c=c+ -1|0;g[c|0]=a&7|48;a=(b&7)<<29|a>>>3;b=b>>>3|0;if(a|b){continue}break}}return c}function Fa(a){var b=0,c=0;a:{b=i[a>>2];if(!b){break a}c=(i[b>>2]<<2)+8|0;if((c|0)<=i[22534]){break a}$(b,c);i[a>>2]=0}}function lf(a,b,c){var d=0;d=S-16|0;S=d;fa(90120,0,116);i[22543]=c?c:i[21396];Ee();mg();kf(a,b,c);g[88056]=0;S=d+16|0}function Ld(a,b,c,d,e,f,g,h,j){i[a>>2]=b;i[a+4>>2]=c;i[a+8>>2]=d;i[a+12>>2]=e&65535|(j>>>16&32768|e>>>16&32767)<<16}function Kf(a,b){var c=0,d=0;c=S-16|0;S=c;Lf(c,a,b);d=Dd(i[c>>2],i[c+4>>2],i[c+8>>2],i[c+12>>2]);S=c+16|0;return d}function mf(){i[22476]=1;if(i[21886]>=1){V(i[22423],1006,8139,0)}yd(1);nf();fa(87416,0,2704);i[22476]=1}function Se(a,b){a=a|0;b=b|0;return(i[i[a>>2]+80>>2]&511)-(i[i[b>>2]+80>>2]&511)|0}function sb(a){var b=0,c=0;b=S-16|0;S=b;c=Vb(a,b+12|0,b+8|0);S=b+16|0;return c}function ca(a,b,c){i[22439]=0;i[22437]=0;i[22435]=0;ma(19042,b,c,0,0);X(a,0,0)}function yh(a,b){a=a|0;b=b|0;return(l[i[a>>2]+20>>2]>l[i[b>>2]+20>>2]?1:-1)|0}function Bd(){var a=0;a=za(72);if(!(!a|!(j[a+ -4|0]&3))){fa(a,0,72)}return a}function jg(a,b){var c=0;c=S-16|0;S=c;n[c>>3]=-b;V(a,7089,82500,c);S=c+16|0}function rh(a,b){a=a|0;b=b|0;a=za(16384);i[21664]=4096;i[21853]=a;return 0}function pi(a){var b=0;b=a&31;a=0-a&31;return(-1>>>b&-2)<<b|(-1<<a&-2)>>>a}function ga(a){var b=0;b=i[a>>2];if(b){$(b,(i[b>>2]<<2)+8|0);i[a>>2]=0}}function Td(a,b,c){var d=0;d=S-16|0;S=d;i[d+12>>2]=c;Xf(a,b,c);S=d+16|0}function Ic(a,b,c){var d=0;d=S-16|0;S=d;i[d+12>>2]=c;Nd(a,b,c);S=d+16|0}function fg(a,b){var c=0;c=S-16|0;S=c;i[c+12>>2]=b;Wf(a,b);S=c+16|0}function Bf(a,b){a=a|0;b=b|0;if(!i[24202]){i[24203]=b;i[24202]=a}}function dc(a){if(i[22437]==(a|0)){i[22437]=0}ga(a);$(a,20)}function dg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;T=0;return 0}function mi(a){if(a){return 31-r(a+ -1^a)|0}return 32}function Ph(a,b){a=a|0;b=b|0;return i[a>>2]-i[b>>2]|0}function rb(a,b){yc(a,b);if(i[b+56>>2]){td(a,b)}}function Uc(a){V(i[22423],6149,62588,0);X(5,a,0)}function Sd(a,b){if(!a){return 0}return cg(a,b)}function pa(a,b,c){if(!(j[a|0]&32)){xf(b,c,a)}}function uf(a){a=a|0;a=S-a&-16;S=a;return a|0}function ni(a,b,c,d){a=ki(a,b,c,d);return a}function Vf(a){a=a|0;return Q(i[a+60>>2])|0}function Hb(a){return O(a|0,96744)|0}function oi(a,b,c){return li(a,b,c)}function Od(a,b,c){Hc(a,b,c,25,26)}function qi(a,b){T=a;return b}



function Nd(a,b,c){Hc(a,b,c,0,0)}function eg(a){a=a|0;return 0}function Vd(){fa(94235,0,249)}function hg(){return 94584}function Ff(){return 96788}function Ef(){return 96796}function Df(){return 96800}function Jb(a){R(a|0);x()}function wf(){return S|0}function vf(a){a=a|0;S=a}function Le(){}
// EMSCRIPTEN_END_FUNCS
var U=ri([null,Ue,Se,ai,$h,Te,V,X,yd,Qa,ia,gg,ae,Ge,Yc,Ph,Jh,Ih,yh,Vf,Sf,Tf,Uf,eg,dg,$f,_f,Yf]);function yi(){return f.byteLength/65536|0}return{"t":U,"u":Le,"v":ji,"w":rh,"x":za,"y":hg,"z":Ff,"A":Ef,"B":Df,"C":wf,"D":vf,"E":uf,"F":Bf}}return xi({"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity,"Math":Math},zi,Ai.buffer)}


// EMSCRIPTEN_END_ASM




)(asmLibraryArg,wasmMemory)},instantiate:function(binary,info){return{then:function(ok){var module=new WebAssembly.Module(binary);ok({"instance":new WebAssembly.Instance(module)})}}},RuntimeError:Error};wasmBinary=[];if(typeof WebAssembly!=="object"){abort("no native wasm support detected")}var wasmMemory;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function allocateUTF8OnStack(str){var size=lengthBytesUTF8(str)+1;var ret=stackAlloc(size);stringToUTF8Array(str,HEAP8,ret,size);return ret}var WASM_PAGE_SIZE=65536;var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var INITIAL_INITIAL_MEMORY=Module["INITIAL_MEMORY"]||16777216;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"]}else{wasmMemory=new WebAssembly.Memory({"initial":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,"maximum":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__)}function preMain(){FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what+="";err(what);ABORT=true;EXITSTATUS=1;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);throw e}var memoryInitializer="qhull.js.mem";function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var fileURIPrefix="file://";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix)}var wasmBinaryFile="qhull.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return Promise.resolve().then(getBinary)}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;wasmTable=Module["asm"]["t"];removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiatedSource(output){receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return{}}var tempDouble;var tempI64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function demangle(func){return func}function demangleAll(text){var regex=/\b_Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}function jsStackTrace(){var error=new Error;if(!error.stack){try{throw new Error}catch(e){error=e}if(!error.stack){return"(no stack trace available)"}}return error.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function ___localtime_r(a0,a1){return _localtime_r(a0,a1)}function _clock(){if(_clock.start===undefined)_clock.start=Date.now();return(Date.now()-_clock.start)*(1e6/1e3)|0}function _longjmp(env,value){_setThrew(env,value||1);throw"longjmp"}function _emscripten_longjmp(a0,a1){return _longjmp(a0,a1)}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function abortOnCannotGrowMemory(requestedSize){abort("OOM")}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;abortOnCannotGrowMemory(requestedSize)}function _exit(status){exit(status)}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function getRandomDevice(){if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require("crypto");return function(){return crypto_module["randomBytes"](1)[0]}}catch(e){}}return function(){abort("randomDevice")}}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().indexOf("EOF")!=-1)bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};function mmapAlloc(size){var alignedSize=alignMemory(size,16384);var ptr=_malloc(alignedSize);while(size<alignedSize)HEAP8[ptr+size++]=0;return ptr}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name]},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name]},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){assert(address===0);if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}}}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,address,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");var stdout=FS.open("/dev/stdout","w");var stderr=FS.open("/dev/stderr","w")},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message="FS error"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)setErrNo(29);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}path=PATH.join2(dir,path)}return path},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}__ATINIT__.push({func:function(){___wasm_call_ctors()}});var asmLibraryArg={"p":___localtime_r,"d":_clock,"e":_emscripten_longjmp,"n":_emscripten_memcpy_big,"o":_emscripten_resize_heap,"s":_exit,"r":_fd_close,"q":_fd_read,"m":_fd_seek,"i":_fd_write,"c":getTempRet0,"g":invoke_v,"k":invoke_vi,"j":invoke_vii,"h":invoke_viii,"l":invoke_viiii,"a":wasmMemory,"b":setTempRet0,"f":_time};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["u"]).apply(null,arguments)};var _run_qhull=Module["_run_qhull"]=function(){return(_run_qhull=Module["_run_qhull"]=Module["asm"]["v"]).apply(null,arguments)};var _main=Module["_main"]=function(){return(_main=Module["_main"]=Module["asm"]["w"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["x"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["y"]).apply(null,arguments)};var __get_tzname=Module["__get_tzname"]=function(){return(__get_tzname=Module["__get_tzname"]=Module["asm"]["z"]).apply(null,arguments)};var __get_daylight=Module["__get_daylight"]=function(){return(__get_daylight=Module["__get_daylight"]=Module["asm"]["A"]).apply(null,arguments)};var __get_timezone=Module["__get_timezone"]=function(){return(__get_timezone=Module["__get_timezone"]=Module["asm"]["B"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["C"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["D"]).apply(null,arguments)};var stackAlloc=Module["stackAlloc"]=function(){return(stackAlloc=Module["stackAlloc"]=Module["asm"]["E"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return(_setThrew=Module["_setThrew"]=Module["asm"]["F"]).apply(null,arguments)};function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_v(index){var sp=stackSave();try{wasmTable.get(index)()}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}if(memoryInitializer){if(!isDataURI(memoryInitializer)){memoryInitializer=locateFile(memoryInitializer)}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=readBinary(memoryInitializer);HEAPU8.set(data,1024)}else{addRunDependency("memory initializer");var applyMemoryInitializer=function(data){if(data.byteLength)data=new Uint8Array(data);HEAPU8.set(data,1024);if(Module["memoryInitializerRequest"])delete Module["memoryInitializerRequest"].response;removeRunDependency("memory initializer")};var doBrowserLoad=function(){readAsync(memoryInitializer,applyMemoryInitializer,function(){var e=new Error("could not load memory initializer "+memoryInitializer);throw e})};if(Module["memoryInitializerRequest"]){var useRequest=function(){var request=Module["memoryInitializerRequest"];var response=request.response;if(request.status!==200&&request.status!==0){console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: "+request.status+", retrying "+memoryInitializer);doBrowserLoad();return}applyMemoryInitializer(response)};if(Module["memoryInitializerRequest"].response){setTimeout(useRequest,0)}else{Module["memoryInitializerRequest"].addEventListener("load",useRequest)}}else{doBrowserLoad()}}}var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}var calledMain=false;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function callMain(args){var entryFunction=Module["_main"];args=args||[];var argc=args.length+1;var argv=stackAlloc((argc+1)*4);HEAP32[argv>>2]=allocateUTF8OnStack(thisProgram);for(var i=1;i<argc;i++){HEAP32[(argv>>2)+i]=allocateUTF8OnStack(args[i-1])}HEAP32[(argv>>2)+argc]=0;try{var ret=entryFunction(argc,argv);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="unwind"){noExitRuntime=true;return}else{var toLog=e;if(e&&typeof e==="object"&&e.stack){toLog=[e,e.stack]}err("exception thrown: "+toLog);quit_(1,e)}}finally{calledMain=true}}function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(shouldRunNow)callMain(args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&noExitRuntime&&status===0){return}if(noExitRuntime){}else{EXITSTATUS=status;exitRuntime();if(Module["onExit"])Module["onExit"](status);ABORT=true}quit_(status,new ExitStatus(status))}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"])shouldRunNow=false;noExitRuntime=true;run();

}).call(this)}).call(this,require('_process'),require("buffer").Buffer,"/")
},{"_process":152,"buffer":65,"crypto":73,"fs":1,"path":145}]},{},[190]);
